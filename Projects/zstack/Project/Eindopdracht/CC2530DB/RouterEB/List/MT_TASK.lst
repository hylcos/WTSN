###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                13/Mar/2016  22:07:56
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\mt\MT_TASK.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\mt\MT_TASK.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\MT_TASK.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\MT_TASK.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2013-11-12 09:10:23 -0800 (Tue, 12 Nov 2013) $
      4            Revision:       $Revision: 36036 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          
     51          #if !defined( NONWK )
     52          #include "MT_ZDO.h"
     53          #include "MT_AF.h"
     54          #endif  /* NONWK */
     55          
     56          #include "hal_uart.h"
     57          #include "OSAL_Memory.h"
     58          
     59          /***************************************************************************************************
     60           * LOCAL FUNCTIONS
     61           ***************************************************************************************************/
     62          
     63          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     64          #ifdef MT_SRNG
     65          void MT_ProcessSrngEvent(void); 
     66          #endif
     67          
     68          /***************************************************************************************************
     69           * GLOBALS
     70           ***************************************************************************************************/
     71          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          uint8 MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     73          
     74          /***************************************************************************************************
     75           * @fn      MT_TaskInit
     76           *
     77           * @brief  MonitorTest Task Initialization.  This function is put into the
     78           *         task table.
     79           *
     80           * @param   task_id - task ID of the MT Task
     81           *
     82           * @return  void
     83           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     84          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     85          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     86            MT_TaskID = task_id;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#MT_TaskID
   \   00000B   F0           MOVX    @DPTR,A
     87          
     88            /* Initialize the Serial port */
     89            MT_UartInit();
   \   00000C                ; Setup parameters for call to function MT_UartInit
   \   00000C   12....       LCALL   `??MT_UartInit::?relay`; Banked call to: MT_UartInit
     90          
     91            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     92            MT_UartRegisterTaskID(task_id);
   \   00000F                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
     93          
     94            osal_set_event(task_id, MT_SECONDARY_INIT_EVENT);
   \   000014                ; Setup parameters for call to function osal_set_event
   \   000014   7A10         MOV     R2,#0x10
   \   000016   7B00         MOV     R3,#0x0
   \   000018   EE           MOV     A,R6
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001D   E9           MOV     A,R1
     95          }
   \   00001E   7F01         MOV     R7,#0x1
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
     96          
     97          /**************************************************************************************************
     98           * @fn      MT_ProcessEvent
     99           *
    100           * @brief   MonitorTest Task Event Processor.  This task is put into the task table.
    101           *
    102           * @param   task_id - task ID of the MT Task
    103           * @param   events - event(s) for the MT Task
    104           *
    105           * @return  Bit mask of the unprocessed MT Task events.
    106           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    107          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
    108          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    109            /* Could be multiple events, so switch won't work */
    110            if ( events & SYS_EVENT_MSG )
   \   00000B   EE           MOV     A,R6
   \   00000C   5400         ANL     A,#0x0
   \   00000E   F8           MOV     R0,A
   \   00000F   EF           MOV     A,R7
   \   000010   5480         ANL     A,#0x80
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   602E         JZ      ??MT_ProcessEvent_0
    111            {
    112              uint8 *msg_ptr = osal_msg_receive(task_id);
   \   000017                ; Setup parameters for call to function osal_msg_receive
   \   000017   A9..         MOV     R1,?V2
   \   000019   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00001C   8A..         MOV     ?V4,R2
   \   00001E   8B..         MOV     ?V5,R3
   \   000020   85....       MOV     ?V0,?V4
   \   000023   85....       MOV     ?V1,?V5
    113          
    114              if (msg_ptr != NULL)
   \   000026   E5..         MOV     A,?V0
   \   000028   45..         ORL     A,?V1
   \   00002A   600F         JZ      ??MT_ProcessEvent_1
    115              {
    116                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
   \   00002C                ; Setup parameters for call to function MT_ProcessIncomingCommand
   \   00002C   AA..         MOV     R2,?V0
   \   00002E   AB..         MOV     R3,?V1
   \   000030   12....       LCALL   `??MT_ProcessIncomingCommand::?relay`; Banked call to: MT_ProcessIncomingCommand
    117          
    118                osal_msg_deallocate(msg_ptr);
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV     R2,?V0
   \   000035   AB..         MOV     R3,?V1
   \   000037   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00003A   E9           MOV     A,R1
    119              }
    120          
    121              /* Return unproccessed events */
    122              return (events ^ SYS_EVENT_MSG);
   \                     ??MT_ProcessEvent_1:
   \   00003B   EE           MOV     A,R6
   \   00003C   6400         XRL     A,#0x0
   \   00003E   FA           MOV     R2,A
   \   00003F   EF           MOV     A,R7
   \   000040   6480         XRL     A,#0x80
   \   000042   FB           MOV     R3,A
   \   000043   8039         SJMP    ??MT_ProcessEvent_2
    123            }
    124          
    125            if ( events & MT_SECONDARY_INIT_EVENT )
   \                     ??MT_ProcessEvent_0:
   \   000045   EE           MOV     A,R6
   \   000046   5410         ANL     A,#0x10
   \   000048   600F         JZ      ??MT_ProcessEvent_3
    126            {
    127              MT_Init(task_id);
   \   00004A                ; Setup parameters for call to function MT_Init
   \   00004A   A9..         MOV     R1,?V2
   \   00004C   12....       LCALL   `??MT_Init::?relay`  ; Banked call to: MT_Init
    128              /* Return unproccessed events */
    129              return (events ^ MT_SECONDARY_INIT_EVENT);
   \   00004F   EE           MOV     A,R6
   \   000050   6410         XRL     A,#0x10
   \   000052   FA           MOV     R2,A
   \   000053   EF           MOV     A,R7
   \   000054   6400         XRL     A,#0x0
   \   000056   FB           MOV     R3,A
   \   000057   8025         SJMP    ??MT_ProcessEvent_2
    130            }
    131          
    132            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \                     ??MT_ProcessEvent_3:
   \   000059   EE           MOV     A,R6
   \   00005A   5402         ANL     A,#0x2
   \   00005C   600A         JZ      ??MT_ProcessEvent_4
    133            {
    134              /* Return unproccessed events */
    135              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   00005E   EE           MOV     A,R6
   \   00005F   6402         XRL     A,#0x2
   \   000061   FA           MOV     R2,A
   \   000062   EF           MOV     A,R7
   \   000063   6400         XRL     A,#0x0
   \   000065   FB           MOV     R3,A
   \   000066   8016         SJMP    ??MT_ProcessEvent_2
    136            }
    137          
    138          #if !defined( NONWK )
    139            if ( events & MT_AF_EXEC_EVT )
   \                     ??MT_ProcessEvent_4:
   \   000068   EE           MOV     A,R6
   \   000069   5408         ANL     A,#0x8
   \   00006B   600D         JZ      ??MT_ProcessEvent_5
    140            {
    141              MT_AfExec();
   \   00006D                ; Setup parameters for call to function MT_AfExec
   \   00006D   12....       LCALL   `??MT_AfExec::?relay`; Banked call to: MT_AfExec
    142              return (events ^ MT_AF_EXEC_EVT);
   \   000070   EE           MOV     A,R6
   \   000071   6408         XRL     A,#0x8
   \   000073   FA           MOV     R2,A
   \   000074   EF           MOV     A,R7
   \   000075   6400         XRL     A,#0x0
   \   000077   FB           MOV     R3,A
   \   000078   8004         SJMP    ??MT_ProcessEvent_2
    143            }
    144          #endif  /* NONWK */
    145          
    146            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    147          #if defined MT_SYS_FUNC
    148            if ( events & (MT_SYS_OSAL_EVENT_MASK))
    149            {
    150              if (events & MT_SYS_OSAL_EVENT_0)
    151              {
    152                MT_SysOsalTimerExpired(0x00);
    153                events ^= MT_SYS_OSAL_EVENT_0;
    154              }
    155          
    156              if (events & MT_SYS_OSAL_EVENT_1)
    157              {
    158                MT_SysOsalTimerExpired(0x01);
    159                events ^= MT_SYS_OSAL_EVENT_1;
    160              }
    161          
    162              if (events & MT_SYS_OSAL_EVENT_2)
    163              {
    164                MT_SysOsalTimerExpired(0x02);
    165                events ^= MT_SYS_OSAL_EVENT_2;
    166              }
    167          
    168              if (events & MT_SYS_OSAL_EVENT_3)
    169              {
    170                MT_SysOsalTimerExpired(0x03);
    171                events ^= MT_SYS_OSAL_EVENT_3;
    172              }
    173          
    174              return events;
    175            }
    176          #endif
    177          
    178          #ifdef MT_SRNG
    179            if(events & MT_SRNG_EVENT)
    180            {
    181              MT_ProcessSrngEvent(); 
    182              return (events ^ MT_SRNG_EVENT);
    183            }
    184          #endif  
    185          
    186            /* Discard or make more handlers */
    187            return 0;
   \                     ??MT_ProcessEvent_5:
   \   00007A   7A00         MOV     R2,#0x0
   \   00007C   7B00         MOV     R3,#0x0
   \                     ??MT_ProcessEvent_2:
   \   00007E   7F06         MOV     R7,#0x6
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
    188          
    189          } /* MT_ProcessEvent() */
    190          
    191          #ifdef MT_SRNG
    192          /***************************************************************************************************
    193           * @fn      MT_ProcessSrngEvent
    194           *
    195           * @brief
    196           *
    197           *   Process SRNG Event Messages.
    198           *
    199           * @param   None
    200           *
    201           * @return  None
    202           ***************************************************************************************************/
    203          void MT_ProcessSrngEvent(void)
    204          {
    205            uint8 * msg;
    206            osal_event_hdr_t * msg_ptr;
    207            
    208            msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( MT_RPC_FRAME_HDR_SZ + 4 + sizeof(osal_event_hdr_t) );
    209            msg = msg_ptr + sizeof(osal_event_hdr_t) + 4;
    210            
    211            if ( msg_ptr )
    212            {
    213              msg_ptr->event = CMD_SERIAL_MSG;
    214              msg_ptr->status = 4;
    215              if(msg)
    216              {
    217                msg[MT_RPC_POS_LEN] = 4 + MT_RPC_FRAME_HDR_SZ;
    218                msg[MT_RPC_POS_CMD0] = MT_RPC_SYS_UTIL;
    219                msg[MT_RPC_POS_CMD1] = MT_UTIL_SRNG_GENERATE;
    220              } 
    221              osal_memcpy(msg_ptr + sizeof(osal_event_hdr_t), &msg, 4); 
    222            }
    223            osal_msg_send( MT_TaskID, (uint8 *)msg_ptr );
    224          }
    225          #endif
    226          
    227          /***************************************************************************************************
    228           * @fn      MT_ProcessIncomingCommand
    229           *
    230           * @brief
    231           *
    232           *   Process Event Messages.
    233           *
    234           * @param   *msg - pointer to event message
    235           *
    236           * @return
    237           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
   \                     MT_ProcessIncomingCommand:
    239          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    240            uint8 len, *msg_ptr = msg->msg;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V1,A
    241          
    242            /* Use the first byte of the message as the command ID */
    243            switch ( msg->hdr.event )
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   14           DEC     A
   \   00001C   6011         JZ      ??MT_ProcessIncomingCommand_0
   \   00001E   14           DEC     A
   \   00001F   6017         JZ      ??MT_ProcessIncomingCommand_1
   \   000021   24FE         ADD     A,#-0x2
   \   000023   601C         JZ      ??MT_ProcessIncomingCommand_2
   \   000025   24FE         ADD     A,#-0x2
   \   000027   6057         JZ      ??MT_ProcessIncomingCommand_3
   \   000029   24E2         ADD     A,#-0x1e
   \   00002B   605C         JZ      ??MT_ProcessIncomingCommand_4
   \   00002D   8071         SJMP    ??MT_ProcessIncomingCommand_5
    244            {
    245              case CMD_SERIAL_MSG:
    246                MT_ProcessIncoming(msg_ptr);
   \                     ??MT_ProcessIncomingCommand_0:
   \   00002F                ; Setup parameters for call to function MT_ProcessIncoming
   \   00002F   AA..         MOV     R2,?V0
   \   000031   AB..         MOV     R3,?V1
   \   000033   12....       LCALL   `??MT_ProcessIncoming::?relay`; Banked call to: MT_ProcessIncoming
    247                break;
   \   000036   8068         SJMP    ??MT_ProcessIncomingCommand_5
    248          
    249              case CMD_DEBUG_MSG:
    250                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
   \                     ??MT_ProcessIncomingCommand_1:
   \   000038                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   000038   EE           MOV     A,R6
   \   000039   FA           MOV     R2,A
   \   00003A   EF           MOV     A,R7
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   `??MT_ProcessDebugMsg::?relay`; Banked call to: MT_ProcessDebugMsg
    251                break;
   \   00003F   805F         SJMP    ??MT_ProcessIncomingCommand_5
    252          
    253              case CB_FUNC:
    254                /*
    255                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    256                  because we have copied data already in the allocated message
    257                */
    258          
    259                /* msg_ptr is the beginning of the intended SPI message */
    260                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
   \                     ??MT_ProcessIncomingCommand_2:
   \   000041   85..82       MOV     DPL,?V0
   \   000044   85..83       MOV     DPH,?V1
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   2405         ADD     A,#0x5
   \   00004D   F5..         MOV     ?V2,A
    261          
    262                /*
    263                  FCS goes to the last byte in the message and is calculated over all
    264                  the bytes except FCS and SOP
    265                */
    266                msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (uint8)(len-2));
   \   00004F                ; Setup parameters for call to function MT_UartCalcFCS
   \   00004F   74FE         MOV     A,#-0x2
   \   000051   25..         ADD     A,?V2
   \   000053   F9           MOV     R1,A
   \   000054   85..82       MOV     DPL,?V0
   \   000057   85..83       MOV     DPH,?V1
   \   00005A   A3           INC     DPTR
   \   00005B   AA82         MOV     R2,DPL
   \   00005D   AB83         MOV     R3,DPH
   \   00005F   12....       LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   000062   E9           MOV     A,R1
   \   000063   C0E0         PUSH    A
   \   000065   A8..         MOV     R0,?V2
   \   000067   7900         MOV     R1,#0x0
   \   000069   E5..         MOV     A,?V0
   \   00006B   28           ADD     A,R0
   \   00006C   F8           MOV     R0,A
   \   00006D   E5..         MOV     A,?V1
   \   00006F   39           ADDC    A,R1
   \   000070   F9           MOV     R1,A
   \   000071   E8           MOV     A,R0
   \   000072   24FF         ADD     A,#-0x1
   \   000074   F582         MOV     DPL,A
   \   000076   E9           MOV     A,R1
   \   000077   34FF         ADDC    A,#-0x1
   \   000079   F583         MOV     DPH,A
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
    267          
    268          #ifdef MT_UART_DEFAULT_PORT
    269                HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
    270          #endif
    271                break;
   \   00007E   8020         SJMP    ??MT_ProcessIncomingCommand_5
    272          
    273              case CMD_DEBUG_STR:
    274                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
   \                     ??MT_ProcessIncomingCommand_3:
   \   000080                ; Setup parameters for call to function MT_ProcessDebugStr
   \   000080   EE           MOV     A,R6
   \   000081   FA           MOV     R2,A
   \   000082   EF           MOV     A,R7
   \   000083   FB           MOV     R3,A
   \   000084   12....       LCALL   `??MT_ProcessDebugStr::?relay`; Banked call to: MT_ProcessDebugStr
    275                break;
   \   000087   8017         SJMP    ??MT_ProcessIncomingCommand_5
    276          
    277          #if !defined ( NONWK )
    278              case MT_SYS_APP_RSP_MSG:
    279                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
   \                     ??MT_ProcessIncomingCommand_4:
   \   000089   85..82       MOV     DPL,?V0
   \   00008C   85..83       MOV     DPH,?V1
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   2405         ADD     A,#0x5
   \   000095   F5..         MOV     ?V2,A
    280                MTProcessAppRspMsg( msg_ptr, len );
   \   000097                ; Setup parameters for call to function MTProcessAppRspMsg
   \   000097   A9..         MOV     R1,?V2
   \   000099   AA..         MOV     R2,?V0
   \   00009B   AB..         MOV     R3,?V1
   \   00009D   12....       LCALL   `??MTProcessAppRspMsg::?relay`; Banked call to: MTProcessAppRspMsg
    281                break;
    282          #endif  // NONWK
    283          
    284          #if defined (MT_UTIL_FUNC)
    285          #if defined ZCL_KEY_ESTABLISH
    286              case ZCL_KEY_ESTABLISH_IND:
    287                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    288                break;
    289          #endif
    290          #endif
    291          #ifdef MT_ZDO_CB_FUNC
    292              case ZDO_STATE_CHANGE:
    293                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    294                break;
    295          #endif
    296          
    297              default:
    298                break;
    299            }
    300          }
   \                     ??MT_ProcessIncomingCommand_5:
   \   0000A0   7F03         MOV     R7,#0x3
   \   0000A2   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TaskInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessIncomingCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncomingCommand
    301          
    302          #ifdef MT_TASK
    303          /***************************************************************************************************
    304           * @fn      MT_TransportAlloc
    305           *
    306           * @brief   Allocate memory for transport msg
    307           *
    308           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    309           *          uint8 len - length
    310           *
    311           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    312           ***************************************************************************************************/
    313          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
    314          {
    315            uint8 *p;
    316          
    317            (void)cmd0;  // Intentionally unreferenced parameter
    318          
    319            /* Allocate a buffer of data length + SOP+CMD+FCS (5 bytes) */
    320            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
    321          
    322            if (p)
    323            {
    324              p++; /* Save space for SOP_VALUE, msg structure */
    325              return p;
    326            }
    327            else
    328            {
    329              return NULL;
    330            }
    331          }
    332          
    333          /***************************************************************************************************
    334           * @fn      MT_TransportSend
    335           *
    336           * @brief   Fill in SOP and FCS then send out the msg
    337           *
    338           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    339           *
    340           * @return  None
    341           ***************************************************************************************************/
    342          void MT_TransportSend(uint8 *pBuf)
    343          {
    344            uint8 *msgPtr;
    345            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
    346          
    347            /* Move back to the SOP */
    348            msgPtr = pBuf-1;
    349          
    350            /* Insert SOP */
    351            msgPtr[0] = MT_UART_SOF;
    352          
    353            /* Insert FCS */
    354            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
    355          
    356            /* Send to UART */
    357          #ifdef MT_UART_DEFAULT_PORT
    358            HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
    359          #endif
    360          
    361            /* Deallocate */
    362            osal_msg_deallocate(msgPtr);
    363          }
    364          #endif /* MT_TASK */
    365          /***************************************************************************************************
    366           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     14   MT_ProcessEvent
        0     14   -> MT_AfExec
        0     14   -> MT_Init
        0     14   -> MT_ProcessIncomingCommand
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
      1     25   MT_ProcessIncomingCommand
        0     11   -> MTProcessAppRspMsg
        0     11   -> MT_ProcessDebugMsg
        0     11   -> MT_ProcessDebugStr
        0     11   -> MT_ProcessIncoming
        0     11   -> MT_UartCalcFCS
      0      9   MT_TaskInit
        0      9   -> MT_UartInit
        0      9   -> MT_UartRegisterTaskID
        0      9   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     131  MT_ProcessEvent
       6  MT_ProcessEvent::?relay
     165  MT_ProcessIncomingCommand
       6  MT_ProcessIncomingCommand::?relay
       1  MT_TaskID
      35  MT_TaskInit
       6  MT_TaskInit::?relay

 
 331 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_Z
 
 349 bytes of CODE  memory
   1 byte  of XDATA memory

Errors: none
Warnings: none
