###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                09/Mar/2016  15:54:59
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoRouter.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoRouter.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\DemoRouter.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\DemoRouter.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoRouter.c
      1          /**************************************************************************************************
      2            Filename:       DemoRouter.c
      3          
      4            Description:    Router application for the sensor demo utilizing the Simple API.
      5          
      6                            The sensor application binds to a gateway and will periodically
      7                            read temperature and supply voltage from the ADC and send report
      8                            towards the gateway node.
      9          
     10          
     11            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /******************************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "sapi.h"
     49          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     50          #include "hal_lcd.h"
     51          #include "hal_led.h"
     52          #include "hal_adc.h"
     53          #include "hal_mcu.h"
     54          #include "hal_uart.h"
     55          #include "OSAL_NV.h"
     56          #include "DemoApp.h"
     57          #include "APS.h"
     58          
     59          /******************************************************************************
     60           * CONSTANTS
     61           */
     62          #define REPORT_FAILURE_LIMIT                3
     63          #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
     64          
     65          // Application States
     66          #define APP_INIT                            0    // Initial state
     67          #define APP_START                           1    // Sensor has joined network
     68          #define APP_BIND                            2    // Sensor is in process of binding
     69          #define APP_REPORT                          4    // Sensor is in reporting state
     70          
     71          // Application osal event identifiers
     72          // Bit mask of events ( from 0x0000 to 0x00FF )
     73          #define MY_START_EVT                        0x0001
     74          #define MY_REPORT_EVT                       0x0002
     75          #define MY_FIND_COLLECTOR_EVT               0x0004
     76          
     77          // ADC definitions for CC2430/CC2530 from the hal_adc.c file
     78          #if defined (HAL_MCU_CC2530)
     79          #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
     80          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     81          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     82          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     83          #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
     84          #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
     85          #endif // HAL_MCU_CC2530
     86          
     87          /******************************************************************************
     88           * TYPEDEFS
     89           */
     90          
     91          /******************************************************************************
     92           * LOCAL VARIABLES
     93           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          static uint8  appState =          APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static uint8  reportState  =       FALSE;
   \                     reportState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          static uint8  sendingData  =       FALSE;
   \                     sendingData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          static uint8 reportFailureNr =    0;
   \                     reportFailureNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          static uint8 bindRetries =        0;
   \                     bindRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    100          static uint16 myReportPeriod =    5000;         // milliseconds
   \                     myReportPeriod:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myReportPeriod>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          static uint16 myBindRetryDelay =  2000;         // milliseconds
   \                     myBindRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myBindRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          static uint8 myStartRetryDelay =  10;           // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    103          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          static uint16 parentShortAddr;
   \                     parentShortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /******************************************************************************
    107           * GLOBAL VARIABLES
    108           */
    109          
    110          // Inputs and Outputs for Sensor device
    111          #define NUM_OUT_CMD_SENSOR        1
    112          #define NUM_IN_CMD_SENSOR         0
    113          
    114          // List of output and input commands for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    115          const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_OutCmdList:
   \   000000   0100         DW 1
    116          {
    117            DOOR_CMD_ID
    118          };
    119          
    120          // Define SimpleDescriptor for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    121          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0100         DW 1
   \   000005   01           DB 1
   \   000006   00           DB 0
   \   000007   0000         DW 0H
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    122          {
    123            MY_ENDPOINT_ID,             //  Endpoint
    124            MY_PROFILE_ID,              //  Profile ID
    125            DEV_ID_SENSOR,              //  Device ID
    126            DEVICE_VERSION_SENSOR,      //  Device Version
    127            0,                          //  Reserved
    128            NUM_IN_CMD_SENSOR,          //  Number of Input Commands
    129            (cId_t *) NULL,             //  Input Command List
    130            NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
    131            (cId_t *) zb_OutCmdList     //  Output Command List
    132          };
    133          
    134          
    135          /******************************************************************************
    136           * LOCAL FUNCTIONS
    137           */
    138          
    139          void uartRxCB( uint8 port, uint8 event );
    140          static void sendReport(void);
    141          static int8 readTemp(void);
    142          static uint8 readVoltage(void);
    143          
    144          /*****************************************************************************
    145           * @fn          zb_HandleOsalEvent
    146           *
    147           * @brief       The zb_HandleOsalEvent function is called by the operating
    148           *              system when a task event is set
    149           *
    150           * @param       event - Bitmask containing the events that have been set
    151           *
    152           * @return      none
    153           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    155          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    156            if( event & SYS_EVENT_MSG )
    157            {
    158            }
    159          
    160            if( event & ZB_ENTRY_EVENT )
   \   000009   EE           MOV     A,R6
   \   00000A   5400         ANL     A,#0x0
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   5410         ANL     A,#0x10
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   6010         JZ      ??zb_HandleOsalEvent_0
    161            {
    162              // blind LED 1 to indicate joining a network
    163              HalLedBlink ( HAL_LED_1, 0, 50, 500 );
   \   000015                ; Setup parameters for call to function HalLedBlink
   \   000015   7CF4         MOV     R4,#-0xc
   \   000017   7D01         MOV     R5,#0x1
   \   000019   7B32         MOV     R3,#0x32
   \   00001B   7A00         MOV     R2,#0x0
   \   00001D   7901         MOV     R1,#0x1
   \   00001F   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    164          
    165              // Start the device
    166              zb_StartRequest();
   \   000022                ; Setup parameters for call to function zb_StartRequest
   \   000022   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    167            }
    168          
    169            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   000025   EE           MOV     A,R6
   \   000026   A2E0         MOV     C,0xE0 /* A   */.0
   \   000028   5003         JNC     ??zb_HandleOsalEvent_1
    170            {
    171              zb_StartRequest();
   \   00002A                ; Setup parameters for call to function zb_StartRequest
   \   00002A   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    172            }
    173          
    174            if ( event & MY_REPORT_EVT )
   \                     ??zb_HandleOsalEvent_1:
   \   00002D   EE           MOV     A,R6
   \   00002E   5402         ANL     A,#0x2
   \   000030   6031         JZ      ??zb_HandleOsalEvent_2
    175            {
    176              if ( appState == APP_REPORT )
   \   000032   90....       MOV     DPTR,#appState
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6404         XRL     A,#0x4
   \   000038   7029         JNZ     ??zb_HandleOsalEvent_2
    177              {
    178                sendReport();
   \   00003A                ; Setup parameters for call to function sendReport
   \   00003A   12....       LCALL   `??sendReport::?relay`; Banked call to: sendReport
    179                osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
   \   00003D                ; Setup parameters for call to function osal_start_timerEx
   \   00003D   90....       MOV     DPTR,#myReportPeriod
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V1,A
   \   000047   E4           CLR     A
   \   000048   F5..         MOV     ?V2,A
   \   00004A   F5..         MOV     ?V3,A
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000051   7A02         MOV     R2,#0x2
   \   000053   7B00         MOV     R3,#0x0
   \   000055   90....       MOV     DPTR,#sapi_TaskID
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
   \   00005A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   E9           MOV     A,R1
    180              }
    181            }
    182          
    183            if ( event & MY_FIND_COLLECTOR_EVT )
    184            {
    185              // blind LED 2 to indicate discovery and binding
    186              //HalLedBlink ( HAL_LED_2, 0, 50, 500 );
    187          
    188             // appState = APP_BIND;
    189              // Find and bind to a collector device
    190              //zb_BindDevice( TRUE, DOOR_CMD_ID, (uint8 *)NULL );
    191            }
    192          }
   \                     ??zb_HandleOsalEvent_2:
   \   000063   7F04         MOV     R7,#0x4
   \   000065   02....       LJMP    ?BANKED_LEAVE_XDATA
    193          
    194          /******************************************************************************
    195           * @fn      zb_HandleKeys
    196           *
    197           * @brief   Handles all key events for this device.
    198           *
    199           * @param   shift - true if in shift/alt.
    200           * @param   keys - bit field for key events. Valid entries:
    201           *                 EVAL_SW4
    202           *                 EVAL_SW3
    203           *                 EVAL_SW2
    204           *                 EVAL_SW1
    205           *
    206           * @return  none
    207           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    208          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    209          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    210            // Shift is used to make each button/switch dual purpose.
    211            if ( shift )
   \   00000E   EE           MOV     A,R6
   \   00000F   6003         JZ      $+5
   \   000011   02....       LJMP    ??zb_HandleKeys_0 & 0xFFFF
    212            {
    213              if ( keys & HAL_KEY_SW_1 )
    214              {
    215              }
    216              if ( keys & HAL_KEY_SW_2 )
    217              {
    218              }
    219              if ( keys & HAL_KEY_SW_3 )
    220              {
    221              }
    222              if ( keys & HAL_KEY_SW_4 )
    223              {
    224              }
    225            }
    226            else
    227            {
    228              if ( keys & HAL_KEY_SW_1 )
   \   000014   EF           MOV     A,R7
   \   000015   A2E0         MOV     C,0xE0 /* A   */.0
   \   000017   4003         JC      $+5
   \   000019   02....       LJMP    ??zb_HandleKeys_1 & 0xFFFF
    229              {
    230                // Start reporting
    231                if ( reportState == FALSE ) {
   \   00001C   90....       MOV     DPTR,#reportState
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   701B         JNZ     ??zb_HandleKeys_2
    232                  osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   000022                ; Setup parameters for call to function osal_set_event
   \   000022   7A02         MOV     R2,#0x2
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#sapi_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00002E   E9           MOV     A,R1
    233                  reportState = TRUE;
   \   00002F   90....       MOV     DPTR,#reportState
   \   000032   7401         MOV     A,#0x1
   \   000034   F0           MOVX    @DPTR,A
    234                  HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   000035                ; Setup parameters for call to function HalLedSet
   \   000035   7A01         MOV     R2,#0x1
   \   000037   7902         MOV     R1,#0x2
   \   000039   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00003C   E9           MOV     A,R1
    235                }
    236                HalLedBlink ( HAL_LED_2, 0, 50, 500 );
   \                     ??zb_HandleKeys_2:
   \   00003D                ; Setup parameters for call to function HalLedBlink
   \   00003D   7CF4         MOV     R4,#-0xc
   \   00003F   7D01         MOV     R5,#0x1
   \   000041   7B32         MOV     R3,#0x32
   \   000043   7A00         MOV     R2,#0x0
   \   000045   7902         MOV     R1,#0x2
   \   000047   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    237          
    238                appState = APP_BIND;
   \   00004A   90....       MOV     DPTR,#appState
   \   00004D   7402         MOV     A,#0x2
   \   00004F   F0           MOVX    @DPTR,A
    239                // Find and bind to a collector device
    240                zb_BindDevice( TRUE, DOOR_CMD_ID, (uint8 *)NULL );
   \   000050                ; Setup parameters for call to function zb_BindDevice
   \   000050   7C00         MOV     R4,#0x0
   \   000052   7D00         MOV     R5,#0x0
   \   000054   7A01         MOV     R2,#0x1
   \   000056   7B00         MOV     R3,#0x0
   \   000058   7901         MOV     R1,#0x1
   \   00005A   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    241                
    242                
    243                if ( sendingData == TRUE ){
   \   00005D   90....       MOV     DPTR,#sendingData
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6401         XRL     A,#0x1
   \   000063   7041         JNZ     ??zb_HandleKeys_1
    244                  
    245                  uint8 pData[DOOR_REPORT_LENGTH];
    246                  pData[DOOR_STATUS_OFFSET] = 1;
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   7401         MOV     A,#0x1
   \   00006D   F0           MOVX    @DPTR,A
    247                  uint8 txOptions;
    248                  zb_SendDataRequest( 0xFFFE, DOOR_CMD_ID, DOOR_REPORT_LENGTH , pData, 0, txOptions, 0 );
                                                                                                 ^
Warning[Pe549]: variable "txOptions" is used before its value is set
   \   00006E                ; Setup parameters for call to function zb_SendDataRequest
   \   00006E   75..00       MOV     ?V0,#0x0
   \   000071   78..         MOV     R0,#?V0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000076   75..00       MOV     ?V0,#0x0
   \   000079   78..         MOV     R0,#?V0
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   75..00       MOV     ?V0,#0x0
   \   000081   78..         MOV     R0,#?V0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000086   7403         MOV     A,#0x3
   \   000088   12....       LCALL   ?XSTACK_DISP100_8
   \   00008B   88..         MOV     ?V0,R0
   \   00008D   89..         MOV     ?V1,R1
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   7901         MOV     R1,#0x1
   \   000096   7C01         MOV     R4,#0x1
   \   000098   7D00         MOV     R5,#0x0
   \   00009A   7AFE         MOV     R2,#-0x2
   \   00009C   7BFF         MOV     R3,#-0x1
   \   00009E   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   0000A1   7405         MOV     A,#0x5
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
    249                  
    250                }
    251              }
    252              if ( keys & HAL_KEY_SW_2 )
   \                     ??zb_HandleKeys_1:
   \   0000A6   EF           MOV     A,R7
   \   0000A7   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000A9   5020         JNC     ??zb_HandleKeys_0
    253              {
    254                HalLedBlink ( HAL_LED_2, 0, 50, 500 );
   \   0000AB                ; Setup parameters for call to function HalLedBlink
   \   0000AB   7CF4         MOV     R4,#-0xc
   \   0000AD   7D01         MOV     R5,#0x1
   \   0000AF   7B32         MOV     R3,#0x32
   \   0000B1   7A00         MOV     R2,#0x0
   \   0000B3   7902         MOV     R1,#0x2
   \   0000B5   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    255          
    256                appState = APP_BIND;
   \   0000B8   90....       MOV     DPTR,#appState
   \   0000BB   7402         MOV     A,#0x2
   \   0000BD   F0           MOVX    @DPTR,A
    257                zb_BindDevice( TRUE, DOOR_CMD_ID, (uint8 *)NULL );
   \   0000BE                ; Setup parameters for call to function zb_BindDevice
   \   0000BE   7C00         MOV     R4,#0x0
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   7A01         MOV     R2,#0x1
   \   0000C4   7B00         MOV     R3,#0x0
   \   0000C6   7901         MOV     R1,#0x1
   \   0000C8   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    258              }
    259              if ( keys & HAL_KEY_SW_3 )
    260              {
    261              }
    262              if ( keys & HAL_KEY_SW_4 )
    263              {
    264              }
    265            }
    266          }
   \                     ??zb_HandleKeys_0:
   \   0000CB   7401         MOV     A,#0x1
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   7F02         MOV     R7,#0x2
   \   0000D2   02....       LJMP    ?BANKED_LEAVE_XDATA
    267          
    268          /******************************************************************************
    269           * @fn          zb_StartConfirm
    270           *
    271           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    272           *              after a start request operation completes
    273           *
    274           * @param       status - The status of the start operation.  Status of
    275           *                       ZB_SUCCESS indicates the start operation completed
    276           *                       successfully.  Else the status is an error code.
    277           *
    278           * @return      none
    279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    280          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    282             MCU_IO_DIR_OUTPUT_PREP(1, 2);
   \   000007   43FE04       ORL     0xfe,#0x4
    283             MCU_IO_OUTPUT_PREP(1,2,0);
   \   00000A   53F4FB       ANL     0xf4,#0xfb
   \   00000D   C292         CLR     0x90.2
   \   00000F   43FE04       ORL     0xfe,#0x4
    284            // If the device sucessfully started, change state to running
    285            if ( status == ZB_SUCCESS )
   \   000012   EE           MOV     A,R6
   \   000013   7033         JNZ     ??zb_StartConfirm_0
    286            {
    287              // Set LED 1 to indicate that node is operational on the network
    288              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A01         MOV     R2,#0x1
   \   000017   7901         MOV     R1,#0x1
   \   000019   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00001C   E9           MOV     A,R1
    289          
    290              // Change application state
    291              appState = APP_START;
   \   00001D   90....       MOV     DPTR,#appState
   \   000020   7401         MOV     A,#0x1
   \   000022   F0           MOVX    @DPTR,A
    292          
    293              // Set event to bind to a collector
    294              osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000023                ; Setup parameters for call to function osal_set_event
   \   000023   7A04         MOV     R2,#0x4
   \   000025   7B00         MOV     R3,#0x0
   \   000027   90....       MOV     DPTR,#sapi_TaskID
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00002F   E9           MOV     A,R1
    295          
    296              // Store parent short address
    297              zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
   \   000030                ; Setup parameters for call to function zb_GetDeviceInfo
   \   000030   7A..         MOV     R2,#parentShortAddr & 0xff
   \   000032   7B..         MOV     R3,#(parentShortAddr >> 8) & 0xff
   \   000034   7903         MOV     R1,#0x3
   \   000036   12....       LCALL   `??zb_GetDeviceInfo::?relay`; Banked call to: zb_GetDeviceInfo
    298          
    299              // Turn OFF Allow Bind mode infinitly
    300              zb_AllowBind( 0x00 );
   \   000039                ; Setup parameters for call to function zb_AllowBind
   \   000039   7900         MOV     R1,#0x0
   \   00003B   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    301              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   00003E                ; Setup parameters for call to function HalLedSet
   \   00003E   7A00         MOV     R2,#0x0
   \   000040   7902         MOV     R1,#0x2
   \   000042   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000045   E9           MOV     A,R1
   \   000046   8024         SJMP    ??zb_StartConfirm_1
    302            }
    303            else
    304            {
    305              // Try again later with a delay
    306              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   000048                ; Setup parameters for call to function osal_start_timerEx
   \   000048   90....       MOV     DPTR,#myStartRetryDelay
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V0,A
   \   00004E   E4           CLR     A
   \   00004F   F5..         MOV     ?V1,A
   \   000051   F5..         MOV     ?V2,A
   \   000053   F5..         MOV     ?V3,A
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00005A   7A01         MOV     R2,#0x1
   \   00005C   7B00         MOV     R3,#0x0
   \   00005E   90....       MOV     DPTR,#sapi_TaskID
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000066   7404         MOV     A,#0x4
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006B   E9           MOV     A,R1
    307            }
    308          }
   \                     ??zb_StartConfirm_1:
   \   00006C   7F04         MOV     R7,#0x4
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000071                REQUIRE P1DIR
   \   000071                REQUIRE P1SEL
   \   000071                REQUIRE _A_P1
    309          
    310          /******************************************************************************
    311           * @fn          zb_SendDataConfirm
    312           *
    313           * @brief       The zb_SendDataConfirm callback function is called by the
    314           *              ZigBee after a send data operation completes
    315           *
    316           * @param       handle - The handle identifying the data transmission.
    317           *              status - The status of the operation.
    318           *
    319           * @return      none
    320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    321          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    322          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    323            if( status != ZB_SUCCESS )
   \   000009   EF           MOV     A,R7
   \   00000A   605E         JZ      ??zb_SendDataConfirm_0
    324            {
    325              if ( ++reportFailureNr >= REPORT_FAILURE_LIMIT )
   \   00000C   90....       MOV     DPTR,#reportFailureNr
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   2401         ADD     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   90....       MOV     DPTR,#reportFailureNr
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C3           CLR     C
   \   000018   9403         SUBB    A,#0x3
   \   00001A   4054         JC      ??zb_SendDataConfirm_1
    326              {
    327                 // Stop reporting
    328                 osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
   \   00001C                ; Setup parameters for call to function osal_stop_timerEx
   \   00001C   7A02         MOV     R2,#0x2
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#sapi_TaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000028   E9           MOV     A,R1
    329          
    330                 // After failure start reporting automatically when the device
    331                 // is binded to a new gateway
    332                 reportState = TRUE;
   \   000029   90....       MOV     DPTR,#reportState
   \   00002C   7401         MOV     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
    333          
    334                 // Delete previous binding
    335                 zb_BindDevice( FALSE, DOOR_CMD_ID, (uint8 *)NULL );
   \   00002F                ; Setup parameters for call to function zb_BindDevice
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A01         MOV     R2,#0x1
   \   000035   7B00         MOV     R3,#0x0
   \   000037   7900         MOV     R1,#0x0
   \   000039   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    336          
    337                // Try to bind a new gateway
    338                 osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \   00003C                ; Setup parameters for call to function osal_start_timerEx
   \   00003C   90....       MOV     DPTR,#myBindRetryDelay
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V1,A
   \   000046   E4           CLR     A
   \   000047   F5..         MOV     ?V2,A
   \   000049   F5..         MOV     ?V3,A
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000050   7A04         MOV     R2,#0x4
   \   000052   7B00         MOV     R3,#0x0
   \   000054   90....       MOV     DPTR,#sapi_TaskID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
    339                 reportFailureNr = 0;
   \   000062   90....       MOV     DPTR,#reportFailureNr
   \   000065   7400         MOV     A,#0x0
   \   000067   F0           MOVX    @DPTR,A
   \   000068   8006         SJMP    ??zb_SendDataConfirm_1
    340              }
    341            }
    342            // status == SUCCESS
    343            else
    344            {
    345              // Reset failure counter
    346              reportFailureNr = 0;
   \                     ??zb_SendDataConfirm_0:
   \   00006A   90....       MOV     DPTR,#reportFailureNr
   \   00006D   7400         MOV     A,#0x0
   \   00006F   F0           MOVX    @DPTR,A
    347            }
    348          }
   \                     ??zb_SendDataConfirm_1:
   \   000070   7F04         MOV     R7,#0x4
   \   000072   02....       LJMP    ?BANKED_LEAVE_XDATA
    349          
    350          /******************************************************************************
    351           * @fn          zb_BindConfirm
    352           *
    353           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    354           *              after a bind operation completes.
    355           *
    356           * @param       commandId - The command ID of the binding being confirmed.
    357           *              status - The status of the bind operation.
    358           *
    359           * @return      none
    360           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    362          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V4,R1
    363            if( status == ZB_SUCCESS )
   \   00000B   E5..         MOV     A,?V4
   \   00000D   702E         JNZ     ??zb_BindConfirm_0
    364            {
    365              zb_AllowBind( 0xFF );
   \   00000F                ; Setup parameters for call to function zb_AllowBind
   \   00000F   79FF         MOV     R1,#-0x1
   \   000011   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    366              appState = APP_REPORT;
   \   000014   90....       MOV     DPTR,#appState
   \   000017   7404         MOV     A,#0x4
   \   000019   F0           MOVX    @DPTR,A
    367              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   00001A                ; Setup parameters for call to function HalLedSet
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7902         MOV     R1,#0x2
   \   00001E   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000021   E9           MOV     A,R1
    368              sendingData = TRUE;
   \   000022   90....       MOV     DPTR,#sendingData
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
    369              
    370              // After failure reporting start automatically when the device
    371              // is binded to a new gateway
    372              if ( reportState )
   \   000028   90....       MOV     DPTR,#reportState
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   604A         JZ      ??zb_BindConfirm_1
    373              {
    374                // Start reporting
    375                osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   00002E                ; Setup parameters for call to function osal_set_event
   \   00002E   7A02         MOV     R2,#0x2
   \   000030   7B00         MOV     R3,#0x0
   \   000032   90....       MOV     DPTR,#sapi_TaskID
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00003A   E9           MOV     A,R1
   \   00003B   803B         SJMP    ??zb_BindConfirm_1
    376              }
    377            }
    378            else
    379            {
    380              if ( ++bindRetries >= 2 ) {
   \                     ??zb_BindConfirm_0:
   \   00003D   90....       MOV     DPTR,#bindRetries
   \   000040   E0           MOVX    A,@DPTR
   \   000041   2401         ADD     A,#0x1
   \   000043   F0           MOVX    @DPTR,A
   \   000044   90....       MOV     DPTR,#bindRetries
   \   000047   E0           MOVX    A,@DPTR
   \   000048   C3           CLR     C
   \   000049   9402         SUBB    A,#0x2
   \   00004B   4005         JC      ??zb_BindConfirm_2
    381                // Reset the system
    382                zb_SystemReset();
   \   00004D                ; Setup parameters for call to function zb_SystemReset
   \   00004D   12....       LCALL   `??zb_SystemReset::?relay`; Banked call to: zb_SystemReset
   \   000050   8026         SJMP    ??zb_BindConfirm_1
    383              }
    384              else
    385              {
    386                osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \                     ??zb_BindConfirm_2:
   \   000052                ; Setup parameters for call to function osal_start_timerEx
   \   000052   90....       MOV     DPTR,#myBindRetryDelay
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F5..         MOV     ?V0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V1,A
   \   00005C   E4           CLR     A
   \   00005D   F5..         MOV     ?V2,A
   \   00005F   F5..         MOV     ?V3,A
   \   000061   78..         MOV     R0,#?V0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000066   7A04         MOV     R2,#0x4
   \   000068   7B00         MOV     R3,#0x0
   \   00006A   90....       MOV     DPTR,#sapi_TaskID
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000072   7404         MOV     A,#0x4
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
    387              }
    388            }
    389          }
   \                     ??zb_BindConfirm_1:
   \   000078   7F05         MOV     R7,#0x5
   \   00007A   02....       LJMP    ?BANKED_LEAVE_XDATA
    390          
    391          /******************************************************************************
    392           * @fn          zb_AllowBindConfirm
    393           *
    394           * @brief       Indicates when another device attempted to bind to this device
    395           *
    396           * @param
    397           *
    398           * @return      none
    399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    401          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    402            (void)source;
    403            MCU_IO_OUTPUT_PREP(1,2,1);
   \   000000   53F4FB       ANL     0xf4,#0xfb
   \   000003   D292         SETB    0x90.2
   \   000005   43FE04       ORL     0xfe,#0x4
    404          }
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE P1SEL
   \   00000B                REQUIRE _A_P1
   \   00000B                REQUIRE P1DIR
    405          
    406          /******************************************************************************
    407           * @fn          zb_FindDeviceConfirm
    408           *
    409           * @brief       The zb_FindDeviceConfirm callback function is called by the
    410           *              ZigBee stack when a find device operation completes.
    411           *
    412           * @param       searchType - The type of search that was performed.
    413           *              searchKey - Value that the search was executed on.
    414           *              result - The result of the search.
    415           *
    416           * @return      none
    417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    418          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    419          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    420            (void)searchType;
    421            (void)searchKey;
    422            (void)result;
    423          }
   \   000000   02....       LJMP    ?BRET
    424          
    425          /******************************************************************************
    426           * @fn          zb_ReceiveDataIndication
    427           *
    428           * @brief       The zb_ReceiveDataIndication callback function is called
    429           *              asynchronously by the ZigBee stack to notify the application
    430           *              when data is received from a peer device.
    431           *
    432           * @param       source - The short address of the peer device that sent the data
    433           *              command - The commandId associated with the data
    434           *              len - The number of bytes in the pData parameter
    435           *              pData - The data sent by the peer device
    436           *
    437           * @return      none
    438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    440          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    441            (void)source;
    442            (void)command;
    443            (void)len;
    444            (void)pData;
    445            HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   00000D                ; Setup parameters for call to function HalLedSet
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7901         MOV     R1,#0x1
   \   000011   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000014   E9           MOV     A,R1
    446          }
   \   000015   7F02         MOV     R7,#0x2
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA
    447          
    448          /******************************************************************************
    449           * @fn          uartRxCB
    450           *
    451           * @brief       Callback function for UART
    452           *
    453           * @param       port - UART port
    454           *              event - UART event that caused callback
    455           *
    456           * @return      none
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    459          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    460            (void)port;
    461            (void)event;
    462          }
   \   000000   02....       LJMP    ?BRET
    463          
    464          /******************************************************************************
    465           * @fn          sendReport
    466           *
    467           * @brief       Send sensor report
    468           *
    469           * @param       none
    470           *
    471           * @return      none
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          static void sendReport(void)
   \                     sendReport:
    474          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    475            /*uint8 pData[SENSOR_REPORT_LENGTH];
    476            static uint8 reportNr = 0;
    477            uint8 txOptions;
    478          
    479            // Read and report temperature value
    480            pData[SENSOR_TEMP_OFFSET] = readTemp();
    481          
    482            // Read and report voltage value
    483            pData[SENSOR_VOLTAGE_OFFSET] = readVoltage();
    484          
    485            pData[SENSOR_PARENT_OFFSET] =  HI_UINT16(parentShortAddr);
    486            pData[SENSOR_PARENT_OFFSET + 1] =  LO_UINT16(parentShortAddr);
    487          
    488            // Set ACK request on each ACK_INTERVAL report
    489            // If a report failed, set ACK request on next report
    490            if ( ++reportNr < ACK_REQ_INTERVAL && reportFailureNr == 0 )
    491            {
    492              txOptions = AF_TX_OPTIONS_NONE;
    493            }
    494            else
    495            {
    496              txOptions = AF_MSG_ACK_REQUEST;
    497              reportNr = 0;
    498            }
    499            // Destination address 0xFFFE: Destination address is sent to previously
    500            // established binding for the commandId.
    501            zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, SENSOR_REPORT_LENGTH, pData, 0, txOptions, 0 );*/
    502          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myReportPeriod>`:
   \   000000   8813         DW 5000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myBindRetryDelay>`:
   \   000000   D007         DW 2000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sendReport::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sendReport
    503          
    504          /******************************************************************************
    505           * @fn          readTemp
    506           *
    507           * @brief       read temperature from ADC
    508           *
    509           * @param       none
    510           *
    511           * @return      temperature
    512           */
    513          static int8 readTemp(void)
                             ^
Warning[Pe177]: function "readTemp" was declared but never referenced
    514          {
    515            static uint16 voltageAtTemp22;
    516            static uint8 bCalibrate = TRUE; // Calibrate the first time the temp sensor is read
    517            uint16 value;
    518            int8 temp;
    519          
    520            #if defined (HAL_MCU_CC2530)
    521            /*
    522             * Use the ADC to read the temperature
    523             */
    524            value = HalReadTemp();
    525          
    526            // Use the 12 MSB of adcValue
    527            value >>= 4;
    528          
    529            /*
    530             * These parameters are typical values and need to be calibrated
    531             * See the datasheet for the appropriate chip for more details
    532             * also, the math below may not be very accurate
    533             */
    534            /* Assume ADC = 1480 at 25C and ADC = 4/C */
    535            #define VOLTAGE_AT_TEMP_25        1480
    536            #define TEMP_COEFFICIENT          4
    537          
    538            // Calibrate for 22C the first time the temp sensor is read.
    539            // This will assume that the demo is started up in temperature of 22C
    540            if ( bCalibrate ) {
    541              voltageAtTemp22 = value;
    542              bCalibrate = FALSE;
    543            }
    544          
    545            temp = 22 + ( (value - voltageAtTemp22) / TEMP_COEFFICIENT );
    546          
    547            // Set 0C as minimum temperature, and 100C as max
    548            if ( temp >= 100 )
    549            {
    550              return 100;
    551            }
    552            else if ( temp <= 0 ) {
    553              return 0;
    554            }
    555            else {
    556              return temp;
    557            }
    558            // Only CC2530 is supported
    559            #else
    560            return 0;
    561            #endif
    562          }
    563          
    564          /******************************************************************************
    565           * @fn          readVoltage
    566           *
    567           * @brief       read voltage from ADC
    568           *
    569           * @param       none
    570           *
    571           * @return      voltage
    572           */
    573          static uint8 readVoltage(void)
                              ^
Warning[Pe177]: function "readVoltage" was declared but never referenced
    574          {
    575            #if defined (HAL_MCU_CC2530)
    576            /*
    577             * Use the ADC to read the bus voltage
    578             */
    579            uint16 value = HalReadTemp();
    580          
    581            // value now contains measurement of Vdd/3
    582            // 0 indicates 0V and 32767 indicates 1.25V
    583            // voltage = (value*3*1.25)/32767 volts
    584            // we will multiply by this by 10 to allow units of 0.1 volts
    585            value = value >> 6;   // divide first by 2^6
    586            value = (uint16)(value * 37.5);
    587            value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
    588          
    589            return value;
    590            #else
    591            return 0;
    592            #endif // CC2530
    593          }

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
     12   sendReport
      0   uartRxCB
      0   zb_AllowBindConfirm
     17   zb_BindConfirm
       13   -> HalLedSet
       13   -> osal_set_event
       17   -> osal_start_timerEx
       13   -> zb_AllowBind
       13   -> zb_SystemReset
      0   zb_FindDeviceConfirm
     16   zb_HandleKeys
       11   -> HalLedBlink
       11   -> HalLedSet
       11   -> osal_set_event
       11   -> zb_BindDevice
       16   -> zb_SendDataRequest
     16   zb_HandleOsalEvent
       12   -> HalLedBlink
       16   -> osal_start_timerEx
       12   -> sendReport
       12   -> zb_StartRequest
     14   zb_ReceiveDataIndication
       10   -> HalLedSet
     16   zb_SendDataConfirm
       16   -> osal_start_timerEx
       12   -> osal_stop_timerEx
       12   -> zb_BindDevice
     16   zb_StartConfirm
       12   -> HalLedSet
       12   -> osal_set_event
       16   -> osal_start_timerEx
       12   -> zb_AllowBind
       12   -> zb_GetDeviceInfo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for myBindRetryDelay>
       2  ?<Initializer for myReportPeriod>
       1  ?<Initializer for myStartRetryDelay>
       1  P1DIR
       1  P1SEL
       1  _A_P1
       1  appState
       1  bindRetries
       2  myBindRetryDelay
       2  myReportPeriod
       1  myStartRetryDelay
       2  parentShortAddr
       1  reportFailureNr
       1  reportState
       3  sendReport
       6  sendReport::?relay
       1  sendingData
       3  uartRxCB
       6  uartRxCB::?relay
      11  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
     125  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
     213  zb_HandleKeys
       6  zb_HandleKeys::?relay
     104  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       2  zb_OutCmdList
      26  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
     117  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
     113  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 718 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   5 bytes in segment XDATA_I
   5 bytes in segment XDATA_ID
  14 bytes in segment XDATA_ROM_C
   7 bytes in segment XDATA_Z
 
 783 bytes of CODE  memory
  14 bytes of CONST memory
   0 bytes of DATA  memory (+ 3 bytes shared)
  12 bytes of XDATA memory

Errors: none
Warnings: 3
