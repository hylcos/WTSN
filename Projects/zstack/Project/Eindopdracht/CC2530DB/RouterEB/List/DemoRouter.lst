###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                16/Mar/2016  14:39:09
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoRouter.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00008000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x42, 0x61, 0x72, 0x74,
#        0x20, 0x65, 0x61, 0x20, 0x48, 0x79, 0x6C, 0x63, 0x6F, 0x20, 0x20,
#        0x20}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoRouter.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\DemoRouter.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\DemoRouter.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoRouter.c
      1          /**************************************************************************************************
      2            Filename:       DemoRouter.c
      3          
      4            Description:    Router application for the sensor demo utilizing the Simple API.
      5          
      6                            The sensor application binds to a gateway and will periodically
      7                            read temperature and supply voltage from the ADC and send report
      8                            towards the gateway node.
      9          
     10          
     11            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /******************************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "sapi.h"
     49          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     50          #include "hal_lcd.h"
     51          #include "hal_led.h"
     52          #include "hal_adc.h"
     53          #include "hal_mcu.h"
     54          #include "hal_uart.h"
     55          #include "OSAL_NV.h"
     56          #include "DemoApp.h"
     57          #include "APS.h"
     58          
     59          /******************************************************************************
     60           * CONSTANTS
     61           */
     62          #define REPORT_FAILURE_LIMIT                3
     63          #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
     64          
     65          // Application States
     66          #define APPSTATE_INIT                       0
     67          #define APPSTATE_STARTED                    1
     68          #define APPSTATE_BOUND                      2
     69          
     70          // Application osal event identifiers
     71          // Bit mask of events ( from 0x0000 to 0x00FF )
     72          #define RETRY_START_EVT                        0x0001
     73          
     74          // ADC definitions for CC2430/CC2530 from the hal_adc.c file
     75          #if defined (HAL_MCU_CC2530)
     76          #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
     77          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     78          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     79          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     80          #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
     81          #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
     82          #endif // HAL_MCU_CC2530
     83          
     84          /******************************************************************************
     85           * TYPEDEFS
     86           */
     87          
     88          /******************************************************************************
     89           * LOCAL VARIABLES
     90           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          static uint8  appState = APPSTATE_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     92          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     93          static uint8 retryStartDelay =  10;
   \                     retryStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for retryStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static uint16 parentShortAddr;
   \                     parentShortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          /******************************************************************************
     98           * GLOBAL VARIABLES
     99           */
    100          
    101          // Inputs and Outputs for Sensor device
    102          #define NUM_OUT_CMD_SENSOR        1
    103          #define NUM_IN_CMD_SENSOR         1
    104          
    105          // List of output and input commands for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    106          const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_OutCmdList:
   \   000000   0100         DW 1
    107          {
    108            LOCK_CONTROL_CMD_ID
    109          };
    110          

   \                                 In  segment XDATA_ROM_C, align 1
    111          const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
   \                     zb_InCmdList:
   \   000000   0300         DW 3
    112          {
    113            LOCK_STATUS_CMD_ID
    114          };
    115          // Define SimpleDescriptor for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    116          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0100         DW 1
   \   000005   01           DB 1
   \   000006   01           DB 1
   \   000007   ....         DW zb_InCmdList
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    117          {
    118            MY_ENDPOINT_ID,             //  Endpoint
    119            MY_PROFILE_ID,              //  Profile ID
    120            DEV_ID_SENSOR,              //  Device ID
    121            DEVICE_VERSION_SENSOR,      //  Device Version
    122            0,                          //  Reserved
    123            NUM_IN_CMD_SENSOR,          //  Number of Input Commands
    124            (cId_t *) zb_InCmdList,     //  Input Command List
    125            NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
    126            (cId_t *) zb_OutCmdList     //  Output Command List
    127          };
    128          
    129          
    130          /******************************************************************************
    131           * LOCAL FUNCTIONS
    132           */
    133          
    134          void uartRxCB( uint8 port, uint8 event );
    135          void sendDoorCommand(uint8 state);
    136          
    137          /*****************************************************************************
    138           * @fn          zb_HandleOsalEvent
    139           *
    140           * @brief       The zb_HandleOsalEvent function is called by the operating
    141           *              system when a task event is set
    142           *
    143           * @param       event - Bitmask containing the events that have been set
    144           *
    145           * @return      none
    146           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    148          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    149            if( event & SYS_EVENT_MSG )
    150            {
    151            }
    152          
    153            if( event & ZB_ENTRY_EVENT || event & RETRY_START_EVT )
   \   000009   EE           MOV     A,R6
   \   00000A   5401         ANL     A,#0x1
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   5410         ANL     A,#0x10
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   6003         JZ      ??zb_HandleOsalEvent_0
    154            {
    155              // Start the device
    156              zb_StartRequest();
   \   000015                ; Setup parameters for call to function zb_StartRequest
   \   000015   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    157            }
    158          }
   \                     ??zb_HandleOsalEvent_0:
   \   000018   7F01         MOV     R7,#0x1
   \   00001A   02....       LJMP    ?BANKED_LEAVE_XDATA
    159          
    160          /******************************************************************************
    161           * @fn      zb_HandleKeys
    162           *
    163           * @brief   Handles all key events for this device.
    164           *
    165           * @param   shift - true if in shift/alt.
    166           * @param   keys - bit field for key events. Valid entries:
    167           *                 EVAL_SW4
    168           *                 EVAL_SW3
    169           *                 EVAL_SW2
    170           *                 EVAL_SW1
    171           *
    172           * @return  none
    173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    175          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    176            // Shift is used to make each button/switch dual purpose.
    177            if ( shift )
   \   000009   EE           MOV     A,R6
   \   00000A   7014         JNZ     ??zb_HandleKeys_0
    178            {
    179              if ( keys & HAL_KEY_SW_1 )
    180              {
    181              }
    182              if ( keys & HAL_KEY_SW_2 )
    183              {
    184              }
    185              if ( keys & HAL_KEY_SW_3 )
    186              {
    187              }
    188              if ( keys & HAL_KEY_SW_4 )
    189              {
    190              }
    191            }
    192            else
    193            {
    194              if ( keys & HAL_KEY_SW_1 )
   \   00000C   EF           MOV     A,R7
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5005         JNC     ??zb_HandleKeys_1
    195              {
    196                sendDoorCommand(0);
   \   000011                ; Setup parameters for call to function sendDoorCommand
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   `??sendDoorCommand::?relay`; Banked call to: sendDoorCommand
    197              }
    198              if ( keys & HAL_KEY_SW_2 )
   \                     ??zb_HandleKeys_1:
   \   000016   EF           MOV     A,R7
   \   000017   A2E1         MOV     C,0xE0 /* A   */.1
   \   000019   5005         JNC     ??zb_HandleKeys_0
    199              {
    200                sendDoorCommand(1);
   \   00001B                ; Setup parameters for call to function sendDoorCommand
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   12....       LCALL   `??sendDoorCommand::?relay`; Banked call to: sendDoorCommand
    201              }
    202              if ( keys & HAL_KEY_SW_3 )
    203              {
    204              }
    205              if ( keys & HAL_KEY_SW_4 )
    206              {
    207              }
    208            }
    209          }
   \                     ??zb_HandleKeys_0:
   \   000020   7F01         MOV     R7,#0x1
   \   000022   02....       LJMP    ?BANKED_LEAVE_XDATA
    210          
    211          /******************************************************************************
    212           * @fn          zb_StartConfirm
    213           *
    214           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    215           *              after a start request operation completes
    216           *
    217           * @param       status - The status of the start operation.  Status of
    218           *                       ZB_SUCCESS indicates the start operation completed
    219           *                       successfully.  Else the status is an error code.
    220           *
    221           * @return      none
    222           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    224          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    225            // If the device sucessfully started, change state to running
    226            if ( status == ZB_SUCCESS )
   \   000007   EE           MOV     A,R6
   \   000008   7046         JNZ     ??zb_StartConfirm_0
    227            {
    228              // Store parent short address
    229              zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
   \   00000A                ; Setup parameters for call to function zb_GetDeviceInfo
   \   00000A   7A..         MOV     R2,#parentShortAddr & 0xff
   \   00000C   7B..         MOV     R3,#(parentShortAddr >> 8) & 0xff
   \   00000E   7903         MOV     R1,#0x3
   \   000010   12....       LCALL   `??zb_GetDeviceInfo::?relay`; Banked call to: zb_GetDeviceInfo
    230          
    231              // Set LEDS
    232              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A01         MOV     R2,#0x1
   \   000015   7901         MOV     R1,#0x1
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00001A   E9           MOV     A,R1
    233              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   00001B                ; Setup parameters for call to function HalLedSet
   \   00001B   7A00         MOV     R2,#0x0
   \   00001D   7902         MOV     R1,#0x2
   \   00001F   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000022   E9           MOV     A,R1
    234              HalLedSet( HAL_LED_3, HAL_LED_MODE_OFF );
   \   000023                ; Setup parameters for call to function HalLedSet
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7904         MOV     R1,#0x4
   \   000027   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00002A   E9           MOV     A,R1
    235              
    236              // Change application state
    237              appState = APPSTATE_STARTED;
   \   00002B   90....       MOV     DPTR,#appState
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
    238              
    239              MCU_IO_DIR_OUTPUT_PREP(1, 2);
   \   000031   43FE04       ORL     0xfe,#0x4
    240              MCU_IO_OUTPUT_PREP(1,2,0);
   \   000034   53F4FB       ANL     0xf4,#0xfb
   \   000037   C292         CLR     0x90.2
   \   000039   43FE04       ORL     0xfe,#0x4
    241             
    242              zb_AllowBind( 0xFF );
   \   00003C                ; Setup parameters for call to function zb_AllowBind
   \   00003C   79FF         MOV     R1,#-0x1
   \   00003E   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    243              
    244              zb_BindDevice( TRUE, LOCK_CONTROL_CMD_ID, (uint8 *)NULL );
   \   000041                ; Setup parameters for call to function zb_BindDevice
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A01         MOV     R2,#0x1
   \   000047   7B00         MOV     R3,#0x0
   \   000049   7901         MOV     R1,#0x1
   \   00004B   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
   \   00004E   8024         SJMP    ??zb_StartConfirm_1
    245            }
    246            else
    247            {
    248              // Try again later with a delay
    249              osal_start_timerEx( sapi_TaskID, RETRY_START_EVT, retryStartDelay );
   \                     ??zb_StartConfirm_0:
   \   000050                ; Setup parameters for call to function osal_start_timerEx
   \   000050   90....       MOV     DPTR,#retryStartDelay
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V0,A
   \   000056   E4           CLR     A
   \   000057   F5..         MOV     ?V1,A
   \   000059   F5..         MOV     ?V2,A
   \   00005B   F5..         MOV     ?V3,A
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000062   7A01         MOV     R2,#0x1
   \   000064   7B00         MOV     R3,#0x0
   \   000066   90....       MOV     DPTR,#sapi_TaskID
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006E   7404         MOV     A,#0x4
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   E9           MOV     A,R1
    250            }
    251          }
   \                     ??zb_StartConfirm_1:
   \   000074   7F04         MOV     R7,#0x4
   \   000076   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000079                REQUIRE P1DIR
   \   000079                REQUIRE P1SEL
   \   000079                REQUIRE _A_P1
    252          
    253          /******************************************************************************
    254           * @fn          zb_SendDataConfirm
    255           *
    256           * @brief       The zb_SendDataConfirm callback function is called by the
    257           *              ZigBee after a send data operation completes
    258           *
    259           * @param       handle - The handle identifying the data transmission.
    260           *              status - The status of the operation.
    261           *
    262           * @return      none
    263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    265          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    266            if( status == ZB_SUCCESS )
    267            {
    268            }
    269          }
   \   000000   02....       LJMP    ?BRET
    270          
    271          /******************************************************************************
    272           * @fn          zb_BindConfirm
    273           *
    274           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    275           *              after a bind operation completes.
    276           *
    277           * @param       commandId - The command ID of the binding being confirmed.
    278           *              status - The status of the bind operation.
    279           *
    280           * @return      none
    281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    283          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0,R1
    284            
    285            if( status == ZB_SUCCESS )
   \   000010   E5..         MOV     A,?V0
   \   000012   7049         JNZ     ??zb_BindConfirm_0
    286            {
    287              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   000014                ; Setup parameters for call to function HalLedSet
   \   000014   7A01         MOV     R2,#0x1
   \   000016   7902         MOV     R1,#0x2
   \   000018   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00001B   E9           MOV     A,R1
    288              
    289              uint8 pData[LOCK_CMD_LENGTH];
    290              pData[LOCK_CMD_OFFSET] = IDENTIFIER_COMMAND; 
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   74F0         MOV     A,#-0x10
   \   000024   F0           MOVX    @DPTR,A
    291              uint8 txOptions;
    292              zb_SendDataRequest( 0xFFFE, LOCK_CONTROL_CMD_ID, LOCK_CMD_LENGTH , pData, 0, txOptions, 0 );
                                                                                                  ^
Warning[Pe549]: variable "txOptions" is used before its value is set
   \   000025                ; Setup parameters for call to function zb_SendDataRequest
   \   000025   75..00       MOV     ?V1,#0x0
   \   000028   78..         MOV     R0,#?V1
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V1
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   75..00       MOV     ?V1,#0x0
   \   000038   78..         MOV     R0,#?V1
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003D   7403         MOV     A,#0x3
   \   00003F   12....       LCALL   ?XSTACK_DISP100_8
   \   000042   88..         MOV     ?V2,R0
   \   000044   89..         MOV     ?V3,R1
   \   000046   78..         MOV     R0,#?V2
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7901         MOV     R1,#0x1
   \   00004D   7C01         MOV     R4,#0x1
   \   00004F   7D00         MOV     R5,#0x0
   \   000051   7AFE         MOV     R2,#-0x2
   \   000053   7BFF         MOV     R3,#-0x1
   \   000055   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   000058   7405         MOV     A,#0x5
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
    293            }
    294          }
   \                     ??zb_BindConfirm_0:
   \   00005D   7401         MOV     A,#0x1
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   7F04         MOV     R7,#0x4
   \   000064   02....       LJMP    ?BANKED_LEAVE_XDATA
    295          
    296          /******************************************************************************
    297           * @fn          zb_AllowBindConfirm
    298           *
    299           * @brief       Indicates when another device attempted to bind to this device
    300           *
    301           * @param
    302           *
    303           * @return      none
    304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    306          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    307            zb_AllowBind( 0x00 );
   \   000009                ; Setup parameters for call to function zb_AllowBind
   \   000009   7900         MOV     R1,#0x0
   \   00000B   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    308            HalLedSet( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000E                ; Setup parameters for call to function HalLedSet
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   7904         MOV     R1,#0x4
   \   000012   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000015   E9           MOV     A,R1
    309            appState = APPSTATE_BOUND;
   \   000016   90....       MOV     DPTR,#appState
   \   000019   7402         MOV     A,#0x2
   \   00001B   F0           MOVX    @DPTR,A
    310          }
   \   00001C   7F01         MOV     R7,#0x1
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
    311          
    312          /******************************************************************************
    313           * @fn          zb_FindDeviceConfirm
    314           *
    315           * @brief       The zb_FindDeviceConfirm callback function is called by the
    316           *              ZigBee stack when a find device operation completes.
    317           *
    318           * @param       searchType - The type of search that was performed.
    319           *              searchKey - Value that the search was executed on.
    320           *              result - The result of the search.
    321           *
    322           * @return      none
    323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    324          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    325          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    326            (void)searchType;
    327            (void)searchKey;
    328            (void)result;
    329          }
   \   000000   02....       LJMP    ?BRET
    330          
    331          /******************************************************************************
    332           * @fn          zb_ReceiveDataIndication
    333           *
    334           * @brief       The zb_ReceiveDataIndication callback function is called
    335           *              asynchronously by the ZigBee stack to notify the application
    336           *              when data is received from a peer device.
    337           *
    338           * @param       source - The short address of the peer device that sent the data
    339           *              command - The commandId associated with the data
    340           *              len - The number of bytes in the pData parameter
    341           *              pData - The data sent by the peer device
    342           *
    343           * @return      none
    344           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    345          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    346          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   7402         MOV     A,#0x2
   \   000006   12....       LCALL   ?XSTACK_DISP0_8
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
    347            if(command == LOCK_STATUS_CMD_ID){
   \   000012   7403         MOV     A,#0x3
   \   000014   6C           XRL     A,R4
   \   000015   7003         JNZ     ??zb_ReceiveDataIndication_0
   \   000017   7400         MOV     A,#0x0
   \   000019   6D           XRL     A,R5
   \                     ??zb_ReceiveDataIndication_0:
   \   00001A   7016         JNZ     ??zb_ReceiveDataIndication_1
    348              uint8 lockState = (*pData != 0);
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6004         JZ      ??zb_ReceiveDataIndication_2
   \   00001F   7801         MOV     R0,#0x1
   \   000021   8002         SJMP    ??zb_ReceiveDataIndication_3
   \                     ??zb_ReceiveDataIndication_2:
   \   000023   7800         MOV     R0,#0x0
    349              MCU_IO_OUTPUT_PREP(1,2,lockState);
   \                     ??zb_ReceiveDataIndication_3:
   \   000025   53F4FB       ANL     0xf4,#0xfb
   \   000028   E8           MOV     A,R0
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002D   9292         MOV     0x90.2,C
   \   00002F   43FE04       ORL     0xfe,#0x4
    350            }
    351          }
   \                     ??zb_ReceiveDataIndication_1:
   \   000032   D083         POP     DPH
   \   000034   D082         POP     DPL
   \   000036   02....       LJMP    ?BRET
   \   000039                REQUIRE P1SEL
   \   000039                REQUIRE _A_P1
   \   000039                REQUIRE P1DIR
    352          
    353          /******************************************************************************
    354           * @fn          uartRxCB
    355           *
    356           * @brief       Callback function for UART
    357           *
    358           * @param       port - UART port
    359           *              event - UART event that caused callback
    360           *
    361           * @return      none
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    364          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    365            (void)port;
    366            (void)event;
    367          }
   \   000000   02....       LJMP    ?BRET
    368          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          void sendDoorCommand(uint8 state){
   \                     sendDoorCommand:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    370            if ( appState == APPSTATE_BOUND ){
   \   00000C   90....       MOV     DPTR,#appState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6402         XRL     A,#0x2
   \   000012   704F         JNZ     ??sendDoorCommand_0
    371                uint8 pData[LOCK_CMD_LENGTH];
    372                pData[LOCK_CMD_OFFSET] = (state > 0);
   \   000014   EE           MOV     A,R6
   \   000015   600B         JZ      ??sendDoorCommand_1
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   7401         MOV     A,#0x1
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8009         SJMP    ??sendDoorCommand_2
   \                     ??sendDoorCommand_1:
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   7400         MOV     A,#0x0
   \   00002A   F0           MOVX    @DPTR,A
    373                uint8 txOptions;
    374                zb_SendDataRequest( 0xFFFE, LOCK_CONTROL_CMD_ID, LOCK_CMD_LENGTH , pData, 0, txOptions, 0 );
                                                                                                    ^
Warning[Pe549]: variable "txOptions" is used before its value is set
   \                     ??sendDoorCommand_2:
   \   00002B                ; Setup parameters for call to function zb_SendDataRequest
   \   00002B   75..00       MOV     ?V0,#0x0
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000033   75..00       MOV     ?V0,#0x0
   \   000036   78..         MOV     R0,#?V0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003B   75..00       MOV     ?V0,#0x0
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?XSTACK_DISP100_8
   \   000048   88..         MOV     ?V0,R0
   \   00004A   89..         MOV     ?V1,R1
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7901         MOV     R1,#0x1
   \   000053   7C01         MOV     R4,#0x1
   \   000055   7D00         MOV     R5,#0x0
   \   000057   7AFE         MOV     R2,#-0x2
   \   000059   7BFF         MOV     R3,#-0x1
   \   00005B   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   00005E   7405         MOV     A,#0x5
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
    375              }
    376          }
   \                     ??sendDoorCommand_0:
   \   000063   7401         MOV     A,#0x1
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
   \   000068   7F02         MOV     R7,#0x2
   \   00006A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for retryStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sendDoorCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sendDoorCommand

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     25   sendDoorCommand
        0     16   -> zb_SendDataRequest
      0      0   uartRxCB
      0      9   zb_AllowBindConfirm
        0      9   -> HalLedSet
        0      9   -> zb_AllowBind
      0     18   zb_BindConfirm
        0     13   -> HalLedSet
        0     18   -> zb_SendDataRequest
      0      0   zb_FindDeviceConfirm
      0      9   zb_HandleKeys
        0      9   -> sendDoorCommand
      0      9   zb_HandleOsalEvent
        0      9   -> zb_StartRequest
      2      4   zb_ReceiveDataIndication
      0      0   zb_SendDataConfirm
      0     16   zb_StartConfirm
        0     12   -> HalLedSet
        0     16   -> osal_start_timerEx
        0     12   -> zb_AllowBind
        0     12   -> zb_BindDevice
        0     12   -> zb_GetDeviceInfo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for retryStartDelay>
       1  P1DIR
       1  P1SEL
       1  _A_P1
       1  appState
       2  parentShortAddr
       1  retryStartDelay
     109  sendDoorCommand
       6  sendDoorCommand::?relay
       3  uartRxCB
       6  uartRxCB::?relay
      33  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
     103  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
      37  zb_HandleKeys
       6  zb_HandleKeys::?relay
      29  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       2  zb_InCmdList
       2  zb_OutCmdList
      57  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
       3  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
     121  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 498 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  16 bytes in segment XDATA_ROM_C
   3 bytes in segment XDATA_Z
 
 559 bytes of CODE  memory
  16 bytes of CONST memory
   0 bytes of DATA  memory (+ 3 bytes shared)
   4 bytes of XDATA memory

Errors: none
Warnings: 2
