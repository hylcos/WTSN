###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                13/Mar/2016  22:57:58
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoRouter.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoRouter.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\DemoRouter.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\DemoRouter.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoRouter.c
      1          /**************************************************************************************************
      2            Filename:       DemoRouter.c
      3          
      4            Description:    Router application for the sensor demo utilizing the Simple API.
      5          
      6                            The sensor application binds to a gateway and will periodically
      7                            read temperature and supply voltage from the ADC and send report
      8                            towards the gateway node.
      9          
     10          
     11            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /******************************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "sapi.h"
     49          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     50          #include "hal_lcd.h"
     51          #include "hal_led.h"
     52          #include "hal_adc.h"
     53          #include "hal_mcu.h"
     54          #include "hal_uart.h"
     55          #include "OSAL_NV.h"
     56          #include "DemoApp.h"
     57          #include "APS.h"
     58          
     59          /******************************************************************************
     60           * CONSTANTS
     61           */
     62          #define REPORT_FAILURE_LIMIT                3
     63          #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
     64          
     65          // Application States
     66          #define APP_INIT                            0    // Initial state
     67          #define APP_START                           1    // Sensor has joined network
     68          #define APP_BIND                            2    // Sensor is in process of binding
     69          #define APP_REPORT                          4    // Sensor is in reporting state
     70          
     71          // Application osal event identifiers
     72          // Bit mask of events ( from 0x0000 to 0x00FF )
     73          #define MY_START_EVT                        0x0001
     74          #define MY_REPORT_EVT                       0x0002
     75          #define MY_FIND_COLLECTOR_EVT               0x0004
     76          
     77          // ADC definitions for CC2430/CC2530 from the hal_adc.c file
     78          #if defined (HAL_MCU_CC2530)
     79          #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
     80          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     81          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     82          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     83          #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
     84          #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
     85          #endif // HAL_MCU_CC2530
     86          
     87          /******************************************************************************
     88           * TYPEDEFS
     89           */
     90          
     91          /******************************************************************************
     92           * LOCAL VARIABLES
     93           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          static uint8  appState =          APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static uint8  reportState  =       FALSE;
   \                     reportState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          static uint8  sendingData  =       FALSE;
   \                     sendingData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          static uint8 reportFailureNr =    0;
   \                     reportFailureNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          static uint8 bindRetries =        0;
   \                     bindRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    100          static uint16 myReportPeriod =    5000;         // milliseconds
   \                     myReportPeriod:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myReportPeriod>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          static uint16 myBindRetryDelay =  2000;         // milliseconds
   \                     myBindRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myBindRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          static uint8 myStartRetryDelay =  10;           // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    103          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          static uint16 parentShortAddr;
   \                     parentShortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /******************************************************************************
    107           * GLOBAL VARIABLES
    108           */
    109          
    110          // Inputs and Outputs for Sensor device
    111          #define NUM_OUT_CMD_SENSOR        1
    112          #define NUM_IN_CMD_SENSOR         1
    113          
    114          // List of output and input commands for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    115          const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_OutCmdList:
   \   000000   0100         DW 1
    116          {
    117            LOCK_CONTROL_CMD_ID
    118          };
    119          

   \                                 In  segment XDATA_ROM_C, align 1
    120          const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
   \                     zb_InCmdList:
   \   000000   0300         DW 3
    121          {
    122            LOCK_STATUS_CMD_ID
    123          };
    124          // Define SimpleDescriptor for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    125          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0100         DW 1
   \   000005   01           DB 1
   \   000006   01           DB 1
   \   000007   ....         DW zb_InCmdList
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    126          {
    127            MY_ENDPOINT_ID,             //  Endpoint
    128            MY_PROFILE_ID,              //  Profile ID
    129            DEV_ID_SENSOR,              //  Device ID
    130            DEVICE_VERSION_SENSOR,      //  Device Version
    131            0,                          //  Reserved
    132            NUM_IN_CMD_SENSOR,          //  Number of Input Commands
    133            (cId_t *) zb_InCmdList,             //  Input Command List
    134            NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
    135            (cId_t *) zb_OutCmdList     //  Output Command List
    136          };
    137          
    138          
    139          /******************************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          void uartRxCB( uint8 port, uint8 event );
    144          static void sendReport(void);
    145          static int8 readTemp(void);
    146          static uint8 readVoltage(void);
    147          
    148          /*****************************************************************************
    149           * @fn          zb_HandleOsalEvent
    150           *
    151           * @brief       The zb_HandleOsalEvent function is called by the operating
    152           *              system when a task event is set
    153           *
    154           * @param       event - Bitmask containing the events that have been set
    155           *
    156           * @return      none
    157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    159          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    160            if( event & SYS_EVENT_MSG )
    161            {
    162            }
    163          
    164            if( event & ZB_ENTRY_EVENT )
   \   000009   EE           MOV     A,R6
   \   00000A   5400         ANL     A,#0x0
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   5410         ANL     A,#0x10
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   6003         JZ      ??zb_HandleOsalEvent_0
    165            {
    166              // Start the device
    167              zb_StartRequest();
   \   000015                ; Setup parameters for call to function zb_StartRequest
   \   000015   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    168            }
    169          
    170            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   000018   EE           MOV     A,R6
   \   000019   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001B   5003         JNC     ??zb_HandleOsalEvent_1
    171            {
    172              zb_StartRequest();
   \   00001D                ; Setup parameters for call to function zb_StartRequest
   \   00001D   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    173            }
    174          
    175            if ( event & MY_REPORT_EVT )
   \                     ??zb_HandleOsalEvent_1:
   \   000020   EE           MOV     A,R6
   \   000021   5402         ANL     A,#0x2
   \   000023   6031         JZ      ??zb_HandleOsalEvent_2
    176            {
    177              if ( appState == APP_REPORT )
   \   000025   90....       MOV     DPTR,#appState
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6404         XRL     A,#0x4
   \   00002B   7029         JNZ     ??zb_HandleOsalEvent_2
    178              {
    179                sendReport();
   \   00002D                ; Setup parameters for call to function sendReport
   \   00002D   12....       LCALL   `??sendReport::?relay`; Banked call to: sendReport
    180                osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
   \   000030                ; Setup parameters for call to function osal_start_timerEx
   \   000030   90....       MOV     DPTR,#myReportPeriod
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V1,A
   \   00003A   E4           CLR     A
   \   00003B   F5..         MOV     ?V2,A
   \   00003D   F5..         MOV     ?V3,A
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000044   7A02         MOV     R2,#0x2
   \   000046   7B00         MOV     R3,#0x0
   \   000048   90....       MOV     DPTR,#sapi_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   E9           MOV     A,R1
    181              }
    182            }
    183          
    184            if ( event & MY_FIND_COLLECTOR_EVT )
    185            {
    186             // appState = APP_BIND;
    187              // Find and bind to a collector device
    188              //zb_BindDevice( TRUE, DOOR_CMD_ID, (uint8 *)NULL );
    189            }
    190          }
   \                     ??zb_HandleOsalEvent_2:
   \   000056   7F04         MOV     R7,#0x4
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
    191          
    192          /******************************************************************************
    193           * @fn      zb_HandleKeys
    194           *
    195           * @brief   Handles all key events for this device.
    196           *
    197           * @param   shift - true if in shift/alt.
    198           * @param   keys - bit field for key events. Valid entries:
    199           *                 EVAL_SW4
    200           *                 EVAL_SW3
    201           *                 EVAL_SW2
    202           *                 EVAL_SW1
    203           *
    204           * @return  none
    205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    207          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    208            // Shift is used to make each button/switch dual purpose.
    209            if ( shift )
   \   00000E   EE           MOV     A,R6
   \   00000F   7066         JNZ     ??zb_HandleKeys_0
    210            {
    211              if ( keys & HAL_KEY_SW_1 )
    212              {
    213              }
    214              if ( keys & HAL_KEY_SW_2 )
    215              {
    216              }
    217              if ( keys & HAL_KEY_SW_3 )
    218              {
    219              }
    220              if ( keys & HAL_KEY_SW_4 )
    221              {
    222              }
    223            }
    224            else
    225            {
    226              if ( keys & HAL_KEY_SW_1 )
   \   000011   EF           MOV     A,R7
   \   000012   A2E0         MOV     C,0xE0 /* A   */.0
   \   000014   5049         JNC     ??zb_HandleKeys_1
    227              {
    228                if ( sendingData == TRUE ){
   \   000016   90....       MOV     DPTR,#sendingData
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6401         XRL     A,#0x1
   \   00001C   7041         JNZ     ??zb_HandleKeys_1
    229                  
    230                  uint8 pData[LOCK_CMD_LENGTH];
    231                  pData[LOCK_CMD_OFFSET] = 1;
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   7401         MOV     A,#0x1
   \   000026   F0           MOVX    @DPTR,A
    232                  uint8 txOptions;
    233                  zb_SendDataRequest( 0xFFFE, LOCK_CONTROL_CMD_ID, LOCK_CMD_LENGTH , pData, 0, txOptions, 0 );
                                                                                                      ^
Warning[Pe549]: variable "txOptions" is used before its value is set
   \   000027                ; Setup parameters for call to function zb_SendDataRequest
   \   000027   75..00       MOV     ?V0,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   75..00       MOV     ?V0,#0x0
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   75..00       MOV     ?V0,#0x0
   \   00003A   78..         MOV     R0,#?V0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?XSTACK_DISP100_8
   \   000044   88..         MOV     ?V0,R0
   \   000046   89..         MOV     ?V1,R1
   \   000048   78..         MOV     R0,#?V0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   7901         MOV     R1,#0x1
   \   00004F   7C01         MOV     R4,#0x1
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7AFE         MOV     R2,#-0x2
   \   000055   7BFF         MOV     R3,#-0x1
   \   000057   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   00005A   7405         MOV     A,#0x5
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
    234                  
    235                }
    236              }
    237              if ( keys & HAL_KEY_SW_2 )
   \                     ??zb_HandleKeys_1:
   \   00005F   EF           MOV     A,R7
   \   000060   A2E1         MOV     C,0xE0 /* A   */.1
   \   000062   5013         JNC     ??zb_HandleKeys_0
    238              {
    239                //HalLedBlink ( HAL_LED_2, 0, 50, 500 );
    240          
    241                appState = APP_BIND;
   \   000064   90....       MOV     DPTR,#appState
   \   000067   7402         MOV     A,#0x2
   \   000069   F0           MOVX    @DPTR,A
    242                zb_BindDevice( TRUE, LOCK_CONTROL_CMD_ID, (uint8 *)NULL );
   \   00006A                ; Setup parameters for call to function zb_BindDevice
   \   00006A   7C00         MOV     R4,#0x0
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A01         MOV     R2,#0x1
   \   000070   7B00         MOV     R3,#0x0
   \   000072   7901         MOV     R1,#0x1
   \   000074   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    243              }
    244              if ( keys & HAL_KEY_SW_3 )
    245              {
    246              }
    247              if ( keys & HAL_KEY_SW_4 )
    248              {
    249              }
    250            }
    251          }
   \                     ??zb_HandleKeys_0:
   \   000077   7401         MOV     A,#0x1
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007C   7F02         MOV     R7,#0x2
   \   00007E   02....       LJMP    ?BANKED_LEAVE_XDATA
    252          
    253          /******************************************************************************
    254           * @fn          zb_StartConfirm
    255           *
    256           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    257           *              after a start request operation completes
    258           *
    259           * @param       status - The status of the start operation.  Status of
    260           *                       ZB_SUCCESS indicates the start operation completed
    261           *                       successfully.  Else the status is an error code.
    262           *
    263           * @return      none
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    266          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    267             MCU_IO_DIR_OUTPUT_PREP(1, 2);
   \   000007   43FE04       ORL     0xfe,#0x4
    268             MCU_IO_OUTPUT_PREP(1,2,0);
   \   00000A   53F4FB       ANL     0xf4,#0xfb
   \   00000D   C292         CLR     0x90.2
   \   00000F   43FE04       ORL     0xfe,#0x4
    269             zb_AllowBind( 0xFF );
   \   000012                ; Setup parameters for call to function zb_AllowBind
   \   000012   79FF         MOV     R1,#-0x1
   \   000014   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    270            // If the device sucessfully started, change state to running
    271            if ( status == ZB_SUCCESS )
   \   000017   EE           MOV     A,R6
   \   000018   7043         JNZ     ??zb_StartConfirm_0
    272            {
    273              // Set LED 1 to indicate that node is operational on the network
    274              //HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
    275          
    276              // Change application state
    277              appState = APP_START;
   \   00001A   90....       MOV     DPTR,#appState
   \   00001D   7401         MOV     A,#0x1
   \   00001F   F0           MOVX    @DPTR,A
    278          
    279              // Set event to bind to a collector
    280              osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000020                ; Setup parameters for call to function osal_set_event
   \   000020   7A04         MOV     R2,#0x4
   \   000022   7B00         MOV     R3,#0x0
   \   000024   90....       MOV     DPTR,#sapi_TaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00002C   E9           MOV     A,R1
    281          
    282              // Store parent short address
    283              zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
   \   00002D                ; Setup parameters for call to function zb_GetDeviceInfo
   \   00002D   7A..         MOV     R2,#parentShortAddr & 0xff
   \   00002F   7B..         MOV     R3,#(parentShortAddr >> 8) & 0xff
   \   000031   7903         MOV     R1,#0x3
   \   000033   12....       LCALL   `??zb_GetDeviceInfo::?relay`; Banked call to: zb_GetDeviceInfo
    284          
    285              
    286              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   000036                ; Setup parameters for call to function HalLedSet
   \   000036   7A01         MOV     R2,#0x1
   \   000038   7901         MOV     R1,#0x1
   \   00003A   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00003D   E9           MOV     A,R1
    287              HalLedSet( HAL_LED_2, HAL_LED_MODE_BLINK );
   \   00003E                ; Setup parameters for call to function HalLedSet
   \   00003E   7A02         MOV     R2,#0x2
   \   000040   7902         MOV     R1,#0x2
   \   000042   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000045   E9           MOV     A,R1
    288              HalLedSet( HAL_LED_3, HAL_LED_MODE_BLINK );
   \   000046                ; Setup parameters for call to function HalLedSet
   \   000046   7A02         MOV     R2,#0x2
   \   000048   7904         MOV     R1,#0x4
   \   00004A   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00004D   E9           MOV     A,R1
    289              
    290              zb_BindDevice( TRUE, LOCK_CONTROL_CMD_ID, (uint8 *)NULL );
   \   00004E                ; Setup parameters for call to function zb_BindDevice
   \   00004E   7C00         MOV     R4,#0x0
   \   000050   7D00         MOV     R5,#0x0
   \   000052   7A01         MOV     R2,#0x1
   \   000054   7B00         MOV     R3,#0x0
   \   000056   7901         MOV     R1,#0x1
   \   000058   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
   \   00005B   8024         SJMP    ??zb_StartConfirm_1
    291            }
    292            else
    293            {
    294              // Try again later with a delay
    295              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   00005D                ; Setup parameters for call to function osal_start_timerEx
   \   00005D   90....       MOV     DPTR,#myStartRetryDelay
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F5..         MOV     ?V0,A
   \   000063   E4           CLR     A
   \   000064   F5..         MOV     ?V1,A
   \   000066   F5..         MOV     ?V2,A
   \   000068   F5..         MOV     ?V3,A
   \   00006A   78..         MOV     R0,#?V0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00006F   7A01         MOV     R2,#0x1
   \   000071   7B00         MOV     R3,#0x0
   \   000073   90....       MOV     DPTR,#sapi_TaskID
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00007B   7404         MOV     A,#0x4
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000080   E9           MOV     A,R1
    296            }
    297          }
   \                     ??zb_StartConfirm_1:
   \   000081   7F04         MOV     R7,#0x4
   \   000083   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000086                REQUIRE P1DIR
   \   000086                REQUIRE P1SEL
   \   000086                REQUIRE _A_P1
    298          
    299          /******************************************************************************
    300           * @fn          zb_SendDataConfirm
    301           *
    302           * @brief       The zb_SendDataConfirm callback function is called by the
    303           *              ZigBee after a send data operation completes
    304           *
    305           * @param       handle - The handle identifying the data transmission.
    306           *              status - The status of the operation.
    307           *
    308           * @return      none
    309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    312            if( status != ZB_SUCCESS )
   \   000009   EF           MOV     A,R7
   \   00000A   605E         JZ      ??zb_SendDataConfirm_0
    313            {
    314              if ( ++reportFailureNr >= REPORT_FAILURE_LIMIT )
   \   00000C   90....       MOV     DPTR,#reportFailureNr
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   2401         ADD     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   90....       MOV     DPTR,#reportFailureNr
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C3           CLR     C
   \   000018   9403         SUBB    A,#0x3
   \   00001A   4054         JC      ??zb_SendDataConfirm_1
    315              {
    316                 // Stop reporting
    317                 osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
   \   00001C                ; Setup parameters for call to function osal_stop_timerEx
   \   00001C   7A02         MOV     R2,#0x2
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#sapi_TaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000028   E9           MOV     A,R1
    318          
    319                 // After failure start reporting automatically when the device
    320                 // is binded to a new gateway
    321                 reportState = TRUE;
   \   000029   90....       MOV     DPTR,#reportState
   \   00002C   7401         MOV     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
    322          
    323                 // Delete previous binding
    324                 zb_BindDevice( FALSE, LOCK_CONTROL_CMD_ID, (uint8 *)NULL );
   \   00002F                ; Setup parameters for call to function zb_BindDevice
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A01         MOV     R2,#0x1
   \   000035   7B00         MOV     R3,#0x0
   \   000037   7900         MOV     R1,#0x0
   \   000039   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    325          
    326                // Try to bind a new gateway
    327                 osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \   00003C                ; Setup parameters for call to function osal_start_timerEx
   \   00003C   90....       MOV     DPTR,#myBindRetryDelay
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V1,A
   \   000046   E4           CLR     A
   \   000047   F5..         MOV     ?V2,A
   \   000049   F5..         MOV     ?V3,A
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000050   7A04         MOV     R2,#0x4
   \   000052   7B00         MOV     R3,#0x0
   \   000054   90....       MOV     DPTR,#sapi_TaskID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
    328                 reportFailureNr = 0;
   \   000062   90....       MOV     DPTR,#reportFailureNr
   \   000065   7400         MOV     A,#0x0
   \   000067   F0           MOVX    @DPTR,A
   \   000068   8006         SJMP    ??zb_SendDataConfirm_1
    329              }
    330            }
    331            // status == SUCCESS
    332            else
    333            {
    334              // Reset failure counter
    335              reportFailureNr = 0;
   \                     ??zb_SendDataConfirm_0:
   \   00006A   90....       MOV     DPTR,#reportFailureNr
   \   00006D   7400         MOV     A,#0x0
   \   00006F   F0           MOVX    @DPTR,A
    336            }
    337          }
   \                     ??zb_SendDataConfirm_1:
   \   000070   7F04         MOV     R7,#0x4
   \   000072   02....       LJMP    ?BANKED_LEAVE_XDATA
    338          
    339          /******************************************************************************
    340           * @fn          zb_BindConfirm
    341           *
    342           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    343           *              after a bind operation completes.
    344           *
    345           * @param       commandId - The command ID of the binding being confirmed.
    346           *              status - The status of the bind operation.
    347           *
    348           * @return      none
    349           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    350          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    351          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V4,R1
    352            
    353            if( status == ZB_SUCCESS )
   \   00000B   E5..         MOV     A,?V4
   \   00000D   7029         JNZ     ??zb_BindConfirm_0
    354            {
    355              
    356              appState = APP_REPORT;
   \   00000F   90....       MOV     DPTR,#appState
   \   000012   7404         MOV     A,#0x4
   \   000014   F0           MOVX    @DPTR,A
    357              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A01         MOV     R2,#0x1
   \   000017   7902         MOV     R1,#0x2
   \   000019   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00001C   E9           MOV     A,R1
    358              sendingData = TRUE;
   \   00001D   90....       MOV     DPTR,#sendingData
   \   000020   7401         MOV     A,#0x1
   \   000022   F0           MOVX    @DPTR,A
    359              
    360              // After failure reporting start automatically when the device
    361              // is binded to a new gateway
    362              if ( reportState )
   \   000023   90....       MOV     DPTR,#reportState
   \   000026   E0           MOVX    A,@DPTR
   \   000027   604A         JZ      ??zb_BindConfirm_1
    363              {
    364                // Start reporting
    365                osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   000029                ; Setup parameters for call to function osal_set_event
   \   000029   7A02         MOV     R2,#0x2
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   90....       MOV     DPTR,#sapi_TaskID
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000035   E9           MOV     A,R1
   \   000036   803B         SJMP    ??zb_BindConfirm_1
    366              }
    367            }
    368            else
    369            {
    370              if ( ++bindRetries >= 2 ) {
   \                     ??zb_BindConfirm_0:
   \   000038   90....       MOV     DPTR,#bindRetries
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2401         ADD     A,#0x1
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   90....       MOV     DPTR,#bindRetries
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C3           CLR     C
   \   000044   9402         SUBB    A,#0x2
   \   000046   4005         JC      ??zb_BindConfirm_2
    371                // Reset the system
    372                zb_SystemReset();
   \   000048                ; Setup parameters for call to function zb_SystemReset
   \   000048   12....       LCALL   `??zb_SystemReset::?relay`; Banked call to: zb_SystemReset
   \   00004B   8026         SJMP    ??zb_BindConfirm_1
    373              }
    374              else
    375              {
    376                osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \                     ??zb_BindConfirm_2:
   \   00004D                ; Setup parameters for call to function osal_start_timerEx
   \   00004D   90....       MOV     DPTR,#myBindRetryDelay
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V0,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V1,A
   \   000057   E4           CLR     A
   \   000058   F5..         MOV     ?V2,A
   \   00005A   F5..         MOV     ?V3,A
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000061   7A04         MOV     R2,#0x4
   \   000063   7B00         MOV     R3,#0x0
   \   000065   90....       MOV     DPTR,#sapi_TaskID
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006D   7404         MOV     A,#0x4
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000072   E9           MOV     A,R1
    377              }
    378            }
    379          }
   \                     ??zb_BindConfirm_1:
   \   000073   7F05         MOV     R7,#0x5
   \   000075   02....       LJMP    ?BANKED_LEAVE_XDATA
    380          
    381          /******************************************************************************
    382           * @fn          zb_AllowBindConfirm
    383           *
    384           * @brief       Indicates when another device attempted to bind to this device
    385           *
    386           * @param
    387           *
    388           * @return      none
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    391          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    392            zb_AllowBind( 0x00 );
   \   000009                ; Setup parameters for call to function zb_AllowBind
   \   000009   7900         MOV     R1,#0x0
   \   00000B   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    393            HalLedSet( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000E                ; Setup parameters for call to function HalLedSet
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   7904         MOV     R1,#0x4
   \   000012   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000015   E9           MOV     A,R1
    394            //MCU_IO_OUTPUT_PREP(1,2,1);
    395          }
   \   000016   7F01         MOV     R7,#0x1
   \   000018   02....       LJMP    ?BANKED_LEAVE_XDATA
    396          
    397          /******************************************************************************
    398           * @fn          zb_FindDeviceConfirm
    399           *
    400           * @brief       The zb_FindDeviceConfirm callback function is called by the
    401           *              ZigBee stack when a find device operation completes.
    402           *
    403           * @param       searchType - The type of search that was performed.
    404           *              searchKey - Value that the search was executed on.
    405           *              result - The result of the search.
    406           *
    407           * @return      none
    408           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    409          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    410          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    411            (void)searchType;
    412            (void)searchKey;
    413            (void)result;
    414          }
   \   000000   02....       LJMP    ?BRET
    415          
    416          /******************************************************************************
    417           * @fn          zb_ReceiveDataIndication
    418           *
    419           * @brief       The zb_ReceiveDataIndication callback function is called
    420           *              asynchronously by the ZigBee stack to notify the application
    421           *              when data is received from a peer device.
    422           *
    423           * @param       source - The short address of the peer device that sent the data
    424           *              command - The commandId associated with the data
    425           *              len - The number of bytes in the pData parameter
    426           *              pData - The data sent by the peer device
    427           *
    428           * @return      none
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    431          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   7402         MOV     A,#0x2
   \   000006   12....       LCALL   ?XSTACK_DISP0_8
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
    432            (void)source;
    433            (void)command;
    434            uint8 lockState = *pData;
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
    435            MCU_IO_OUTPUT_PREP(1,2,lockState);
   \   000014   53F4FB       ANL     0xf4,#0xfb
   \   000017   E8           MOV     A,R0
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001C   9292         MOV     0x90.2,C
   \   00001E   43FE04       ORL     0xfe,#0x4
    436          }
   \   000021   D083         POP     DPH
   \   000023   D082         POP     DPL
   \   000025   02....       LJMP    ?BRET
   \   000028                REQUIRE P1SEL
   \   000028                REQUIRE _A_P1
   \   000028                REQUIRE P1DIR
    437          
    438          /******************************************************************************
    439           * @fn          uartRxCB
    440           *
    441           * @brief       Callback function for UART
    442           *
    443           * @param       port - UART port
    444           *              event - UART event that caused callback
    445           *
    446           * @return      none
    447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    448          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    449          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    450            (void)port;
    451            (void)event;
    452          }
   \   000000   02....       LJMP    ?BRET
    453          
    454          /******************************************************************************
    455           * @fn          sendReport
    456           *
    457           * @brief       Send sensor report
    458           *
    459           * @param       none
    460           *
    461           * @return      none
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          static void sendReport(void)
   \                     sendReport:
    464          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    465            /*uint8 pData[SENSOR_REPORT_LENGTH];
    466            static uint8 reportNr = 0;
    467            uint8 txOptions;
    468          
    469            // Read and report temperature value
    470            pData[SENSOR_TEMP_OFFSET] = readTemp();
    471          
    472            // Read and report voltage value
    473            pData[SENSOR_VOLTAGE_OFFSET] = readVoltage();
    474          
    475            pData[SENSOR_PARENT_OFFSET] =  HI_UINT16(parentShortAddr);
    476            pData[SENSOR_PARENT_OFFSET + 1] =  LO_UINT16(parentShortAddr);
    477          
    478            // Set ACK request on each ACK_INTERVAL report
    479            // If a report failed, set ACK request on next report
    480            if ( ++reportNr < ACK_REQ_INTERVAL && reportFailureNr == 0 )
    481            {
    482              txOptions = AF_TX_OPTIONS_NONE;
    483            }
    484            else
    485            {
    486              txOptions = AF_MSG_ACK_REQUEST;
    487              reportNr = 0;
    488            }
    489            // Destination address 0xFFFE: Destination address is sent to previously
    490            // established binding for the commandId.
    491            zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, SENSOR_REPORT_LENGTH, pData, 0, txOptions, 0 );*/
    492          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myReportPeriod>`:
   \   000000   8813         DW 5000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myBindRetryDelay>`:
   \   000000   D007         DW 2000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sendReport::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sendReport
    493          
    494          /******************************************************************************
    495           * @fn          readTemp
    496           *
    497           * @brief       read temperature from ADC
    498           *
    499           * @param       none
    500           *
    501           * @return      temperature
    502           */
    503          static int8 readTemp(void)
                             ^
Warning[Pe177]: function "readTemp" was declared but never referenced
    504          {
    505            static uint16 voltageAtTemp22;
    506            static uint8 bCalibrate = TRUE; // Calibrate the first time the temp sensor is read
    507            uint16 value;
    508            int8 temp;
    509          
    510            #if defined (HAL_MCU_CC2530)
    511            /*
    512             * Use the ADC to read the temperature
    513             */
    514            value = HalReadTemp();
    515          
    516            // Use the 12 MSB of adcValue
    517            value >>= 4;
    518          
    519            /*
    520             * These parameters are typical values and need to be calibrated
    521             * See the datasheet for the appropriate chip for more details
    522             * also, the math below may not be very accurate
    523             */
    524            /* Assume ADC = 1480 at 25C and ADC = 4/C */
    525            #define VOLTAGE_AT_TEMP_25        1480
    526            #define TEMP_COEFFICIENT          4
    527          
    528            // Calibrate for 22C the first time the temp sensor is read.
    529            // This will assume that the demo is started up in temperature of 22C
    530            if ( bCalibrate ) {
    531              voltageAtTemp22 = value;
    532              bCalibrate = FALSE;
    533            }
    534          
    535            temp = 22 + ( (value - voltageAtTemp22) / TEMP_COEFFICIENT );
    536          
    537            // Set 0C as minimum temperature, and 100C as max
    538            if ( temp >= 100 )
    539            {
    540              return 100;
    541            }
    542            else if ( temp <= 0 ) {
    543              return 0;
    544            }
    545            else {
    546              return temp;
    547            }
    548            // Only CC2530 is supported
    549            #else
    550            return 0;
    551            #endif
    552          }
    553          
    554          /******************************************************************************
    555           * @fn          readVoltage
    556           *
    557           * @brief       read voltage from ADC
    558           *
    559           * @param       none
    560           *
    561           * @return      voltage
    562           */
    563          static uint8 readVoltage(void)
                              ^
Warning[Pe177]: function "readVoltage" was declared but never referenced
    564          {
    565            #if defined (HAL_MCU_CC2530)
    566            /*
    567             * Use the ADC to read the bus voltage
    568             */
    569            uint16 value = HalReadTemp();
    570          
    571            // value now contains measurement of Vdd/3
    572            // 0 indicates 0V and 32767 indicates 1.25V
    573            // voltage = (value*3*1.25)/32767 volts
    574            // we will multiply by this by 10 to allow units of 0.1 volts
    575            value = value >> 6;   // divide first by 2^6
    576            value = (uint16)(value * 37.5);
    577            value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
    578          
    579            return value;
    580            #else
    581            return 0;
    582            #endif // CC2530
    583          }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     12   sendReport
      0      0   uartRxCB
      0      9   zb_AllowBindConfirm
        0      9   -> HalLedSet
        0      9   -> zb_AllowBind
      0     17   zb_BindConfirm
        0     13   -> HalLedSet
        0     13   -> osal_set_event
        0     17   -> osal_start_timerEx
        0     13   -> zb_SystemReset
      0      0   zb_FindDeviceConfirm
      0     16   zb_HandleKeys
        0     11   -> zb_BindDevice
        0     16   -> zb_SendDataRequest
      0     16   zb_HandleOsalEvent
        0     16   -> osal_start_timerEx
        0     12   -> sendReport
        0     12   -> zb_StartRequest
      2      4   zb_ReceiveDataIndication
      0     16   zb_SendDataConfirm
        0     16   -> osal_start_timerEx
        0     12   -> osal_stop_timerEx
        0     12   -> zb_BindDevice
      0     16   zb_StartConfirm
        0     12   -> HalLedSet
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
        0     12   -> zb_AllowBind
        0     12   -> zb_BindDevice
        0     12   -> zb_GetDeviceInfo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for myBindRetryDelay>
       2  ?<Initializer for myReportPeriod>
       1  ?<Initializer for myStartRetryDelay>
       1  P1DIR
       1  P1SEL
       1  _A_P1
       1  appState
       1  bindRetries
       2  myBindRetryDelay
       2  myReportPeriod
       1  myStartRetryDelay
       2  parentShortAddr
       1  reportFailureNr
       1  reportState
       3  sendReport
       6  sendReport::?relay
       1  sendingData
       3  uartRxCB
       6  uartRxCB::?relay
      27  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
     120  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
     129  zb_HandleKeys
       6  zb_HandleKeys::?relay
      91  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       2  zb_InCmdList
       2  zb_OutCmdList
      40  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
     117  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
     134  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 667 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   5 bytes in segment XDATA_I
   5 bytes in segment XDATA_ID
  16 bytes in segment XDATA_ROM_C
   7 bytes in segment XDATA_Z
 
 732 bytes of CODE  memory
  16 bytes of CONST memory
   0 bytes of DATA  memory (+ 3 bytes shared)
  12 bytes of XDATA memory

Errors: none
Warnings: 3
