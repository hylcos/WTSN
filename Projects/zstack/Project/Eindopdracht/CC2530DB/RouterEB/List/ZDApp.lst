###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                16/Mar/2016  14:39:15
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00008000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x42, 0x61, 0x72, 0x74,
#        0x20, 0x65, 0x61, 0x20, 0x48, 0x79, 0x6C, 0x63, 0x6F, 0x20, 0x20,
#        0x20}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDApp.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\ZDApp.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\ZDApp.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2014-06-03 18:29:46 -0700 (Tue, 03 Jun 2014) $
      4            Revision:       $Revision: 38789 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          // Init ZDO, but hold and wait for application to start the joining or
     91          // forming network
     92          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     93          
     94          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     95            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     96          #endif
     97          
     98          #if !defined( BEACON_REQUEST_DELAY )
     99            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    100          #endif
    101          
    102          #if !defined( BEACON_REQ_DELAY_MASK )
    103            #define BEACON_REQ_DELAY_MASK       0x007F
    104          #endif
    105          
    106          #define MAX_RESUME_RETRY            3
    107          
    108          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    109          
    110          // Beacon Order Settings (see NLMEDE.h)
    111          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    112          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    113          
    114          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    115          // Additional counts to add to the frame counter when restoring from NV
    116          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    117          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    118          #endif
    119          
    120          // Leave control bits
    121          #define ZDAPP_LEAVE_CTRL_INIT 0
    122          #define ZDAPP_LEAVE_CTRL_SET  1
    123          #define ZDAPP_LEAVE_CTRL_RA   2
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          
    129          #if !defined ZDO_NV_SAVE_RFDs
    130          #define ZDO_NV_SAVE_RFDs  TRUE
    131          #endif
    132          
    133          // Delay time before updating NWK NV data to force fewer writes during high activity.
    134          #if ZDO_NV_SAVE_RFDs
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    136          #else
    137          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    138          #endif
    139          
    140          // Timeout value to process New Devices
    141          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    142          
    143          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    144          #if !defined MAX_PENDING_BIND_REQ
    145          #define MAX_PENDING_BIND_REQ 3
    146          #endif
    147          #endif
    148          
    149          /******************************************************************************
    150           * TYPEDEFS
    151           */
    152          typedef struct
    153          {
    154            void   *next;
    155            uint16 shortAddr;
    156            uint16 timeDelta;
    157          } ZDAppNewDevice_t;
    158          
    159          /*********************************************************************
    160           * GLOBAL VARIABLES
    161           */
    162          
    163          #if defined( LCD_SUPPORTED )
    164            uint8 MatchRsps = 0;
    165          #endif
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          
    181          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    185          
    186          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    188          #endif
    189          
    190          /*********************************************************************
    191           * EXTERNAL VARIABLES
    192           */
    193          
    194          /*********************************************************************
    195           * EXTERNAL FUNCTIONS
    196           */
    197          
    198          /*********************************************************************
    199           * LOCAL FUNCTIONS
    200           */
    201          
    202          void ZDApp_NetworkStartEvt( void );
    203          void ZDApp_DeviceAuthEvt( void );
    204          void ZDApp_SaveNetworkStateEvt( void );
    205          
    206          uint8 ZDApp_ReadNetworkRestoreState( void );
    207          uint8 ZDApp_RestoreNetworkState( void );
    208          void ZDAppDetermineDeviceType( void );
    209          void ZDApp_InitUserDesc( void );
    210          void ZDAppCheckForHoldKey( void );
    211          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    212          void ZDApp_ProcessNetworkJoin( void );
    213          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    214          uint8 ZDApp_RestoreNwkKey( void );
    215          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    216          
    217          void ZDApp_SecInit( uint8 state );
    218          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    219          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    220          
    221          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    222          
    223          void ZDApp_ResetTimerStart( uint16 delay );
    224          void ZDApp_ResetTimerCancel( void );
    225          void ZDApp_LeaveCtrlInit( void );
    226          void ZDApp_LeaveCtrlSet( uint8 ra );
    227          uint8 ZDApp_LeaveCtrlBypass( void );
    228          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    229          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    230                                  uint8 removeChildren );
    231          void ZDApp_NodeProfileSync( uint8 stackProfile );
    232          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    233          void ZDApp_RegisterCBs( void );
    234          void ZDApp_InitZdoCBFunc(void);
    235          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    236          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    237          void ZDApp_InitPendingBind( void );
    238          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    239          void ZDApp_AgeOutPendingBindEntry( void );
    240          #endif
    241          
    242          /*********************************************************************
    243           * LOCAL VARIABLES
    244           */
    245          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    246          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    247          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    248          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    249          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    250          
    251          #if defined( HOLD_AUTO_START )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    252            devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    253          #else
    254            devStates_t devState = DEV_INIT;
    255          #endif
    256          
    257          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    260                                  // to parent. Set to make the device do an Orphan scan.
    261          #else
    262            // Set the default to coodinator
    263            devStartModes_t devStartMode = MODE_HARD;
    264          #endif
    265          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    266          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    267          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    268          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    269          {
    270            ZDO_EP,
    271            &ZDAppTaskID,
    272            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    273            (afNetworkLatencyReq_t)0            // No Network Latency req
    274          };
    275          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    276          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    277          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    278          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    279          
    280          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    281          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    282          
    283          /*********************************************************************
    284           * @fn      ZDApp_Init
    285           *
    286           * @brief   ZDApp Initialization function.
    287           *
    288           * @param   task_id - ZDApp Task ID
    289           *
    290           * @return  None
    291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    292          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    294            // Save the task ID
    295            ZDAppTaskID = task_id;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   F0           MOVX    @DPTR,A
    296          
    297            // Initialize the ZDO global device short address storage
    298            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000C   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    299            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000012   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000015   74FE         MOV     A,#-0x2
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   74FF         MOV     A,#-0x1
   \   00001B   F0           MOVX    @DPTR,A
    300            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   00001C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001C   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001F   8A..         MOV     ?V2,R2
   \   000021   8B..         MOV     ?V3,R3
   \   000023   85....       MOV     ?V0,?V2
   \   000026   85....       MOV     ?V1,?V3
    301          
    302            // Check for manual "Hold Auto Start"
    303            ZDAppCheckForHoldKey();
   \   000029                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   000029   12....       LCALL   `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
    304          
    305            // Initialize ZDO items and setup the device - type of device to create.
    306            ZDO_Init();
   \   00002C                ; Setup parameters for call to function ZDO_Init
   \   00002C   12....       LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
    307          
    308            // Register the endpoint description with the AF
    309            // This task doesn't have a Simple description, but we still need
    310            // to register the endpoint.
    311            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00002F                ; Setup parameters for call to function afRegister
   \   00002F   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000031   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000033   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
   \   000036   E9           MOV     A,R1
    312          
    313          #if defined( ZDO_USERDESC_RESPONSE )
    314            ZDApp_InitUserDesc();
    315          #endif // ZDO_USERDESC_RESPONSE
    316          
    317            // Start the device?
    318            if ( devState != DEV_HOLD )
   \   000037   90....       MOV     DPTR,#devState
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   600A         JZ      ??ZDApp_Init_0
    319            {
    320              ZDOInitDevice( 0 );
   \   00003D                ; Setup parameters for call to function ZDOInitDevice
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000044   E9           MOV     A,R1
   \   000045   8015         SJMP    ??ZDApp_Init_1
    321            }
    322            else
    323            {
    324              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   000047                ; Setup parameters for call to function ZDOInitDevice
   \   000047   7AFF         MOV     R2,#-0x1
   \   000049   7BFF         MOV     R3,#-0x1
   \   00004B   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   00004E   E9           MOV     A,R1
    325              // Blink LED to indicate HOLD_START
    326              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   00004F                ; Setup parameters for call to function HalLedBlink
   \   00004F   7CF4         MOV     R4,#-0xc
   \   000051   7D01         MOV     R5,#0x1
   \   000053   7B32         MOV     R3,#0x32
   \   000055   7A00         MOV     R2,#0x0
   \   000057   7908         MOV     R1,#0x8
   \   000059   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    327            }
    328          
    329            // Initialize the ZDO callback function pointers zdoCBFunc[]
    330            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00005C                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00005C   12....       LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    331          
    332            ZDApp_RegisterCBs();
   \   00005F                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00005F   12....       LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    333          
    334          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    335          #if defined ( REFLECTOR )
    336            ZDApp_InitPendingBind();
   \   000062                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000062   12....       LCALL   `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
    337          #endif
    338          #endif
    339          } /* ZDApp_Init() */
   \   000065   7F04         MOV     R7,#0x4
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
    340          
    341          /*********************************************************************
    342           * @fn          ZDApp_SecInit
    343           *
    344           * @brief       ZDApp initialize security.
    345           *
    346           * @param       state - device initialization state
    347           *
    348           * @return      none
    349           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    350          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    351          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
    352            uint8 zgPreConfigKey[SEC_KEY_LEN];
    353          
    354            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   00000C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   700C         JNZ     ??ZDApp_SecInit_0
    355            {
    356              // Set the Trust Center bit
    357              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
   \   000012   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   4401         ORL     A,#0x1
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   4400         ORL     A,#0x0
   \   00001D   F0           MOVX    @DPTR,A
    358            }
    359          
    360            // Initialize ZigBee Device Security Manager
    361            ZDSecMgrInit(state);
   \                     ??ZDApp_SecInit_0:
   \   00001E                ; Setup parameters for call to function ZDSecMgrInit
   \   00001E   A9..         MOV     R1,?V0
   \   000020   12....       LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    362          
    363            if ( ZG_SECURE_ENABLED )
    364            {
    365              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   000023   E5..         MOV     A,?V0
   \   000025   6057         JZ      ??ZDApp_SecInit_1
    366              {
    367                nwkFrameCounter = 0;
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7E00         MOV     R6,#0x0
   \   00002D   7F00         MOV     R7,#0x0
   \   00002F   90....       MOV     DPTR,#nwkFrameCounter
   \   000032   EC           MOV     A,R4
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   ED           MOV     A,R5
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   EE           MOV     A,R6
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   EF           MOV     A,R7
   \   00003C   F0           MOVX    @DPTR,A
    368          
    369                if( _NIB.nwkKeyLoaded == FALSE )
   \   00003D   90....       MOV     DPTR,#_NIB + 61
   \   000040   E0           MOVX    A,@DPTR
   \   000041   703B         JNZ     ??ZDApp_SecInit_1
    370                {
    371                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    372                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000043   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000046   E0           MOVX    A,@DPTR
   \   000047   600E         JZ      ??ZDApp_SecInit_2
   \   000049   90....       MOV     DPTR,#zgSecurityMode
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6401         XRL     A,#0x1
   \   00004F   702D         JNZ     ??ZDApp_SecInit_1
   \   000051   90....       MOV     DPTR,#zgPreConfigKeys
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6027         JZ      ??ZDApp_SecInit_1
    373                  {
    374                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \                     ??ZDApp_SecInit_2:
   \   000057                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000057   AC..         MOV     R4,?XSP + 0
   \   000059   AD..         MOV     R5,?XSP + 1
   \   00005B   7A62         MOV     R2,#0x62
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   \   000062   E9           MOV     A,R1
    375                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   000063                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000063   7900         MOV     R1,#0x0
   \   000065   AA..         MOV     R2,?XSP + 0
   \   000067   AB..         MOV     R3,?XSP + 1
   \   000069   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    376                      SSP_SwitchNwkKey( 0 );
   \   00006C                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00006C   7900         MOV     R1,#0x0
   \   00006E   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    377          
    378                      // clear local copy of key
    379                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000071                ; Setup parameters for call to function osal_memset
   \   000071   7C10         MOV     R4,#0x10
   \   000073   7D00         MOV     R5,#0x0
   \   000075   7900         MOV     R1,#0x0
   \   000077   AA..         MOV     R2,?XSP + 0
   \   000079   AB..         MOV     R3,?XSP + 1
   \   00007B   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    380                  }
    381                }
    382              }
    383          
    384              // clean the new devices list when Security module is initialized
    385              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_1:
   \   00007E   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   E8           MOV     A,R0
   \   000087   49           ORL     A,R1
   \   000088   6039         JZ      ??ZDApp_SecInit_3
    386              {
    387                ZDAppNewDevice_t *pNewDeviceNext;
    388          
    389                while ( ZDApp_NewDeviceList )
   \                     ??ZDApp_SecInit_4:
   \   00008A   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F8           MOV     R0,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   E8           MOV     A,R0
   \   000093   49           ORL     A,R1
   \   000094   602D         JZ      ??ZDApp_SecInit_3
    390                {
    391                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   000096   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F8           MOV     R0,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F583         MOV     DPH,A
   \   00009F   8882         MOV     DPL,R0
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F8           MOV     R0,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   E8           MOV     A,R0
   \   0000A7   FE           MOV     R6,A
   \   0000A8   E9           MOV     A,R1
   \   0000A9   FF           MOV     R7,A
    392                  osal_mem_free( ZDApp_NewDeviceList );
   \   0000AA                ; Setup parameters for call to function osal_mem_free
   \   0000AA   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   FA           MOV     R2,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   FB           MOV     R3,A
   \   0000B2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    393                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   0000B5   EE           MOV     A,R6
   \   0000B6   F8           MOV     R0,A
   \   0000B7   EF           MOV     A,R7
   \   0000B8   F9           MOV     R1,A
   \   0000B9   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   0000BC   E8           MOV     A,R0
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E9           MOV     A,R1
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   80C7         SJMP    ??ZDApp_SecInit_4
    394                }
    395              }
    396            }
    397          }
   \                     ??ZDApp_SecInit_3:
   \   0000C3   7410         MOV     A,#0x10
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C8   7F01         MOV     R7,#0x1
   \   0000CA   02....       LJMP    ?BANKED_LEAVE_XDATA
    398          
    399          /*********************************************************************
    400           * @fn      ZDApp_event_loop()
    401           *
    402           * @brief   Main event loop for Zigbee device objects task. This function
    403           *          should be called at periodic intervals.
    404           *
    405           * @param   task_id - Task ID
    406           * @param   events  - Bitmap of events
    407           *
    408           * @return  none
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    412            uint8 *msg_ptr;
    413          
    414            if ( events & SYS_EVENT_MSG )
   \   00000B   EE           MOV     A,R6
   \   00000C   5400         ANL     A,#0x0
   \   00000E   F8           MOV     R0,A
   \   00000F   EF           MOV     A,R7
   \   000010   5480         ANL     A,#0x80
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   6034         JZ      ??ZDApp_event_loop_0
    415            {
    416              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
   \                     ??ZDApp_event_loop_1:
   \   000017                ; Setup parameters for call to function osal_msg_receive
   \   000017   90....       MOV     DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00001F   8A..         MOV     ?V4,R2
   \   000021   8B..         MOV     ?V5,R3
   \   000023   A8..         MOV     R0,?V4
   \   000025   A9..         MOV     R1,?V5
   \   000027   88..         MOV     ?V0,R0
   \   000029   89..         MOV     ?V1,R1
   \   00002B   E8           MOV     A,R0
   \   00002C   49           ORL     A,R1
   \   00002D   6011         JZ      ??ZDApp_event_loop_2
    417              {
    418                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
   \   00002F                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   00002F   AA..         MOV     R2,?V0
   \   000031   AB..         MOV     R3,?V1
   \   000033   12....       LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
    419          
    420                // Release the memory
    421                osal_msg_deallocate( msg_ptr );
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0
   \   000038   AB..         MOV     R3,?V1
   \   00003A   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00003D   E9           MOV     A,R1
   \   00003E   80D7         SJMP    ??ZDApp_event_loop_1
    422              }
    423          
    424              // Return unprocessed events
    425              return (events ^ SYS_EVENT_MSG);
   \                     ??ZDApp_event_loop_2:
   \   000040   EE           MOV     A,R6
   \   000041   6400         XRL     A,#0x0
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   6480         XRL     A,#0x80
   \   000047   FB           MOV     R3,A
   \   000048   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    426            }
    427          
    428            if ( events & ZDO_NETWORK_INIT )
   \                     ??ZDApp_event_loop_0:
   \   00004B   EE           MOV     A,R6
   \   00004C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004E   5031         JNC     ??ZDApp_event_loop_4
    429            {
    430              // Initialize apps and start the network
    431              devState = DEV_INIT;
   \   000050   90....       MOV     DPTR,#devState
   \   000053   7401         MOV     A,#0x1
   \   000055   F0           MOVX    @DPTR,A
    432              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000056                ; Setup parameters for call to function osal_set_event
   \   000056   7A10         MOV     R2,#0x10
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   90....       MOV     DPTR,#ZDAppTaskID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000062   E9           MOV     A,R1
    433          
    434              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    435                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000063                ; Setup parameters for call to function ZDO_StartDevice
   \   000063   7C0F         MOV     R4,#0xf
   \   000065   7B0F         MOV     R3,#0xf
   \   000067   90....       MOV     DPTR,#devStartMode
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   5407         ANL     A,#0x7
   \   000072   F9           MOV     R1,A
   \   000073   12....       LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    436          
    437              // Return unprocessed events
    438              return (events ^ ZDO_NETWORK_INIT);
   \   000076   EE           MOV     A,R6
   \   000077   6401         XRL     A,#0x1
   \   000079   FA           MOV     R2,A
   \   00007A   EF           MOV     A,R7
   \   00007B   6400         XRL     A,#0x0
   \   00007D   FB           MOV     R3,A
   \   00007E   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    439            }
    440          
    441            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_event_loop_4:
   \   000081   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6008         JZ      ??ZDApp_event_loop_5
   \   000087   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   6401         XRL     A,#0x1
   \   00008D   7049         JNZ     ??ZDApp_event_loop_6
    442            {
    443              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_5:
   \   00008F   EE           MOV     A,R6
   \   000090   5402         ANL     A,#0x2
   \   000092   600E         JZ      ??ZDApp_event_loop_7
    444              {
    445                ZDApp_NetworkStartEvt();
   \   000094                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   000094   12....       LCALL   `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
    446          
    447                // Return unprocessed events
    448                return (events ^ ZDO_NETWORK_START);
   \   000097   EE           MOV     A,R6
   \   000098   6402         XRL     A,#0x2
   \   00009A   FA           MOV     R2,A
   \   00009B   EF           MOV     A,R7
   \   00009C   6400         XRL     A,#0x0
   \   00009E   FB           MOV     R3,A
   \   00009F   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    449              }
    450          
    451              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_7:
   \   0000A2   EE           MOV     A,R6
   \   0000A3   5420         ANL     A,#0x20
   \   0000A5   6031         JZ      ??ZDApp_event_loop_6
    452              {
    453                if ( nwkStatus == ZSuccess )
   \   0000A7   90....       MOV     DPTR,#nwkStatus
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   7013         JNZ     ??ZDApp_event_loop_8
    454                {
    455                  if ( devState == DEV_END_DEVICE )
   \   0000AD   90....       MOV     DPTR,#devState
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   6406         XRL     A,#0x6
   \   0000B3   7006         JNZ     ??ZDApp_event_loop_9
    456                    devState = DEV_ROUTER;
   \   0000B5   90....       MOV     DPTR,#devState
   \   0000B8   7407         MOV     A,#0x7
   \   0000BA   F0           MOVX    @DPTR,A
    457          
    458                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_9:
   \   0000BB                ; Setup parameters for call to function osal_pwrmgr_device
   \   0000BB   7900         MOV     R1,#0x0
   \   0000BD   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    459                }
    460                else
    461                {
    462                  // remain as end device
    463                }
    464                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_8:
   \   0000C0                ; Setup parameters for call to function osal_set_event
   \   0000C0   7A10         MOV     R2,#0x10
   \   0000C2   7B00         MOV     R3,#0x0
   \   0000C4   90....       MOV     DPTR,#ZDAppTaskID
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000CC   E9           MOV     A,R1
    465          
    466                // Return unprocessed events
    467                return (events ^ ZDO_ROUTER_START);
   \   0000CD   EE           MOV     A,R6
   \   0000CE   6420         XRL     A,#0x20
   \   0000D0   FA           MOV     R2,A
   \   0000D1   EF           MOV     A,R7
   \   0000D2   6400         XRL     A,#0x0
   \   0000D4   FB           MOV     R3,A
   \   0000D5   02....       LJMP    ??ZDApp_event_loop_3 & 0xFFFF
    468              }
    469            }
    470          
    471            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   0000D8   EE           MOV     A,R6
   \   0000D9   5410         ANL     A,#0x10
   \   0000DB   6032         JZ      ??ZDApp_event_loop_10
    472            {
    473              ZDO_UpdateNwkStatus( devState );
   \   0000DD                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   0000DD   90....       MOV     DPTR,#devState
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F9           MOV     R1,A
   \   0000E2   12....       LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    474          
    475              // At start up, do one MTO route discovery if the device is a concentrator
    476              if ( zgConcentratorEnable == TRUE )
   \   0000E5   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   6401         XRL     A,#0x1
   \   0000EB   7018         JNZ     ??ZDApp_event_loop_11
    477              {
    478                // Start next event
    479                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000ED                ; Setup parameters for call to function osal_start_timerEx
   \   0000ED   90....       MOV     DPTR,#__Constant_64
   \   0000F0   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000F3   7A00         MOV     R2,#0x0
   \   0000F5   7B08         MOV     R3,#0x8
   \   0000F7   90....       MOV     DPTR,#NWK_TaskID
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000FF   7404         MOV     A,#0x4
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
   \   000104   E9           MOV     A,R1
    480              }
    481          
    482              // Return unprocessed events
    483              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_11:
   \   000105   EE           MOV     A,R6
   \   000106   6410         XRL     A,#0x10
   \   000108   FA           MOV     R2,A
   \   000109   EF           MOV     A,R7
   \   00010A   6400         XRL     A,#0x0
   \   00010C   FB           MOV     R3,A
   \   00010D   805A         SJMP    ??ZDApp_event_loop_3
    484            }
    485          
    486            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_10:
   \   00010F   EE           MOV     A,R6
   \   000110   5408         ANL     A,#0x8
   \   000112   600A         JZ      ??ZDApp_event_loop_12
    487            {
    488              // User defined logic
    489          
    490              // Return unprocessed events
    491              return (events ^ ZDO_COMMAND_CNF);
   \   000114   EE           MOV     A,R6
   \   000115   6408         XRL     A,#0x8
   \   000117   FA           MOV     R2,A
   \   000118   EF           MOV     A,R7
   \   000119   6400         XRL     A,#0x0
   \   00011B   FB           MOV     R3,A
   \   00011C   804B         SJMP    ??ZDApp_event_loop_3
    492            }
    493          
    494            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_12:
   \   00011E   EE           MOV     A,R6
   \   00011F   5400         ANL     A,#0x0
   \   000121   F8           MOV     R0,A
   \   000122   EF           MOV     A,R7
   \   000123   5401         ANL     A,#0x1
   \   000125   F9           MOV     R1,A
   \   000126   E8           MOV     A,R0
   \   000127   49           ORL     A,R1
   \   000128   600D         JZ      ??ZDApp_event_loop_13
    495            {
    496              ZDApp_SaveNetworkStateEvt();
   \   00012A                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   00012A   12....       LCALL   `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    497          
    498              // Return unprocessed events
    499              return (events ^ ZDO_NWK_UPDATE_NV);
   \   00012D   EE           MOV     A,R6
   \   00012E   6400         XRL     A,#0x0
   \   000130   FA           MOV     R2,A
   \   000131   EF           MOV     A,R7
   \   000132   6401         XRL     A,#0x1
   \   000134   FB           MOV     R3,A
   \   000135   8032         SJMP    ??ZDApp_event_loop_3
    500            }
    501          
    502            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_13:
   \   000137   EE           MOV     A,R6
   \   000138   5404         ANL     A,#0x4
   \   00013A   600B         JZ      ??ZDApp_event_loop_14
    503            {
    504          #ifdef ZBA_FALLBACK_NWKKEY
    505              if ( devState == DEV_END_DEVICE_UNAUTH )
    506              {
    507                ZDSecMgrFallbackNwkKey();
    508              }
    509              else
    510          #endif
    511              {
    512                // Set the NV startup option to force a "new" join.
    513                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00013C                ; Setup parameters for call to function zgWriteStartupOptions
   \   00013C   7A02         MOV     R2,#0x2
   \   00013E   79FF         MOV     R1,#-0x1
   \   000140   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   000143   E9           MOV     A,R1
    514          
    515                // The device has been in the UNAUTH state, so reset
    516                // Note: there will be no return from this call
    517                SystemResetSoft();
   \   000144                ; Setup parameters for call to function Onboard_soft_reset
   \   000144   12....       LCALL   Onboard_soft_reset & 0xFFFF
    518              }
    519            }
    520          
    521          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    522            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_14:
   \   000147   EE           MOV     A,R6
   \   000148   5400         ANL     A,#0x0
   \   00014A   F8           MOV     R0,A
   \   00014B   EF           MOV     A,R7
   \   00014C   5410         ANL     A,#0x10
   \   00014E   F9           MOV     R1,A
   \   00014F   E8           MOV     A,R0
   \   000150   49           ORL     A,R1
   \   000151   600D         JZ      ??ZDApp_event_loop_15
    523            {
    524          #if defined ( REFLECTOR )
    525              ZDApp_AgeOutPendingBindEntry();
   \   000153                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   000153   12....       LCALL   `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
    526          #endif
    527              // Return unprocessed events
    528              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   000156   EE           MOV     A,R6
   \   000157   6400         XRL     A,#0x0
   \   000159   FA           MOV     R2,A
   \   00015A   EF           MOV     A,R7
   \   00015B   6410         XRL     A,#0x10
   \   00015D   FB           MOV     R3,A
   \   00015E   8009         SJMP    ??ZDApp_event_loop_3
    529            }
    530          #endif
    531          
    532            if ( ZG_SECURE_ENABLED )
    533            {
    534              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_15:
   \   000160                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   000160   EE           MOV     A,R6
   \   000161   FA           MOV     R2,A
   \   000162   EF           MOV     A,R7
   \   000163   FB           MOV     R3,A
   \   000164   A9..         MOV     R1,?V2
   \   000166   12....       LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
   \                     ??ZDApp_event_loop_3:
   \   000169   7F06         MOV     R7,#0x6
   \   00016B   02....       LJMP    ?BANKED_LEAVE_XDATA
    535            }
    536            else
    537            {
    538              // Discard or make more handlers
    539              return 0;
    540            }
    541          }
    542          
    543          /*********************************************************************
    544           * @fn      ZDApp_ProcessSecEvent()
    545           *
    546           * @brief   Process incoming security events.
    547           *
    548           * @param   task_id - Task ID
    549           * @param   events  - Bitmap of events
    550           *
    551           * @return  none
    552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    553          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    554          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V8,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    555            (void)task_id;  // Intentionally unreferenced parameter
    556          
    557            if ( ZSTACK_ROUTER_BUILD )
   \   00000B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   600B         JZ      ??ZDApp_ProcessSecEvent_0
   \   000011   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6401         XRL     A,#0x1
   \   000017   6003         JZ      $+5
   \   000019   02....       LJMP    ??ZDApp_ProcessSecEvent_1 & 0xFFFF
    558            {
    559              if ( events & ZDO_NEW_DEVICE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   00001C   EE           MOV     A,R6
   \   00001D   5440         ANL     A,#0x40
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??ZDApp_ProcessSecEvent_1 & 0xFFFF
    560              {
    561                // process the new device event
    562                if ( ZDApp_NewDeviceList )
   \   000024   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   49           ORL     A,R1
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??ZDApp_ProcessSecEvent_2 & 0xFFFF
    563                {
    564                  ZDAppNewDevice_t *pNewDevice;
    565                  uint16 timeDelta;
    566          
    567                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
   \   000033                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000033   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F583         MOV     DPH,A
   \   00003C   8882         MOV     DPL,R0
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FA           MOV     R2,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
   \   000048   E9           MOV     A,R1
   \   000049   F5..         MOV     ?V4,A
    568          
    569                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   00004B   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F583         MOV     DPH,A
   \   000054   8882         MOV     DPL,R0
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F8           MOV     R0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   88..         MOV     ?V0,R0
   \   00005D   89..         MOV     ?V1,R1
    570                  osal_mem_free( ZDApp_NewDeviceList );
   \   00005F                ; Setup parameters for call to function osal_mem_free
   \   00005F   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    571                  ZDApp_NewDeviceList = pNewDevice;
   \   00006A   A8..         MOV     R0,?V0
   \   00006C   A9..         MOV     R1,?V1
   \   00006E   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000071   E8           MOV     A,R0
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   E9           MOV     A,R1
   \   000075   F0           MOVX    @DPTR,A
    572          
    573                  if ( pNewDevice )
   \   000076   E5..         MOV     A,?V0
   \   000078   45..         ORL     A,?V1
   \   00007A   6069         JZ      ??ZDApp_ProcessSecEvent_2
    574                  {
    575                    timeDelta = pNewDevice->timeDelta;
   \   00007C   85..82       MOV     DPL,?V0
   \   00007F   85..83       MOV     DPH,?V1
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F5..         MOV     ?V2,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F5..         MOV     ?V3,A
    576                    pNewDevice = pNewDevice->next;
   \   00008D   85..82       MOV     DPL,?V0
   \   000090   85..83       MOV     DPH,?V1
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F5..         MOV     ?V0,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F5..         MOV     ?V1,A
    577          
    578                    while ( pNewDevice )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   00009A   E5..         MOV     A,?V0
   \   00009C   45..         ORL     A,?V1
   \   00009E   6023         JZ      ??ZDApp_ProcessSecEvent_4
    579                    {
    580                      pNewDevice->timeDelta -= timeDelta;
   \   0000A0   85..82       MOV     DPL,?V0
   \   0000A3   85..83       MOV     DPH,?V1
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   C3           CLR     C
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   95..         SUBB    A,?V2
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   95..         SUBB    A,?V3
   \   0000B3   F0           MOVX    @DPTR,A
    581                      pNewDevice = pNewDevice->next;
   \   0000B4   85..82       MOV     DPL,?V0
   \   0000B7   85..83       MOV     DPH,?V1
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F5..         MOV     ?V0,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F5..         MOV     ?V1,A
   \   0000C1   80D7         SJMP    ??ZDApp_ProcessSecEvent_3
    582                    }
    583          
    584                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
   \                     ??ZDApp_ProcessSecEvent_4:
   \   0000C3                ; Setup parameters for call to function osal_start_timerEx
   \   0000C3   85....       MOV     ?V4,?V2
   \   0000C6   85....       MOV     ?V5,?V3
   \   0000C9   E4           CLR     A
   \   0000CA   F5..         MOV     ?V6,A
   \   0000CC   F5..         MOV     ?V7,A
   \   0000CE   78..         MOV     R0,#?V4
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000D3   7A40         MOV     R2,#0x40
   \   0000D5   7B00         MOV     R3,#0x0
   \   0000D7   90....       MOV     DPTR,#ZDAppTaskID
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F9           MOV     R1,A
   \   0000DC   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000DF   7404         MOV     A,#0x4
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   E9           MOV     A,R1
    585                  }
    586                }
    587          
    588                // Return unprocessed events
    589                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_2:
   \   0000E5   EE           MOV     A,R6
   \   0000E6   6440         XRL     A,#0x40
   \   0000E8   FA           MOV     R2,A
   \   0000E9   EF           MOV     A,R7
   \   0000EA   6400         XRL     A,#0x0
   \   0000EC   FB           MOV     R3,A
   \   0000ED   805E         SJMP    ??ZDApp_ProcessSecEvent_5
    590              }
    591            }
    592          
    593            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_1:
   \   0000EF   EE           MOV     A,R6
   \   0000F0   5480         ANL     A,#0x80
   \   0000F2   600D         JZ      ??ZDApp_ProcessSecEvent_6
    594            {
    595              ZDApp_DeviceAuthEvt();
   \   0000F4                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   0000F4   12....       LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    596          
    597              // Return unprocessed events
    598              return (events ^ ZDO_DEVICE_AUTH);
   \   0000F7   EE           MOV     A,R6
   \   0000F8   6480         XRL     A,#0x80
   \   0000FA   FA           MOV     R2,A
   \   0000FB   EF           MOV     A,R7
   \   0000FC   6400         XRL     A,#0x0
   \   0000FE   FB           MOV     R3,A
   \   0000FF   804C         SJMP    ??ZDApp_ProcessSecEvent_5
    599            }
    600          
    601            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_6:
   \   000101   EE           MOV     A,R6
   \   000102   5400         ANL     A,#0x0
   \   000104   F8           MOV     R0,A
   \   000105   EF           MOV     A,R7
   \   000106   5402         ANL     A,#0x2
   \   000108   F9           MOV     R1,A
   \   000109   E8           MOV     A,R0
   \   00010A   49           ORL     A,R1
   \   00010B   600D         JZ      ??ZDApp_ProcessSecEvent_7
    602            {
    603              ZDApp_SaveNwkKey();
   \   00010D                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00010D   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    604          
    605              // Return unprocessed events
    606              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   000110   EE           MOV     A,R6
   \   000111   6400         XRL     A,#0x0
   \   000113   FA           MOV     R2,A
   \   000114   EF           MOV     A,R7
   \   000115   6402         XRL     A,#0x2
   \   000117   FB           MOV     R3,A
   \   000118   8033         SJMP    ??ZDApp_ProcessSecEvent_5
    607            }
    608          
    609            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_7:
   \   00011A   EE           MOV     A,R6
   \   00011B   5400         ANL     A,#0x0
   \   00011D   F8           MOV     R0,A
   \   00011E   EF           MOV     A,R7
   \   00011F   5408         ANL     A,#0x8
   \   000121   F9           MOV     R1,A
   \   000122   E8           MOV     A,R0
   \   000123   49           ORL     A,R1
   \   000124   600A         JZ      ??ZDApp_ProcessSecEvent_8
    610            {
    611          #if defined (NV_RESTORE)
    612              ZDSecMgrSaveApsLinkKey();
    613          #endif // (NV_RESTORE)
    614          
    615              // Return unprocessed events
    616              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   000126   EE           MOV     A,R6
   \   000127   6400         XRL     A,#0x0
   \   000129   FA           MOV     R2,A
   \   00012A   EF           MOV     A,R7
   \   00012B   6408         XRL     A,#0x8
   \   00012D   FB           MOV     R3,A
   \   00012E   801D         SJMP    ??ZDApp_ProcessSecEvent_5
    617            }
    618          
    619            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_8:
   \   000130   EE           MOV     A,R6
   \   000131   5400         ANL     A,#0x0
   \   000133   F8           MOV     R0,A
   \   000134   EF           MOV     A,R7
   \   000135   5404         ANL     A,#0x4
   \   000137   F9           MOV     R1,A
   \   000138   E8           MOV     A,R0
   \   000139   49           ORL     A,R1
   \   00013A   600D         JZ      ??ZDApp_ProcessSecEvent_9
    620            {
    621              ZDSecMgrSaveTCLinkKey();
   \   00013C                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   00013C   12....       LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    622          
    623              // Return unprocessed events
    624              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   00013F   EE           MOV     A,R6
   \   000140   6400         XRL     A,#0x0
   \   000142   FA           MOV     R2,A
   \   000143   EF           MOV     A,R7
   \   000144   6404         XRL     A,#0x4
   \   000146   FB           MOV     R3,A
   \   000147   8004         SJMP    ??ZDApp_ProcessSecEvent_5
    625            }
    626          
    627            // Discard or make more handlers
    628            return 0;
   \                     ??ZDApp_ProcessSecEvent_9:
   \   000149   7A00         MOV     R2,#0x0
   \   00014B   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_5:
   \   00014D   7F09         MOV     R7,#0x9
   \   00014F   02....       LJMP    ?BANKED_LEAVE_XDATA
    629          }
    630          
    631          /*********************************************************************
    632           * Application Functions
    633           */
    634          
    635          /*********************************************************************
    636           * @fn      ZDOInitDevice
    637           *
    638           * @brief   Start the device in the network.  This function will read
    639           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    640           *   restore the network state of the device.
    641           *
    642           * @param   startDelay - timeDelay to start device (in milliseconds).
    643           *                       There is a jitter added to this delay:
    644           *                       ((NWK_START_DELAY + startDelay)
    645           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    646           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    647           *                       this function will hold the network init. Application
    648           *                       can start the device.
    649           *
    650           * NOTE:    If the application would like to force a "new" join, the
    651           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    652           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    653           *          this function. "new" join means to not restore the network
    654           *          state of the device. Use zgWriteStartupOptions() to set these
    655           *          options.
    656           *
    657           * @return
    658           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    659           *          restored.
    660           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    661           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    662           *          it could mean that there was no network state to restore.
    663           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    664           *          with the rejoin option set to TRUE.  So, the device was not
    665           *          started in the network (one time only).  The next time this
    666           *          function is called it will start.
    667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    668          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    669          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    670            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000015   75..01       MOV     ?V0,#0x1
    671            uint16 extendedDelay = 0;
   \   000018   7E00         MOV     R6,#0x0
   \   00001A   7F00         MOV     R7,#0x0
    672          
    673            if ( devState == DEV_HOLD )
   \   00001C   90....       MOV     DPTR,#devState
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   7005         JNZ     ??ZDOInitDevice_0
    674            {
    675              // Initialize the RAM items table, in case an NV item has been updated.
    676              zgInitItems( FALSE );
   \   000022                ; Setup parameters for call to function zgInitItems
   \   000022   7900         MOV     R1,#0x0
   \   000024   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    677            }
    678          
    679            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000027                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000027   12....       LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    680            //devtag.071807.todo - fix this temporary solution
    681            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00002A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   90....       MOV     DPTR,#_NIB + 14
   \   000031   F0           MOVX    @DPTR,A
    682          
    683          #if defined ( NV_RESTORE )
    684            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    685            // while booting to skip past NV Restore.
    686            if ( zdappHoldKeys == SW_BYPASS_NV )
    687            {
    688              zdappHoldKeys = 0;   // Only once
    689              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    690            }
    691            else
    692            {
    693              // Determine if NV should be restored
    694              networkStateNV = ZDApp_ReadNetworkRestoreState();
    695            }
    696          
    697            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    698            {
    699              networkStateNV = ZDApp_RestoreNetworkState();
    700            }
    701            else
    702            {
    703              // Wipe out the network state in NV
    704              NLME_InitNV();
    705              NLME_SetDefaultNV();
    706              // clear NWK key values
    707              ZDSecMgrClearNVKeyValues();
    708            }
    709          #endif
    710          
    711            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \   000032   7401         MOV     A,#0x1
   \   000034   65..         XRL     A,?V0
   \   000036   702E         JNZ     ??ZDOInitDevice_1
    712            {
    713              ZDAppDetermineDeviceType();
   \   000038                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000038   12....       LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    714          
    715              // Only delay if joining network - not restoring network state
    716              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    717                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   00003B                ; Setup parameters for call to function osal_rand
   \   00003B   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00003E   8A..         MOV     ?V2,R2
   \   000040   8B..         MOV     ?V3,R3
   \   000042   A8..         MOV     R0,?V2
   \   000044   A9..         MOV     R1,?V3
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E8           MOV     A,R0
   \   00004D   547F         ANL     A,#0x7f
   \   00004F   F8           MOV     R0,A
   \   000050   E9           MOV     A,R1
   \   000051   5400         ANL     A,#0x0
   \   000053   F9           MOV     R1,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   28           ADD     A,R0
   \   000056   F8           MOV     R0,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   39           ADDC    A,R1
   \   00005A   F9           MOV     R1,A
   \   00005B   E8           MOV     A,R0
   \   00005C   2464         ADD     A,#0x64
   \   00005E   F8           MOV     R0,A
   \   00005F   5001         JNC     ??ZDOInitDevice_2
   \   000061   09           INC     R1
   \                     ??ZDOInitDevice_2:
   \   000062   E8           MOV     A,R0
   \   000063   FE           MOV     R6,A
   \   000064   E9           MOV     A,R1
   \   000065   FF           MOV     R7,A
    718            }
    719          
    720            // Initialize the security for type of device
    721            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_1:
   \   000066                ; Setup parameters for call to function ZDApp_SecInit
   \   000066   A9..         MOV     R1,?V0
   \   000068   12....       LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    722          
    723            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   00006B   85..82       MOV     DPL,?XSP + 0
   \   00006E   85..83       MOV     DPH,?XSP + 1
   \   000071   E0           MOVX    A,@DPTR
   \   000072   64FF         XRL     A,#0xff
   \   000074   7004         JNZ     ??ZDOInitDevice_3
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   64FF         XRL     A,#0xff
   \                     ??ZDOInitDevice_3:
   \   00007A   603A         JZ      ??ZDOInitDevice_4
    724            {
    725              devState = DEV_INIT;    // Remove the Hold state
   \   00007C   90....       MOV     DPTR,#devState
   \   00007F   7401         MOV     A,#0x1
   \   000081   F0           MOVX    @DPTR,A
    726          
    727              // Initialize leave control logic
    728              ZDApp_LeaveCtrlInit();
   \   000082                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000082   12....       LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    729          
    730              // Check leave control reset settings
    731              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   000085                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   000085   AC..         MOV     R4,?XSP + 0
   \   000087   AD..         MOV     R5,?XSP + 1
   \   000089   7A..         MOV     R2,#devState & 0xff
   \   00008B   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   00008D   12....       LCALL   `??ZDApp_LeaveCtrlStartup::?relay`; Banked call to: ZDApp_LeaveCtrlStartup
    732          
    733              // Leave may make the hold state come back
    734              if ( devState == DEV_HOLD )
   \   000090   90....       MOV     DPTR,#devState
   \   000093   E0           MOVX    A,@DPTR
   \   000094   7019         JNZ     ??ZDOInitDevice_5
    735              {
    736                // Set the NV startup option to force a "new" join.
    737                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000096                ; Setup parameters for call to function zgWriteStartupOptions
   \   000096   7A02         MOV     R2,#0x2
   \   000098   79FF         MOV     R1,#-0x1
   \   00009A   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   00009D   E9           MOV     A,R1
    738          
    739                // Notify the applications
    740                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00009E                ; Setup parameters for call to function osal_set_event
   \   00009E   7A10         MOV     R2,#0x10
   \   0000A0   7B00         MOV     R3,#0x0
   \   0000A2   90....       MOV     DPTR,#ZDAppTaskID
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000AA   E9           MOV     A,R1
    741          
    742                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   0000AB   7902         MOV     R1,#0x2
   \   0000AD   8011         SJMP    ??ZDOInitDevice_6
    743              }
    744          
    745              // Trigger the network start
    746              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_5:
   \   0000AF                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000AF   EE           MOV     A,R6
   \   0000B0   FA           MOV     R2,A
   \   0000B1   EF           MOV     A,R7
   \   0000B2   FB           MOV     R3,A
   \   0000B3   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    747            }
    748          
    749            // set broadcast address mask to support broadcast filtering
    750            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_4:
   \   0000B6                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0000B6   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F9           MOV     R1,A
   \   0000BB   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    751          
    752            return ( networkStateNV );
   \   0000BE   A9..         MOV     R1,?V0
   \                     ??ZDOInitDevice_6:
   \   0000C0   7402         MOV     A,#0x2
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   7F04         MOV     R7,#0x4
   \   0000C7   02....       LJMP    ?BANKED_LEAVE_XDATA
    753          }
    754          
    755          /*********************************************************************
    756           * @fn      ZDApp_ReadNetworkRestoreState
    757           *
    758           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    759           *          or not to restore the network state.
    760           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    761           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    762           *
    763           * @param   none
    764           *
    765           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    766           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    767           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    768           *          ZCD_NV_STARTUP_OPTION
    769           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    770          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    771          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    772            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    773          
    774            // Look for the New Network State option.
    775            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   E8           MOV     A,R0
   \   00000D   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000F   5002         JNC     ??ZDApp_ReadNetworkRestoreState_0
    776            {
    777              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000011   7E01         MOV     R6,#0x1
    778            }
    779          
    780            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000013   EE           MOV     A,R6
   \   000014   F9           MOV     R1,A
   \   000015   7F01         MOV     R7,#0x1
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA
    781          }
    782          
    783          /*********************************************************************
    784           * @fn      ZDAppDetermineDeviceType()
    785           *
    786           * @brief   Determines the type of device to start.
    787           *
    788           *          Looks at zgDeviceLogicalType and determines what type of
    789           *          device to start.  The types are:
    790           *            ZG_DEVICETYPE_COORDINATOR
    791           *            ZG_DEVICETYPE_ROUTER
    792           *            ZG_DEVICETYPE_ENDDEVICE
    793           *
    794           * @param   none
    795           *
    796           * @return  none
    797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    798          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    799          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    800            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700F         JNZ     ??ZDAppDetermineDeviceType_0
    801            {
    802              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    803              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   F0           MOVX    @DPTR,A
   \   000017   8046         SJMP    ??ZDAppDetermineDeviceType_1
    804            }
    805            else
    806            {
    807              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   7010         JNZ     ??ZDAppDetermineDeviceType_2
    808                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000021   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000024   E0           MOVX    A,@DPTR
   \   000025   54F8         ANL     A,#0xf8
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   4401         ORL     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   8016         SJMP    ??ZDAppDetermineDeviceType_3
    809              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000031   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   700E         JNZ     ??ZDAppDetermineDeviceType_3
    810                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000039   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   54F8         ANL     A,#0xf8
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000043   E0           MOVX    A,@DPTR
   \   000044   4402         ORL     A,#0x2
   \   000046   F0           MOVX    @DPTR,A
    811          
    812              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    813              // The device shall do rejoin the network. Otherwise, do normal join
    814              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_3:
   \   000047                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000047   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000049   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00004B   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00004E   E9           MOV     A,R1
   \   00004F   7008         JNZ     ??ZDAppDetermineDeviceType_4
    815              {
    816                devStartMode = MODE_JOIN;     // Assume joining
   \   000051   90....       MOV     DPTR,#devStartMode
   \   000054   7400         MOV     A,#0x0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   8006         SJMP    ??ZDAppDetermineDeviceType_1
    817              }
    818              else
    819              {
    820                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_4:
   \   000059   90....       MOV     DPTR,#devStartMode
   \   00005C   7403         MOV     A,#0x3
   \   00005E   F0           MOVX    @DPTR,A
    821              }
    822            }
    823          }
   \                     ??ZDAppDetermineDeviceType_1:
   \   00005F   D083         POP     DPH
   \   000061   D082         POP     DPL
   \   000063   02....       LJMP    ?BRET
    824          
    825          /*********************************************************************
    826           * @fn      ZDApp_NetworkStartEvt()
    827           *
    828           * @brief   Process the Network Start Event
    829           *
    830           * @param   none
    831           *
    832           * @return  none
    833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    834          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    835          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    836            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7022         JNZ     ??ZDApp_NetworkStartEvt_0
    837            {
    838              // Successfully started a ZigBee network
    839              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7006         JNZ     ??ZDApp_NetworkStartEvt_1
    840              {
    841                devState = DEV_ZB_COORD;
   \   000012   90....       MOV     DPTR,#devState
   \   000015   7409         MOV     A,#0x9
   \   000017   F0           MOVX    @DPTR,A
    842              }
    843          
    844              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000018                ; Setup parameters for call to function osal_pwrmgr_device
   \   000018   7900         MOV     R1,#0x0
   \   00001A   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    845              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A10         MOV     R2,#0x10
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   90....       MOV     DPTR,#ZDAppTaskID
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000029   E9           MOV     A,R1
   \   00002A   804A         SJMP    ??ZDApp_NetworkStartEvt_2
    846            }
    847            else
    848            {
    849              // Try again with a higher energy threshold
    850              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00002C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00002C   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00002F   E9           MOV     A,R1
   \   000030   F8           MOV     R0,A
   \   000031   7900         MOV     R1,#0x0
   \   000033   E8           MOV     A,R0
   \   000034   2410         ADD     A,#0x10
   \   000036   F8           MOV     R0,A
   \   000037   5001         JNC     ??ZDApp_NetworkStartEvt_3
   \   000039   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   00003A   C3           CLR     C
   \   00003B   E8           MOV     A,R0
   \   00003C   94FF         SUBB    A,#-0x1
   \   00003E   E9           MOV     A,R1
   \   00003F   9400         SUBB    A,#0x0
   \   000041   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000043   65D0         XRL     A,PSW
   \   000045   33           RLC     A
   \   000046   501B         JNC     ??ZDApp_NetworkStartEvt_4
    851              {
    852                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000048                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000048   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00004B   E9           MOV     A,R1
   \   00004C   F8           MOV     R0,A
   \   00004D                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   00004D   7410         MOV     A,#0x10
   \   00004F   28           ADD     A,R0
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    853                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000054                ; Setup parameters for call to function osal_set_event
   \   000054   7A01         MOV     R2,#0x1
   \   000056   7B00         MOV     R3,#0x0
   \   000058   90....       MOV     DPTR,#ZDAppTaskID
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000060   E9           MOV     A,R1
   \   000061   8013         SJMP    ??ZDApp_NetworkStartEvt_2
    854              }
    855              else
    856              {
    857                // Failed to start network. Enter a dormant state (until user intervenes)
    858                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000063   90....       MOV     DPTR,#devState
   \   000066   7401         MOV     A,#0x1
   \   000068   F0           MOVX    @DPTR,A
    859                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000069                ; Setup parameters for call to function osal_set_event
   \   000069   7A10         MOV     R2,#0x10
   \   00006B   7B00         MOV     R3,#0x0
   \   00006D   90....       MOV     DPTR,#ZDAppTaskID
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000075   E9           MOV     A,R1
    860              }
    861            }
    862          }
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000076   D083         POP     DPH
   \   000078   D082         POP     DPL
   \   00007A   02....       LJMP    ?BRET
    863          
    864          /*********************************************************************
    865           * @fn      ZDApp_DeviceAuthEvt()
    866           *
    867           * @brief   Process the Device Authentic Event
    868           *
    869           * @param   none
    870           *
    871           * @return  none
    872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    873          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    874          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    875            // received authentication from trust center
    876            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   7066         JNZ     ??ZDApp_DeviceAuthEvt_0
    877            {
    878              // Stop the reset timer so it doesn't reset
    879              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    880          
    881              devState = DEV_END_DEVICE;
   \   00000F   90....       MOV     DPTR,#devState
   \   000012   7406         MOV     A,#0x6
   \   000014   F0           MOVX    @DPTR,A
    882              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A10         MOV     R2,#0x10
   \   000017   7B00         MOV     R3,#0x0
   \   000019   90....       MOV     DPTR,#ZDAppTaskID
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000021   E9           MOV     A,R1
    883          
    884              // Set the Power Manager Device
    885          #if defined ( POWER_SAVING )
    886              osal_pwrmgr_device( PWRMGR_BATTERY );
    887          #endif
    888          
    889              if ( ZSTACK_ROUTER_BUILD )
   \   000022   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6008         JZ      ??ZDApp_DeviceAuthEvt_1
   \   000028   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6401         XRL     A,#0x1
   \   00002E   7014         JNZ     ??ZDApp_DeviceAuthEvt_2
    890              {
    891                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000030   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000033   E0           MOVX    A,@DPTR
   \   000034   5407         ANL     A,#0x7
   \   000036   6402         XRL     A,#0x2
   \   000038   600A         JZ      ??ZDApp_DeviceAuthEvt_2
    892                {
    893                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    894                  NLME_StartRouterRequest( 0, 0, false );
   \   00003A                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7900         MOV     R1,#0x0
   \   000040   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000043   E9           MOV     A,R1
    895                }
    896              }
    897          
    898              // Notify to save info into NV
    899              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   000044                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000044   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    900          
    901              // Save off the security
    902              ZDApp_SaveNwkKey();
   \   000047                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000047   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    903          
    904              ZDApp_AnnounceNewAddress();
   \   00004A                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00004A   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
    905          
    906              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    907                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    908          #if defined ( ZIGBEE_CHILD_AGING )
    909                    && (zgChildAgingEnable == TRUE)
    910          #endif // ZIGBEE_CHILD_AGING
    911                       ) )
   \   00004D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000050   E0           MOVX    A,@DPTR
   \   000051   A2E3         MOV     C,0xE0 /* A   */.3
   \   000053   5010         JNC     ??ZDApp_DeviceAuthEvt_3
   \   000055   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000058   E0           MOVX    A,@DPTR
   \   000059   A2E3         MOV     C,0xE0 /* A   */.3
   \   00005B   5018         JNC     ??ZDApp_DeviceAuthEvt_4
   \   00005D   90....       MOV     DPTR,#zgChildAgingEnable
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6401         XRL     A,#0x1
   \   000063   7010         JNZ     ??ZDApp_DeviceAuthEvt_4
    912              {
    913                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   000065                ; Setup parameters for call to function NLME_SetPollRate
   \   000065   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FA           MOV     R2,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000070   8003         SJMP    ??ZDApp_DeviceAuthEvt_4
    914              }
    915            }
    916            else
    917            {
    918              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000072                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000072   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    919            }
    920          }
   \                     ??ZDApp_DeviceAuthEvt_4:
   \   000075   D083         POP     DPH
   \   000077   D082         POP     DPL
   \   000079   02....       LJMP    ?BRET
    921          
    922          /*********************************************************************
    923           * @fn      ZDApp_SaveNetworkStateEvt()
    924           *
    925           * @brief   Process the Save the Network State Event
    926           *
    927           * @param   none
    928           *
    929           * @return  none
    930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    931          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    932          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    933          #if defined ( NV_RESTORE )
    934           #if defined ( NV_TURN_OFF_RADIO )
    935            // Turn off the radio's receiver during an NV update
    936            uint8 RxOnIdle;
    937            uint8 x = false;
    938            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    939            ZMacSetReq( ZMacRxOnIdle, &x );
    940           #endif
    941          
    942            // Update the Network State in NV
    943            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    944                           NWK_NV_DEVICELIST_ENABLE |
    945                           NWK_NV_BINDING_ENABLE    |
    946                           NWK_NV_ADDRMGR_ENABLE );
    947          
    948            // Reset the NV startup option to resume from NV by
    949            // clearing the "New" join option.
    950            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    951          
    952           #if defined ( NV_TURN_OFF_RADIO )
    953            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    954           #endif
    955          #endif // NV_RESTORE
    956          }
   \   000000   02....       LJMP    ?BRET
    957          
    958          #if defined ( NV_RESTORE )
    959          /*********************************************************************
    960           * @fn      ZDApp_RestoreNetworkState()
    961           *
    962           * @brief   This function will restore the network state of the
    963           *          device if the network state is stored in NV.
    964           *
    965           * @param   none
    966           *
    967           * @return
    968           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    969           *          restored.
    970           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    971           *          This could mean that zgStartupOption said to not restore, or
    972           *          it could mean that there was no network state to restore.
    973           *
    974           */
    975          uint8 ZDApp_RestoreNetworkState( void )
    976          {
    977            uint8 nvStat;
    978          
    979            // Initialize NWK NV items
    980            nvStat = NLME_InitNV();
    981          
    982            if ( nvStat != NV_OPER_FAILED )
    983            {
    984              if ( NLME_RestoreFromNV() )
    985              {
    986                // Are we a coordinator
    987                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
    988                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
    989                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
    990                devStartMode = MODE_RESUME;
    991                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    992              }
    993              else
    994                nvStat = NV_ITEM_UNINIT;
    995          
    996              if ( ZG_SECURE_ENABLED )
    997              {
    998                nwkFrameCounterChanges = 0;
    999          
   1000                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1001                {
   1002                  ZDApp_RestoreNwkKey();
   1003                }
   1004              }
   1005          
   1006              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1007              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1008              // other than default.
   1009            }
   1010          
   1011            if ( nvStat == ZSUCCESS )
   1012              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   1013            else
   1014              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   1015          }
   1016          #endif // NV_RESTORE
   1017          
   1018          /*********************************************************************
   1019           * @fn      ZDApp_InitUserDesc()
   1020           *
   1021           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1022           *          when needed.  If you want to initialize the User descriptor to
   1023           *          something other than all zero, do it here.
   1024           *
   1025           * @param   none
   1026           *
   1027           * @return  none
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1030          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1031            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1032          
   1033            // Initialize the User Descriptor, the descriptor is read from NV
   1034            // when needed.  If you want to initialize the User descriptor to something
   1035            // other than all zero, do it here.
   1036            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1037            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1038                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   703B         JNZ     ??ZDApp_InitUserDesc_0
   1039            {
   1040              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1041                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   A8..         MOV     R0,?XSP + 0
   \   000039   A9..         MOV     R1,?XSP + 1
   \   00003B   88..         MOV     ?V0,R0
   \   00003D   89..         MOV     ?V1,R1
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   75..11       MOV     ?V0,#0x11
   \   000047   75..00       MOV     ?V1,#0x0
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV     R4,#0x0
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7A81         MOV     R2,#-0x7f
   \   000055   7B00         MOV     R3,#0x0
   \   000057   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005F   E9           MOV     A,R1
   \   000060   7010         JNZ     ??ZDApp_InitUserDesc_0
   1042              {
   1043                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   6007         JZ      ??ZDApp_InitUserDesc_0
   1044                {
   1045                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00006B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   D2E4         SETB    0xE0 /* A   */.4
   \   000071   F0           MOVX    @DPTR,A
   1046                }
   1047              }
   1048            }
   1049          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000072   7411         MOV     A,#0x11
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   7F02         MOV     R7,#0x2
   \   000079   02....       LJMP    ?BANKED_LEAVE_XDATA
   1050          
   1051          /*********************************************************************
   1052           * @fn      ZDAppCheckForHoldKey()
   1053           *
   1054           * @brief   Check for key to set the device into Hold Auto Start
   1055           *
   1056           * @param   none
   1057           *
   1058           * @return  none
   1059           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1060          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1061          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1062          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1063          
   1064            // Get Keypad directly to see if a HOLD is needed
   1065            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX    @DPTR,A
   1066          
   1067            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1068            // while booting to avoid starting up the device.
   1069            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   90....       MOV     DPTR,#zdappHoldKeys
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6401         XRL     A,#0x1
   \   000012   7006         JNZ     ??ZDAppCheckForHoldKey_0
   1070            {
   1071              // Change the device state to HOLD on start up
   1072              devState = DEV_HOLD;
   \   000014   90....       MOV     DPTR,#devState
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
   1073            }
   1074          #endif // HAL_KEY
   1075          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   00001A   D083         POP     DPH
   \   00001C   D082         POP     DPL
   \   00001E   02....       LJMP    ?BRET
   1076          
   1077          /*********************************************************************
   1078           * @fn      ZDApp_ProcessOSALMsg()
   1079           *
   1080           * @brief   Process the incoming task message.
   1081           *
   1082           * @param   msgPtr - message to process
   1083           *
   1084           * @return  none
   1085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1086          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1087          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1088            // Data Confirmation message fields
   1089            uint8 sentEP;       // This should always be 0
   1090            uint8 sentStatus;
   1091            afDataConfirm_t *afDataConfirm;
   1092            uint8 tmp;
   1093          
   1094            switch ( msgPtr->event )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   14           DEC     A
   \   000014   6069         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000016   14           DEC     A
   \   000017   7003         JNZ     $+5
   \   000019   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   00001C   14           DEC     A
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   000022   24E9         ADD     A,#-0x17
   \   000024   600B         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000026   2447         ADD     A,#0x47
   \   000028   6011         JZ      ??ZDApp_ProcessOSALMsg_4
   \   00002A   24D6         ADD     A,#-0x2a
   \   00002C   6017         JZ      ??ZDApp_ProcessOSALMsg_5
   \   00002E   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1095            {
   1096              // Incoming ZDO Message
   1097              case AF_INCOMING_MSG_CMD:
   1098                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000031                ; Setup parameters for call to function ZDP_IncomingData
   \   000031   EE           MOV     A,R6
   \   000032   FA           MOV     R2,A
   \   000033   EF           MOV     A,R7
   \   000034   FB           MOV     R3,A
   \   000035   12....       LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1099                break;
   \   000038   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1100          
   1101              case ZDO_CB_MSG:
   1102                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00003B                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00003B   EE           MOV     A,R6
   \   00003C   FA           MOV     R2,A
   \   00003D   EF           MOV     A,R7
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1103                break;
   \   000042   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1104          
   1105              case AF_DATA_CONFIRM_CMD:
   1106                // This message is received as a confirmation of a data packet sent.
   1107                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1108                // The message fields are defined in AF.h
   1109                afDataConfirm = (afDataConfirm_t *)msgPtr;
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000045   8E..         MOV     ?V4,R6
   \   000047   8F..         MOV     ?V5,R7
   1110                sentEP = afDataConfirm->endpoint;
   \   000049   85..82       MOV     DPL,?V4
   \   00004C   85..83       MOV     DPH,?V5
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F5..         MOV     ?V6,A
   1111                sentStatus = afDataConfirm->hdr.status;
   \   000054   85..82       MOV     DPL,?V4
   \   000057   85..83       MOV     DPH,?V5
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F5..         MOV     ?V3,A
   1112          
   1113                // Action taken when confirmation is received.
   1114          #if defined ( ZIGBEE_FREQ_AGILITY )
   1115                if ( pZDNwkMgr_ProcessDataConfirm )
   \   00005E   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F9           MOV     R1,A
   \   000066   E8           MOV     A,R0
   \   000067   49           ORL     A,R1
   \   000068   6012         JZ      ??ZDApp_ProcessOSALMsg_8
   1116                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   00006A                ; Setup parameters for indirect call
   \   00006A   AA..         MOV     R2,?V4
   \   00006C   AB..         MOV     R3,?V5
   \   00006E   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F583         MOV     DPH,A
   \   000077   8882         MOV     DPL,R0
   \   000079   12....       LCALL   ?CALL_IND
   1117          #endif
   1118                (void)sentEP;
   1119                (void)sentStatus;
   1120                break;
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   00007C   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1121          
   1122              case ZDO_NWK_DISC_CNF:
   1123                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00007F   90....       MOV     DPTR,#devState
   \   000082   E0           MOVX    A,@DPTR
   \   000083   6402         XRL     A,#0x2
   \   000085   6003         JZ      $+5
   \   000087   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1124                  break;
   1125          
   1126                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   00008A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   6401         XRL     A,#0x1
   \   000090   600B         JZ      ??ZDApp_ProcessOSALMsg_9
   \   000092   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000095   E0           MOVX    A,@DPTR
   \   000096   6402         XRL     A,#0x2
   \   000098   6003         JZ      $+5
   \   00009A   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1127                {
   1128                  // Process the network discovery scan results and choose a parent
   1129                  // device to join/rejoin itself
   1130                  networkDesc_t *pChosenNwk;
   1131                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   00009D                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   00009D   12....       LCALL   `??ZDApp_NwkDescListProcessing::?relay`; Banked call to: ZDApp_NwkDescListProcessing
   \   0000A0   8A..         MOV     ?V8,R2
   \   0000A2   8B..         MOV     ?V9,R3
   \   0000A4   A8..         MOV     R0,?V8
   \   0000A6   A9..         MOV     R1,?V9
   \   0000A8   88..         MOV     ?V0,R0
   \   0000AA   89..         MOV     ?V1,R1
   \   0000AC   E8           MOV     A,R0
   \   0000AD   49           ORL     A,R1
   \   0000AE   7003         JNZ     $+5
   \   0000B0   02....       LJMP    ??ZDApp_ProcessOSALMsg_10 & 0xFFFF
   \   0000B3   90....       MOV     DPTR,#zdoDiscCounter
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   C3           CLR     C
   \   0000B8   9403         SUBB    A,#0x3
   \   0000BA   5003         JNC     $+5
   \   0000BC   02....       LJMP    ??ZDApp_ProcessOSALMsg_10 & 0xFFFF
   1132                  {
   1133                    if ( devStartMode == MODE_JOIN )
   \   0000BF   90....       MOV     DPTR,#devStartMode
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   6003         JZ      $+5
   \   0000C5   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1134                    {
   1135                      devState = DEV_NWK_JOINING;
   \   0000C8   90....       MOV     DPTR,#devState
   \   0000CB   7403         MOV     A,#0x3
   \   0000CD   F0           MOVX    @DPTR,A
   1136          
   1137                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   0000CE                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   0000CE   85..82       MOV     DPL,?V0
   \   0000D1   85..83       MOV     DPH,?V1
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F9           MOV     R1,A
   \   0000DC   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1138          
   1139                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1140                                             pChosenNwk->logicalChannel,
   1141                                             ZDO_Config_Node_Descriptor.CapabilityFlags,
   1142                                             pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   0000DF                ; Setup parameters for call to function NLME_JoinRequest
   \   0000DF   85..82       MOV     DPL,?V0
   \   0000E2   85..83       MOV     DPH,?V1
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F5..         MOV     ?V2,A
   \   0000F2   78..         MOV     R0,#?V2
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F7   85..82       MOV     DPL,?V0
   \   0000FA   85..83       MOV     DPH,?V1
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000107   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F5..         MOV     ?V2,A
   \   00010D   78..         MOV     R0,#?V2
   \   00010F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000112   85..82       MOV     DPL,?V0
   \   000115   85..83       MOV     DPH,?V1
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   F9           MOV     R1,A
   \   00011C   85..82       MOV     DPL,?V0
   \   00011F   85..83       MOV     DPH,?V1
   \   000122   E0           MOVX    A,@DPTR
   \   000123   FC           MOV     R4,A
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   FD           MOV     R5,A
   \   000127   E5..         MOV     A,?V0
   \   000129   240B         ADD     A,#0xb
   \   00012B   FA           MOV     R2,A
   \   00012C   E4           CLR     A
   \   00012D   35..         ADDC    A,?V1
   \   00012F   FB           MOV     R3,A
   \   000130   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000133   7404         MOV     A,#0x4
   \   000135   12....       LCALL   ?DEALLOC_XSTACK8
   \   000138   E9           MOV     A,R1
   \   000139   7003         JNZ     $+5
   \   00013B   02....       LJMP    ??ZDApp_ProcessOSALMsg_12 & 0xFFFF
   1143                      {
   1144                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1145                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00013E                ; Setup parameters for call to function osal_rand
   \   00013E   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000141   8A..         MOV     ?V8,R2
   \   000143   8B..         MOV     ?V9,R3
   \   000145   A8..         MOV     R0,?V8
   \   000147   A9..         MOV     R1,?V9
   \   000149                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000149   E8           MOV     A,R0
   \   00014A   547F         ANL     A,#0x7f
   \   00014C   F8           MOV     R0,A
   \   00014D   E9           MOV     A,R1
   \   00014E   5400         ANL     A,#0x0
   \   000150   F9           MOV     R1,A
   \   000151   E8           MOV     A,R0
   \   000152   2464         ADD     A,#0x64
   \   000154   FA           MOV     R2,A
   \   000155   E4           CLR     A
   \   000156   39           ADDC    A,R1
   \   000157   FB           MOV     R3,A
   \   000158   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   00015B   02....       LJMP    ??ZDApp_ProcessOSALMsg_12 & 0xFFFF
   1146                      }
   1147                    } // if ( devStartMode == MODE_JOIN )
   1148                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   00015E   90....       MOV     DPTR,#devStartMode
   \   000161   E0           MOVX    A,@DPTR
   \   000162   6403         XRL     A,#0x3
   \   000164   6003         JZ      $+5
   \   000166   02....       LJMP    ??ZDApp_ProcessOSALMsg_12 & 0xFFFF
   1149                    {
   1150                      ZStatus_t rejoinStatus;
   1151          
   1152                      devState = DEV_NWK_REJOIN;
   \   000169   90....       MOV     DPTR,#devState
   \   00016C   7404         MOV     A,#0x4
   \   00016E   F0           MOVX    @DPTR,A
   1153          
   1154                      // Before trying to do rejoin, check if the device has a valid short address
   1155                      // If not, generate a random short address for itself
   1156                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   00016F   90....       MOV     DPTR,#_NIB + 20
   \   000172   E0           MOVX    A,@DPTR
   \   000173   64FE         XRL     A,#0xfe
   \   000175   7004         JNZ     ??ZDApp_ProcessOSALMsg_13
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00017B   706C         JNZ     ??ZDApp_ProcessOSALMsg_14
   1157                      {
   1158                        uint16 commNwkAddr;
   1159          
   1160                        // Verify if the Network address has been commissioned by external tool
   1161                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1162                                             sizeof(commNwkAddr),
   1163                                             (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1164                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   00017D                ; Setup parameters for call to function osal_nv_read
   \   00017D   7401         MOV     A,#0x1
   \   00017F   12....       LCALL   ?XSTACK_DISP100_8
   \   000182   88..         MOV     ?V8,R0
   \   000184   89..         MOV     ?V9,R1
   \   000186   78..         MOV     R0,#?V8
   \   000188   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018B   75..02       MOV     ?V8,#0x2
   \   00018E   75..00       MOV     ?V9,#0x0
   \   000191   78..         MOV     R0,#?V8
   \   000193   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000196   7C00         MOV     R4,#0x0
   \   000198   7D00         MOV     R5,#0x0
   \   00019A   7A49         MOV     R2,#0x49
   \   00019C   7B00         MOV     R3,#0x0
   \   00019E   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0001A1   7404         MOV     A,#0x4
   \   0001A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A6   E9           MOV     A,R1
   \   0001A7   702B         JNZ     ??ZDApp_ProcessOSALMsg_15
   \   0001A9   7401         MOV     A,#0x1
   \   0001AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   64FE         XRL     A,#0xfe
   \   0001B1   7004         JNZ     ??ZDApp_ProcessOSALMsg_16
   \   0001B3   A3           INC     DPTR
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   0001B7   601B         JZ      ??ZDApp_ProcessOSALMsg_15
   1165                        {
   1166                          _NIB.nwkDevAddress = commNwkAddr;
   \   0001B9   7401         MOV     A,#0x1
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   F8           MOV     R0,A
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   F9           MOV     R1,A
   \   0001C3   90....       MOV     DPTR,#_NIB + 20
   \   0001C6   E8           MOV     A,R0
   \   0001C7   F0           MOVX    @DPTR,A
   \   0001C8   A3           INC     DPTR
   \   0001C9   E9           MOV     A,R1
   \   0001CA   F0           MOVX    @DPTR,A
   1167          
   1168                          // clear Allocate address bit because device has a commissioned address
   1169                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \   0001CB   90....       MOV     DPTR,#_NIB + 14
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   C2E7         CLR     0xE0 /* A   */.7
   \   0001D1   F0           MOVX    @DPTR,A
   \   0001D2   800B         SJMP    ??ZDApp_ProcessOSALMsg_17
   1170                        }
   1171                        else
   1172                        {
   1173                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   0001D4                ; Setup parameters for call to function osal_rand
   \   0001D4   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001D7   90....       MOV     DPTR,#_NIB + 20
   \   0001DA   EA           MOV     A,R2
   \   0001DB   F0           MOVX    @DPTR,A
   \   0001DC   A3           INC     DPTR
   \   0001DD   EB           MOV     A,R3
   \   0001DE   F0           MOVX    @DPTR,A
   1174                        }
   1175          
   1176                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   0001DF                ; Setup parameters for call to function ZMacSetReq
   \   0001DF   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   0001E1   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   0001E3   7953         MOV     R1,#0x53
   \   0001E5   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0001E8   E9           MOV     A,R1
   1177                      }
   1178          
   1179                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1180                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   0001E9   90....       MOV     DPTR,#_NIB + 33
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   64FE         XRL     A,#0xfe
   \   0001EF   7004         JNZ     ??ZDApp_ProcessOSALMsg_18
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   0001F5   701D         JNZ     ??ZDApp_ProcessOSALMsg_19
   1181                      {
   1182                        _NIB.nwkPanId = pChosenNwk->panId;
   \   0001F7   85..82       MOV     DPL,?V0
   \   0001FA   85..83       MOV     DPH,?V1
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   F8           MOV     R0,A
   \   0001FF   A3           INC     DPTR
   \   000200   E0           MOVX    A,@DPTR
   \   000201   F9           MOV     R1,A
   \   000202   90....       MOV     DPTR,#_NIB + 33
   \   000205   E8           MOV     A,R0
   \   000206   F0           MOVX    @DPTR,A
   \   000207   A3           INC     DPTR
   \   000208   E9           MOV     A,R1
   \   000209   F0           MOVX    @DPTR,A
   1183                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   00020A                ; Setup parameters for call to function ZMacSetReq
   \   00020A   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   00020C   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   00020E   7950         MOV     R1,#0x50
   \   000210   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000213   E9           MOV     A,R1
   1184                      }
   1185          
   1186                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   000214   85..82       MOV     DPL,?XSP + 0
   \   000217   85..83       MOV     DPH,?XSP + 1
   \   00021A   7401         MOV     A,#0x1
   \   00021C   F0           MOVX    @DPTR,A
   1187                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   00021D                ; Setup parameters for call to function ZMacSetReq
   \   00021D   AA..         MOV     R2,?XSP + 0
   \   00021F   AB..         MOV     R3,?XSP + 1
   \   000221   7952         MOV     R1,#0x52
   \   000223   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000226   E9           MOV     A,R1
   1188          
   1189                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1190                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == TRUE ) )
   \   000227                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000227   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00022A   E9           MOV     A,R1
   \   00022B   6401         XRL     A,#0x1
   \   00022D   7016         JNZ     ??ZDApp_ProcessOSALMsg_20
   1191                      {
   1192                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \   00022F                ; Setup parameters for call to function NLME_ReJoinRequest
   \   00022F   85..82       MOV     DPL,?V0
   \   000232   85..83       MOV     DPH,?V1
   \   000235   A3           INC     DPTR
   \   000236   A3           INC     DPTR
   \   000237   E0           MOVX    A,@DPTR
   \   000238   F9           MOV     R1,A
   \   000239   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00023B   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00023D   12....       LCALL   `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   000240   E9           MOV     A,R1
   \   000241   F5..         MOV     ?V2,A
   \   000243   8014         SJMP    ??ZDApp_ProcessOSALMsg_21
   1193                      }
   1194                      else
   1195                      {
   1196                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   000245                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   000245   85..82       MOV     DPL,?V0
   \   000248   85..83       MOV     DPH,?V1
   \   00024B   A3           INC     DPTR
   \   00024C   A3           INC     DPTR
   \   00024D   E0           MOVX    A,@DPTR
   \   00024E   F9           MOV     R1,A
   \   00024F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000251   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000253   12....       LCALL   `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \   000256   E9           MOV     A,R1
   \   000257   F5..         MOV     ?V2,A
   1197                      }
   1198          
   1199                      if ( rejoinStatus != ZSuccess )
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   000259   E5..         MOV     A,?V2
   \   00025B   601D         JZ      ??ZDApp_ProcessOSALMsg_12
   1200                      {
   1201                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY +
   1202                                          ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00025D                ; Setup parameters for call to function osal_rand
   \   00025D   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000260   8A..         MOV     ?V8,R2
   \   000262   8B..         MOV     ?V9,R3
   \   000264   A8..         MOV     R0,?V8
   \   000266   A9..         MOV     R1,?V9
   \   000268                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000268   E8           MOV     A,R0
   \   000269   547F         ANL     A,#0x7f
   \   00026B   F8           MOV     R0,A
   \   00026C   E9           MOV     A,R1
   \   00026D   5400         ANL     A,#0x0
   \   00026F   F9           MOV     R1,A
   \   000270   E8           MOV     A,R0
   \   000271   2464         ADD     A,#0x64
   \   000273   FA           MOV     R2,A
   \   000274   E4           CLR     A
   \   000275   39           ADDC    A,R1
   \   000276   FB           MOV     R3,A
   \   000277   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1203                      }
   1204                    } // else if ( devStartMode == MODE_REJOIN )
   1205          
   1206                    // The receiver is on, turn network layer polling off.
   1207                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   00027A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   A2E3         MOV     C,0xE0 /* A   */.3
   \   000280   5033         JNC     ??ZDApp_ProcessOSALMsg_22
   1208                    {
   1209                      // for an End Device with NO Child Table Management process or for a Router
   1210                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1211          #if defined ( ZIGBEE_CHILD_AGING )
   1212                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   000282   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000285   E0           MOVX    A,@DPTR
   \   000286   6016         JZ      ??ZDApp_ProcessOSALMsg_23
   \   000288   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00028B   E0           MOVX    A,@DPTR
   \   00028C   6401         XRL     A,#0x1
   \   00028E   600E         JZ      ??ZDApp_ProcessOSALMsg_23
   \   000290   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000293   E0           MOVX    A,@DPTR
   \   000294   6402         XRL     A,#0x2
   \   000296   706A         JNZ     ??ZDApp_ProcessOSALMsg_24
   \   000298   90....       MOV     DPTR,#zgChildAgingEnable
   \   00029B   E0           MOVX    A,@DPTR
   \   00029C   7064         JNZ     ??ZDApp_ProcessOSALMsg_24
   1213          #else
   1214                           (ZG_DEVICE_ENDDEVICE_TYPE) )
   1215          #endif // ZIGBEE_CHILD_AGING
   1216                      {
   1217                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_23:
   \   00029E                ; Setup parameters for call to function NLME_SetPollRate
   \   00029E   7A00         MOV     R2,#0x0
   \   0002A0   7B00         MOV     R3,#0x0
   \   0002A2   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1218                        NLME_SetQueuedPollRate( 0 );
   \   0002A5                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0002A5   7A00         MOV     R2,#0x0
   \   0002A7   7B00         MOV     R3,#0x0
   \   0002A9   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1219                        NLME_SetResponseRate( 0 );
   \   0002AC                ; Setup parameters for call to function NLME_SetResponseRate
   \   0002AC   7A00         MOV     R2,#0x0
   \   0002AE   7B00         MOV     R3,#0x0
   \   0002B0   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   0002B3   804D         SJMP    ??ZDApp_ProcessOSALMsg_24
   1220                      }
   1221                    }
   1222                    else
   1223                    {
   1224                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   0002B5   90....       MOV     DPTR,#devStartMode
   \   0002B8   E0           MOVX    A,@DPTR
   \   0002B9   7047         JNZ     ??ZDApp_ProcessOSALMsg_24
   1225                      {
   1226                        ZDApp_SavedPollRate = zgPollRate;
   \   0002BB   90....       MOV     DPTR,#zgPollRate
   \   0002BE   E0           MOVX    A,@DPTR
   \   0002BF   F8           MOV     R0,A
   \   0002C0   A3           INC     DPTR
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   F9           MOV     R1,A
   \   0002C3   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   0002C6   E8           MOV     A,R0
   \   0002C7   F0           MOVX    @DPTR,A
   \   0002C8   A3           INC     DPTR
   \   0002C9   E9           MOV     A,R1
   \   0002CA   F0           MOVX    @DPTR,A
   1227                        NLME_SetPollRate( zgRejoinPollRate );
   \   0002CB                ; Setup parameters for call to function NLME_SetPollRate
   \   0002CB   90....       MOV     DPTR,#zgRejoinPollRate
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   FA           MOV     R2,A
   \   0002D0   A3           INC     DPTR
   \   0002D1   E0           MOVX    A,@DPTR
   \   0002D2   FB           MOV     R3,A
   \   0002D3   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   0002D6   802A         SJMP    ??ZDApp_ProcessOSALMsg_24
   1228                      }
   1229                    }
   1230                  }
   1231                  else
   1232                  {
   1233                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0002D8   90....       MOV     DPTR,#continueJoining
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   607E         JZ      ??ZDApp_ProcessOSALMsg_7
   1234                    {
   1235              #if defined ( MANAGED_SCAN )
   1236                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1237              #else
   1238                      zdoDiscCounter++;
   \   0002DE   90....       MOV     DPTR,#zdoDiscCounter
   \   0002E1   E0           MOVX    A,@DPTR
   \   0002E2   2401         ADD     A,#0x1
   \   0002E4   F0           MOVX    @DPTR,A
   1239                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1240                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   0002E5                ; Setup parameters for call to function osal_rand
   \   0002E5   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0002E8   8A..         MOV     ?V8,R2
   \   0002EA   8B..         MOV     ?V9,R3
   \   0002EC   A8..         MOV     R0,?V8
   \   0002EE   A9..         MOV     R1,?V9
   \   0002F0                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0002F0   E8           MOV     A,R0
   \   0002F1   54FF         ANL     A,#0xff
   \   0002F3   F8           MOV     R0,A
   \   0002F4   E9           MOV     A,R1
   \   0002F5   5400         ANL     A,#0x0
   \   0002F7   F9           MOV     R1,A
   \   0002F8   E8           MOV     A,R0
   \   0002F9   2464         ADD     A,#0x64
   \   0002FB   FA           MOV     R2,A
   \   0002FC   E4           CLR     A
   \   0002FD   39           ADDC    A,R1
   \   0002FE   FB           MOV     R3,A
   \   0002FF   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1241              #endif
   1242                    }
   1243                  }
   1244                }
   1245                break;
   \                     ??ZDApp_ProcessOSALMsg_24:
   \   000302   8058         SJMP    ??ZDApp_ProcessOSALMsg_7
   1246          
   1247              case ZDO_NWK_JOIN_IND:
   1248                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000304   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000307   E0           MOVX    A,@DPTR
   \   000308   6401         XRL     A,#0x1
   \   00030A   6008         JZ      ??ZDApp_ProcessOSALMsg_25
   \   00030C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00030F   E0           MOVX    A,@DPTR
   \   000310   6402         XRL     A,#0x2
   \   000312   7048         JNZ     ??ZDApp_ProcessOSALMsg_7
   1249                {
   1250                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_25:
   \   000314                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000314   12....       LCALL   `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   1251                }
   1252                break;
   \   000317   8043         SJMP    ??ZDApp_ProcessOSALMsg_7
   1253          
   1254              case ZDO_NWK_JOIN_REQ:
   1255                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000319   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00031C   E0           MOVX    A,@DPTR
   \   00031D   6401         XRL     A,#0x1
   \   00031F   6008         JZ      ??ZDApp_ProcessOSALMsg_26
   \   000321   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000324   E0           MOVX    A,@DPTR
   \   000325   6402         XRL     A,#0x2
   \   000327   7033         JNZ     ??ZDApp_ProcessOSALMsg_7
   1256                {
   1257                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_26:
   \   000329   90....       MOV     DPTR,#retryCnt
   \   00032C   7400         MOV     A,#0x0
   \   00032E   F0           MOVX    @DPTR,A
   1258                  devStartMode = MODE_RESUME;
   \   00032F   90....       MOV     DPTR,#devStartMode
   \   000332   7401         MOV     A,#0x1
   \   000334   F0           MOVX    @DPTR,A
   1259                  _tmpRejoinState = true;
   \   000335   90....       MOV     DPTR,#_tmpRejoinState
   \   000338   7401         MOV     A,#0x1
   \   00033A   F0           MOVX    @DPTR,A
   1260                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   00033B                ; Setup parameters for call to function sAddrExtCpy
   \   00033B   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00033D   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00033F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000341   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000343   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1261                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   000346   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000349   7402         MOV     A,#0x2
   \   00034B   F0           MOVX    @DPTR,A
   1262                  ZDApp_NetworkInit( 0 );
   \   00034C                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00034C   7A00         MOV     R2,#0x0
   \   00034E   7B00         MOV     R3,#0x0
   \   000350   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1263                }
   1264                break;
   \   000353   8007         SJMP    ??ZDApp_ProcessOSALMsg_7
   1265          
   1266              default:
   1267                if ( ZG_SECURE_ENABLED )
   1268                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000355                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   000355   EE           MOV     A,R6
   \   000356   FA           MOV     R2,A
   \   000357   EF           MOV     A,R7
   \   000358   FB           MOV     R3,A
   \   000359   12....       LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1269                break;
   1270            }
   1271          
   1272          }
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   00035C   7403         MOV     A,#0x3
   \   00035E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000361   7F0A         MOV     R7,#0xa
   \   000363   02....       LJMP    ?BANKED_LEAVE_XDATA
   1273          
   1274          /*********************************************************************
   1275           * @fn      ZDApp_ProcessMsgCBs()
   1276           *
   1277           * @brief   Process response messages
   1278           *
   1279           * @param   none
   1280           *
   1281           * @return  none
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV     A,#-0x2c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1285            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000023   0300         DW        3
   \   000025   2100         DW        33
   \   000027   2200         DW        34
   \   000029   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   00002B   0080         DW        32768
   \   00002D   0180         DW        32769
   \   00002F   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000031   2180         DW        32801
   \   000033   2280         DW        32802
   \   000035   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   000037   0100         DW        1
   \   000039   2000         DW        32
   \   00003B   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   00003D   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1286            {
   1287          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1288              case NWK_addr_rsp:
   1289              case IEEE_addr_rsp:
   1290                {
   1291                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1292          
   1293                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003F                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000046   8A..         MOV     ?V2,R2
   \   000048   8B..         MOV     ?V3,R3
   \   00004A   85....       MOV     ?V0,?V2
   \   00004D   85....       MOV     ?V1,?V3
   1294                  if ( pAddrRsp )
   \   000050   E5..         MOV     A,?V0
   \   000052   45..         ORL     A,?V1
   \   000054   6048         JZ      ??ZDApp_ProcessMsgCBs_5
   1295                  {
   1296                    if ( pAddrRsp->status == ZSuccess )
   \   000056   85..82       MOV     DPL,?V0
   \   000059   85..83       MOV     DPH,?V1
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   7018         JNZ     ??ZDApp_ProcessMsgCBs_6
   1297                    {
   1298                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00005F                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00005F   E5..         MOV     A,?V0
   \   000061   2403         ADD     A,#0x3
   \   000063   FC           MOV     R4,A
   \   000064   E4           CLR     A
   \   000065   35..         ADDC    A,?V1
   \   000067   FD           MOV     R5,A
   \   000068   85..82       MOV     DPL,?V0
   \   00006B   85..83       MOV     DPH,?V1
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FB           MOV     R3,A
   \   000074   12....       LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1299                    }
   1300          
   1301          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1302                    // look for pending bind entry for NWK_addr_rsp Only
   1303                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   000077   EE           MOV     A,R6
   \   000078   240C         ADD     A,#0xc
   \   00007A   F582         MOV     DPL,A
   \   00007C   E4           CLR     A
   \   00007D   3F           ADDC    A,R7
   \   00007E   F583         MOV     DPH,A
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6400         XRL     A,#0x0
   \   000083   7004         JNZ     ??ZDApp_ProcessMsgCBs_7
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   000089   700C         JNZ     ??ZDApp_ProcessMsgCBs_8
   1304                    {
   1305          #if defined ( REFLECTOR )
   1306                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   00008B                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   00008B   E5..         MOV     A,?V0
   \   00008D   2403         ADD     A,#0x3
   \   00008F   FA           MOV     R2,A
   \   000090   E4           CLR     A
   \   000091   35..         ADDC    A,?V1
   \   000093   FB           MOV     R3,A
   \   000094   12....       LCALL   `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
   1307          #endif
   1308                    }
   1309          #endif
   1310          
   1311                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   000097                ; Setup parameters for call to function osal_mem_free
   \   000097   AA..         MOV     R2,?V0
   \   000099   AB..         MOV     R3,?V1
   \   00009B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1312                  }
   1313                }
   1314                break;
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   00009E   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1315          #endif
   1316          
   1317          #if defined ( REFLECTOR )
   1318              case Bind_req:
   1319              case Unbind_req:
   1320                {
   1321                  ZDO_BindUnbindReq_t bindReq;
   1322                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   0000A1                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   0000A1   7417         MOV     A,#0x17
   \   0000A3   12....       LCALL   ?XSTACK_DISP102_8
   \   0000A6   EE           MOV     A,R6
   \   0000A7   FA           MOV     R2,A
   \   0000A8   EF           MOV     A,R7
   \   0000A9   FB           MOV     R3,A
   \   0000AA   12....       LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1323                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   0000AD                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   0000AD   7417         MOV     A,#0x17
   \   0000AF   12....       LCALL   ?XSTACK_DISP102_8
   \   0000B2   EE           MOV     A,R6
   \   0000B3   FA           MOV     R2,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1324                }
   1325                break;
   \   0000B9   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1326          #endif
   1327          
   1328          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1329              case Bind_rsp:
   1330              case Unbind_rsp:
   1331                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   0000BC   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   7048         JNZ     ??ZDApp_ProcessMsgCBs_9
   \   0000C2   90....       MOV     DPTR,#matchED
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F8           MOV     R0,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F9           MOV     R1,A
   \   0000CA   E8           MOV     A,R0
   \   0000CB   49           ORL     A,R1
   \   0000CC   603C         JZ      ??ZDApp_ProcessMsgCBs_9
   1332                {
   1333                  ZDMatchSendState(
   1334                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1335                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   0000CE   EE           MOV     A,R6
   \   0000CF   240C         ADD     A,#0xc
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   E4           CLR     A
   \   0000D4   3F           ADDC    A,R7
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   6421         XRL     A,#0x21
   \   0000DA   7004         JNZ     ??ZDApp_ProcessMsgCBs_10
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000E0   7004         JNZ     ??ZDApp_ProcessMsgCBs_11
   \   0000E2   7903         MOV     R1,#0x3
   \   0000E4   8002         SJMP    ??ZDApp_ProcessMsgCBs_12
   \                     ??ZDApp_ProcessMsgCBs_11:
   \   0000E6   7902         MOV     R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_12:
   \   0000E8                ; Setup parameters for call to function ZDMatchSendState
   \   0000E8   EE           MOV     A,R6
   \   0000E9   240F         ADD     A,#0xf
   \   0000EB   F582         MOV     DPL,A
   \   0000ED   E4           CLR     A
   \   0000EE   3F           ADDC    A,R7
   \   0000EF   F583         MOV     DPH,A
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   FB           MOV     R3,A
   \   0000F3   EE           MOV     A,R6
   \   0000F4   2413         ADD     A,#0x13
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   E4           CLR     A
   \   0000F9   3F           ADDC    A,R7
   \   0000FA   F583         MOV     DPH,A
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F8           MOV     R0,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F583         MOV     DPH,A
   \   000102   8882         MOV     DPL,R0
   \   000104   E0           MOVX    A,@DPTR
   \   000105   FA           MOV     R2,A
   \   000106   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   000109   E9           MOV     A,R1
   1336                }
   1337                break;
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   00010A   8042         SJMP    ??ZDApp_ProcessMsgCBs_4
   1338          
   1339              case End_Device_Bind_req:
   1340                if (ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00010C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   703C         JNZ     ??ZDApp_ProcessMsgCBs_4
   1341                {
   1342                  ZDEndDeviceBind_t bindReq;
   1343                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \   000112                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   000112   AC..         MOV     R4,?XSP + 0
   \   000114   AD..         MOV     R5,?XSP + 1
   \   000116   EE           MOV     A,R6
   \   000117   FA           MOV     R2,A
   \   000118   EF           MOV     A,R7
   \   000119   FB           MOV     R3,A
   \   00011A   12....       LCALL   `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
   1344                  ZDO_MatchEndDeviceBind( &bindReq );
   \   00011D                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   00011D   AA..         MOV     R2,?XSP + 0
   \   00011F   AB..         MOV     R3,?XSP + 1
   \   000121   12....       LCALL   `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
   1345          
   1346                  // Freeing the cluster lists - if allocated.
   1347                  if ( bindReq.numInClusters )
   \   000124   7411         MOV     A,#0x11
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   600D         JZ      ??ZDApp_ProcessMsgCBs_13
   1348                    osal_mem_free( bindReq.inClusters );
   \   00012C                ; Setup parameters for call to function osal_mem_free
   \   00012C   7412         MOV     A,#0x12
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   E0           MOVX    A,@DPTR
   \   000132   FA           MOV     R2,A
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   FB           MOV     R3,A
   \   000136   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1349                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_13:
   \   000139   7414         MOV     A,#0x14
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   600D         JZ      ??ZDApp_ProcessMsgCBs_4
   1350                    osal_mem_free( bindReq.outClusters );
   \   000141                ; Setup parameters for call to function osal_mem_free
   \   000141   7415         MOV     A,#0x15
   \   000143   12....       LCALL   ?XSTACK_DISP0_8
   \   000146   E0           MOVX    A,@DPTR
   \   000147   FA           MOV     R2,A
   \   000148   A3           INC     DPTR
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   FB           MOV     R3,A
   \   00014B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1351                }
   1352                break;
   1353          #endif
   1354            }
   1355          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   00014E   742C         MOV     A,#0x2c
   \   000150   12....       LCALL   ?DEALLOC_XSTACK8
   \   000153   7F04         MOV     R7,#0x4
   \   000155   02....       LJMP    ?BANKED_LEAVE_XDATA
   1356          
   1357          /*********************************************************************
   1358           * @fn      ZDApp_RegisterCBs()
   1359           *
   1360           * @brief   Process response messages
   1361           *
   1362           * @param   none
   1363           *
   1364           * @return  none
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1367          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1368          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1369            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000010   E9           MOV     A,R1
   1370          #endif
   1371          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1372            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000011                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B80         MOV     R3,#-0x80
   \   000015   90....       MOV     DPTR,#ZDAppTaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00001D   E9           MOV     A,R1
   1373          #endif
   1374          #if ZG_BUILD_COORDINATOR_TYPE
   1375            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \   00001E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001E   7A21         MOV     R2,#0x21
   \   000020   7B80         MOV     R3,#-0x80
   \   000022   90....       MOV     DPTR,#ZDAppTaskID
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00002A   E9           MOV     A,R1
   1376            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \   00002B                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00002B   7A22         MOV     R2,#0x22
   \   00002D   7B80         MOV     R3,#-0x80
   \   00002F   90....       MOV     DPTR,#ZDAppTaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000037   E9           MOV     A,R1
   1377            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \   000038                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000038   7A20         MOV     R2,#0x20
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   90....       MOV     DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000044   E9           MOV     A,R1
   1378          #endif
   1379          #if defined ( REFLECTOR )
   1380            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   000045                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000045   7A21         MOV     R2,#0x21
   \   000047   7B00         MOV     R3,#0x0
   \   000049   90....       MOV     DPTR,#ZDAppTaskID
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000051   E9           MOV     A,R1
   1381            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000052                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000052   7A22         MOV     R2,#0x22
   \   000054   7B00         MOV     R3,#0x0
   \   000056   90....       MOV     DPTR,#ZDAppTaskID
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00005E   E9           MOV     A,R1
   1382          #endif
   1383          }
   \   00005F   D083         POP     DPH
   \   000061   D082         POP     DPL
   \   000063   02....       LJMP    ?BRET
   1384          
   1385          /*********************************************************************
   1386           * @fn      ZDApp_ProcessSecMsg()
   1387           *
   1388           * @brief   Process the incoming security message.
   1389           *
   1390           * @param   msgPtr - message to process
   1391           *
   1392           * @return  none
   1393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1394          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1395          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1396            switch ( msgPtr->event )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   24FC         ADD     A,#-0x4
   \   000010   600E         JZ      ??ZDApp_ProcessSecMsg_0
   \   000012   14           DEC     A
   \   000013   6024         JZ      ??ZDApp_ProcessSecMsg_1
   \   000015   14           DEC     A
   \   000016   6047         JZ      ??ZDApp_ProcessSecMsg_2
   \   000018   14           DEC     A
   \   000019   6044         JZ      ??ZDApp_ProcessSecMsg_2
   \   00001B   14           DEC     A
   \   00001C   602A         JZ      ??ZDApp_ProcessSecMsg_3
   \   00001E   803F         SJMP    ??ZDApp_ProcessSecMsg_2
   1397            {
   1398              case ZDO_TRANSPORT_KEY_IND:
   1399                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000020   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6401         XRL     A,#0x1
   \   000026   6008         JZ      ??ZDApp_ProcessSecMsg_4
   \   000028   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6402         XRL     A,#0x2
   \   00002E   702F         JNZ     ??ZDApp_ProcessSecMsg_2
   1400                {
   1401                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000030                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   1402                }
   1403                break;
   \   000037   8026         SJMP    ??ZDApp_ProcessSecMsg_2
   1404          
   1405              case ZDO_UPDATE_DEVICE_IND:
   1406                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000039   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   7020         JNZ     ??ZDApp_ProcessSecMsg_2
   1407                {
   1408                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \   00003F                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
   1409                }
   1410                break;
   \   000046   8017         SJMP    ??ZDApp_ProcessSecMsg_2
   1411          
   1412              case ZDO_REMOVE_DEVICE_IND:
   1413                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1414                {
   1415                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1416                }
   1417                break;
   1418          
   1419              case ZDO_REQUEST_KEY_IND:
   1420                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1421                {
   1422                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1423                  {
   1424                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1425                  }
   1426                }
   1427                break;
   1428          
   1429              case ZDO_SWITCH_KEY_IND:
   1430                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000048   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   6401         XRL     A,#0x1
   \   00004E   6008         JZ      ??ZDApp_ProcessSecMsg_5
   \   000050   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6402         XRL     A,#0x2
   \   000056   7007         JNZ     ??ZDApp_ProcessSecMsg_2
   1431                {
   1432                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   000058                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000058   EE           MOV     A,R6
   \   000059   FA           MOV     R2,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FB           MOV     R3,A
   \   00005C   12....       LCALL   `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1433                }
   1434                break;
   1435          
   1436              default:
   1437                // Unsupported messages
   1438                break;
   1439            }
   1440          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   00005F   7F01         MOV     R7,#0x1
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
   1441          
   1442          /*********************************************************************
   1443           * @fn      ZDApp_ProcessNetworkJoin()
   1444           *
   1445           * @brief
   1446           *
   1447           *   Save off the Network key information.
   1448           *
   1449           * @param   none
   1450           *
   1451           * @return  none
   1452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1453          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1454          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1455            if ( (devState == DEV_NWK_JOINING) ||
   1456                ((devState == DEV_NWK_ORPHAN)  &&
   1457                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6018         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   90....       MOV     DPTR,#devState
   \   000015   E0           MOVX    A,@DPTR
   \   000016   640A         XRL     A,#0xa
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000020   E0           MOVX    A,@DPTR
   \   000021   5407         ANL     A,#0x7
   \   000023   6401         XRL     A,#0x1
   \   000025   6003         JZ      $+5
   \   000027   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   1458            {
   1459              // Result of a Join attempt by this device.
   1460              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   00002A   90....       MOV     DPTR,#nwkStatus
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6003         JZ      $+5
   \   000030   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1461              {
   1462                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000033                ; Setup parameters for call to function osal_set_event
   \   000033   7A10         MOV     R2,#0x10
   \   000035   7B00         MOV     R3,#0x0
   \   000037   90....       MOV     DPTR,#ZDAppTaskID
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00003F   E9           MOV     A,R1
   1463          
   1464          #if defined ( POWER_SAVING )
   1465                osal_pwrmgr_device( PWRMGR_BATTERY );
   1466          #endif
   1467          
   1468                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   000040                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000040   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000043   E9           MOV     A,R1
   \   000044   7010         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1469                {
   1470                  // wait for auth from trust center
   1471                  devState = DEV_END_DEVICE_UNAUTH;
   \   000046   90....       MOV     DPTR,#devState
   \   000049   7405         MOV     A,#0x5
   \   00004B   F0           MOVX    @DPTR,A
   1472          
   1473                  // Start the reset timer for MAX UNAUTH time
   1474                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   00004C                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   00004C   7A10         MOV     R2,#0x10
   \   00004E   7B27         MOV     R3,#0x27
   \   000050   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   000053   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1475                }
   1476                else
   1477                {
   1478                  if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000056   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6008         JZ      ??ZDApp_ProcessNetworkJoin_5
   \   00005C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6401         XRL     A,#0x1
   \   000062   7018         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1479                  {
   1480                    if ( devState == DEV_NWK_ORPHAN
   1481                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000064   90....       MOV     DPTR,#devState
   \   000067   E0           MOVX    A,@DPTR
   \   000068   640A         XRL     A,#0xa
   \   00006A   7010         JNZ     ??ZDApp_ProcessNetworkJoin_6
   \   00006C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   5407         ANL     A,#0x7
   \   000072   6402         XRL     A,#0x2
   \   000074   6006         JZ      ??ZDApp_ProcessNetworkJoin_6
   1482                    {
   1483                      // Change NIB state to router for restore
   1484                      _NIB.nwkState = NWK_ROUTER;
   \   000076   90....       MOV     DPTR,#_NIB + 35
   \   000079   7408         MOV     A,#0x8
   \   00007B   F0           MOVX    @DPTR,A
   1485                    }
   1486                  }
   1487          
   1488                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00007C   90....       MOV     DPTR,#devState
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   6403         XRL     A,#0x3
   \   000082   7003         JNZ     ??ZDApp_ProcessNetworkJoin_7
   1489                  {
   1490                    ZDApp_AnnounceNewAddress();
   \   000084                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000084   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1491                  }
   1492          
   1493                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000087   90....       MOV     DPTR,#devState
   \   00008A   7406         MOV     A,#0x6
   \   00008C   F0           MOVX    @DPTR,A
   1494                  if ( ZSTACK_ROUTER_BUILD )
   \   00008D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000090   E0           MOVX    A,@DPTR
   \   000091   600B         JZ      ??ZDApp_ProcessNetworkJoin_8
   \   000093   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000096   E0           MOVX    A,@DPTR
   \   000097   6401         XRL     A,#0x1
   \   000099   6003         JZ      $+5
   \   00009B   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1495                  {
   1496                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1497                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   00009E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   5407         ANL     A,#0x7
   \   0000A4   6402         XRL     A,#0x2
   \   0000A6   7003         JNZ     $+5
   \   0000A8   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1498                    {
   1499                      NLME_StartRouterRequest( 0, 0, false );
   \   0000AB                ; Setup parameters for call to function NLME_StartRouterRequest
   \   0000AB   7B00         MOV     R3,#0x0
   \   0000AD   7A00         MOV     R2,#0x0
   \   0000AF   7900         MOV     R1,#0x0
   \   0000B1   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   0000B4   E9           MOV     A,R1
   \   0000B5   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1500                    }
   1501                  }
   1502                }
   1503              }
   1504              else
   1505              {
   1506                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000B8   90....       MOV     DPTR,#devStartMode
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   6401         XRL     A,#0x1
   \   0000BE   7040         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   0000C0   90....       MOV     DPTR,#retryCnt
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   2401         ADD     A,#0x1
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   90....       MOV     DPTR,#retryCnt
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   C3           CLR     C
   \   0000CC   9403         SUBB    A,#0x3
   \   0000CE   4030         JC      ??ZDApp_ProcessNetworkJoin_9
   1507                {
   1508                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   0000D0   90....       MOV     DPTR,#_NIB + 33
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   64FF         XRL     A,#0xff
   \   0000D6   7004         JNZ     ??ZDApp_ProcessNetworkJoin_10
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000DC   600E         JZ      ??ZDApp_ProcessNetworkJoin_11
   \   0000DE   90....       MOV     DPTR,#_NIB + 33
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   64FE         XRL     A,#0xfe
   \   0000E4   7004         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000EA   7008         JNZ     ??ZDApp_ProcessNetworkJoin_13
   1509                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000EC   90....       MOV     DPTR,#devStartMode
   \   0000EF   7400         MOV     A,#0x0
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   800C         SJMP    ??ZDApp_ProcessNetworkJoin_9
   1510                  else
   1511                  {
   1512                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000F4   90....       MOV     DPTR,#devStartMode
   \   0000F7   7403         MOV     A,#0x3
   \   0000F9   F0           MOVX    @DPTR,A
   1513                    _tmpRejoinState = true;
   \   0000FA   90....       MOV     DPTR,#_tmpRejoinState
   \   0000FD   7401         MOV     A,#0x1
   \   0000FF   F0           MOVX    @DPTR,A
   1514                  }
   1515                }
   1516          
   1517                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1518                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000100                ; Setup parameters for call to function NLME_GetShortAddr
   \   000100   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000103   8A..         MOV     ?V0,R2
   \   000105   8B..         MOV     ?V1,R3
   \   000107   74FE         MOV     A,#-0x2
   \   000109   65..         XRL     A,?V0
   \   00010B   7004         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   00010D   74FF         MOV     A,#-0x1
   \   00010F   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   000111   700E         JNZ     ??ZDApp_ProcessNetworkJoin_15
   \   000113   90....       MOV     DPTR,#_NIB + 20
   \   000116   E0           MOVX    A,@DPTR
   \   000117   64FE         XRL     A,#0xfe
   \   000119   7004         JNZ     ??ZDApp_ProcessNetworkJoin_16
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00011F   6021         JZ      ??ZDApp_ProcessNetworkJoin_17
   1519                {
   1520                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   000121   85..82       MOV     DPL,?XSP + 0
   \   000124   85..83       MOV     DPH,?XSP + 1
   \   000127   74FE         MOV     A,#-0x2
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A3           INC     DPTR
   \   00012B   74FF         MOV     A,#-0x1
   \   00012D   F0           MOVX    @DPTR,A
   1521                  // Invalidate nwk addr so end device does not use in its data reqs.
   1522                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00012E   90....       MOV     DPTR,#_NIB + 20
   \   000131   74FE         MOV     A,#-0x2
   \   000133   F0           MOVX    @DPTR,A
   \   000134   A3           INC     DPTR
   \   000135   74FF         MOV     A,#-0x1
   \   000137   F0           MOVX    @DPTR,A
   1523                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   000138                ; Setup parameters for call to function ZMacSetReq
   \   000138   AA..         MOV     R2,?XSP + 0
   \   00013A   AB..         MOV     R3,?XSP + 1
   \   00013C   7953         MOV     R1,#0x53
   \   00013E   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000141   E9           MOV     A,R1
   1524                }
   1525          
   1526                // Clear the neighbor Table and network discovery tables.
   1527                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000142                ; Setup parameters for call to function nwkNeighborInitTable
   \   000142   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1528                NLME_NwkDiscTerm();
   \   000145                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000145   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1529          
   1530                zdoDiscCounter = 1;
   \   000148   90....       MOV     DPTR,#zdoDiscCounter
   \   00014B   7401         MOV     A,#0x1
   \   00014D   F0           MOVX    @DPTR,A
   1531          
   1532                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1533                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00014E                ; Setup parameters for call to function osal_rand
   \   00014E   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000151   8A..         MOV     ?V0,R2
   \   000153   8B..         MOV     ?V1,R3
   \   000155   A8..         MOV     R0,?V0
   \   000157   A9..         MOV     R1,?V1
   \   000159                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000159   E8           MOV     A,R0
   \   00015A   547F         ANL     A,#0x7f
   \   00015C   F8           MOV     R0,A
   \   00015D   E9           MOV     A,R1
   \   00015E   5400         ANL     A,#0x0
   \   000160   F9           MOV     R1,A
   \   000161   E8           MOV     A,R0
   \   000162   2464         ADD     A,#0x64
   \   000164   FA           MOV     R2,A
   \   000165   E4           CLR     A
   \   000166   39           ADDC    A,R1
   \   000167   FB           MOV     R3,A
   \   000168   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   00016B   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1534              }
   1535            }
   1536            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   00016E   90....       MOV     DPTR,#devState
   \   000171   E0           MOVX    A,@DPTR
   \   000172   640A         XRL     A,#0xa
   \   000174   600B         JZ      ??ZDApp_ProcessNetworkJoin_18
   \   000176   90....       MOV     DPTR,#devState
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   6404         XRL     A,#0x4
   \   00017C   6003         JZ      $+5
   \   00017E   02....       LJMP    ??ZDApp_ProcessNetworkJoin_19 & 0xFFFF
   1537            {
   1538              // results of an orphaning attempt by this device
   1539              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   000181   90....       MOV     DPTR,#nwkStatus
   \   000184   E0           MOVX    A,@DPTR
   \   000185   6003         JZ      $+5
   \   000187   02....       LJMP    ??ZDApp_ProcessNetworkJoin_20 & 0xFFFF
   1540              {
   1541                // Verify NWK key is available before sending Device_annce
   1542                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   00018A                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00018A   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00018D   E9           MOV     A,R1
   \   00018E   701D         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1543                {
   1544                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000190                ; Setup parameters for call to function osal_set_event
   \   000190   7A10         MOV     R2,#0x10
   \   000192   7B00         MOV     R3,#0x0
   \   000194   90....       MOV     DPTR,#ZDAppTaskID
   \   000197   E0           MOVX    A,@DPTR
   \   000198   F9           MOV     R1,A
   \   000199   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00019C   E9           MOV     A,R1
   1545          
   1546                  // wait for auth from trust center
   1547                  devState = DEV_END_DEVICE_UNAUTH;
   \   00019D   90....       MOV     DPTR,#devState
   \   0001A0   7405         MOV     A,#0x5
   \   0001A2   F0           MOVX    @DPTR,A
   1548          
   1549                  // Start the reset timer for MAX UNAUTH time
   1550                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   0001A3                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   0001A3   7A10         MOV     R2,#0x10
   \   0001A5   7B27         MOV     R3,#0x27
   \   0001A7   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   0001AA   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1551                }
   1552                else
   1553                {
   1554          
   1555                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   0001AD   90....       MOV     DPTR,#devState
   \   0001B0   7406         MOV     A,#0x6
   \   0001B2   F0           MOVX    @DPTR,A
   1556                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001B3                ; Setup parameters for call to function osal_set_event
   \   0001B3   7A10         MOV     R2,#0x10
   \   0001B5   7B00         MOV     R3,#0x0
   \   0001B7   90....       MOV     DPTR,#ZDAppTaskID
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   F9           MOV     R1,A
   \   0001BC   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0001BF   E9           MOV     A,R1
   1557                  // setup Power Manager Device
   1558          #if defined ( POWER_SAVING )
   1559                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1560          #endif
   1561          
   1562                  // The receiver is on, turn network layer polling off.
   1563                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   0001C0   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   A2E3         MOV     C,0xE0 /* A   */.3
   \   0001C6   501B         JNC     ??ZDApp_ProcessNetworkJoin_22
   1564                  {
   1565          #if defined ( ZIGBEE_CHILD_AGING )
   1566                    // if Child Table Management process is not enabled
   1567                    if ( zgChildAgingEnable == FALSE )
   \   0001C8   90....       MOV     DPTR,#zgChildAgingEnable
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   7015         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1568          #endif // ZIGBEE_CHILD_AGING
   1569                    {
   1570                      NLME_SetPollRate( 0 );
   \   0001CE                ; Setup parameters for call to function NLME_SetPollRate
   \   0001CE   7A00         MOV     R2,#0x0
   \   0001D0   7B00         MOV     R3,#0x0
   \   0001D2   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1571                      NLME_SetQueuedPollRate( 0 );
   \   0001D5                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0001D5   7A00         MOV     R2,#0x0
   \   0001D7   7B00         MOV     R3,#0x0
   \   0001D9   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1572                      NLME_SetResponseRate( 0 );
   \   0001DC                ; Setup parameters for call to function NLME_SetResponseRate
   \   0001DC   7A00         MOV     R2,#0x0
   \   0001DE   7B00         MOV     R3,#0x0
   \   0001E0   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1573                    }
   1574                  }
   1575          
   1576                  if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   0001E3   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   6008         JZ      ??ZDApp_ProcessNetworkJoin_23
   \   0001E9   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   6401         XRL     A,#0x1
   \   0001EF   7014         JNZ     ??ZDApp_ProcessNetworkJoin_24
   1577                  {
   1578                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1579                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   0001F1   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   5407         ANL     A,#0x7
   \   0001F7   6402         XRL     A,#0x2
   \   0001F9   600A         JZ      ??ZDApp_ProcessNetworkJoin_24
   1580                    {
   1581                      NLME_StartRouterRequest( 0, 0, false );
   \   0001FB                ; Setup parameters for call to function NLME_StartRouterRequest
   \   0001FB   7B00         MOV     R3,#0x0
   \   0001FD   7A00         MOV     R2,#0x0
   \   0001FF   7900         MOV     R1,#0x0
   \   000201   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000204   E9           MOV     A,R1
   1582                    }
   1583                  }
   1584          
   1585                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   000205                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000205   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   000208   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1586                }
   1587              }
   1588              else
   1589              {
   1590                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00020B   90....       MOV     DPTR,#devStartMode
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   6401         XRL     A,#0x1
   \   000211   7050         JNZ     ??ZDApp_ProcessNetworkJoin_25
   1591                {
   1592                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000213   90....       MOV     DPTR,#retryCnt
   \   000216   E0           MOVX    A,@DPTR
   \   000217   2401         ADD     A,#0x1
   \   000219   F0           MOVX    @DPTR,A
   \   00021A   90....       MOV     DPTR,#retryCnt
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   C3           CLR     C
   \   00021F   9404         SUBB    A,#0x4
   \   000221   5032         JNC     ??ZDApp_ProcessNetworkJoin_26
   1593                  {
   1594                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000223   90....       MOV     DPTR,#_NIB + 33
   \   000226   E0           MOVX    A,@DPTR
   \   000227   64FF         XRL     A,#0xff
   \   000229   7004         JNZ     ??ZDApp_ProcessNetworkJoin_27
   \   00022B   A3           INC     DPTR
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   00022F   600E         JZ      ??ZDApp_ProcessNetworkJoin_28
   \   000231   90....       MOV     DPTR,#_NIB + 33
   \   000234   E0           MOVX    A,@DPTR
   \   000235   64FE         XRL     A,#0xfe
   \   000237   7004         JNZ     ??ZDApp_ProcessNetworkJoin_29
   \   000239   A3           INC     DPTR
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_29:
   \   00023D   7008         JNZ     ??ZDApp_ProcessNetworkJoin_30
   1595                      devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   00023F   90....       MOV     DPTR,#devStartMode
   \   000242   7400         MOV     A,#0x0
   \   000244   F0           MOVX    @DPTR,A
   \   000245   801C         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1596                    else
   1597                    {
   1598                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_30:
   \   000247   90....       MOV     DPTR,#devStartMode
   \   00024A   7403         MOV     A,#0x3
   \   00024C   F0           MOVX    @DPTR,A
   1599                      _tmpRejoinState = true;
   \   00024D   90....       MOV     DPTR,#_tmpRejoinState
   \   000250   7401         MOV     A,#0x1
   \   000252   F0           MOVX    @DPTR,A
   \   000253   800E         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1600                    }
   1601                  }
   1602                  // Do a normal join to the network after certain times of rejoin retries
   1603                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   000255   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   000258   E0           MOVX    A,@DPTR
   \   000259   6401         XRL     A,#0x1
   \   00025B   7006         JNZ     ??ZDApp_ProcessNetworkJoin_25
   1604                  {
   1605                    devStartMode = MODE_JOIN;
   \   00025D   90....       MOV     DPTR,#devStartMode
   \   000260   7400         MOV     A,#0x0
   \   000262   F0           MOVX    @DPTR,A
   1606                  }
   1607                }
   1608          
   1609                // Clear the neighbor Table and network discovery tables.
   1610                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   000263                ; Setup parameters for call to function nwkNeighborInitTable
   \   000263   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1611                NLME_NwkDiscTerm();
   \   000266                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000266   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1612          
   1613                // setup a retry for later...
   1614                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1615                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   000269                ; Setup parameters for call to function osal_rand
   \   000269   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00026C   8A..         MOV     ?V0,R2
   \   00026E   8B..         MOV     ?V1,R3
   \   000270   A8..         MOV     R0,?V0
   \   000272   A9..         MOV     R1,?V1
   \   000274                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000274   E8           MOV     A,R0
   \   000275   547F         ANL     A,#0x7f
   \   000277   F8           MOV     R0,A
   \   000278   E9           MOV     A,R1
   \   000279   5400         ANL     A,#0x0
   \   00027B   F9           MOV     R1,A
   \   00027C   E8           MOV     A,R0
   \   00027D   2464         ADD     A,#0x64
   \   00027F   FA           MOV     R2,A
   \   000280   E4           CLR     A
   \   000281   39           ADDC    A,R1
   \   000282   FB           MOV     R3,A
   \   000283   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000286   8018         SJMP    ??ZDApp_ProcessNetworkJoin_4
   1616              }
   1617            }
   1618          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1619            else
   1620            {
   1621              // Assume from address conflict
   1622              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000288   90....       MOV     DPTR,#_NIB + 96
   \   00028B   E0           MOVX    A,@DPTR
   \   00028C   6402         XRL     A,#0x2
   \   00028E   7010         JNZ     ??ZDApp_ProcessNetworkJoin_4
   1623              {
   1624                // Notify the network
   1625                ZDApp_AnnounceNewAddress();
   \   000290                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000290   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1626          
   1627                // Notify apps
   1628                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000293                ; Setup parameters for call to function osal_set_event
   \   000293   7A10         MOV     R2,#0x10
   \   000295   7B00         MOV     R3,#0x0
   \   000297   90....       MOV     DPTR,#ZDAppTaskID
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   F9           MOV     R1,A
   \   00029C   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00029F   E9           MOV     A,R1
   1629              }
   1630            }
   1631          #endif
   1632          }
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   0002A0   7402         MOV     A,#0x2
   \   0002A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A5   7F02         MOV     R7,#0x2
   \   0002A7   02....       LJMP    ?BANKED_LEAVE_XDATA
   1633          
   1634          /*********************************************************************
   1635           * @fn      ZDApp_SaveNwkKey()
   1636           *
   1637           * @brief   Save off the Network key information.
   1638           *
   1639           * @param   none
   1640           *
   1641           * @return  none
   1642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1643          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1645            nwkActiveKeyItems keyItems;
   1646          
   1647            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1648          
   1649            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1650                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV     R0,?XSP + 0
   \   000013   A9..         MOV     R1,?XSP + 1
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV     ?V0,#0x15
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A82         MOV     R2,#-0x7e
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   E9           MOV     A,R1
   1651          
   1652            nwkFrameCounterChanges = 0;
   \   00003A   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003D   7400         MOV     A,#0x0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   7400         MOV     A,#0x0
   \   000043   F0           MOVX    @DPTR,A
   1653          
   1654            // Clear copy in RAM before return.
   1655            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000044                ; Setup parameters for call to function osal_memset
   \   000044   7C15         MOV     R4,#0x15
   \   000046   7D00         MOV     R5,#0x0
   \   000048   7900         MOV     R1,#0x0
   \   00004A   AA..         MOV     R2,?XSP + 0
   \   00004C   AB..         MOV     R3,?XSP + 1
   \   00004E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1656          
   1657          }
   \   000051   7415         MOV     A,#0x15
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   7F02         MOV     R7,#0x2
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
   1658          
   1659          /*********************************************************************
   1660           * @fn      ZDApp_ForceConcentratorChange()
   1661           *
   1662           * @brief   Force a network concentrator change by resetting
   1663           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1664           *          from NV and set nwk event.
   1665           *
   1666           * @param   none
   1667           *
   1668           * @return  none
   1669           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1670          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1671          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1672            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002B   E9           MOV     A,R1
   1673            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002C                ; Setup parameters for call to function osal_nv_read
   \   00002C   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002F   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   75..01       MOV     ?V0,#0x1
   \   00003A   75..00       MOV     ?V1,#0x0
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C00         MOV     R4,#0x0
   \   000044   7D00         MOV     R5,#0x0
   \   000046   7A33         MOV     R2,#0x33
   \   000048   7B00         MOV     R3,#0x0
   \   00004A   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004D   7404         MOV     A,#0x4
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   E9           MOV     A,R1
   1674          
   1675            if ( zgConcentratorEnable == TRUE )
   \   000053   90....       MOV     DPTR,#zgConcentratorEnable
   \   000056   E0           MOVX    A,@DPTR
   \   000057   6401         XRL     A,#0x1
   \   000059   701A         JNZ     ??ZDApp_ForceConcentratorChange_0
   1676            {
   1677              // Start next event
   1678              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   00005B                ; Setup parameters for call to function osal_start_timerEx
   \   00005B   90....       MOV     DPTR,#__Constant_64
   \   00005E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000061   7A00         MOV     R2,#0x0
   \   000063   7B08         MOV     R3,#0x8
   \   000065   90....       MOV     DPTR,#NWK_TaskID
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006D   7404         MOV     A,#0x4
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000072   E9           MOV     A,R1
   \   000073   800D         SJMP    ??ZDApp_ForceConcentratorChange_1
   1679            }
   1680            else
   1681            {
   1682              // Stop the next event
   1683              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000075                ; Setup parameters for call to function osal_stop_timerEx
   \   000075   7A00         MOV     R2,#0x0
   \   000077   7B08         MOV     R3,#0x8
   \   000079   90....       MOV     DPTR,#NWK_TaskID
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000081   E9           MOV     A,R1
   1684            }
   1685          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   000082   7F02         MOV     R7,#0x2
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
   1686          
   1687          /*********************************************************************
   1688           * @fn      ZDApp_ResetNwkKey()
   1689           *
   1690           * @brief   Reset the Network key information in NV.
   1691           *
   1692           * @param   none
   1693           *
   1694           * @return  none
   1695           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1696          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1697          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1698            nwkActiveKeyItems keyItems;
   1699          
   1700            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1701            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1702                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   1703          }
   \   000040   7415         MOV     A,#0x15
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   7F02         MOV     R7,#0x2
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
   1704          
   1705          /*********************************************************************
   1706           * @fn      ZDApp_RestoreNwkKey()
   1707           *
   1708           * @brief
   1709           *
   1710           *   Save off the Network key information.
   1711           *
   1712           * @param   none
   1713           *
   1714           * @return  true if restored from NV, false if not
   1715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1716          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1717          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1718            nwkActiveKeyItems keyItems;
   1719            uint8 ret = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1720          
   1721            // Restore the key information
   1722            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1723                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   A8..         MOV     R0,?XSP + 0
   \   00000E   A9..         MOV     R1,?XSP + 1
   \   000010   88..         MOV     ?V0,R0
   \   000012   89..         MOV     ?V1,R1
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..15       MOV     ?V0,#0x15
   \   00001C   75..00       MOV     ?V1,#0x0
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C00         MOV     R4,#0x0
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A82         MOV     R2,#-0x7e
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   6003         JZ      $+5
   \   000037   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1724            {
   1725              uint8 nullKey[SEC_KEY_LEN];
   1726          
   1727              // initialize default value to compare to
   1728              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   00003A                ; Setup parameters for call to function osal_memset
   \   00003A   7C10         MOV     R4,#0x10
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7900         MOV     R1,#0x0
   \   000040   7415         MOV     A,#0x15
   \   000042   12....       LCALL   ?XSTACK_DISP101_8
   \   000045   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1729          
   1730              // if stored key is different than default value, then a key has been established
   1731              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000048                ; Setup parameters for call to function osal_memcmp
   \   000048   7415         MOV     A,#0x15
   \   00004A   12....       LCALL   ?XSTACK_DISP100_8
   \   00004D   88..         MOV     ?V0,R0
   \   00004F   89..         MOV     ?V1,R1
   \   000051   75..00       MOV     ?V2,#0x0
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C10         MOV     R4,#0x10
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   A982         MOV     R1,DPL
   \   000064   AA83         MOV     R2,DPH
   \   000066   7B00         MOV     R3,#0x0
   \   000068   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00006B   7403         MOV     A,#0x3
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   E9           MOV     A,R1
   \   000071   7062         JNZ     ??ZDApp_RestoreNwkKey_0
   1732              {
   1733                // Increment the frame counter stored in NV
   1734                keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1735                                           NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000073   90....       MOV     DPTR,#__Constant_4e2
   \   000076   78..         MOV     R0,#?V0
   \   000078   12....       LCALL   ?L_MOV_X
   \   00007B   7411         MOV     A,#0x11
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?L_ADD_TO_X
   1736          
   1737                nwkFrameCounter = keyItems.frameCounter;
   \   000085   7411         MOV     A,#0x11
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   12....       LCALL   ?XLOAD_R0123
   \   00008D   90....       MOV     DPTR,#nwkFrameCounter
   \   000090   12....       LCALL   ?XSTORE_R0123
   1738          
   1739                // Save the updated Frame Counter right away
   1740                osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1741                               (void *)&keyItems );
   \   000093                ; Setup parameters for call to function osal_nv_write
   \   000093   A8..         MOV     R0,?XSP + 0
   \   000095   A9..         MOV     R1,?XSP + 1
   \   000097   88..         MOV     ?V0,R0
   \   000099   89..         MOV     ?V1,R1
   \   00009B   78..         MOV     R0,#?V0
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   75..15       MOV     ?V0,#0x15
   \   0000A3   75..00       MOV     ?V1,#0x0
   \   0000A6   78..         MOV     R0,#?V0
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   7C00         MOV     R4,#0x0
   \   0000AD   7D00         MOV     R5,#0x0
   \   0000AF   7A82         MOV     R2,#-0x7e
   \   0000B1   7B00         MOV     R3,#0x0
   \   0000B3   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B6   7404         MOV     A,#0x4
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV     A,R1
   1742          
   1743                nwkFrameCounterChanges = 0;
   \   0000BC   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000BF   7400         MOV     A,#0x0
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   7400         MOV     A,#0x0
   \   0000C5   F0           MOVX    @DPTR,A
   1744          
   1745                ret = TRUE;
   \   0000C6   7E01         MOV     R6,#0x1
   1746          
   1747                // Clear copy in RAM before return.
   1748                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C8                ; Setup parameters for call to function osal_memset
   \   0000C8   7C15         MOV     R4,#0x15
   \   0000CA   7D00         MOV     R5,#0x0
   \   0000CC   7900         MOV     R1,#0x0
   \   0000CE   AA..         MOV     R2,?XSP + 0
   \   0000D0   AB..         MOV     R3,?XSP + 1
   \   0000D2   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1749              }
   1750            }
   1751          
   1752            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000D5   EE           MOV     A,R6
   \   0000D6   F9           MOV     R1,A
   \   0000D7   7425         MOV     A,#0x25
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   7F04         MOV     R7,#0x4
   \   0000DE   02....       LJMP    ?BANKED_LEAVE_XDATA
   1753          }
   1754          
   1755          /*********************************************************************
   1756           * @fn      ZDApp_ResetTimerStart
   1757           *
   1758           * @brief   Start the reset timer.
   1759           *
   1760           * @param   delay - delay time(ms) before reset
   1761           *
   1762           * @return  none
   1763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1764          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1765          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1766            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   7020         JNZ     ??ZDApp_ResetTimerStart_0
   1767            {
   1768              // Start the rest timer
   1769              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   8E..         MOV     ?V0,R6
   \   00001D   8F..         MOV     ?V1,R7
   \   00001F   E4           CLR     A
   \   000020   F5..         MOV     ?V2,A
   \   000022   F5..         MOV     ?V3,A
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000029   7A04         MOV     R2,#0x4
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   90....       MOV     DPTR,#ZDAppTaskID
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000035   7404         MOV     A,#0x4
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003A   E9           MOV     A,R1
   1770            }
   1771          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   00003B   7F04         MOV     R7,#0x4
   \   00003D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1772          
   1773          /*********************************************************************
   1774           * @fn      ZDApp_ResetTimerCancel
   1775           *
   1776           * @brief   Cancel the reset timer.
   1777           *
   1778           * @param   none
   1779           *
   1780           * @return  none
   1781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1782          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1783          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1784            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005   7A04         MOV     R2,#0x4
   \   000007   7B00         MOV     R3,#0x0
   \   000009   90....       MOV     DPTR,#ZDAppTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000011   E9           MOV     A,R1
   \   000012   FE           MOV     R6,A
   1785            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000013                ; Setup parameters for call to function osal_clear_event
   \   000013   7A04         MOV     R2,#0x4
   \   000015   7B00         MOV     R3,#0x0
   \   000017   90....       MOV     DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   \   00001F   E9           MOV     A,R1
   1786          }
   \   000020   7F01         MOV     R7,#0x1
   \   000022   02....       LJMP    ?BANKED_LEAVE_XDATA
   1787          
   1788          /*********************************************************************
   1789           * @fn      ZDApp_LeaveCtrlInit
   1790           *
   1791           * @brief   Initialize the leave control logic.
   1792           *
   1793           * @param   none
   1794           *
   1795           * @return  none
   1796           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1797          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1798          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1799            uint8 status;
   1800          
   1801          
   1802            // Initialize control state
   1803            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   7400         MOV     A,#0x0
   \   00000A   F0           MOVX    @DPTR,A
   1804          
   1805            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1806                                        sizeof(ZDApp_LeaveCtrl),
   1807                                        &ZDApp_LeaveCtrl );
   \   00000B                ; Setup parameters for call to function osal_nv_item_init
   \   00000B   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000E   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C01         MOV     R4,#0x1
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   \   000026   E9           MOV     A,R1
   \   000027   FE           MOV     R6,A
   1808          
   1809            if ( status == ZSUCCESS )
   \   000028   EE           MOV     A,R6
   \   000029   7027         JNZ     ??ZDApp_LeaveCtrlInit_0
   1810            {
   1811              // Read saved control
   1812              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1813                            0,
   1814                            sizeof( uint8 ),
   1815                            &ZDApp_LeaveCtrl);
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00002E   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A85         MOV     R2,#-0x7b
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   E9           MOV     A,R1
   1816            }
   1817          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000052   7F02         MOV     R7,#0x2
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
   1818          
   1819          /*********************************************************************
   1820           * @fn      ZDApp_LeaveCtrlSet
   1821           *
   1822           * @brief   Set the leave control logic.
   1823           *
   1824           * @param   ra - reassociate flag
   1825           *
   1826           * @return  none
   1827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1828          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1829          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1830            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1831          
   1832            if ( ra == TRUE )
   \   00000D   7401         MOV     A,#0x1
   \   00000F   6E           XRL     A,R6
   \   000010   7007         JNZ     ??ZDApp_LeaveCtrlSet_0
   1833            {
   1834              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000012   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000015   E0           MOVX    A,@DPTR
   \   000016   D2E1         SETB    0xE0 /* A   */.1
   \   000018   F0           MOVX    @DPTR,A
   1835            }
   1836          
   1837            // Write the leave control
   1838            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1839                           0,
   1840                           sizeof( uint8 ),
   1841                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000019                ; Setup parameters for call to function osal_nv_write
   \   000019   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00001C   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..01       MOV     ?V0,#0x1
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A85         MOV     R2,#-0x7b
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   1842          }
   \   000040   7F02         MOV     R7,#0x2
   \   000042   02....       LJMP    ?BANKED_LEAVE_XDATA
   1843          
   1844          /*********************************************************************
   1845           * @fn      ZDApp_LeaveCtrlReset
   1846           *
   1847           * @brief   Re-initialize the leave control logic.
   1848           *
   1849           * @param   none
   1850           *
   1851           * @return  none
   1852           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1853          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1854          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1855            // Set leave control to initialized state
   1856            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   7400         MOV     A,#0x0
   \   00000A   F0           MOVX    @DPTR,A
   1857          
   1858            // Write initialized control
   1859            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1860                          0,
   1861                          sizeof( uint8 ),
   1862                          &ZDApp_LeaveCtrl);
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000E   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   75..01       MOV     ?V0,#0x1
   \   000019   75..00       MOV     ?V1,#0x0
   \   00001C   78..         MOV     R0,#?V0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   7C00         MOV     R4,#0x0
   \   000023   7D00         MOV     R5,#0x0
   \   000025   7A85         MOV     R2,#-0x7b
   \   000027   7B00         MOV     R3,#0x0
   \   000029   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000031   E9           MOV     A,R1
   1863          }
   \   000032   7F02         MOV     R7,#0x2
   \   000034   02....       LJMP    ?BANKED_LEAVE_XDATA
   1864          
   1865          /*********************************************************************
   1866           * @fn      ZDApp_LeaveCtrlBypass
   1867           *
   1868           * @brief   Check if NV restore should be skipped during a leave reset.
   1869           *
   1870           * @param   none
   1871           *
   1872           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1873           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1874          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1875          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1876            uint8 bypass;
   1877          
   1878            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   5004         JNC     ??ZDApp_LeaveCtrlBypass_0
   1879            {
   1880              bypass = TRUE;
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   8002         SJMP    ??ZDApp_LeaveCtrlBypass_1
   1881            }
   1882            else
   1883            {
   1884              bypass = FALSE;
   \                     ??ZDApp_LeaveCtrlBypass_0:
   \   000010   7900         MOV     R1,#0x0
   1885            }
   1886          
   1887            return bypass;
   \                     ??ZDApp_LeaveCtrlBypass_1:
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
   1888          }
   1889          
   1890          /*********************************************************************
   1891           * @fn      ZDApp_LeaveCtrlStartup
   1892           *
   1893           * @brief   Check for startup conditions during a leave reset.
   1894           *
   1895           * @param   state      - devState_t determined by leave control logic
   1896           * @param   startDelay - startup delay
   1897           *
   1898           * @return  none
   1899           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1900          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1901          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   1902            *startDelay = 0;
   \   00000D   85..82       MOV     DPL,?V0
   \   000010   85..83       MOV     DPH,?V1
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
   1903          
   1904            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00001A   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000020   5021         JNC     ??ZDApp_LeaveCtrlStartup_0
   1905            {
   1906              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000022   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000025   E0           MOVX    A,@DPTR
   \   000026   A2E1         MOV     C,0xE0 /* A   */.1
   \   000028   500F         JNC     ??ZDApp_LeaveCtrlStartup_1
   1907              {
   1908                *startDelay = LEAVE_RESET_DELAY;
   \   00002A   85..82       MOV     DPL,?V0
   \   00002D   85..83       MOV     DPH,?V1
   \   000030   7488         MOV     A,#-0x78
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   7413         MOV     A,#0x13
   \   000036   F0           MOVX    @DPTR,A
   \   000037   8007         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1909              }
   1910              else
   1911              {
   1912                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   7400         MOV     A,#0x0
   \   00003F   F0           MOVX    @DPTR,A
   1913              }
   1914          
   1915              // Reset leave control logic
   1916              ZDApp_LeaveCtrlReset();
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000040                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   000040   12....       LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   1917            }
   1918          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   000043   7F02         MOV     R7,#0x2
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA
   1919          
   1920          /*********************************************************************
   1921           * @fn      ZDApp_LeaveReset
   1922           *
   1923           * @brief   Setup a device reset due to a leave indication/confirm.
   1924           *
   1925           * @param   ra - reassociate flag
   1926           *
   1927           * @return  none
   1928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1929          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1930          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1931            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   1932          
   1933            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   00000C   7A88         MOV     R2,#-0x78
   \   00000E   7B13         MOV     R3,#0x13
   \   000010   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1934          }
   \   000013   7F01         MOV     R7,#0x1
   \   000015   02....       LJMP    ?BANKED_LEAVE_XDATA
   1935          
   1936          /*********************************************************************
   1937           * @fn      ZDApp_LeaveUpdate
   1938           *
   1939           * @brief   Update local device data related to leaving device.
   1940           *
   1941           * @param   nwkAddr        - NWK address of leaving device
   1942           * @param   extAddr        - EXT address of leaving device
   1943           * @param   removeChildren - remove children of leaving device
   1944           *
   1945           * @return  none
   1946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1947          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1948                                  uint8 removeChildren )
   1949          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
   1950            // Remove Apps Key for leaving device
   1951            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   \   00001B   E9           MOV     A,R1
   1952          
   1953            // Clear SECURITY bit from Address Manager
   1954            ZDSecMgrAddrClear( extAddr );
   \   00001C                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001C   EE           MOV     A,R6
   \   00001D   FA           MOV     R2,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FB           MOV     R3,A
   \   000020   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   000023   E9           MOV     A,R1
   1955          
   1956            if ( pbindRemoveDev )
   \   000024   90....       MOV     DPTR,#pbindRemoveDev
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   49           ORL     A,R1
   \   00002E   6038         JZ      ??ZDApp_LeaveUpdate_0
   1957            {
   1958              zAddrType_t devAddr;
   1959          
   1960              // Remove bind entry and all related data
   1961              devAddr.addrMode = Addr64Bit;
   \   000030   7410         MOV     A,#0x10
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   7403         MOV     A,#0x3
   \   000037   F0           MOVX    @DPTR,A
   1962              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   8E..         MOV     ?V4,R6
   \   00003A   8F..         MOV     ?V5,R7
   \   00003C   75..00       MOV     ?V6,#0x0
   \   00003F   78..         MOV     R0,#?V4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   7C08         MOV     R4,#0x8
   \   000046   7D00         MOV     R5,#0x0
   \   000048   740B         MOV     A,#0xb
   \   00004A   12....       LCALL   ?XSTACK_DISP101_8
   \   00004D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   1963          
   1964              pbindRemoveDev(&devAddr);
   \   000055                ; Setup parameters for indirect call
   \   000055   7408         MOV     A,#0x8
   \   000057   12....       LCALL   ?XSTACK_DISP101_8
   \   00005A   90....       MOV     DPTR,#pbindRemoveDev
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F583         MOV     DPH,A
   \   000063   8882         MOV     DPL,R0
   \   000065   12....       LCALL   ?CALL_IND
   1965            }
   1966          
   1967            // Remove if child
   1968            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_LeaveUpdate_0:
   \   000068   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6008         JZ      ??ZDApp_LeaveUpdate_1
   \   00006E   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000071   E0           MOVX    A,@DPTR
   \   000072   6401         XRL     A,#0x1
   \   000074   7050         JNZ     ??ZDApp_LeaveUpdate_2
   1969            {
   1970              // Router shall notify the Trust Center that a child device has left the network
   1971              if ( AssocIsChild( nwkAddr ) == TRUE )
   \                     ??ZDApp_LeaveUpdate_1:
   \   000076                ; Setup parameters for call to function AssocIsChild
   \   000076   AA..         MOV     R2,?V0
   \   000078   AB..         MOV     R3,?V1
   \   00007A   12....       LCALL   `??AssocIsChild::?relay`; Banked call to: AssocIsChild
   \   00007D   E9           MOV     A,R1
   \   00007E   6401         XRL     A,#0x1
   \   000080   703B         JNZ     ??ZDApp_LeaveUpdate_3
   1972              {
   1973                  APSME_UpdateDeviceReq_t req;
   1974          
   1975                  // forward authorization to the Trust Center
   1976                  req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   000082   85..82       MOV     DPL,?XSP + 0
   \   000085   85..83       MOV     DPH,?XSP + 1
   \   000088   7400         MOV     A,#0x0
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   7400         MOV     A,#0x0
   \   00008E   F0           MOVX    @DPTR,A
   1977                  req.devAddr    = nwkAddr;
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   E5..         MOV     A,?V0
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   E5..         MOV     A,?V1
   \   00009A   F0           MOVX    @DPTR,A
   1978                  req.devExtAddr = extAddr;
   \   00009B   7404         MOV     A,#0x4
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   EE           MOV     A,R6
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   EF           MOV     A,R7
   \   0000A4   F0           MOVX    @DPTR,A
   1979                  req.status = APSME_UD_DEVICE_LEFT;
   \   0000A5   7406         MOV     A,#0x6
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   F0           MOVX    @DPTR,A
   1980          
   1981                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1982                  {
   1983                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1984                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1985                    // with legacy Coordinator devices which can only handle one or the other.
   1986                    if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   1987                    {
   1988                      req.apsSecure = FALSE;
   1989          
   1990                      // send and APSME_UPDATE_DEVICE request to the trust center
   1991                      APSME_UpdateDeviceReq( &req );
   1992                    }
   1993          
   1994                    // send the message APS encrypted
   1995                    req.apsSecure = TRUE;
   1996          
   1997                    // send and APSME_UPDATE_DEVICE request to the trust center
   1998                    APSME_UpdateDeviceReq( &req );
   1999                  }
   2000                  else
   2001                  {
   2002                    req.apsSecure = FALSE;
   \   0000AD   7407         MOV     A,#0x7
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   7400         MOV     A,#0x0
   \   0000B4   F0           MOVX    @DPTR,A
   2003          
   2004                    // send and APSME_UPDATE_DEVICE request to the trust center
   2005                    APSME_UpdateDeviceReq( &req );
   \   0000B5                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000B5   AA..         MOV     R2,?XSP + 0
   \   0000B7   AB..         MOV     R3,?XSP + 1
   \   0000B9   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   0000BC   E9           MOV     A,R1
   2006                  }
   2007              }
   2008          
   2009              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_3:
   \   0000BD                ; Setup parameters for call to function NLME_RemoveChild
   \   0000BD   A9..         MOV     R1,?V2
   \   0000BF   EE           MOV     A,R6
   \   0000C0   FA           MOV     R2,A
   \   0000C1   EF           MOV     A,R7
   \   0000C2   FB           MOV     R3,A
   \   0000C3   12....       LCALL   `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
   2010            }
   2011          
   2012            // Remove Routing table related entry
   2013            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_2:
   \   0000C6                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000C6   7900         MOV     R1,#0x0
   \   0000C8   AA..         MOV     R2,?V0
   \   0000CA   AB..         MOV     R3,?V1
   \   0000CC   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   \   0000CF   E9           MOV     A,R1
   2014          
   2015            // Remove entry from neighborTable
   2016            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   0000D0                ; Setup parameters for call to function nwkNeighborRemove
   \   0000D0   90....       MOV     DPTR,#_NIB + 33
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   FC           MOV     R4,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   FD           MOV     R5,A
   \   0000D8   AA..         MOV     R2,?V0
   \   0000DA   AB..         MOV     R3,?V1
   \   0000DC   12....       LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2017          
   2018            // Schedule to save data to NV
   2019            ZDApp_NwkWriteNVRequest();
   \   0000DF                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   0000DF   12....       LCALL   `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2020          }
   \   0000E2   7411         MOV     A,#0x11
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   7F07         MOV     R7,#0x7
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
   2021          
   2022          /*********************************************************************
   2023           * @fn      ZDApp_NetworkDiscoveryReq
   2024           *
   2025           * @brief   Request a network discovery.
   2026           *
   2027           * @param  scanChannels -
   2028           * @param  scanDuration -
   2029           *
   2030           * @return  ZStatus_t
   2031           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2032          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2033          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   E9           MOV     A,R1
   \   00000E   FE           MOV     R6,A
   2034            // Setup optional filters - tbd
   2035          
   2036            // Request NLME network discovery
   2037            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   00000F                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   AA..         MOV     R2,?V0
   \   000013   AB..         MOV     R3,?V1
   \   000015   AC..         MOV     R4,?V2
   \   000017   AD..         MOV     R5,?V3
   \   000019   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   00001C   7F04         MOV     R7,#0x4
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2038          }
   2039          
   2040          /*********************************************************************
   2041           * @fn      ZDApp_JoinReq
   2042           *
   2043           * @brief   Request the device to join a parent in a network.
   2044           *
   2045           * @param   channel -
   2046           * @param   panID -
   2047           *
   2048           * @return  ZStatus_t
   2049           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2050          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2051                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2052          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V7,A
   \   00001B   7412         MOV     A,#0x12
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
   \   000023   7413         MOV     A,#0x13
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V2,A
   2053            // Sync up the node with the stack profile (In the case where a pro device
   2054            // joins a non-pro network, or verse versa)
   2055            ZDApp_NodeProfileSync( stackProfile);
   \   00002B                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00002B   A9..         MOV     R1,?V2
   \   00002D   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2056          
   2057            // Request NLME Join Request
   2058            return NLME_JoinRequest(extendedPanID, panID,channel,
   2059                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2060                                    chosenParent, parentDepth);
   \   000030                ; Setup parameters for call to function NLME_JoinRequest
   \   000030   E5..         MOV     A,?V3
   \   000032   F5..         MOV     ?V5,A
   \   000034   78..         MOV     R0,#?V5
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   78..         MOV     R0,#?V6
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F5..         MOV     ?V5,A
   \   000044   78..         MOV     R0,#?V5
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   A9..         MOV     R1,?V4
   \   00004B   AC..         MOV     R4,?V0
   \   00004D   AD..         MOV     R5,?V1
   \   00004F   EE           MOV     A,R6
   \   000050   FA           MOV     R2,A
   \   000051   EF           MOV     A,R7
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   7F08         MOV     R7,#0x8
   \   00005D   02....       LJMP    ?BANKED_LEAVE_XDATA
   2061          
   2062          }
   2063          
   2064          /*********************************************************************
   2065           * @fn      ZDApp_DeviceConfigured
   2066           *
   2067           * @brief   Check to see if the local device is configured (i.e., part
   2068           *          of a network).
   2069           *
   2070           * @param   none
   2071           *
   2072           * @return  TRUE if configured. FALSE, otherwise.
   2073           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2074          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2075          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2076            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   74FF         MOV     A,#-0x1
   \   000016   F0           MOVX    @DPTR,A
   2077          
   2078            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2079                          sizeof( uint16), &nwkAddr );
   \   000017                ; Setup parameters for call to function osal_nv_read
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0,#0x2
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C14         MOV     R4,#0x14
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A21         MOV     R2,#0x21
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   2080          
   2081            // Does the NIB have anything more than default?
   2082            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   E0           MOVX    A,@DPTR
   \   000047   64FE         XRL     A,#0xfe
   \   000049   7004         JNZ     ??ZDApp_DeviceConfigured_0
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   64FF         XRL     A,#0xff
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004F   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   000051   7900         MOV     R1,#0x0
   \   000053   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000055   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   7F02         MOV     R7,#0x2
   \   00005E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2083          }
   2084          
   2085          /*********************************************************************
   2086           * CALLBACK FUNCTIONS
   2087           */
   2088          
   2089          
   2090          /*********************************************************************
   2091           * @fn      ZDApp_SendEventMsg()
   2092           *
   2093           * @brief
   2094           *
   2095           *   Sends a Network Join message
   2096           *
   2097           * @param  cmd - command ID
   2098           * @param  len - length (in bytes) of the buf field
   2099           * @param  buf - buffer for the rest of the message.
   2100           *
   2101           * @return  none
   2102           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2103          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2104          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   2105            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   00000D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   \   000011   AB..         MOV     R3,?V1
   \   000013   AA..         MOV     R2,?V0
   \   000015   90....       MOV     DPTR,#ZDAppTaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2106          }
   \   00001D   7F02         MOV     R7,#0x2
   \   00001F   02....       LJMP    ?BANKED_LEAVE_XDATA
   2107          
   2108          /*********************************************************************
   2109           * @fn      ZDApp_SendMsg()
   2110           *
   2111           * @brief   Sends a OSAL message
   2112           *
   2113           * @param  taskID - Where to send the message
   2114           * @param  cmd - command ID
   2115           * @param  len - length (in bytes) of the buf field
   2116           * @param  buf - buffer for the rest of the message.
   2117           *
   2118           * @return  none
   2119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2120          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2121          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V3,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V1,R5
   2122            osal_event_hdr_t *msgPtr;
   2123          
   2124            // Send the address to the task
   2125            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   AA..         MOV     R2,?V7
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000016   8A..         MOV     ?V4,R2
   \   000018   8B..         MOV     ?V5,R3
   \   00001A   AE..         MOV     R6,?V4
   \   00001C   AF..         MOV     R7,?V5
   2126            if ( msgPtr )
   \   00001E   EE           MOV     A,R6
   \   00001F   4F           ORL     A,R7
   \   000020   603D         JZ      ??ZDApp_SendMsg_0
   2127            {
   2128              if ( (len > 0) && (buf != NULL) )
   \   000022   E5..         MOV     A,?V7
   \   000024   6024         JZ      ??ZDApp_SendMsg_1
   \   000026   E5..         MOV     A,?V0
   \   000028   45..         ORL     A,?V1
   \   00002A   601E         JZ      ??ZDApp_SendMsg_1
   2129                osal_memcpy( msgPtr, buf, len );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   85....       MOV     ?V4,?V0
   \   00002F   85....       MOV     ?V5,?V1
   \   000032   75..00       MOV     ?V6,#0x0
   \   000035   78..         MOV     R0,#?V4
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003A   AC..         MOV     R4,?V7
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   2130          
   2131              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   00004A   E5..         MOV     A,?V3
   \   00004C   C0E0         PUSH    A
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   D0E0         POP     A
   \   000054   F0           MOVX    @DPTR,A
   2132              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000055                ; Setup parameters for call to function osal_msg_send
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   FB           MOV     R3,A
   \   000059   A9..         MOV     R1,?V2
   \   00005B   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00005E   E9           MOV     A,R1
   2133            }
   2134          }
   \                     ??ZDApp_SendMsg_0:
   \   00005F   7F08         MOV     R7,#0x8
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
   2135          
   2136          /*********************************************************************
   2137           * Call Back Functions from NWK  - API
   2138           */
   2139          
   2140          /*********************************************************************
   2141           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2142           *
   2143           * @brief       This function returns a choice of PAN to join.
   2144           *
   2145           * @param       status - return status of the nwk discovery confirm
   2146           *
   2147           * @return      ZStatus_t
   2148           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2149          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2150          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   C0E0         PUSH    A
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   2151            osal_event_hdr_t msg;
   2152          
   2153            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2154            // Send ZDO_MGMT_NWK_DISC_RSP back
   2155          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2156            if ( zdappMgmtNwkDiscReqInProgress )
   2157            {
   2158              zdappMgmtNwkDiscReqInProgress = false;
   2159              ZDO_FinishProcessingMgmtNwkDiscReq();
   2160            }
   2161            else
   2162          #endif
   2163            {
   2164              // Pass the confirm to another task if it registers the callback
   2165              // Otherwise, pass the confirm to ZDApp.
   2166              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000015   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   6014         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2167              {
   2168                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000021                ; Setup parameters for indirect call
   \   000021   AA..         MOV     R2,?XSP + 0
   \   000023   AB..         MOV     R3,?XSP + 1
   \   000025   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   8882         MOV     DPL,R0
   \   000030   12....       LCALL   ?CALL_IND
   \   000033   8019         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2169              }
   2170              else
   2171              {
   2172                // Otherwise, send scan confirm to ZDApp task to proceed
   2173                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   7400         MOV     A,#0x0
   \   00003C   F0           MOVX    @DPTR,A
   2174                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   00003D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00003D   7401         MOV     A,#0x1
   \   00003F   12....       LCALL   ?XSTACK_DISP102_8
   \   000042   7B02         MOV     R3,#0x2
   \   000044   7A01         MOV     R2,#0x1
   \   000046   90....       MOV     DPTR,#ZDAppTaskID
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2175              }
   2176            }
   2177            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00004E   7900         MOV     R1,#0x0
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   D083         POP     DPH
   \   000057   D082         POP     DPL
   \   000059   02....       LJMP    ?BRET
   2178          }  // ZDO_NetworkDiscoveryConfirmCB
   2179          
   2180          /*********************************************************************
   2181           * @fn          ZDApp_NwkDescListProcessing
   2182           *
   2183           * @brief       This function process the network discovery result and select
   2184           *              a parent device to join itself.
   2185           *
   2186           * @param       none
   2187           *
   2188           * @return      ZStatus_t
   2189           */
   2190          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2191          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2192          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2193            networkDesc_t *pNwkDesc;
   2194            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V3,#0x0
   2195            uint8 stackProfile;
   2196            uint8 stackProfilePro;
   2197            uint8 selected;
   2198          
   2199            // Count the number of nwk descriptors in the list
   2200            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V6,R2
   \   00000D   8B..         MOV     ?V7,R3
   \   00000F   AE..         MOV     R6,?V6
   \   000011   AF..         MOV     R7,?V7
   2201            while (pNwkDesc)
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000013   EE           MOV     A,R6
   \   000014   4F           ORL     A,R7
   \   000015   6012         JZ      ??ZDApp_NwkDescListProcessing_1
   2202            {
   2203              ResultCount++;
   \   000017   05..         INC     ?V3
   2204              pNwkDesc = pNwkDesc->nextDesc;
   \   000019   EE           MOV     A,R6
   \   00001A   2414         ADD     A,#0x14
   \   00001C   F582         MOV     DPL,A
   \   00001E   E4           CLR     A
   \   00001F   3F           ADDC    A,R7
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FE           MOV     R6,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FF           MOV     R7,A
   \   000027   80EA         SJMP    ??ZDApp_NwkDescListProcessing_0
   2205            }
   2206          
   2207            // process discovery results
   2208            stackProfilePro = FALSE;
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000029   75..00       MOV     ?V0,#0x0
   2209            selected = FALSE;
   \   00002C   75..00       MOV     ?V1,#0x0
   2210          
   2211          
   2212            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   00002F   75..00       MOV     ?V4,#0x0
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000032   E5..         MOV     A,?V4
   \   000034   C3           CLR     C
   \   000035   9402         SUBB    A,#0x2
   \   000037   4003         JC      $+5
   \   000039   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   2213            {
   2214              pNwkDesc = nwk_getNwkDescList();
   \   00003C                ; Setup parameters for call to function nwk_getNwkDescList
   \   00003C   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00003F   8A..         MOV     ?V6,R2
   \   000041   8B..         MOV     ?V7,R3
   \   000043   AE..         MOV     R6,?V6
   \   000045   AF..         MOV     R7,?V7
   2215              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   000047   75..00       MOV     ?V2,#0x0
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00004A   E5..         MOV     A,?V2
   \   00004C   C3           CLR     C
   \   00004D   95..         SUBB    A,?V3
   \   00004F   4003         JC      $+5
   \   000051   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   2216              {
   2217                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   \   000054                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000054   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000056   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000058   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005B   E9           MOV     A,R1
   \   00005C   6401         XRL     A,#0x1
   \   00005E   7014         JNZ     ??ZDApp_NwkDescListProcessing_6
   2218                {
   2219                  // If the extended Pan ID is commissioned to a non zero value
   2220                  // Only join the Pan that has match EPID
   2221                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   \   000060                ; Setup parameters for call to function sAddrExtCmp
   \   000060   EE           MOV     A,R6
   \   000061   240B         ADD     A,#0xb
   \   000063   FC           MOV     R4,A
   \   000064   E4           CLR     A
   \   000065   3F           ADDC    A,R7
   \   000066   FD           MOV     R5,A
   \   000067   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000069   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006B   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00006E   E9           MOV     A,R1
   \   00006F   7029         JNZ     ??ZDApp_NwkDescListProcessing_7
   2222                    continue;
   \   000071   02....       LJMP    ??ZDApp_NwkDescListProcessing_8 & 0xFFFF
   2223          
   2224                }
   2225                else if ( zgConfigPANID != 0xFFFF )
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000074   90....       MOV     DPTR,#zgConfigPANID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   64FF         XRL     A,#0xff
   \   00007A   7004         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   64FF         XRL     A,#0xff
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000080   6018         JZ      ??ZDApp_NwkDescListProcessing_7
   2226                {
   2227                  // PAN Id is preconfigured. check if it matches
   2228                  if ( pNwkDesc->panId != zgConfigPANID )
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F8           MOV     R0,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   90....       MOV     DPTR,#zgConfigPANID
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   68           XRL     A,R0
   \   000090   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000095   6003         JZ      $+5
   \   000097   02....       LJMP    ??ZDApp_NwkDescListProcessing_8 & 0xFFFF
   2229                    continue;
   2230                }
   2231          
   2232                // check that network is allowing joining
   2233                if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   00009A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   6008         JZ      ??ZDApp_NwkDescListProcessing_11
   \   0000A0   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   6401         XRL     A,#0x1
   \   0000A6   701D         JNZ     ??ZDApp_NwkDescListProcessing_12
   2234                {
   2235                  if ( stackProfilePro == FALSE )
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   0000A8   E5..         MOV     A,?V0
   \   0000AA   700C         JNZ     ??ZDApp_NwkDescListProcessing_13
   2236                  {
   2237                    if ( !pNwkDesc->routerCapacity )
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   7022         JNZ     ??ZDApp_NwkDescListProcessing_14
   2238                    {
   2239                      continue;
   \   0000B6   807A         SJMP    ??ZDApp_NwkDescListProcessing_8
   2240                    }
   2241                  }
   2242                  else
   2243                  {
   2244                    if ( !pNwkDesc->deviceCapacity )
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000B8   8E82         MOV     DPL,R6
   \   0000BA   8F83         MOV     DPH,R7
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   7015         JNZ     ??ZDApp_NwkDescListProcessing_14
   2245                    {
   2246                      continue;
   \   0000C3   806D         SJMP    ??ZDApp_NwkDescListProcessing_8
   2247                    }
   2248                  }
   2249                }
   2250                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000C5   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   6402         XRL     A,#0x2
   \   0000CB   700B         JNZ     ??ZDApp_NwkDescListProcessing_14
   2251                {
   2252                  if ( !pNwkDesc->deviceCapacity )
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   605A         JZ      ??ZDApp_NwkDescListProcessing_8
   2253                  {
   2254                    continue;
   2255                  }
   2256                }
   2257          
   2258                // check version of zigbee protocol
   2259                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F8           MOV     R0,A
   \   0000E3   90....       MOV     DPTR,#_NIB + 17
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   68           XRL     A,R0
   \   0000E8   7048         JNZ     ??ZDApp_NwkDescListProcessing_8
   2260                  continue;
   2261          
   2262                // check version of stack profile
   2263                if ( pNwkDesc->stackProfile != zgStackProfile  )
   \   0000EA   8E82         MOV     DPL,R6
   \   0000EC   8F83         MOV     DPH,R7
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F8           MOV     R0,A
   \   0000F6   90....       MOV     DPTR,#zgStackProfile
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   68           XRL     A,R0
   \   0000FB   6048         JZ      ??ZDApp_NwkDescListProcessing_5
   2264                {
   2265                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2266                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \   0000FD   90....       MOV     DPTR,#zgStackProfile
   \   000100   E0           MOVX    A,@DPTR
   \   000101   6401         XRL     A,#0x1
   \   000103   700F         JNZ     ??ZDApp_NwkDescListProcessing_15
   \   000105   8E82         MOV     DPL,R6
   \   000107   8F83         MOV     DPH,R7
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   6402         XRL     A,#0x2
   \   000112   6017         JZ      ??ZDApp_NwkDescListProcessing_16
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   000114   90....       MOV     DPTR,#zgStackProfile
   \   000117   E0           MOVX    A,@DPTR
   \   000118   6402         XRL     A,#0x2
   \   00011A   7012         JNZ     ??ZDApp_NwkDescListProcessing_17
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   6401         XRL     A,#0x1
   \   000129   7003         JNZ     ??ZDApp_NwkDescListProcessing_17
   2267                  {
   2268                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   00012B   75..01       MOV     ?V0,#0x1
   2269                  }
   2270          
   2271                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   00012E   E5..         MOV     A,?V4
   \   000130   7013         JNZ     ??ZDApp_NwkDescListProcessing_5
   2272                  {
   2273                    continue;
   2274                  }
   2275                }
   2276          
   2277                break;
   2278              }
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000132   05..         INC     ?V2
   \   000134   EE           MOV     A,R6
   \   000135   2414         ADD     A,#0x14
   \   000137   F582         MOV     DPL,A
   \   000139   E4           CLR     A
   \   00013A   3F           ADDC    A,R7
   \   00013B   F583         MOV     DPH,A
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   FE           MOV     R6,A
   \   00013F   A3           INC     DPTR
   \   000140   E0           MOVX    A,@DPTR
   \   000141   FF           MOV     R7,A
   \   000142   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2279          
   2280              if (i < ResultCount)
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   000145   E5..         MOV     A,?V2
   \   000147   C3           CLR     C
   \   000148   95..         SUBB    A,?V3
   \   00014A   5005         JNC     ??ZDApp_NwkDescListProcessing_18
   2281              {
   2282                selected = TRUE;
   \   00014C   75..01       MOV     ?V1,#0x1
   2283                break;
   \   00014F   800F         SJMP    ??ZDApp_NwkDescListProcessing_3
   2284              }
   2285          
   2286              // break if selected or stack profile pro wasn't found
   2287              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_18:
   \   000151   7401         MOV     A,#0x1
   \   000153   65..         XRL     A,?V1
   \   000155   6009         JZ      ??ZDApp_NwkDescListProcessing_3
   \   000157   E5..         MOV     A,?V0
   \   000159   6005         JZ      ??ZDApp_NwkDescListProcessing_3
   2288              {
   2289                break;
   2290              }
   2291            }
   \   00015B   05..         INC     ?V4
   \   00015D   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   2292          
   2293            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000160   E5..         MOV     A,?V3
   \   000162   65..         XRL     A,?V2
   \   000164   7006         JNZ     ??ZDApp_NwkDescListProcessing_19
   2294            {
   2295              return (NULL);   // couldn't find appropriate PAN to join !
   \   000166   7A00         MOV     R2,#0x0
   \   000168   7B00         MOV     R3,#0x0
   \   00016A   8004         SJMP    ??ZDApp_NwkDescListProcessing_20
   2296            }
   2297            else
   2298            {
   2299              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_19:
   \   00016C   EE           MOV     A,R6
   \   00016D   FA           MOV     R2,A
   \   00016E   EF           MOV     A,R7
   \   00016F   FB           MOV     R3,A
   \                     ??ZDApp_NwkDescListProcessing_20:
   \   000170   7F08         MOV     R7,#0x8
   \   000172   02....       LJMP    ?BANKED_LEAVE_XDATA
   2300            }
   2301          }// ZDApp_NwkDescListProcessing()
   2302          
   2303          /*********************************************************************
   2304           * @fn          ZDO_NetworkFormationConfirmCB
   2305           *
   2306           * @brief       This function reports the results of the request to
   2307           *              initialize a coordinator in a network.
   2308           *
   2309           * @param       Status - Result of NLME_NetworkFormationRequest()
   2310           *
   2311           * @return      none
   2312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2313          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2314          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2315            nwkStatus = (byte)Status;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#nwkStatus
   \   00000B   F0           MOVX    @DPTR,A
   2316          
   2317            if ( Status == ZSUCCESS )
   \   00000C   EE           MOV     A,R6
   \   00000D   701E         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2318            {
   2319              // LED on shows Coordinator started
   2320              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7904         MOV     R1,#0x4
   \   000013   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000016   E9           MOV     A,R1
   2321          
   2322              // LED off forgets HOLD_AUTO_START
   2323              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000017                ; Setup parameters for call to function HalLedSet
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7908         MOV     R1,#0x8
   \   00001B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00001E   E9           MOV     A,R1
   2324          
   2325          #if defined ( ZBIT )
   2326              SIM_SetColor(0xd0ffd0);
   2327          #endif
   2328          
   2329              if ( devState == DEV_HOLD )
   \   00001F   90....       MOV     DPTR,#devState
   \   000022   E0           MOVX    A,@DPTR
   \   000023   7010         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2330              {
   2331                // Began with HOLD_AUTO_START
   2332                devState = DEV_COORD_STARTING;
   \   000025   90....       MOV     DPTR,#devState
   \   000028   7408         MOV     A,#0x8
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   8008         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2333              }
   2334            }
   2335          #if defined(BLINK_LEDS)
   2336            else
   2337            {
   2338              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   00002D                ; Setup parameters for call to function HalLedSet
   \   00002D   7A04         MOV     R2,#0x4
   \   00002F   7904         MOV     R1,#0x4
   \   000031   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000034   E9           MOV     A,R1
   2339            }
   2340          #endif
   2341          
   2342            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   000035                ; Setup parameters for call to function osal_set_event
   \   000035   7A02         MOV     R2,#0x2
   \   000037   7B00         MOV     R3,#0x0
   \   000039   90....       MOV     DPTR,#ZDAppTaskID
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000041   E9           MOV     A,R1
   2343          }
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   2344          
   2345          /****************************************************************************
   2346           * @fn          ZDApp_beaconIndProcessing
   2347           *
   2348           * @brief       This function processes the incoming beacon indication.
   2349           *
   2350           *              When another task (MT or App) is registered to process
   2351           *              beacon indication themselves, this function will parse the
   2352           *              beacon payload and pass the beacon descriptor to that task
   2353           *              If no other tasks registered, this function will process
   2354           *              the beacon payload and generate the network descriptor link
   2355           *              list.
   2356           *
   2357           * @param
   2358           *
   2359           * @return      none
   2360           *
   2361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2362          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2363          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2364            // Pass the beacon Indication to another task if it registers the callback
   2365            // Otherwise, process the beacon notification here.
   2366            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   6015         JZ      ??ZDO_beaconNotifyIndCB_0
   2367            {
   2368              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000015                ; Setup parameters for indirect call
   \   000015   AA..         MOV     R2,?V0
   \   000017   AB..         MOV     R3,?V1
   \   000019   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F583         MOV     DPH,A
   \   000022   8882         MOV     DPL,R0
   \   000024   12....       LCALL   ?CALL_IND
   \   000027   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2369            }
   2370            else
   2371            {
   2372              networkDesc_t *pNwkDesc;
   2373              networkDesc_t *pLastNwkDesc;
   2374              uint8 found = false;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00002A   75..00       MOV     ?V2,#0x0
   2375          
   2376              // Add the network to the Network Descriptor List
   2377              pNwkDesc = NwkDescList;
   \   00002D   90....       MOV     DPTR,#NwkDescList
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   FE           MOV     R6,A
   \   000037   E9           MOV     A,R1
   \   000038   FF           MOV     R7,A
   2378              pLastNwkDesc = NwkDescList;
   \   000039   90....       MOV     DPTR,#NwkDescList
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   88..         MOV     ?V4,R0
   \   000043   89..         MOV     ?V5,R1
   2379              while (pNwkDesc)
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   000045   EE           MOV     A,R6
   \   000046   4F           ORL     A,R7
   \   000047   6049         JZ      ??ZDO_beaconNotifyIndCB_3
   2380              {
   2381                if ((pNwkDesc->panId == pBeacon->panID) &&
   2382                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   85..82       MOV     DPL,?V0
   \   000055   85..83       MOV     DPH,?V1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   68           XRL     A,R0
   \   00005C   7003         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   701B         JNZ     ??ZDO_beaconNotifyIndCB_5
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F8           MOV     R0,A
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   68           XRL     A,R0
   \   000077   7005         JNZ     ??ZDO_beaconNotifyIndCB_5
   2383                {
   2384                  found = true;
   \   000079   75..01       MOV     ?V2,#0x1
   2385                  break;
   \   00007C   8014         SJMP    ??ZDO_beaconNotifyIndCB_3
   2386                }
   2387                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   00007E   8E..         MOV     ?V4,R6
   \   000080   8F..         MOV     ?V5,R7
   2388                pNwkDesc = pNwkDesc->nextDesc;
   \   000082   EE           MOV     A,R6
   \   000083   2414         ADD     A,#0x14
   \   000085   F582         MOV     DPL,A
   \   000087   E4           CLR     A
   \   000088   3F           ADDC    A,R7
   \   000089   F583         MOV     DPH,A
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   FE           MOV     R6,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   FF           MOV     R7,A
   \   000090   80B3         SJMP    ??ZDO_beaconNotifyIndCB_2
   2389              }
   2390          
   2391              // If no existing descriptor found, make a new one and add to the list
   2392              if (found == false)
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   000092   E5..         MOV     A,?V2
   \   000094   706C         JNZ     ??ZDO_beaconNotifyIndCB_6
   2393              {
   2394                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   000096                ; Setup parameters for call to function osal_mem_alloc
   \   000096   7A16         MOV     R2,#0x16
   \   000098   7B00         MOV     R3,#0x0
   \   00009A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009D   8A..         MOV     ?V6,R2
   \   00009F   8B..         MOV     ?V7,R3
   \   0000A1   AE..         MOV     R6,?V6
   \   0000A3   AF..         MOV     R7,?V7
   2395                if ( !pNwkDesc )
   \   0000A5   EE           MOV     A,R6
   \   0000A6   4F           ORL     A,R7
   \   0000A7   7003         JNZ     $+5
   \   0000A9   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2396                {
   2397                  // Memory alloc failed, discard this beacon
   2398                  return;
   2399                }
   2400          
   2401                // Clear the network descriptor
   2402                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   0000AC                ; Setup parameters for call to function osal_memset
   \   0000AC   7C16         MOV     R4,#0x16
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7900         MOV     R1,#0x0
   \   0000B2   EE           MOV     A,R6
   \   0000B3   FA           MOV     R2,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2403          
   2404                // Initialize the descriptor
   2405                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   74FE         MOV     A,#-0x2
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   74FF         MOV     A,#-0x1
   \   0000CA   F0           MOVX    @DPTR,A
   2406                pNwkDesc->chosenRouterDepth = 0xFF;
   \   0000CB   8E82         MOV     DPL,R6
   \   0000CD   8F83         MOV     DPH,R7
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   74FF         MOV     A,#-0x1
   \   0000DB   F0           MOVX    @DPTR,A
   2407          
   2408                // Save new entry into the descriptor list
   2409                if ( !NwkDescList )
   \   0000DC   90....       MOV     DPTR,#NwkDescList
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F8           MOV     R0,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F9           MOV     R1,A
   \   0000E4   E8           MOV     A,R0
   \   0000E5   49           ORL     A,R1
   \   0000E6   700A         JNZ     ??ZDO_beaconNotifyIndCB_7
   2410                {
   2411                  NwkDescList = pNwkDesc;
   \   0000E8   90....       MOV     DPTR,#NwkDescList
   \   0000EB   EE           MOV     A,R6
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   EF           MOV     A,R7
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   8010         SJMP    ??ZDO_beaconNotifyIndCB_6
   2412                }
   2413                else
   2414                {
   2415                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000F2   E5..         MOV     A,?V4
   \   0000F4   2414         ADD     A,#0x14
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   E4           CLR     A
   \   0000F9   35..         ADDC    A,?V5
   \   0000FB   F583         MOV     DPH,A
   \   0000FD   EE           MOV     A,R6
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   EF           MOV     A,R7
   \   000101   F0           MOVX    @DPTR,A
   2416                }
   2417              }
   2418          
   2419              // Update the descriptor with the incoming beacon
   2420              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   000102   85..82       MOV     DPL,?V0
   \   000105   85..83       MOV     DPH,?V1
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   C0E0         PUSH    A
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   D0E0         POP     A
   \   000120   F0           MOVX    @DPTR,A
   2421              pNwkDesc->version        = pBeacon->protocolVersion;
   \   000121   85..82       MOV     DPL,?V0
   \   000124   85..83       MOV     DPH,?V1
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   C0E0         PUSH    A
   \   000132   8E82         MOV     DPL,R6
   \   000134   8F83         MOV     DPH,R7
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   D0E0         POP     A
   \   00013D   F0           MOVX    @DPTR,A
   2422              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   00013E   85..82       MOV     DPL,?V0
   \   000141   85..83       MOV     DPH,?V1
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   C0E0         PUSH    A
   \   00014B   8E82         MOV     DPL,R6
   \   00014D   8F83         MOV     DPH,R7
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   D0E0         POP     A
   \   000153   F0           MOVX    @DPTR,A
   2423              pNwkDesc->panId          = pBeacon->panID;
   \   000154   85..82       MOV     DPL,?V0
   \   000157   85..83       MOV     DPH,?V1
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F8           MOV     R0,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F9           MOV     R1,A
   \   000161   8E82         MOV     DPL,R6
   \   000163   8F83         MOV     DPH,R7
   \   000165   E8           MOV     A,R0
   \   000166   F0           MOVX    @DPTR,A
   \   000167   A3           INC     DPTR
   \   000168   E9           MOV     A,R1
   \   000169   F0           MOVX    @DPTR,A
   2424              pNwkDesc->updateId       = pBeacon->updateID;
   \   00016A   E5..         MOV     A,?V0
   \   00016C   240C         ADD     A,#0xc
   \   00016E   F582         MOV     DPL,A
   \   000170   E4           CLR     A
   \   000171   35..         ADDC    A,?V1
   \   000173   F583         MOV     DPH,A
   \   000175   E0           MOVX    A,@DPTR
   \   000176   C0E0         PUSH    A
   \   000178   EE           MOV     A,R6
   \   000179   2413         ADD     A,#0x13
   \   00017B   F582         MOV     DPL,A
   \   00017D   E4           CLR     A
   \   00017E   3F           ADDC    A,R7
   \   00017F   F583         MOV     DPH,A
   \   000181   D0E0         POP     A
   \   000183   F0           MOVX    @DPTR,A
   2425          
   2426              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2427              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000184   85..82       MOV     DPL,?V0
   \   000187   85..83       MOV     DPH,?V1
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   6401         XRL     A,#0x1
   \   000195   6015         JZ      ??ZDO_beaconNotifyIndCB_8
   2428              {
   2429                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000197                ; Setup parameters for call to function sAddrExtCpy
   \   000197   E5..         MOV     A,?V0
   \   000199   240D         ADD     A,#0xd
   \   00019B   FC           MOV     R4,A
   \   00019C   E4           CLR     A
   \   00019D   35..         ADDC    A,?V1
   \   00019F   FD           MOV     R5,A
   \   0001A0   EE           MOV     A,R6
   \   0001A1   240B         ADD     A,#0xb
   \   0001A3   FA           MOV     R2,A
   \   0001A4   E4           CLR     A
   \   0001A5   3F           ADDC    A,R7
   \   0001A6   FB           MOV     R3,A
   \   0001A7   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001AA   8010         SJMP    ??ZDO_beaconNotifyIndCB_9
   2430              }
   2431              else
   2432              {
   2433                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   0001AC                ; Setup parameters for call to function osal_memset
   \   0001AC   7C08         MOV     R4,#0x8
   \   0001AE   7D00         MOV     R5,#0x0
   \   0001B0   79FF         MOV     R1,#-0x1
   \   0001B2   EE           MOV     A,R6
   \   0001B3   240B         ADD     A,#0xb
   \   0001B5   FA           MOV     R2,A
   \   0001B6   E4           CLR     A
   \   0001B7   3F           ADDC    A,R7
   \   0001B8   FB           MOV     R3,A
   \   0001B9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2434              }
   2435          
   2436              // check if this device is a better choice to join...
   2437              // ...dont bother checking assocPermit flag is doing a rejoin
   2438              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2439                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   0001BC   85..82       MOV     DPL,?V0
   \   0001BF   85..83       MOV     DPH,?V1
   \   0001C2   A3           INC     DPTR
   \   0001C3   A3           INC     DPTR
   \   0001C4   A3           INC     DPTR
   \   0001C5   A3           INC     DPTR
   \   0001C6   A3           INC     DPTR
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F8           MOV     R0,A
   \   0001CE   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   C3           CLR     C
   \   0001D3   98           SUBB    A,R0
   \   0001D4   4003         JC      $+5
   \   0001D6   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   0001D9   85..82       MOV     DPL,?V0
   \   0001DC   85..83       MOV     DPH,?V1
   \   0001DF   A3           INC     DPTR
   \   0001E0   A3           INC     DPTR
   \   0001E1   A3           INC     DPTR
   \   0001E2   A3           INC     DPTR
   \   0001E3   A3           INC     DPTR
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   6401         XRL     A,#0x1
   \   0001E7   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   0001E9   90....       MOV     DPTR,#_tmpRejoinState
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   7003         JNZ     $+5
   \   0001EF   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2440              {
   2441                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   0001F2   7800         MOV     R0,#0x0
   2442                uint8 capacity = FALSE;
   \   0001F4   7900         MOV     R1,#0x0
   2443          
   2444                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   0001F6   90....       MOV     DPTR,#_NIB + 96
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   6402         XRL     A,#0x2
   \   0001FC   707C         JNZ     ??ZDO_beaconNotifyIndCB_11
   2445                {
   2446                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2447                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2448                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2449                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   0001FE   85..82       MOV     DPL,?V0
   \   000201   85..83       MOV     DPH,?V1
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   A3           INC     DPTR
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   FA           MOV     R2,A
   \   000210   8E82         MOV     DPL,R6
   \   000212   8F83         MOV     DPH,R7
   \   000214   A3           INC     DPTR
   \   000215   A3           INC     DPTR
   \   000216   A3           INC     DPTR
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   C3           CLR     C
   \   00021F   9A           SUBB    A,R2
   \   000220   5011         JNC     ??ZDO_beaconNotifyIndCB_12
   \   000222   E5..         MOV     A,?V0
   \   000224   240B         ADD     A,#0xb
   \   000226   F582         MOV     DPL,A
   \   000228   E4           CLR     A
   \   000229   35..         ADDC    A,?V1
   \   00022B   F583         MOV     DPH,A
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   C3           CLR     C
   \   00022F   9414         SUBB    A,#0x14
   \   000231   4043         JC      ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   000233   85..82       MOV     DPL,?V0
   \   000236   85..83       MOV     DPH,?V1
   \   000239   A3           INC     DPTR
   \   00023A   A3           INC     DPTR
   \   00023B   A3           INC     DPTR
   \   00023C   A3           INC     DPTR
   \   00023D   A3           INC     DPTR
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   E0           MOVX    A,@DPTR
   \   000244   FA           MOV     R2,A
   \   000245   8E82         MOV     DPL,R6
   \   000247   8F83         MOV     DPH,R7
   \   000249   A3           INC     DPTR
   \   00024A   A3           INC     DPTR
   \   00024B   A3           INC     DPTR
   \   00024C   A3           INC     DPTR
   \   00024D   A3           INC     DPTR
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   A3           INC     DPTR
   \   000252   E0           MOVX    A,@DPTR
   \   000253   6A           XRL     A,R2
   \   000254   7046         JNZ     ??ZDO_beaconNotifyIndCB_14
   \   000256   8E82         MOV     DPL,R6
   \   000258   8F83         MOV     DPH,R7
   \   00025A   A3           INC     DPTR
   \   00025B   A3           INC     DPTR
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   A3           INC     DPTR
   \   00025F   A3           INC     DPTR
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   E0           MOVX    A,@DPTR
   \   000265   FA           MOV     R2,A
   \   000266   E5..         MOV     A,?V0
   \   000268   240B         ADD     A,#0xb
   \   00026A   F582         MOV     DPL,A
   \   00026C   E4           CLR     A
   \   00026D   35..         ADDC    A,?V1
   \   00026F   F583         MOV     DPH,A
   \   000271   E0           MOVX    A,@DPTR
   \   000272   C3           CLR     C
   \   000273   9A           SUBB    A,R2
   \   000274   5026         JNC     ??ZDO_beaconNotifyIndCB_14
   2450                  {
   2451                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   000276   7801         MOV     R0,#0x1
   \   000278   8022         SJMP    ??ZDO_beaconNotifyIndCB_14
   2452                  }
   2453                }
   2454                else
   2455                {
   2456                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   00027A   8E82         MOV     DPL,R6
   \   00027C   8F83         MOV     DPH,R7
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   A3           INC     DPTR
   \   000281   A3           INC     DPTR
   \   000282   A3           INC     DPTR
   \   000283   A3           INC     DPTR
   \   000284   A3           INC     DPTR
   \   000285   A3           INC     DPTR
   \   000286   A3           INC     DPTR
   \   000287   A3           INC     DPTR
   \   000288   E0           MOVX    A,@DPTR
   \   000289   FA           MOV     R2,A
   \   00028A   E5..         MOV     A,?V0
   \   00028C   240B         ADD     A,#0xb
   \   00028E   F582         MOV     DPL,A
   \   000290   E4           CLR     A
   \   000291   35..         ADDC    A,?V1
   \   000293   F583         MOV     DPH,A
   \   000295   E0           MOVX    A,@DPTR
   \   000296   C3           CLR     C
   \   000297   9A           SUBB    A,R2
   \   000298   5002         JNC     ??ZDO_beaconNotifyIndCB_14
   2457                  {
   2458                    selected = TRUE;
   \   00029A   7801         MOV     R0,#0x1
   2459                  }
   2460                }
   2461          
   2462                if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   00029C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   6008         JZ      ??ZDO_beaconNotifyIndCB_15
   \   0002A2   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0002A5   E0           MOVX    A,@DPTR
   \   0002A6   6401         XRL     A,#0x1
   \   0002A8   7010         JNZ     ??ZDO_beaconNotifyIndCB_16
   2463                {
   2464                  capacity = pBeacon->routerCapacity;
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0002AA   85..82       MOV     DPL,?V0
   \   0002AD   85..83       MOV     DPH,?V1
   \   0002B0   A3           INC     DPTR
   \   0002B1   A3           INC     DPTR
   \   0002B2   A3           INC     DPTR
   \   0002B3   A3           INC     DPTR
   \   0002B4   A3           INC     DPTR
   \   0002B5   A3           INC     DPTR
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   F9           MOV     R1,A
   \   0002B8   8017         SJMP    ??ZDO_beaconNotifyIndCB_17
   2465                }
   2466                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   0002BA   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   6402         XRL     A,#0x2
   \   0002C0   700F         JNZ     ??ZDO_beaconNotifyIndCB_17
   2467                {
   2468                  capacity = pBeacon->deviceCapacity;
   \   0002C2   85..82       MOV     DPL,?V0
   \   0002C5   85..83       MOV     DPH,?V1
   \   0002C8   A3           INC     DPTR
   \   0002C9   A3           INC     DPTR
   \   0002CA   A3           INC     DPTR
   \   0002CB   A3           INC     DPTR
   \   0002CC   A3           INC     DPTR
   \   0002CD   A3           INC     DPTR
   \   0002CE   A3           INC     DPTR
   \   0002CF   E0           MOVX    A,@DPTR
   \   0002D0   F9           MOV     R1,A
   2469                }
   2470          
   2471                if ( (capacity) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   0002D1   E9           MOV     A,R1
   \   0002D2   6060         JZ      ??ZDO_beaconNotifyIndCB_18
   \   0002D4   E8           MOV     A,R0
   \   0002D5   605D         JZ      ??ZDO_beaconNotifyIndCB_18
   2472                {
   2473                  // this is the new chosen router for joining...
   2474                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0002D7   85..82       MOV     DPL,?V0
   \   0002DA   85..83       MOV     DPH,?V1
   \   0002DD   E0           MOVX    A,@DPTR
   \   0002DE   FA           MOV     R2,A
   \   0002DF   A3           INC     DPTR
   \   0002E0   E0           MOVX    A,@DPTR
   \   0002E1   FB           MOV     R3,A
   \   0002E2   8E82         MOV     DPL,R6
   \   0002E4   8F83         MOV     DPH,R7
   \   0002E6   A3           INC     DPTR
   \   0002E7   A3           INC     DPTR
   \   0002E8   A3           INC     DPTR
   \   0002E9   A3           INC     DPTR
   \   0002EA   A3           INC     DPTR
   \   0002EB   A3           INC     DPTR
   \   0002EC   A3           INC     DPTR
   \   0002ED   EA           MOV     A,R2
   \   0002EE   F0           MOVX    @DPTR,A
   \   0002EF   A3           INC     DPTR
   \   0002F0   EB           MOV     A,R3
   \   0002F1   F0           MOVX    @DPTR,A
   2475                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \   0002F2   85..82       MOV     DPL,?V0
   \   0002F5   85..83       MOV     DPH,?V1
   \   0002F8   A3           INC     DPTR
   \   0002F9   A3           INC     DPTR
   \   0002FA   A3           INC     DPTR
   \   0002FB   A3           INC     DPTR
   \   0002FC   A3           INC     DPTR
   \   0002FD   A3           INC     DPTR
   \   0002FE   A3           INC     DPTR
   \   0002FF   A3           INC     DPTR
   \   000300   A3           INC     DPTR
   \   000301   A3           INC     DPTR
   \   000302   E0           MOVX    A,@DPTR
   \   000303   C0E0         PUSH    A
   \   000305   8E82         MOV     DPL,R6
   \   000307   8F83         MOV     DPH,R7
   \   000309   A3           INC     DPTR
   \   00030A   A3           INC     DPTR
   \   00030B   A3           INC     DPTR
   \   00030C   A3           INC     DPTR
   \   00030D   A3           INC     DPTR
   \   00030E   A3           INC     DPTR
   \   00030F   A3           INC     DPTR
   \   000310   A3           INC     DPTR
   \   000311   A3           INC     DPTR
   \   000312   D0E0         POP     A
   \   000314   F0           MOVX    @DPTR,A
   2476                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   000315   E5..         MOV     A,?V0
   \   000317   240B         ADD     A,#0xb
   \   000319   F582         MOV     DPL,A
   \   00031B   E4           CLR     A
   \   00031C   35..         ADDC    A,?V1
   \   00031E   F583         MOV     DPH,A
   \   000320   E0           MOVX    A,@DPTR
   \   000321   C0E0         PUSH    A
   \   000323   8E82         MOV     DPL,R6
   \   000325   8F83         MOV     DPH,R7
   \   000327   A3           INC     DPTR
   \   000328   A3           INC     DPTR
   \   000329   A3           INC     DPTR
   \   00032A   A3           INC     DPTR
   \   00032B   A3           INC     DPTR
   \   00032C   A3           INC     DPTR
   \   00032D   A3           INC     DPTR
   \   00032E   A3           INC     DPTR
   \   00032F   A3           INC     DPTR
   \   000330   A3           INC     DPTR
   \   000331   D0E0         POP     A
   \   000333   F0           MOVX    @DPTR,A
   2477                }
   2478          
   2479                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_18:
   \   000334   85..82       MOV     DPL,?V0
   \   000337   85..83       MOV     DPH,?V1
   \   00033A   A3           INC     DPTR
   \   00033B   A3           INC     DPTR
   \   00033C   A3           INC     DPTR
   \   00033D   A3           INC     DPTR
   \   00033E   A3           INC     DPTR
   \   00033F   A3           INC     DPTR
   \   000340   A3           INC     DPTR
   \   000341   E0           MOVX    A,@DPTR
   \   000342   600B         JZ      ??ZDO_beaconNotifyIndCB_19
   2480                  pNwkDesc->deviceCapacity = 1;
   \   000344   8E82         MOV     DPL,R6
   \   000346   8F83         MOV     DPH,R7
   \   000348   A3           INC     DPTR
   \   000349   A3           INC     DPTR
   \   00034A   A3           INC     DPTR
   \   00034B   A3           INC     DPTR
   \   00034C   7401         MOV     A,#0x1
   \   00034E   F0           MOVX    @DPTR,A
   2481          
   2482                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_19:
   \   00034F   85..82       MOV     DPL,?V0
   \   000352   85..83       MOV     DPH,?V1
   \   000355   A3           INC     DPTR
   \   000356   A3           INC     DPTR
   \   000357   A3           INC     DPTR
   \   000358   A3           INC     DPTR
   \   000359   A3           INC     DPTR
   \   00035A   A3           INC     DPTR
   \   00035B   E0           MOVX    A,@DPTR
   \   00035C   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2483                  pNwkDesc->routerCapacity = 1;
   \   00035E   8E82         MOV     DPL,R6
   \   000360   8F83         MOV     DPH,R7
   \   000362   A3           INC     DPTR
   \   000363   A3           INC     DPTR
   \   000364   A3           INC     DPTR
   \   000365   7401         MOV     A,#0x1
   \   000367   F0           MOVX    @DPTR,A
   2484              }
   2485            }
   2486          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000368   7F08         MOV     R7,#0x8
   \   00036A   02....       LJMP    ?BANKED_LEAVE_XDATA
   2487          
   2488          /*********************************************************************
   2489           * @fn          ZDO_StartRouterConfirmCB
   2490           *
   2491           * @brief       This function reports the results of the request to
   2492           *              start functioning as a router in a network.
   2493           *
   2494           * @param       Status - Result of NLME_StartRouterRequest()
   2495           *
   2496           * @return      none
   2497           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2498          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2499          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2500            nwkStatus = (byte)Status;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#nwkStatus
   \   00000B   F0           MOVX    @DPTR,A
   2501          
   2502            if ( Status == ZSUCCESS )
   \   00000C   EE           MOV     A,R6
   \   00000D   701E         JNZ     ??ZDO_StartRouterConfirmCB_0
   2503            {
   2504              // LED on shows Router started
   2505              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7904         MOV     R1,#0x4
   \   000013   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000016   E9           MOV     A,R1
   2506              // LED off forgets HOLD_AUTO_START
   2507              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000017                ; Setup parameters for call to function HalLedSet
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7908         MOV     R1,#0x8
   \   00001B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00001E   E9           MOV     A,R1
   2508              if ( devState == DEV_HOLD )
   \   00001F   90....       MOV     DPTR,#devState
   \   000022   E0           MOVX    A,@DPTR
   \   000023   7010         JNZ     ??ZDO_StartRouterConfirmCB_1
   2509              {
   2510                // Began with HOLD_AUTO_START
   2511                devState = DEV_END_DEVICE;
   \   000025   90....       MOV     DPTR,#devState
   \   000028   7406         MOV     A,#0x6
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   8008         SJMP    ??ZDO_StartRouterConfirmCB_1
   2512              }
   2513            }
   2514          #if defined(BLINK_LEDS)
   2515            else
   2516            {
   2517              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   00002D                ; Setup parameters for call to function HalLedSet
   \   00002D   7A04         MOV     R2,#0x4
   \   00002F   7904         MOV     R1,#0x4
   \   000031   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000034   E9           MOV     A,R1
   2518            }
   2519          #endif
   2520          
   2521            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   000035                ; Setup parameters for call to function osal_set_event
   \   000035   7A20         MOV     R2,#0x20
   \   000037   7B00         MOV     R3,#0x0
   \   000039   90....       MOV     DPTR,#ZDAppTaskID
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000041   E9           MOV     A,R1
   2522          }
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   2523          
   2524          /*********************************************************************
   2525           * @fn          ZDO_JoinConfirmCB
   2526           *
   2527           * @brief       This function allows the next higher layer to be notified
   2528           *              of the results of its request to join itself or another
   2529           *              device to a network.
   2530           *
   2531           * @param       Status - Result of NLME_JoinRequest()
   2532           *
   2533           * @return      none
   2534           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2535          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2536          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   89..         MOV     ?V2,R1
   2537            (void)PanId;  // remove if this parameter is used.
   2538          
   2539            nwkStatus = (byte)Status;
   \   000010   E5..         MOV     A,?V2
   \   000012   90....       MOV     DPTR,#nwkStatus
   \   000015   F0           MOVX    @DPTR,A
   2540          
   2541            if ( Status == ZSUCCESS )
   \   000016   E5..         MOV     A,?V2
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??ZDO_JoinConfirmCB_0 & 0xFFFF
   2542            {
   2543              if ( ZSTACK_END_DEVICE_BUILD
   2544                || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   00001D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6402         XRL     A,#0x2
   \   000023   601C         JZ      ??ZDO_JoinConfirmCB_1
   \   000025   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX    A,@DPTR
   \   000029   600B         JZ      ??ZDO_JoinConfirmCB_2
   \   00002B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6401         XRL     A,#0x1
   \   000031   6003         JZ      $+5
   \   000033   02....       LJMP    ??ZDO_JoinConfirmCB_3 & 0xFFFF
   \                     ??ZDO_JoinConfirmCB_2:
   \   000036   90....       MOV     DPTR,#_NIB + 14
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   A2E1         MOV     C,0xE0 /* A   */.1
   \   00003C   5003         JNC     $+5
   \   00003E   02....       LJMP    ??ZDO_JoinConfirmCB_3 & 0xFFFF
   2545              {
   2546                neighborEntry_t *pItem;
   2547          
   2548                // We don't need the neighbor table entries.
   2549                // Clear the neighbor Table to remove beacon information
   2550                nwkNeighborInitTable();
   \                     ??ZDO_JoinConfirmCB_1:
   \   000041                ; Setup parameters for call to function nwkNeighborInitTable
   \   000041   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2551          
   2552                // Force a neighbor table entry for the parent
   2553                pItem = nwkNeighborFindEmptySlot();
   \   000044                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000044   12....       LCALL   `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   000047   8A..         MOV     ?V4,R2
   \   000049   8B..         MOV     ?V5,R3
   \   00004B   AE..         MOV     R6,?V4
   \   00004D   AF..         MOV     R7,?V5
   2554                if ( pItem != NULL )
   \   00004F   EE           MOV     A,R6
   \   000050   4F           ORL     A,R7
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??ZDO_JoinConfirmCB_3 & 0xFFFF
   2555                {
   2556                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   7C17         MOV     R4,#0x17
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   EE           MOV     A,R6
   \   00005D   FA           MOV     R2,A
   \   00005E   EF           MOV     A,R7
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2557                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   000063   90....       MOV     DPTR,#_NIB + 23
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F8           MOV     R0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E8           MOV     A,R0
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E9           MOV     A,R1
   \   000073   F0           MOVX    @DPTR,A
   2558                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \   000074                ; Setup parameters for call to function sAddrExtCpy
   \   000074   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   000076   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   000078   EE           MOV     A,R6
   \   000079   2402         ADD     A,#0x2
   \   00007B   FA           MOV     R2,A
   \   00007C   E4           CLR     A
   \   00007D   3F           ADDC    A,R7
   \   00007E   FB           MOV     R3,A
   \   00007F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2559                  pItem->panId = _NIB. nwkPanId;
   \   000082   90....       MOV     DPTR,#_NIB + 33
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F8           MOV     R0,A
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F9           MOV     R1,A
   \   00008A   8E82         MOV     DPL,R6
   \   00008C   8F83         MOV     DPH,R7
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   E8           MOV     A,R0
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   E9           MOV     A,R1
   \   00009C   F0           MOVX    @DPTR,A
   2560                  pItem->linkInfo.rxLqi = DEF_LQI;
   \   00009D   EE           MOV     A,R6
   \   00009E   240F         ADD     A,#0xf
   \   0000A0   F582         MOV     DPL,A
   \   0000A2   E4           CLR     A
   \   0000A3   3F           ADDC    A,R7
   \   0000A4   F583         MOV     DPH,A
   \   0000A6   74AA         MOV     A,#-0x56
   \   0000A8   F0           MOVX    @DPTR,A
   2561                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   0000A9   90....       MOV     DPTR,#gLINK_DOWN_TRIGGER
   \   0000AC   E4           CLR     A
   \   0000AD   93           MOVC    A,@A+DPTR
   \   0000AE   F8           MOV     R0,A
   \   0000AF   7900         MOV     R1,#0x0
   \   0000B1   E8           MOV     A,R0
   \   0000B2   2401         ADD     A,#0x1
   \   0000B4   F8           MOV     R0,A
   \   0000B5   5001         JNC     ??ZDO_JoinConfirmCB_4
   \   0000B7   09           INC     R1
   \                     ??ZDO_JoinConfirmCB_4:
   \   0000B8   7A02         MOV     R2,#0x2
   \   0000BA   7B00         MOV     R3,#0x0
   \   0000BC   12....       LCALL   ?S_DIV_MOD
   \   0000BF   E8           MOV     A,R0
   \   0000C0   C0E0         PUSH    A
   \   0000C2   EE           MOV     A,R6
   \   0000C3   240D         ADD     A,#0xd
   \   0000C5   F582         MOV     DPL,A
   \   0000C7   E4           CLR     A
   \   0000C8   3F           ADDC    A,R7
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   D0E0         POP     A
   \   0000CD   F0           MOVX    @DPTR,A
   2562                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   0000CE   EE           MOV     A,R6
   \   0000CF   240E         ADD     A,#0xe
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   E4           CLR     A
   \   0000D4   3F           ADDC    A,R7
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   7401         MOV     A,#0x1
   \   0000D9   F0           MOVX    @DPTR,A
   2563                }
   2564              }
   2565          
   2566              // LED on shows device joined
   2567              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000DA                ; Setup parameters for call to function HalLedSet
   \   0000DA   7A01         MOV     R2,#0x1
   \   0000DC   7904         MOV     R1,#0x4
   \   0000DE   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000E1   E9           MOV     A,R1
   2568              // LED off forgets HOLD_AUTO_START
   2569              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   0000E2                ; Setup parameters for call to function HalLedSet
   \   0000E2   7A00         MOV     R2,#0x0
   \   0000E4   7908         MOV     R1,#0x8
   \   0000E6   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000E9   E9           MOV     A,R1
   2570              if ( (devState == DEV_HOLD) )
   \   0000EA   90....       MOV     DPTR,#devState
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   7010         JNZ     ??ZDO_JoinConfirmCB_5
   2571              {
   2572                // Began with HOLD_AUTO_START
   2573                devState = DEV_NWK_JOINING;
   \   0000F0   90....       MOV     DPTR,#devState
   \   0000F3   7403         MOV     A,#0x3
   \   0000F5   F0           MOVX    @DPTR,A
   2574              }
   2575          
   2576              if ( !ZG_SECURE_ENABLED )
   \   0000F6   8008         SJMP    ??ZDO_JoinConfirmCB_5
   2577              {
   2578                // Notify to save info into NV
   2579                ZDApp_NVUpdate();
   2580              }
   2581            }
   2582            else
   2583            {
   2584          #if defined(BLINK_LEDS)
   2585              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   0000F8                ; Setup parameters for call to function HalLedSet
   \   0000F8   7A04         MOV     R2,#0x4
   \   0000FA   7904         MOV     R1,#0x4
   \   0000FC   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000FF   E9           MOV     A,R1
   2586          #endif
   2587            }
   2588          
   2589            // Pass the join confirm to higher layer if callback registered
   2590            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_5:
   \   000100   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000103   E0           MOVX    A,@DPTR
   \   000104   F8           MOV     R0,A
   \   000105   A3           INC     DPTR
   \   000106   E0           MOVX    A,@DPTR
   \   000107   F9           MOV     R1,A
   \   000108   E8           MOV     A,R0
   \   000109   49           ORL     A,R1
   \   00010A   6043         JZ      ??ZDO_JoinConfirmCB_6
   2591            {
   2592              zdoJoinCnf_t joinCnf;
   2593          
   2594              joinCnf.status = Status;
   \   00010C   E5..         MOV     A,?V2
   \   00010E   C0E0         PUSH    A
   \   000110   85..82       MOV     DPL,?XSP + 0
   \   000113   85..83       MOV     DPH,?XSP + 1
   \   000116   D0E0         POP     A
   \   000118   F0           MOVX    @DPTR,A
   2595              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   000119   90....       MOV     DPTR,#_NIB + 20
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F8           MOV     R0,A
   \   00011E   A3           INC     DPTR
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   F9           MOV     R1,A
   \   000121   7401         MOV     A,#0x1
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   E8           MOV     A,R0
   \   000127   F0           MOVX    @DPTR,A
   \   000128   A3           INC     DPTR
   \   000129   E9           MOV     A,R1
   \   00012A   F0           MOVX    @DPTR,A
   2596              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \   00012B   90....       MOV     DPTR,#_NIB + 23
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   F8           MOV     R0,A
   \   000130   A3           INC     DPTR
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F9           MOV     R1,A
   \   000133   7403         MOV     A,#0x3
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   E8           MOV     A,R0
   \   000139   F0           MOVX    @DPTR,A
   \   00013A   A3           INC     DPTR
   \   00013B   E9           MOV     A,R1
   \   00013C   F0           MOVX    @DPTR,A
   2597          
   2598              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \   00013D                ; Setup parameters for indirect call
   \   00013D   AA..         MOV     R2,?XSP + 0
   \   00013F   AB..         MOV     R3,?XSP + 1
   \   000141   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F8           MOV     R0,A
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   F583         MOV     DPH,A
   \   00014A   8882         MOV     DPL,R0
   \   00014C   12....       LCALL   ?CALL_IND
   2599            }
   2600          
   2601            // Notify ZDApp
   2602            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_6:
   \   00014F                ; Setup parameters for call to function ZDApp_SendMsg
   \   00014F   7C00         MOV     R4,#0x0
   \   000151   7D00         MOV     R5,#0x0
   \   000153   7B02         MOV     R3,#0x2
   \   000155   7A02         MOV     R2,#0x2
   \   000157   90....       MOV     DPTR,#ZDAppTaskID
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F9           MOV     R1,A
   \   00015C   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2603          
   2604          }
   \   00015F   7405         MOV     A,#0x5
   \   000161   12....       LCALL   ?DEALLOC_XSTACK8
   \   000164   7F06         MOV     R7,#0x6
   \   000166   02....       LJMP    ?BANKED_LEAVE_XDATA
   2605          
   2606          /*********************************************************************
   2607           * @fn          ZDO_PermitJoinCB
   2608           *
   2609           * @brief      This function is called when there is a change in the
   2610           *             device's permit join status.
   2611           *
   2612           * @param       duration - the new duration
   2613           *
   2614           * @return      none
   2615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2616          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2617          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   C0E0         PUSH    A
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   2618            // Pass the Permit Join status to higher layer if callback registered
   2619            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000015   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   6012         JZ      ??ZDO_PermitJoinCB_0
   2620            {
   2621              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000021                ; Setup parameters for indirect call
   \   000021   AA..         MOV     R2,?XSP + 0
   \   000023   AB..         MOV     R3,?XSP + 1
   \   000025   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   8882         MOV     DPL,R0
   \   000030   12....       LCALL   ?CALL_IND
   2622            }
   2623          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000033   7401         MOV     A,#0x1
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   D083         POP     DPH
   \   00003A   D082         POP     DPL
   \   00003C   02....       LJMP    ?BRET
   2624          
   2625          /*********************************************************************
   2626           * @fn          ZDO_AddrChangeIndicationCB
   2627           *
   2628           * @brief       This function notifies the application that this
   2629           *              device's address has changed.  Could happen in
   2630           *              a network with stochastic addressing (PRO).
   2631           *
   2632           * @param       newAddr - the new address
   2633           *
   2634           * @return      none
   2635           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2636          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2637          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   2638            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2639            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F5..         MOV     ?V0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V1,A
   2640          
   2641            // Notify to save info into NV
   2642            ZDApp_NVUpdate();
   \   000013                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000013   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2643          
   2644            // Notify the applications
   2645            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000016                ; Setup parameters for call to function osal_set_event
   \   000016   7A10         MOV     R2,#0x10
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   90....       MOV     DPTR,#ZDAppTaskID
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000022   E9           MOV     A,R1
   2646          
   2647            while (pItem != NULL)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000023   E5..         MOV     A,?V0
   \   000025   45..         ORL     A,?V1
   \   000027   606C         JZ      ??ZDO_AddrChangeIndicationCB_1
   2648            {
   2649              if (pItem->epDesc->endPoint != ZDO_EP)
   \   000029   85..82       MOV     DPL,?V0
   \   00002C   85..83       MOV     DPH,?V1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F583         MOV     DPH,A
   \   000037   8882         MOV     DPL,R0
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   604A         JZ      ??ZDO_AddrChangeIndicationCB_2
   2650              {
   2651                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   00003C                ; Setup parameters for call to function osal_msg_allocate
   \   00003C   7A04         MOV     R2,#0x4
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000043   8A..         MOV     ?V4,R2
   \   000045   8B..         MOV     ?V5,R3
   \   000047   AE..         MOV     R6,?V4
   \   000049   AF..         MOV     R7,?V5
   2652                if (pZDOAddrChangeMsg != NULL)
   \   00004B   EE           MOV     A,R6
   \   00004C   4F           ORL     A,R7
   \   00004D   6037         JZ      ??ZDO_AddrChangeIndicationCB_2
   2653                {
   2654                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   74D6         MOV     A,#-0x2a
   \   000055   F0           MOVX    @DPTR,A
   2655                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V2
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E5..         MOV     A,?V3
   \   000062   F0           MOVX    @DPTR,A
   2656                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \   000063                ; Setup parameters for call to function osal_msg_send
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   85..82       MOV     DPL,?V0
   \   00006A   85..83       MOV     DPH,?V1
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F8           MOV     R0,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F583         MOV     DPH,A
   \   000075   8882         MOV     DPL,R0
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F8           MOV     R0,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F583         MOV     DPH,A
   \   00007E   8882         MOV     DPL,R0
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000085   E9           MOV     A,R1
   2657                }
   2658              }
   2659              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_2:
   \   000086   85..82       MOV     DPL,?V0
   \   000089   85..83       MOV     DPH,?V1
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F5..         MOV     ?V0,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F5..         MOV     ?V1,A
   \   000093   808E         SJMP    ??ZDO_AddrChangeIndicationCB_0
   2660            }
   2661          
   2662            // Send out a device announce
   2663            ZDApp_AnnounceNewAddress();
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000095                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000095   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2664          }
   \   000098   7F06         MOV     R7,#0x6
   \   00009A   02....       LJMP    ?BANKED_LEAVE_XDATA
   2665          
   2666          /*********************************************************************
   2667           * @fn          ZDO_JoinIndicationCB
   2668           *
   2669           * @brief       This function allows the next higher layer of a
   2670           *              coordinator to be notified of a remote join request.
   2671           *
   2672           * @param       ShortAddress - 16-bit address
   2673           * @param       ExtendedAddress - IEEE (64-bit) address
   2674           * @param       CapabilityFlags - Association Capability Flags
   2675           * @param       type - of joining -
   2676           *                          NWK_ASSOC_JOIN
   2677           *                          NWK_ASSOC_REJOIN_UNSECURE
   2678           *                          NWK_ASSOC_REJOIN_SECURE
   2679           *
   2680           * @return      ZStatus_t
   2681           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2682          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2683                                          uint8 CapabilityFlags, uint8 type)
   2684          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V10,R2
   \   000007   8B..         MOV     ?V11,R3
   \   000009   8C..         MOV     ?V12,R4
   \   00000B   8D..         MOV     ?V13,R5
   \   00000D   89..         MOV     ?V9,R1
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V8,A
   2685            (void)ExtendedAddress;
   2686          #if ZDO_NV_SAVE_RFDs
   2687            (void)CapabilityFlags;
   2688          
   2689          #else  // if !ZDO_NV_SAVE_RFDs
   2690            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2691          #endif
   2692            {
   2693              ZDApp_NVUpdate();  // Notify to save info into NV.
   \   000017                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000017   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2694            }
   2695          
   2696            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2697            {
   2698              if ( type == NWK_ASSOC_JOIN ||
   2699                   type == NWK_ASSOC_REJOIN_UNSECURE ||
   2700                   type == NWK_ASSOC_REJOIN_SECURE )
   \   00001A   E5..         MOV     A,?V8
   \   00001C   600F         JZ      ??ZDO_JoinIndicationCB_0
   \   00001E   7401         MOV     A,#0x1
   \   000020   65..         XRL     A,?V8
   \   000022   6009         JZ      ??ZDO_JoinIndicationCB_0
   \   000024   7402         MOV     A,#0x2
   \   000026   65..         XRL     A,?V8
   \   000028   6003         JZ      $+5
   \   00002A   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2701              {
   2702                uint16 timeToFire;
   2703                ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2704          
   2705                pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_0:
   \   00002D                ; Setup parameters for call to function osal_mem_alloc
   \   00002D   7A06         MOV     R2,#0x6
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000034   8A..         MOV     ?V4,R2
   \   000036   8B..         MOV     ?V5,R3
   \   000038   AE..         MOV     R6,?V4
   \   00003A   AF..         MOV     R7,?V5
   2706          
   2707                if ( pNewDevice == NULL )
   \   00003C   EE           MOV     A,R6
   \   00003D   4F           ORL     A,R7
   \   00003E   7005         JNZ     ??ZDO_JoinIndicationCB_2
   2708                {
   2709                  // Memory alloc failed
   2710                  return ZMemError;
   \   000040   7910         MOV     R1,#0x10
   \   000042   02....       LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2711                }
   2712          
   2713                // Add the new device to the New Device List
   2714                if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_2:
   \   000045   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   E8           MOV     A,R0
   \   00004E   49           ORL     A,R1
   \   00004F   700A         JNZ     ??ZDO_JoinIndicationCB_4
   2715                {
   2716                  // The list is empty, add the first element
   2717                  ZDApp_NewDeviceList = pNewDevice;
   \   000051   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000054   EE           MOV     A,R6
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   EF           MOV     A,R7
   \   000058   F0           MOVX    @DPTR,A
   \   000059   8035         SJMP    ??ZDO_JoinIndicationCB_5
   2718                }
   2719                else
   2720                {
   2721                  pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_4:
   \   00005B   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   88..         MOV     ?V0,R0
   \   000065   89..         MOV     ?V1,R1
   2722          
   2723                  // Walk the list to last element
   2724                  while ( pDeviceList->next )
   \                     ??ZDO_JoinIndicationCB_6:
   \   000067   85..82       MOV     DPL,?V0
   \   00006A   85..83       MOV     DPH,?V1
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F8           MOV     R0,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   E8           MOV     A,R0
   \   000073   49           ORL     A,R1
   \   000074   600F         JZ      ??ZDO_JoinIndicationCB_7
   2725                  {
   2726                    pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \   000076   85..82       MOV     DPL,?V0
   \   000079   85..83       MOV     DPH,?V1
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F5..         MOV     ?V0,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F5..         MOV     ?V1,A
   \   000083   80E2         SJMP    ??ZDO_JoinIndicationCB_6
   2727                  }
   2728          
   2729                  // Add new device at the end
   2730                  pDeviceList->next = pNewDevice;
   \                     ??ZDO_JoinIndicationCB_7:
   \   000085   85..82       MOV     DPL,?V0
   \   000088   85..83       MOV     DPH,?V1
   \   00008B   EE           MOV     A,R6
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   EF           MOV     A,R7
   \   00008F   F0           MOVX    @DPTR,A
   2731                }
   2732          
   2733                // get the remaining time of the timer
   2734                timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \                     ??ZDO_JoinIndicationCB_5:
   \   000090                ; Setup parameters for call to function osal_get_timeoutEx
   \   000090   7A40         MOV     R2,#0x40
   \   000092   7B00         MOV     R3,#0x0
   \   000094   90....       MOV     DPTR,#ZDAppTaskID
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F9           MOV     R1,A
   \   000099   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00009C   8A..         MOV     ?V4,R2
   \   00009E   8B..         MOV     ?V5,R3
   \   0000A0   8C..         MOV     ?V6,R4
   \   0000A2   8D..         MOV     ?V7,R5
   \   0000A4   85....       MOV     ?V2,?V4
   \   0000A7   85....       MOV     ?V3,?V5
   2735          
   2736                pNewDevice->next = NULL;
   \   0000AA   8E82         MOV     DPL,R6
   \   0000AC   8F83         MOV     DPH,R7
   \   0000AE   7400         MOV     A,#0x0
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   7400         MOV     A,#0x0
   \   0000B4   F0           MOVX    @DPTR,A
   2737                pNewDevice->shortAddr = ShortAddress;
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E5..         MOV     A,?V10
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E5..         MOV     A,?V11
   \   0000C1   F0           MOVX    @DPTR,A
   2738                pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   0000C2   7458         MOV     A,#0x58
   \   0000C4   C3           CLR     C
   \   0000C5   95..         SUBB    A,?V2
   \   0000C7   F8           MOV     R0,A
   \   0000C8   7402         MOV     A,#0x2
   \   0000CA   95..         SUBB    A,?V3
   \   0000CC   F9           MOV     R1,A
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   E8           MOV     A,R0
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   E9           MOV     A,R1
   \   0000D9   F0           MOVX    @DPTR,A
   2739          
   2740                // Start the timer only if there is no pending timer
   2741                if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \   0000DA   8E82         MOV     DPL,R6
   \   0000DC   8F83         MOV     DPH,R7
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   6458         XRL     A,#0x58
   \   0000E5   7004         JNZ     ??ZDO_JoinIndicationCB_8
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   6402         XRL     A,#0x2
   \                     ??ZDO_JoinIndicationCB_8:
   \   0000EB   7018         JNZ     ??ZDO_JoinIndicationCB_1
   2742                {
   2743                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000ED                ; Setup parameters for call to function osal_start_timerEx
   \   0000ED   90....       MOV     DPTR,#__Constant_258
   \   0000F0   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000F3   7A40         MOV     R2,#0x40
   \   0000F5   7B00         MOV     R3,#0x0
   \   0000F7   90....       MOV     DPTR,#ZDAppTaskID
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000FF   7404         MOV     A,#0x4
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
   \   000104   E9           MOV     A,R1
   2744                }
   2745              }
   2746            }
   2747          
   2748            return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_1:
   \   000105   7900         MOV     R1,#0x0
   \                     ??ZDO_JoinIndicationCB_3:
   \   000107   7F0E         MOV     R7,#0xe
   \   000109   02....       LJMP    ?BANKED_LEAVE_XDATA
   2749          }
   2750          
   2751          /*********************************************************************
   2752           * @fn          ZDO_ConcentratorIndicationCB
   2753           *
   2754           * @brief       This function allows the next higher layer of a
   2755           *              device to be notified of existence of the concentrator.
   2756           *
   2757           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2758           * @param       extAddr - pointer to extended Address
   2759           *                        NULL if not available
   2760           * @param       pktCost - PktCost from RREQ
   2761           *
   2762           * @return      void
   2763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2764          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2765          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
   2766            zdoConcentratorInd_t conInd;
   2767          
   2768            conInd.nwkAddr = nwkAddr;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   E5..         MOV     A,?V0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E5..         MOV     A,?V1
   \   000020   F0           MOVX    @DPTR,A
   2769            conInd.extAddr = extAddr;
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   EE           MOV     A,R6
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   EF           MOV     A,R7
   \   00002A   F0           MOVX    @DPTR,A
   2770            conInd.pktCost = pktCost;
   \   00002B   E5..         MOV     A,?V2
   \   00002D   C0E0         PUSH    A
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
   2771          
   2772            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   000037   90....       MOV     DPTR,#zdoCBFunc + 2
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   6012         JZ      ??ZDO_ConcentratorIndicationCB_0
   2773            {
   2774              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000043                ; Setup parameters for indirect call
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   90....       MOV     DPTR,#zdoCBFunc + 2
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F583         MOV     DPH,A
   \   000050   8882         MOV     DPL,R0
   \   000052   12....       LCALL   ?CALL_IND
   2775            }
   2776          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV     R7,#0x3
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2777          
   2778          /*********************************************************************
   2779           * @fn          ZDO_LeaveCnf
   2780           *
   2781           * @brief       This function allows the next higher layer to be
   2782           *              notified of the results of its request for this or
   2783           *              a child device to leave the network.
   2784           *
   2785           * @param       cnf - NLME_LeaveCnf_t
   2786           *
   2787           * @return      none
   2788           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2789          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2790          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2791            // Check for this device
   2792            if ( osal_ExtAddrEqual( cnf->extAddr,
   2793                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   EE           MOV     A,R6
   \   000015   2402         ADD     A,#0x2
   \   000017   FA           MOV     R2,A
   \   000018   E4           CLR     A
   \   000019   3F           ADDC    A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001E   E9           MOV     A,R1
   \   00001F   6401         XRL     A,#0x1
   \   000021   7038         JNZ     ??ZDO_LeaveCnf_0
   2794            {
   2795              // Pass the leave confirm to higher layer if callback registered
   2796              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2797                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000023   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   E8           MOV     A,R0
   \   00002C   49           ORL     A,R1
   \   00002D   601C         JZ      ??ZDO_LeaveCnf_1
   \   00002F                ; Setup parameters for indirect call
   \   00002F   EE           MOV     A,R6
   \   000030   FA           MOV     R2,A
   \   000031   EF           MOV     A,R7
   \   000032   FB           MOV     R3,A
   \   000033   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F583         MOV     DPH,A
   \   00003C   8882         MOV     DPL,R0
   \   00003E   12....       LCALL   ?CALL_IND
   \   000041   8A..         MOV     ?V0,R2
   \   000043   8B..         MOV     ?V1,R3
   \   000045   E5..         MOV     A,?V0
   \   000047   45..         ORL     A,?V1
   \   000049   7041         JNZ     ??ZDO_LeaveCnf_2
   2798              {
   2799                // Prepare to leave with reset
   2800                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   00004B                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00004B   EE           MOV     A,R6
   \   00004C   240B         ADD     A,#0xb
   \   00004E   F582         MOV     DPL,A
   \   000050   E4           CLR     A
   \   000051   3F           ADDC    A,R7
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000059   8031         SJMP    ??ZDO_LeaveCnf_2
   2801              }
   2802            }
   2803            else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_LeaveCnf_0:
   \   00005B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6008         JZ      ??ZDO_LeaveCnf_3
   \   000061   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6401         XRL     A,#0x1
   \   000067   7023         JNZ     ??ZDO_LeaveCnf_2
   2804            {
   2805              // Remove device address(optionally descendents) from data
   2806              ZDApp_LeaveUpdate( cnf->dstAddr,
   2807                                 cnf->extAddr,
   2808                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_3:
   \   000069                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   EE           MOV     A,R6
   \   00007A   2402         ADD     A,#0x2
   \   00007C   FC           MOV     R4,A
   \   00007D   E4           CLR     A
   \   00007E   3F           ADDC    A,R7
   \   00007F   FD           MOV     R5,A
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FA           MOV     R2,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FB           MOV     R3,A
   \   000089   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2809            }
   2810          }
   \                     ??ZDO_LeaveCnf_2:
   \   00008C   7F02         MOV     R7,#0x2
   \   00008E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2811          
   2812          /*********************************************************************
   2813           * @fn          ZDO_LeaveInd
   2814           *
   2815           * @brief       This function allows the next higher layer of a
   2816           *              device to be notified of a remote leave request or
   2817           *              indication.
   2818           *
   2819           * @param       ind - NLME_LeaveInd_t
   2820           *
   2821           * @return      none
   2822           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2823          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2824          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2825            uint8 leave;
   2826          
   2827          
   2828            // Parent is requesting the leave - NWK layer filters out illegal
   2829            // requests
   2830            if ( ind->request == TRUE )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   707D         JNZ     ??ZDO_LeaveInd_0
   2831            {
   2832              // Only respond if we are not rejoining the network
   2833              if ( ind->rejoin == FALSE )
   \   000021   EE           MOV     A,R6
   \   000022   240C         ADD     A,#0xc
   \   000024   F582         MOV     DPL,A
   \   000026   E4           CLR     A
   \   000027   3F           ADDC    A,R7
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7052         JNZ     ??ZDO_LeaveInd_1
   2834              {
   2835                // Notify network of leave
   2836                NLME_LeaveRsp_t rsp;
   2837                rsp.rejoin = ind->rejoin;
   \   00002D   EE           MOV     A,R6
   \   00002E   240C         ADD     A,#0xc
   \   000030   F582         MOV     DPL,A
   \   000032   E4           CLR     A
   \   000033   3F           ADDC    A,R7
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   C0E0         PUSH    A
   \   000039   7401         MOV     A,#0x1
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   D0E0         POP     A
   \   000040   F0           MOVX    @DPTR,A
   2838          
   2839                if ( ZSTACK_ROUTER_BUILD )
   \   000041   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000044   E0           MOVX    A,@DPTR
   \   000045   6008         JZ      ??ZDO_LeaveInd_2
   \   000047   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6401         XRL     A,#0x1
   \   00004D   7017         JNZ     ??ZDO_LeaveInd_3
   2840                {
   2841                  rsp.removeChildren = ind->removeChildren;
   \                     ??ZDO_LeaveInd_2:
   \   00004F   EE           MOV     A,R6
   \   000050   240B         ADD     A,#0xb
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   3F           ADDC    A,R7
   \   000056   F583         MOV     DPH,A
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C0E0         PUSH    A
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   D0E0         POP     A
   \   000063   F0           MOVX    @DPTR,A
   \   000064   8011         SJMP    ??ZDO_LeaveInd_4
   2842                }
   2843                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_LeaveInd_3:
   \   000066   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   6402         XRL     A,#0x2
   \   00006C   7009         JNZ     ??ZDO_LeaveInd_4
   2844                {
   2845                  rsp.removeChildren = 0;
   \   00006E   85..82       MOV     DPL,?XSP + 0
   \   000071   85..83       MOV     DPH,?XSP + 1
   \   000074   7400         MOV     A,#0x0
   \   000076   F0           MOVX    @DPTR,A
   2846                }
   2847          
   2848                NLME_LeaveRsp( &rsp );
   \                     ??ZDO_LeaveInd_4:
   \   000077                ; Setup parameters for call to function NLME_LeaveRsp
   \   000077   AA..         MOV     R2,?XSP + 0
   \   000079   AB..         MOV     R3,?XSP + 1
   \   00007B   12....       LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   \   00007E   E9           MOV     A,R1
   2849              }
   2850          
   2851              if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_LeaveInd_1:
   \   00007F   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000082   E0           MOVX    A,@DPTR
   \   000083   6402         XRL     A,#0x2
   \   000085   7007         JNZ     ??ZDO_LeaveInd_5
   2852              {
   2853                // Stop polling and get ready to reset
   2854                NLME_SetPollRate( 0 );
   \   000087                ; Setup parameters for call to function NLME_SetPollRate
   \   000087   7A00         MOV     R2,#0x0
   \   000089   7B00         MOV     R3,#0x0
   \   00008B   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2855              }
   2856          
   2857              // Prepare to leave with reset
   2858              ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_5:
   \   00008E                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00008E   EE           MOV     A,R6
   \   00008F   240C         ADD     A,#0xc
   \   000091   F582         MOV     DPL,A
   \   000093   E4           CLR     A
   \   000094   3F           ADDC    A,R7
   \   000095   F583         MOV     DPH,A
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F9           MOV     R1,A
   \   000099   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   00009C   806A         SJMP    ??ZDO_LeaveInd_6
   2859            }
   2860            else
   2861            {
   2862              leave = FALSE;
   \                     ??ZDO_LeaveInd_0:
   \   00009E   75..00       MOV     ?V0,#0x0
   2863          
   2864              // Check if this device needs to leave as a child or descendent
   2865              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \   0000A1                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   0000A1   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   0000A4   8A..         MOV     ?V2,R2
   \   0000A6   8B..         MOV     ?V3,R3
   \   0000A8   A8..         MOV     R0,?V2
   \   0000AA   A9..         MOV     R1,?V3
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   68           XRL     A,R0
   \   0000B2   7003         JNZ     ??ZDO_LeaveInd_7
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_7:
   \   0000B7   701B         JNZ     ??ZDO_LeaveInd_8
   2866              {
   2867                if ( ( ind->removeChildren == TRUE               ) ||
   2868                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2869                       NODETYPE_DEVICE                           )    )
   \   0000B9   EE           MOV     A,R6
   \   0000BA   240B         ADD     A,#0xb
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   3F           ADDC    A,R7
   \   0000C0   F583         MOV     DPH,A
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   6401         XRL     A,#0x1
   \   0000C5   600A         JZ      ??ZDO_LeaveInd_9
   \   0000C7   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   5407         ANL     A,#0x7
   \   0000CD   6402         XRL     A,#0x2
   \   0000CF   7003         JNZ     ??ZDO_LeaveInd_8
   2870                {
   2871                  leave = TRUE;
   \                     ??ZDO_LeaveInd_9:
   \   0000D1   75..01       MOV     ?V0,#0x1
   2872                }
   2873              }
   2874              else if ( ind->removeChildren == TRUE )
   2875              {
   2876                // Check NWK address allocation algorithm
   2877                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2878              }
   2879          
   2880              if ( leave == TRUE )
   \                     ??ZDO_LeaveInd_8:
   \   0000D4   7401         MOV     A,#0x1
   \   0000D6   65..         XRL     A,?V0
   \   0000D8   7010         JNZ     ??ZDO_LeaveInd_10
   2881              {
   2882                // Prepare to leave with reset
   2883                ZDApp_LeaveReset( ind->rejoin );
   \   0000DA                ; Setup parameters for call to function ZDApp_LeaveReset
   \   0000DA   EE           MOV     A,R6
   \   0000DB   240C         ADD     A,#0xc
   \   0000DD   F582         MOV     DPL,A
   \   0000DF   E4           CLR     A
   \   0000E0   3F           ADDC    A,R7
   \   0000E1   F583         MOV     DPH,A
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F9           MOV     R1,A
   \   0000E5   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   0000E8   801E         SJMP    ??ZDO_LeaveInd_6
   2884              }
   2885              else
   2886              {
   2887                // Remove device address(optionally descendents) from data
   2888                ZDApp_LeaveUpdate( ind->srcAddr,
   2889                                   ind->extAddr,
   2890                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_10:
   \   0000EA                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000EA   EE           MOV     A,R6
   \   0000EB   240B         ADD     A,#0xb
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E4           CLR     A
   \   0000F0   3F           ADDC    A,R7
   \   0000F1   F583         MOV     DPH,A
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F9           MOV     R1,A
   \   0000F5   EE           MOV     A,R6
   \   0000F6   2402         ADD     A,#0x2
   \   0000F8   FC           MOV     R4,A
   \   0000F9   E4           CLR     A
   \   0000FA   3F           ADDC    A,R7
   \   0000FB   FD           MOV     R5,A
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   E0           MOVX    A,@DPTR
   \   000101   FA           MOV     R2,A
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   FB           MOV     R3,A
   \   000105   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2891              }
   2892            }
   2893          
   2894            // Pass the leave indication to higher layer if callback registered.
   2895            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_6:
   \   000108   90....       MOV     DPTR,#zdoCBFunc + 12
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F8           MOV     R0,A
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F9           MOV     R1,A
   \   000110   E8           MOV     A,R0
   \   000111   49           ORL     A,R1
   \   000112   601C         JZ      ??ZDO_LeaveInd_11
   2896            {
   2897              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   000114                ; Setup parameters for indirect call
   \   000114   EE           MOV     A,R6
   \   000115   FA           MOV     R2,A
   \   000116   EF           MOV     A,R7
   \   000117   FB           MOV     R3,A
   \   000118   90....       MOV     DPTR,#zdoCBFunc + 12
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F8           MOV     R0,A
   \   00011D   A3           INC     DPTR
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   F583         MOV     DPH,A
   \   000121   8882         MOV     DPL,R0
   \   000123   12....       LCALL   ?CALL_IND
   \   000126   8A..         MOV     ?V2,R2
   \   000128   8B..         MOV     ?V3,R3
   \   00012A   85..82       MOV     DPL,?V2
   \   00012D   85..83       MOV     DPH,?V3
   2898            }
   2899          }
   \                     ??ZDO_LeaveInd_11:
   \   000130   7402         MOV     A,#0x2
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
   \   000135   7F04         MOV     R7,#0x4
   \   000137   02....       LJMP    ?BANKED_LEAVE_XDATA
   2900          
   2901          /*********************************************************************
   2902           * @fn          ZDO_SyncIndicationCB
   2903           *
   2904           * @brief       This function allows the next higher layer of a
   2905           *              coordinator to be notified of a loss of synchronization
   2906           *                          with the parent/child device.
   2907           *
   2908           * @param       type: 0 - child; 1 - parent
   2909           *
   2910           *
   2911           * @return      none
   2912           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2913          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2914          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   2915            (void)shortAddr;  // Remove this line if this parameter is used.
   2916          
   2917            if ( ZSTACK_END_DEVICE_BUILD
   2918              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   00000B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6402         XRL     A,#0x2
   \   000011   6016         JZ      ??ZDO_SyncIndicationCB_0
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6008         JZ      ??ZDO_SyncIndicationCB_1
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   7021         JNZ     ??ZDO_SyncIndicationCB_2
   \                     ??ZDO_SyncIndicationCB_1:
   \   000021   90....       MOV     DPTR,#_NIB + 14
   \   000024   E0           MOVX    A,@DPTR
   \   000025   A2E1         MOV     C,0xE0 /* A   */.1
   \   000027   4019         JC      ??ZDO_SyncIndicationCB_2
   2919            {
   2920              if ( type == 1 )
   \                     ??ZDO_SyncIndicationCB_0:
   \   000029   7401         MOV     A,#0x1
   \   00002B   65..         XRL     A,?V0
   \   00002D   7013         JNZ     ??ZDO_SyncIndicationCB_2
   2921              {
   2922                // We lost contact with our parent.  Clear the neighbor Table.
   2923                nwkNeighborInitTable();
   \   00002F                ; Setup parameters for call to function nwkNeighborInitTable
   \   00002F   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2924          
   2925                // Start the rejoin process.
   2926                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000032                ; Setup parameters for call to function ZDApp_SendMsg
   \   000032   7C00         MOV     R4,#0x0
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7B02         MOV     R3,#0x2
   \   000038   7A03         MOV     R2,#0x3
   \   00003A   90....       MOV     DPTR,#ZDAppTaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2927              }
   2928            }
   2929          }
   \                     ??ZDO_SyncIndicationCB_2:
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   2930          
   2931          /*********************************************************************
   2932           * @fn          ZDO_ManytoOneFailureIndicationCB
   2933           *
   2934           * @brief       This function allows the next higher layer of a
   2935           *              concentrator to be notified of a many-to-one route
   2936           *              failure.
   2937           *
   2938           * @param       none
   2939           *
   2940           *
   2941           * @return      none
   2942           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2943          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2944          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2945            // By default, the concentrator automatically redo many-to-one route
   2946            // discovery to update all many-to-one routes in the network
   2947            // If you want anything processing other than the default,
   2948            // please replace the following code.
   2949          
   2950            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   2951          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
   2952          
   2953          /*********************************************************************
   2954           * @fn          ZDO_PollConfirmCB
   2955           *
   2956           * @brief       This function allows the next higher layer to be
   2957           *              notified of a Poll Confirm.
   2958           *
   2959           * @param       none
   2960           *
   2961           * @return      none
   2962           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2963          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2964          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2965            (void)status;  // Remove this line if this parameter is used.
   2966            return;
   \   000000   02....       LJMP    ?BRET
   2967          }
   2968          
   2969          /*********************************************************************
   2970           * @fn          ZDO_NetworkStatusCB
   2971           *
   2972           * @brief       Network Status Callback function
   2973           *
   2974           * @param       nwkDstAddr - message's destination address- used to determine
   2975           *                           if the message was intended for this device or
   2976           *                           a sleeping end device.
   2977           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   2978           * @param       dstAddr - the destination address related to the status code
   2979           *
   2980           * @return      none
   2981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2982          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   2983          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   89..         MOV     ?V2,R1
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   2984            (void)dstAddr;     // Remove this line if this parameter is used.
   2985          
   2986            if ( (nwkDstAddr == NLME_GetShortAddr())
   2987                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   00000F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000F   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000012   8A..         MOV     ?V4,R2
   \   000014   8B..         MOV     ?V5,R3
   \   000016   A8..         MOV     R0,?V4
   \   000018   A9..         MOV     R1,?V5
   2988            {
   2989              // Routing error for dstAddr, this is informational and a Route
   2990              // Request should happen automatically.
   2991            }
   2992          }
   \   00001A   7F06         MOV     R7,#0x6
   \   00001C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2993          
   2994          /******************************************************************************
   2995           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2996           *
   2997           * @brief       Stub routine implemented by NHLE. NHLE should call
   2998           *              <AddrMgrWriteNV> when appropriate.
   2999           *
   3000           * @param       none
   3001           *
   3002           * @return      none
   3003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3004          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3005          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3006          #if defined ( NV_RESTORE )
   3007            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   3008            {
   3009              // Trigger to save info into NV
   3010              ZDApp_NVUpdate();
   3011            }
   3012          #endif
   3013          }
   \   000000   02....       LJMP    ?BRET
   3014          
   3015          /*********************************************************************
   3016           * Call Back Functions from Security  - API
   3017           */
   3018          
   3019           /*********************************************************************
   3020           * @fn          ZDO_UpdateDeviceIndication
   3021           *
   3022           * @brief       This function notifies the "Trust Center" of a
   3023           *              network when a device joins or leaves the network.
   3024           *
   3025           * @param       extAddr - pointer to 64 bit address of new device
   3026           * @param       status  - 0 if a new device joined securely
   3027           *                      - 1 if a new device joined un-securely
   3028           *                      - 2 if a device left the network
   3029           *
   3030           * @return      true if newly joined device should be allowed to
   3031           *                                              remain on network
   3032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3033          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3034          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
   3035            // can implement a network access policy based on the
   3036            // IEEE address of newly joining devices...
   3037            (void)extAddr;
   3038            (void)status;
   3039          
   3040            return ZSuccess;
   \   000002   7900         MOV     R1,#0x0
   \   000004   02....       LJMP    ?BRET
   3041          }
   3042          
   3043          /*********************************************************************
   3044           * @fn          ZDApp_InMsgCB
   3045           *
   3046           * @brief       This function is called to pass up any message that is
   3047           *              not yet supported.  This allows for the developer to
   3048           *              support features themselves..
   3049           *
   3050           * @return      none
   3051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3052          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3054            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   5400         ANL     A,#0x0
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   5480         ANL     A,#0x80
   \   00001A   F9           MOV     R1,A
   \   00001B   E8           MOV     A,R0
   \   00001C   49           ORL     A,R1
   \   00001D   706B         JNZ     ??ZDApp_InMsgCB_0
   3055            {
   3056              // Handle the response message
   3057            }
   3058            else
   3059            {
   3060              // Handle the request message by sending a generic "not supported".
   3061              // Device Announce doesn't have a response.
   3062              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   00001F   EE           MOV     A,R6
   \   000020   240B         ADD     A,#0xb
   \   000022   F582         MOV     DPL,A
   \   000024   E4           CLR     A
   \   000025   3F           ADDC    A,R7
   \   000026   F583         MOV     DPH,A
   \   000028   E0           MOVX    A,@DPTR
   \   000029   705F         JNZ     ??ZDApp_InMsgCB_0
   \   00002B   EE           MOV     A,R6
   \   00002C   240C         ADD     A,#0xc
   \   00002E   F582         MOV     DPL,A
   \   000030   E4           CLR     A
   \   000031   3F           ADDC    A,R7
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6413         XRL     A,#0x13
   \   000037   7004         JNZ     ??ZDApp_InMsgCB_1
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6400         XRL     A,#0x0
   \                     ??ZDApp_InMsgCB_1:
   \   00003D   604B         JZ      ??ZDApp_InMsgCB_0
   3063              {
   3064                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3065                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   00003F                ; Setup parameters for call to function ZDP_GenericRsp
   \   00003F   EE           MOV     A,R6
   \   000040   240C         ADD     A,#0xc
   \   000042   F582         MOV     DPL,A
   \   000044   E4           CLR     A
   \   000045   3F           ADDC    A,R7
   \   000046   F583         MOV     DPH,A
   \   000048   E0           MOVX    A,@DPTR
   \   000049   4400         ORL     A,#0x0
   \   00004B   F5..         MOV     ?V0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   4480         ORL     A,#0x80
   \   000051   F5..         MOV     ?V1,A
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   E4           CLR     A
   \   000059   F5..         MOV     ?V0,A
   \   00005B   F5..         MOV     ?V1,A
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EE           MOV     A,R6
   \   000063   240E         ADD     A,#0xe
   \   000065   F582         MOV     DPL,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   F583         MOV     DPH,A
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FD           MOV     R5,A
   \   00006D   7C84         MOV     R4,#-0x7c
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   FA           MOV     R2,A
   \   000073   E4           CLR     A
   \   000074   3F           ADDC    A,R7
   \   000075   FB           MOV     R3,A
   \   000076   EE           MOV     A,R6
   \   000077   240F         ADD     A,#0xf
   \   000079   F582         MOV     DPL,A
   \   00007B   E4           CLR     A
   \   00007C   3F           ADDC    A,R7
   \   00007D   F583         MOV     DPH,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000084   7404         MOV     A,#0x4
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   E9           MOV     A,R1
   3066              }
   3067            }
   3068          }
   \                     ??ZDApp_InMsgCB_0:
   \   00008A   7F02         MOV     R7,#0x2
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA
   3069          
   3070          
   3071          /*********************************************************************
   3072           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3073           *
   3074           * @brief   Changes the Match Descriptor Response permission.
   3075           *
   3076           * @param   endpoint - endpoint to allow responses
   3077           * @param   action - true to allow responses, false to not
   3078           *
   3079           * @return  none
   3080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3081          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3082          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   3083            // Store the action
   3084            afSetMatch( endpoint, action );
   \   000009                ; Setup parameters for call to function afSetMatch
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   000010   E9           MOV     A,R1
   3085          }
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
   3086          
   3087          /*********************************************************************
   3088           * @fn      ZDApp_NetworkInit()
   3089           *
   3090           * @brief   Used to start the network joining process
   3091           *
   3092           * @param   delay - mSec delay to wait before starting
   3093           *
   3094           * @return  none
   3095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3096          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3097          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3098            if ( delay )
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   6022         JZ      ??ZDApp_NetworkInit_0
   3099            {
   3100              // Wait awhile before starting the device
   3101              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   8E..         MOV     ?V0,R6
   \   00000F   8F..         MOV     ?V1,R7
   \   000011   E4           CLR     A
   \   000012   F5..         MOV     ?V2,A
   \   000014   F5..         MOV     ?V3,A
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   90....       MOV     DPTR,#ZDAppTaskID
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000027   7404         MOV     A,#0x4
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002C   E9           MOV     A,R1
   \   00002D   800D         SJMP    ??ZDApp_NetworkInit_1
   3102            }
   3103            else
   3104            {
   3105              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002F                ; Setup parameters for call to function osal_set_event
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   7B00         MOV     R3,#0x0
   \   000033   90....       MOV     DPTR,#ZDAppTaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00003B   E9           MOV     A,R1
   3106            }
   3107          }
   \                     ??ZDApp_NetworkInit_1:
   \   00003C   7F04         MOV     R7,#0x4
   \   00003E   02....       LJMP    ?BANKED_LEAVE_XDATA
   3108          
   3109          /*********************************************************************
   3110           * @fn      ZDApp_NwkStateUpdateCB()
   3111           *
   3112           * @brief   This function notifies that this device's network
   3113           *          state info has been changed.
   3114           *
   3115           * @param   none
   3116           *
   3117           * @return  none
   3118           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3119          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3120          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3121            // Notify to save info into NV
   3122            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   3123            {
   3124              // Trigger to save info into NV
   3125              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3126            }
   3127          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
   3128          
   3129          /*********************************************************************
   3130           * @fn      ZDApp_NodeProfileSync()
   3131           *
   3132           * @brief   Sync node with stack profile.
   3133           *
   3134           * @param   stackProfile - stack profile of the network to join
   3135           *
   3136           * @return  none
   3137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3138          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3139          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3140            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5023         JNC     ??ZDApp_NodeProfileSync_0
   3141            {
   3142              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   601C         JZ      ??ZDApp_NodeProfileSync_0
   3143              {
   3144                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000020   E0           MOVX    A,@DPTR
   \   000021   4402         ORL     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
   3145                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000024   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000027   740C         MOV     A,#0xc
   \   000029   F0           MOVX    @DPTR,A
   3146                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   00002A                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   00002A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3147              }
   3148            }
   3149          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000032   7F01         MOV     R7,#0x1
   \   000034   02....       LJMP    ?BANKED_LEAVE_XDATA
   3150          
   3151          /*********************************************************************
   3152           * @fn      ZDApp_StartJoiningCycle()
   3153           *
   3154           * @brief   Starts the joining cycle of a device.  This will only
   3155           *          continue an already started (or stopped) joining cycle.
   3156           *
   3157           * @param   none
   3158           *
   3159           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3160           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3161          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3162          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3163            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6008         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6402         XRL     A,#0x2
   \   000012   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3164            {
   3165              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000014   90....       MOV     DPTR,#continueJoining
   \   000017   7401         MOV     A,#0x1
   \   000019   F0           MOVX    @DPTR,A
   3166              ZDApp_NetworkInit( 0 );
   \   00001A                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00001A   7A00         MOV     R2,#0x0
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3167          
   3168              return ( TRUE );
   \   000021   7901         MOV     R1,#0x1
   \   000023   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3169            }
   3170            else
   3171              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000025   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000027   D083         POP     DPH
   \   000029   D082         POP     DPL
   \   00002B   02....       LJMP    ?BRET
   3172          }
   3173          
   3174          /*********************************************************************
   3175           * @fn      ZDApp_StopJoiningCycle()
   3176           *
   3177           * @brief   Stops the joining or rejoining process of a device.
   3178           *
   3179           * @param   none
   3180           *
   3181           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3182           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3183          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3184          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3185            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6008         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6402         XRL     A,#0x2
   \   000012   700A         JNZ     ??ZDApp_StopJoiningCycle_1
   3186            {
   3187              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000014   90....       MOV     DPTR,#continueJoining
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
   3188              return ( TRUE );
   \   00001A   7901         MOV     R1,#0x1
   \   00001C   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3189            }
   3190            else
   3191              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001E   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000020   D083         POP     DPH
   \   000022   D082         POP     DPL
   \   000024   02....       LJMP    ?BRET
   3192          }
   3193          
   3194          /*********************************************************************
   3195           * @fn      ZDApp_AnnounceNewAddress()
   3196           *
   3197           * @brief   Send Device Announce and hold all transmissions for
   3198           *          new address timeout.
   3199           *
   3200           * @param   none
   3201           *
   3202           * @return  none
   3203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3204          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3205          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3206          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3207            // Turn off data request hold
   3208            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3209          #endif
   3210          
   3211            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3212                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV     ?V0,R2
   \   000011   8B..         MOV     ?V1,R3
   \   000013   AE..         MOV     R6,?V0
   \   000015   AF..         MOV     R7,?V1
   \   000017                ; Setup parameters for call to function NLME_GetShortAddr
   \   000017   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001A   8A..         MOV     ?V0,R2
   \   00001C   8B..         MOV     ?V1,R3
   \   00001E   AA..         MOV     R2,?V0
   \   000020   AB..         MOV     R3,?V1
   \   000022                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000022   75..00       MOV     ?V0,#0x0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   EE           MOV     A,R6
   \   000030   FC           MOV     R4,A
   \   000031   EF           MOV     A,R7
   \   000032   FD           MOV     R5,A
   \   000033   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000036   7401         MOV     A,#0x1
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   E9           MOV     A,R1
   3213          
   3214          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3215            // Setup the timeout
   3216            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   00003C                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3217          #endif
   3218          }
   \   000043   7F02         MOV     R7,#0x2
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA
   3219          
   3220          /*********************************************************************
   3221           * @fn          ZDApp_NVUpdate
   3222           *
   3223           * @brief       Set the NV Update Timer.
   3224           *
   3225           * @param       none
   3226           *
   3227           * @return      none
   3228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3229          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3230          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3231          #if defined ( NV_RESTORE )
   3232            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3233          #endif
   3234          }
   \   000000   02....       LJMP    ?BRET
   3235          
   3236          /*********************************************************************
   3237           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3238           *
   3239           * @brief   Returns a PAN ID for the network layer to use during
   3240           *          a coordinator start and there is another network with
   3241           *          the intended PANID.
   3242           *
   3243           * @param   panid - the intended PAN ID
   3244           *
   3245           * @return  PANID to try
   3246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3247          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3248          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3249            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   FA           MOV     R2,A
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3250          }
   3251          
   3252          /*********************************************************************
   3253           * @fn          ZDO_SrcRtgIndCB
   3254           *
   3255           * @brief       This function notifies the ZDO available src route record received.
   3256           *
   3257           * @param       srcAddr - source address of the source route
   3258           * @param       relayCnt - number of devices in the relay list
   3259           * @param       relayList - relay list of the source route
   3260           *
   3261           * @return      none
   3262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3263          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3264          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   89..         MOV     ?V2,R1
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   3265            zdoSrcRtg_t srcRtg;
   3266          
   3267            srcRtg.srcAddr = srcAddr;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   E5..         MOV     A,?V0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E5..         MOV     A,?V1
   \   000020   F0           MOVX    @DPTR,A
   3268            srcRtg.relayCnt = relayCnt;
   \   000021   E5..         MOV     A,?V2
   \   000023   C0E0         PUSH    A
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
   3269            srcRtg.pRelayList = pRelayList;
   \   00002D   7403         MOV     A,#0x3
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   EE           MOV     A,R6
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   EF           MOV     A,R7
   \   000036   F0           MOVX    @DPTR,A
   3270          
   3271            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   000037   90....       MOV     DPTR,#zdoCBFunc
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   6012         JZ      ??ZDO_SrcRtgIndCB_0
   3272            {
   3273              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000043                ; Setup parameters for indirect call
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   90....       MOV     DPTR,#zdoCBFunc
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F583         MOV     DPH,A
   \   000050   8882         MOV     DPL,R0
   \   000052   12....       LCALL   ?CALL_IND
   3274            }
   3275          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV     R7,#0x3
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   3276          
   3277          /*********************************************************************
   3278           * @fn          ZDApp_InitZdoCBFunc
   3279           *
   3280           * @brief       Call this function to initialize zdoCBFunc[]
   3281           *
   3282           * @param       none
   3283           *
   3284           * @return      none
   3285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3286          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3287          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3288            uint8 i;
   3289          
   3290            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   C3           CLR     C
   \   000008   9409         SUBB    A,#0x9
   \   00000A   502D         JNC     ??ZDApp_InitZdoCBFunc_1
   3291            {
   3292              zdoCBFunc[i] = NULL;
   \   00000C   EA           MOV     A,R2
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   ABF0         MOV     R3,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2B           ADD     A,R3
   \   00001D   FB           MOV     R3,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2B           ADD     A,R3
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#zdoCBFunc & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   7400         MOV     A,#0x0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   3293            }
   \   000036   0A           INC     R2
   \   000037   80CD         SJMP    ??ZDApp_InitZdoCBFunc_0
   3294          }
   \                     ??ZDApp_InitZdoCBFunc_1:
   \   000039   D083         POP     DPH
   \   00003B   D082         POP     DPL
   \   00003D   02....       LJMP    ?BRET
   3295          
   3296          /*********************************************************************
   3297           * @fn          ZDO_RegisterForZdoCB
   3298           *
   3299           * @brief       Call this function to register the higher layer (for
   3300           *              example, the Application layer or MT layer) with ZDO
   3301           *              callbacks to get notified of some ZDO indication like
   3302           *              existence of a concentrator or receipt of a source
   3303           *              route record.
   3304           *
   3305           * @param       indID - ZDO Indication ID
   3306           * @param       pFn   - Callback function pointer
   3307           *
   3308           * @return      ZSuccess - successful, ZInvalidParameter if not
   3309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3310          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3311          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FD           MOV     R5,A
   3312            // Check the range of the indication ID
   3313            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   ED           MOV     A,R5
   \   000007   C3           CLR     C
   \   000008   9409         SUBB    A,#0x9
   \   00000A   502C         JNC     ??ZDO_RegisterForZdoCB_0
   3314            {
   3315              zdoCBFunc[indID] = pFn;
   \   00000C   ED           MOV     A,R5
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   ACF0         MOV     R4,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2C           ADD     A,R4
   \   00001D   FC           MOV     R4,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2C           ADD     A,R4
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#zdoCBFunc & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   EA           MOV     A,R2
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   EB           MOV     A,R3
   \   000033   F0           MOVX    @DPTR,A
   3316              return ZSuccess;
   \   000034   7900         MOV     R1,#0x0
   \   000036   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3317            }
   3318          
   3319            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000038   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   00003A   D083         POP     DPH
   \   00003C   D082         POP     DPL
   \   00003E   02....       LJMP    ?BRET
   3320          }
   3321          
   3322          /*********************************************************************
   3323           * @fn          ZDO_DeregisterForZdoCB
   3324           *
   3325           * @brief       Call this function to de-register the higher layer (for
   3326           *              example, the Application layer or MT layer) with ZDO
   3327           *              callbacks to get notified of some ZDO indication like
   3328           *              existence of a concentrator or receipt of a source
   3329           *              route record.
   3330           *
   3331           * @param       indID - ZDO Indication ID
   3332           *
   3333           * @return      ZSuccess - successful, ZInvalidParameter if not
   3334           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3335          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3336          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FB           MOV     R3,A
   3337            // Check the range of the indication ID
   3338            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   EB           MOV     A,R3
   \   000007   C3           CLR     C
   \   000008   9409         SUBB    A,#0x9
   \   00000A   502E         JNC     ??ZDO_DeregisterForZdoCB_0
   3339            {
   3340              zdoCBFunc[indID] = NULL;
   \   00000C   EB           MOV     A,R3
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   AAF0         MOV     R2,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2A           ADD     A,R2
   \   00001D   FA           MOV     R2,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2A           ADD     A,R2
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#zdoCBFunc & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   7400         MOV     A,#0x0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   3341              return ZSuccess;
   \   000036   7900         MOV     R1,#0x0
   \   000038   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3342            }
   3343          
   3344            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   00003A   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   00003C   D083         POP     DPH
   \   00003E   D082         POP     DPL
   \   000040   02....       LJMP    ?BRET
   3345          }
   3346          
   3347          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3348          #if defined ( REFLECTOR )
   3349          /*********************************************************************
   3350           * @fn          ZDApp_SetPendingBindDefault
   3351           *
   3352           * @brief       This function initializes a specific entry of pending
   3353           *              Bind Request.
   3354           *
   3355           * @param       pendBindReq - pointer to the entry in the table
   3356           *
   3357           * @return      none
   3358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3359          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3360          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3361            // Set it to an initial value
   3362            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   EF           MOV     A,R7
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3363          
   3364            // We are checking for age 0 for aged-out records
   3365            pendBindReq->age = 0;
   \   000016   EE           MOV     A,R6
   \   000017   2420         ADD     A,#0x20
   \   000019   F582         MOV     DPL,A
   \   00001B   E4           CLR     A
   \   00001C   3F           ADDC    A,R7
   \   00001D   F583         MOV     DPH,A
   \   00001F   7400         MOV     A,#0x0
   \   000021   F0           MOVX    @DPTR,A
   3366          }
   \   000022   7F01         MOV     R7,#0x1
   \   000024   02....       LJMP    ?BANKED_LEAVE_XDATA
   3367          
   3368          /*********************************************************************
   3369           * @fn          ZDApp_InitPendingBind
   3370           *
   3371           * @brief       This function initializes the buffer that holds
   3372           *              pending Bind Request messages if no valid NWK address
   3373           *              exists in Address Manager and a Network Address Req
   3374           *              has been sent out.
   3375           *
   3376           * @param       none
   3377           *
   3378           * @return      none
   3379           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3380          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3381          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3382            if ( ZDAppPendingBindReq == NULL )
   \   000005   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   704C         JNZ     ??ZDApp_InitPendingBind_0
   3383            {
   3384              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011   7A63         MOV     R2,#0x63
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000018   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   E8           MOV     A,R0
   \   000029   49           ORL     A,R1
   \   00002A   6031         JZ      ??ZDApp_InitPendingBind_0
   3385              {
   3386                uint8 i;
   3387          
   3388                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00002C   7E00         MOV     R6,#0x0
   \                     ??ZDApp_InitPendingBind_1:
   \   00002E   EE           MOV     A,R6
   \   00002F   C3           CLR     C
   \   000030   9403         SUBB    A,#0x3
   \   000032   5029         JNC     ??ZDApp_InitPendingBind_0
   3389                {
   3390                  // Set to default values
   3391                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   000034                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   000034   EE           MOV     A,R6
   \   000035   F8           MOV     R0,A
   \   000036   7900         MOV     R1,#0x0
   \   000038   E8           MOV     A,R0
   \   000039   75F021       MOV     B,#0x21
   \   00003C   A4           MUL     AB
   \   00003D   C8           XCH     A,R0
   \   00003E   AAF0         MOV     R2,B
   \   000040   75F000       MOV     B,#0x0
   \   000043   A4           MUL     AB
   \   000044   2A           ADD     A,R2
   \   000045   FA           MOV     R2,A
   \   000046   75F021       MOV     B,#0x21
   \   000049   E9           MOV     A,R1
   \   00004A   A4           MUL     AB
   \   00004B   2A           ADD     A,R2
   \   00004C   F9           MOV     R1,A
   \   00004D   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000050   E0           MOVX    A,@DPTR
   \   000051   28           ADD     A,R0
   \   000052   FA           MOV     R2,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   39           ADDC    A,R1
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3392                }
   \   00005A   0E           INC     R6
   \   00005B   80D1         SJMP    ??ZDApp_InitPendingBind_1
   3393              }
   3394            }
   3395          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00005D   7F01         MOV     R7,#0x1
   \   00005F   02....       LJMP    ?BANKED_LEAVE_XDATA
   3396          
   3397          /*********************************************************************
   3398           * @fn          ZDApp_GetEmptyPendingBindReq
   3399           *
   3400           * @brief       This function looks for an empty entry.
   3401           *
   3402           * @param       none
   3403           *
   3404           * @return      Pointer to entry
   3405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3406          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3407          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3408            uint8 i;
   3409          
   3410            if ( ZDAppPendingBindReq != NULL )
   \   000004   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   605F         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3411            {
   3412              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000010   7C00         MOV     R4,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   000012   EC           MOV     A,R4
   \   000013   C3           CLR     C
   \   000014   9403         SUBB    A,#0x3
   \   000016   5057         JNC     ??ZDApp_GetEmptyPendingBindReq_0
   3413              {
   3414                if ( ZDAppPendingBindReq[i].age == 0 )
   \   000018   EC           MOV     A,R4
   \   000019   F8           MOV     R0,A
   \   00001A   7900         MOV     R1,#0x0
   \   00001C   E8           MOV     A,R0
   \   00001D   75F021       MOV     B,#0x21
   \   000020   A4           MUL     AB
   \   000021   C8           XCH     A,R0
   \   000022   AAF0         MOV     R2,B
   \   000024   75F000       MOV     B,#0x0
   \   000027   A4           MUL     AB
   \   000028   2A           ADD     A,R2
   \   000029   FA           MOV     R2,A
   \   00002A   75F021       MOV     B,#0x21
   \   00002D   E9           MOV     A,R1
   \   00002E   A4           MUL     AB
   \   00002F   2A           ADD     A,R2
   \   000030   F9           MOV     R1,A
   \   000031   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000034   E0           MOVX    A,@DPTR
   \   000035   28           ADD     A,R0
   \   000036   F8           MOV     R0,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   39           ADDC    A,R1
   \   00003A   F9           MOV     R1,A
   \   00003B   E8           MOV     A,R0
   \   00003C   2420         ADD     A,#0x20
   \   00003E   F582         MOV     DPL,A
   \   000040   E4           CLR     A
   \   000041   39           ADDC    A,R1
   \   000042   F583         MOV     DPH,A
   \   000044   E0           MOVX    A,@DPTR
   \   000045   7025         JNZ     ??ZDApp_GetEmptyPendingBindReq_2
   3415                {
   3416                  return ( &ZDAppPendingBindReq[i] );
   \   000047   EC           MOV     A,R4
   \   000048   F8           MOV     R0,A
   \   000049   7900         MOV     R1,#0x0
   \   00004B   E8           MOV     A,R0
   \   00004C   75F021       MOV     B,#0x21
   \   00004F   A4           MUL     AB
   \   000050   C8           XCH     A,R0
   \   000051   AAF0         MOV     R2,B
   \   000053   75F000       MOV     B,#0x0
   \   000056   A4           MUL     AB
   \   000057   2A           ADD     A,R2
   \   000058   FA           MOV     R2,A
   \   000059   75F021       MOV     B,#0x21
   \   00005C   E9           MOV     A,R1
   \   00005D   A4           MUL     AB
   \   00005E   2A           ADD     A,R2
   \   00005F   F9           MOV     R1,A
   \   000060   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000063   E0           MOVX    A,@DPTR
   \   000064   28           ADD     A,R0
   \   000065   FA           MOV     R2,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   39           ADDC    A,R1
   \   000069   FB           MOV     R3,A
   \   00006A   8007         SJMP    ??ZDApp_GetEmptyPendingBindReq_3
   3417                }
   3418              }
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   00006C   0C           INC     R4
   \   00006D   80A3         SJMP    ??ZDApp_GetEmptyPendingBindReq_1
   3419            }
   3420          
   3421            // No empty entry was found
   3422            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   00006F   7A00         MOV     R2,#0x0
   \   000071   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_3:
   \   000073   D083         POP     DPH
   \   000075   D082         POP     DPL
   \   000077   02....       LJMP    ?BRET
   3423          }
   3424          
   3425          /*********************************************************************
   3426           * @fn          ZDApp_ProcessPendingBindReq
   3427           *
   3428           * @brief       Process pending entry based on EXT address.
   3429           *
   3430           * @param       extAddr - of device to look up
   3431           *
   3432           * @return      none
   3433           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3434          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3435          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   3436            uint8 i;
   3437          
   3438            // Loop through all the pending entries for that Ext Address
   3439            // to create Bind Entries and send Bind Rsp
   3440            if ( ZDAppPendingBindReq != NULL )
   \   00000E   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   E8           MOV     A,R0
   \   000017   49           ORL     A,R1
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3441            {
   3442              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001D   7E00         MOV     R6,#0x0
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   00001F   EE           MOV     A,R6
   \   000020   C3           CLR     C
   \   000021   9403         SUBB    A,#0x3
   \   000023   4003         JC      $+5
   \   000025   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3443              {
   3444                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3445                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \   000028                ; Setup parameters for call to function osal_memcmp
   \   000028   85....       MOV     ?V4,?V0
   \   00002B   85....       MOV     ?V5,?V1
   \   00002E   75..00       MOV     ?V6,#0x0
   \   000031   78..         MOV     R0,#?V4
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000036   7C08         MOV     R4,#0x8
   \   000038   7D00         MOV     R5,#0x0
   \   00003A   EE           MOV     A,R6
   \   00003B   F8           MOV     R0,A
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   E8           MOV     A,R0
   \   00003F   75F021       MOV     B,#0x21
   \   000042   A4           MUL     AB
   \   000043   C8           XCH     A,R0
   \   000044   AAF0         MOV     R2,B
   \   000046   75F000       MOV     B,#0x0
   \   000049   A4           MUL     AB
   \   00004A   2A           ADD     A,R2
   \   00004B   FA           MOV     R2,A
   \   00004C   75F021       MOV     B,#0x21
   \   00004F   E9           MOV     A,R1
   \   000050   A4           MUL     AB
   \   000051   2A           ADD     A,R2
   \   000052   F9           MOV     R1,A
   \   000053   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000056   E0           MOVX    A,@DPTR
   \   000057   28           ADD     A,R0
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   39           ADDC    A,R1
   \   00005C   F9           MOV     R1,A
   \   00005D   E8           MOV     A,R0
   \   00005E   240B         ADD     A,#0xb
   \   000060   F5..         MOV     ?V2,A
   \   000062   E4           CLR     A
   \   000063   39           ADDC    A,R1
   \   000064   F5..         MOV     ?V3,A
   \   000066   A9..         MOV     R1,?V2
   \   000068   AA..         MOV     R2,?V3
   \   00006A   7B00         MOV     R3,#0x0
   \   00006C   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   6401         XRL     A,#0x1
   \   000077   6003         JZ      $+5
   \   000079   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3446                {
   3447                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   748C         MOV     A,#-0x74
   \   000084   F0           MOVX    @DPTR,A
   3448          
   3449                  // Add Bind entry
   3450                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3451                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3452                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3453                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   000085                ; Setup parameters for call to function APSME_BindRequest
   \   000085   EE           MOV     A,R6
   \   000086   F8           MOV     R0,A
   \   000087   7900         MOV     R1,#0x0
   \   000089   E8           MOV     A,R0
   \   00008A   75F021       MOV     B,#0x21
   \   00008D   A4           MUL     AB
   \   00008E   C8           XCH     A,R0
   \   00008F   AAF0         MOV     R2,B
   \   000091   75F000       MOV     B,#0x0
   \   000094   A4           MUL     AB
   \   000095   2A           ADD     A,R2
   \   000096   FA           MOV     R2,A
   \   000097   75F021       MOV     B,#0x21
   \   00009A   E9           MOV     A,R1
   \   00009B   A4           MUL     AB
   \   00009C   2A           ADD     A,R2
   \   00009D   F9           MOV     R1,A
   \   00009E   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   28           ADD     A,R0
   \   0000A3   F8           MOV     R0,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   39           ADDC    A,R1
   \   0000A7   F9           MOV     R1,A
   \   0000A8   E8           MOV     A,R0
   \   0000A9   2414         ADD     A,#0x14
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   39           ADDC    A,R1
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F5..         MOV     ?V2,A
   \   0000B4   78..         MOV     R0,#?V2
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B9   EE           MOV     A,R6
   \   0000BA   F8           MOV     R0,A
   \   0000BB   7900         MOV     R1,#0x0
   \   0000BD   E8           MOV     A,R0
   \   0000BE   75F021       MOV     B,#0x21
   \   0000C1   A4           MUL     AB
   \   0000C2   C8           XCH     A,R0
   \   0000C3   AAF0         MOV     R2,B
   \   0000C5   75F000       MOV     B,#0x0
   \   0000C8   A4           MUL     AB
   \   0000C9   2A           ADD     A,R2
   \   0000CA   FA           MOV     R2,A
   \   0000CB   75F021       MOV     B,#0x21
   \   0000CE   E9           MOV     A,R1
   \   0000CF   A4           MUL     AB
   \   0000D0   2A           ADD     A,R2
   \   0000D1   F9           MOV     R1,A
   \   0000D2   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   28           ADD     A,R0
   \   0000D7   F8           MOV     R0,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   39           ADDC    A,R1
   \   0000DB   F9           MOV     R1,A
   \   0000DC   E8           MOV     A,R0
   \   0000DD   240B         ADD     A,#0xb
   \   0000DF   FC           MOV     R4,A
   \   0000E0   E4           CLR     A
   \   0000E1   39           ADDC    A,R1
   \   0000E2   FD           MOV     R5,A
   \   0000E3   EE           MOV     A,R6
   \   0000E4   F8           MOV     R0,A
   \   0000E5   7900         MOV     R1,#0x0
   \   0000E7   E8           MOV     A,R0
   \   0000E8   75F021       MOV     B,#0x21
   \   0000EB   A4           MUL     AB
   \   0000EC   C8           XCH     A,R0
   \   0000ED   AAF0         MOV     R2,B
   \   0000EF   75F000       MOV     B,#0x0
   \   0000F2   A4           MUL     AB
   \   0000F3   2A           ADD     A,R2
   \   0000F4   FA           MOV     R2,A
   \   0000F5   75F021       MOV     B,#0x21
   \   0000F8   E9           MOV     A,R1
   \   0000F9   A4           MUL     AB
   \   0000FA   2A           ADD     A,R2
   \   0000FB   F9           MOV     R1,A
   \   0000FC   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   28           ADD     A,R0
   \   000101   FA           MOV     R2,A
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   39           ADDC    A,R1
   \   000105   8A82         MOV     DPL,R2
   \   000107   F583         MOV     DPH,A
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   FA           MOV     R2,A
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   FB           MOV     R3,A
   \   000117   EE           MOV     A,R6
   \   000118   F8           MOV     R0,A
   \   000119   7900         MOV     R1,#0x0
   \   00011B   E8           MOV     A,R0
   \   00011C   75F021       MOV     B,#0x21
   \   00011F   A4           MUL     AB
   \   000120   C8           XCH     A,R0
   \   000121   AFF0         MOV     R7,B
   \   000123   75F000       MOV     B,#0x0
   \   000126   A4           MUL     AB
   \   000127   2F           ADD     A,R7
   \   000128   FF           MOV     R7,A
   \   000129   75F021       MOV     B,#0x21
   \   00012C   E9           MOV     A,R1
   \   00012D   A4           MUL     AB
   \   00012E   2F           ADD     A,R7
   \   00012F   F9           MOV     R1,A
   \   000130   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000133   E0           MOVX    A,@DPTR
   \   000134   28           ADD     A,R0
   \   000135   FF           MOV     R7,A
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   39           ADDC    A,R1
   \   000139   8F82         MOV     DPL,R7
   \   00013B   F583         MOV     DPH,A
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F9           MOV     R1,A
   \   000147   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   00014A   7401         MOV     A,#0x1
   \   00014C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014F   E9           MOV     A,R1
   \   000150   700C         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3454                  {
   3455                    // valid entry
   3456                    bindStat = ZDP_SUCCESS;
   \   000152   85..82       MOV     DPL,?XSP + 0
   \   000155   85..83       MOV     DPH,?XSP + 1
   \   000158   7400         MOV     A,#0x0
   \   00015A   F0           MOVX    @DPTR,A
   3457          
   3458                    // Notify to save info into NV
   3459                    ZDApp_NVUpdate();
   \   00015B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00015B   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3460                  }
   3461          
   3462                  // Send back a response message
   3463                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3464                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   00015E                ; Setup parameters for call to function ZDP_SendData
   \   00015E   EE           MOV     A,R6
   \   00015F   F8           MOV     R0,A
   \   000160   7900         MOV     R1,#0x0
   \   000162   E8           MOV     A,R0
   \   000163   75F021       MOV     B,#0x21
   \   000166   A4           MUL     AB
   \   000167   C8           XCH     A,R0
   \   000168   AAF0         MOV     R2,B
   \   00016A   75F000       MOV     B,#0x0
   \   00016D   A4           MUL     AB
   \   00016E   2A           ADD     A,R2
   \   00016F   FA           MOV     R2,A
   \   000170   75F021       MOV     B,#0x21
   \   000173   E9           MOV     A,R1
   \   000174   A4           MUL     AB
   \   000175   2A           ADD     A,R2
   \   000176   F9           MOV     R1,A
   \   000177   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   28           ADD     A,R0
   \   00017C   F8           MOV     R0,A
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   39           ADDC    A,R1
   \   000180   F9           MOV     R1,A
   \   000181   E8           MOV     A,R0
   \   000182   241E         ADD     A,#0x1e
   \   000184   F582         MOV     DPL,A
   \   000186   E4           CLR     A
   \   000187   39           ADDC    A,R1
   \   000188   F583         MOV     DPH,A
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F5..         MOV     ?V2,A
   \   00018D   78..         MOV     R0,#?V2
   \   00018F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000192   7401         MOV     A,#0x1
   \   000194   12....       LCALL   ?XSTACK_DISP100_8
   \   000197   88..         MOV     ?V2,R0
   \   000199   89..         MOV     ?V3,R1
   \   00019B   78..         MOV     R0,#?V2
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A0   75..21       MOV     ?V2,#0x21
   \   0001A3   75..80       MOV     ?V3,#-0x80
   \   0001A6   78..         MOV     R0,#?V2
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AB   7901         MOV     R1,#0x1
   \   0001AD   EE           MOV     A,R6
   \   0001AE   FA           MOV     R2,A
   \   0001AF   7B00         MOV     R3,#0x0
   \   0001B1   EA           MOV     A,R2
   \   0001B2   75F021       MOV     B,#0x21
   \   0001B5   A4           MUL     AB
   \   0001B6   CA           XCH     A,R2
   \   0001B7   A8F0         MOV     R0,B
   \   0001B9   75F000       MOV     B,#0x0
   \   0001BC   A4           MUL     AB
   \   0001BD   28           ADD     A,R0
   \   0001BE   F8           MOV     R0,A
   \   0001BF   75F021       MOV     B,#0x21
   \   0001C2   EB           MOV     A,R3
   \   0001C3   A4           MUL     AB
   \   0001C4   28           ADD     A,R0
   \   0001C5   FB           MOV     R3,A
   \   0001C6   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   2A           ADD     A,R2
   \   0001CB   FA           MOV     R2,A
   \   0001CC   A3           INC     DPTR
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   3B           ADDC    A,R3
   \   0001CF   FB           MOV     R3,A
   \   0001D0   EA           MOV     A,R2
   \   0001D1   2415         ADD     A,#0x15
   \   0001D3   FC           MOV     R4,A
   \   0001D4   E4           CLR     A
   \   0001D5   3B           ADDC    A,R3
   \   0001D6   FD           MOV     R5,A
   \   0001D7   EE           MOV     A,R6
   \   0001D8   FA           MOV     R2,A
   \   0001D9   7B00         MOV     R3,#0x0
   \   0001DB   EA           MOV     A,R2
   \   0001DC   75F021       MOV     B,#0x21
   \   0001DF   A4           MUL     AB
   \   0001E0   CA           XCH     A,R2
   \   0001E1   A8F0         MOV     R0,B
   \   0001E3   75F000       MOV     B,#0x0
   \   0001E6   A4           MUL     AB
   \   0001E7   28           ADD     A,R0
   \   0001E8   F8           MOV     R0,A
   \   0001E9   75F021       MOV     B,#0x21
   \   0001EC   EB           MOV     A,R3
   \   0001ED   A4           MUL     AB
   \   0001EE   28           ADD     A,R0
   \   0001EF   FB           MOV     R3,A
   \   0001F0   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   2A           ADD     A,R2
   \   0001F5   FA           MOV     R2,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   3B           ADDC    A,R3
   \   0001F9   FB           MOV     R3,A
   \   0001FA   EA           MOV     A,R2
   \   0001FB   241F         ADD     A,#0x1f
   \   0001FD   FA           MOV     R2,A
   \   0001FE   5001         JNC     ??ZDApp_ProcessPendingBindReq_4
   \   000200   0B           INC     R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   000201   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000204   7405         MOV     A,#0x5
   \   000206   12....       LCALL   ?DEALLOC_XSTACK8
   \   000209   E9           MOV     A,R1
   3465          
   3466                  // Set the pending request entry to default values
   3467                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   00020A                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00020A   EE           MOV     A,R6
   \   00020B   F8           MOV     R0,A
   \   00020C   7900         MOV     R1,#0x0
   \   00020E   E8           MOV     A,R0
   \   00020F   75F021       MOV     B,#0x21
   \   000212   A4           MUL     AB
   \   000213   C8           XCH     A,R0
   \   000214   AAF0         MOV     R2,B
   \   000216   75F000       MOV     B,#0x0
   \   000219   A4           MUL     AB
   \   00021A   2A           ADD     A,R2
   \   00021B   FA           MOV     R2,A
   \   00021C   75F021       MOV     B,#0x21
   \   00021F   E9           MOV     A,R1
   \   000220   A4           MUL     AB
   \   000221   2A           ADD     A,R2
   \   000222   F9           MOV     R1,A
   \   000223   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000226   E0           MOVX    A,@DPTR
   \   000227   28           ADD     A,R0
   \   000228   FA           MOV     R2,A
   \   000229   A3           INC     DPTR
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   39           ADDC    A,R1
   \   00022C   FB           MOV     R3,A
   \   00022D   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3468                }
   3469              }
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   000230   0E           INC     R6
   \   000231   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3470            }
   3471          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   000234   7401         MOV     A,#0x1
   \   000236   12....       LCALL   ?DEALLOC_XSTACK8
   \   000239   7F07         MOV     R7,#0x7
   \   00023B   02....       LJMP    ?BANKED_LEAVE_XDATA
   3472          
   3473          /*********************************************************************
   3474           * @fn          ZDApp_AgeOutPendingBindEntry
   3475           *
   3476           * @brief       Age out pending Bind Req entries.
   3477           *
   3478           * @param       none
   3479           *
   3480           * @return      none
   3481           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3482          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3483          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3484            uint8 i;
   3485            bool entryFound = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   3486          
   3487            if ( ZDAppPendingBindReq != NULL )
   \   00000C   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   E8           MOV     A,R0
   \   000015   49           ORL     A,R1
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3488            {
   3489              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001B   7F00         MOV     R7,#0x0
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   00001D   EF           MOV     A,R7
   \   00001E   C3           CLR     C
   \   00001F   9403         SUBB    A,#0x3
   \   000021   4003         JC      $+5
   \   000023   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3490              {
   3491                if ( ZDAppPendingBindReq[i].age > 1 )
   \   000026   EF           MOV     A,R7
   \   000027   F8           MOV     R0,A
   \   000028   7900         MOV     R1,#0x0
   \   00002A   E8           MOV     A,R0
   \   00002B   75F021       MOV     B,#0x21
   \   00002E   A4           MUL     AB
   \   00002F   C8           XCH     A,R0
   \   000030   AAF0         MOV     R2,B
   \   000032   75F000       MOV     B,#0x0
   \   000035   A4           MUL     AB
   \   000036   2A           ADD     A,R2
   \   000037   FA           MOV     R2,A
   \   000038   75F021       MOV     B,#0x21
   \   00003B   E9           MOV     A,R1
   \   00003C   A4           MUL     AB
   \   00003D   2A           ADD     A,R2
   \   00003E   F9           MOV     R1,A
   \   00003F   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000042   E0           MOVX    A,@DPTR
   \   000043   28           ADD     A,R0
   \   000044   F8           MOV     R0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   39           ADDC    A,R1
   \   000048   F9           MOV     R1,A
   \   000049   E8           MOV     A,R0
   \   00004A   2420         ADD     A,#0x20
   \   00004C   F582         MOV     DPL,A
   \   00004E   E4           CLR     A
   \   00004F   39           ADDC    A,R1
   \   000050   F583         MOV     DPH,A
   \   000052   E0           MOVX    A,@DPTR
   \   000053   C3           CLR     C
   \   000054   9402         SUBB    A,#0x2
   \   000056   4035         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3492                {
   3493                  ZDAppPendingBindReq[i].age--;
   \   000058   EF           MOV     A,R7
   \   000059   F8           MOV     R0,A
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   E8           MOV     A,R0
   \   00005D   75F021       MOV     B,#0x21
   \   000060   A4           MUL     AB
   \   000061   C8           XCH     A,R0
   \   000062   AAF0         MOV     R2,B
   \   000064   75F000       MOV     B,#0x0
   \   000067   A4           MUL     AB
   \   000068   2A           ADD     A,R2
   \   000069   FA           MOV     R2,A
   \   00006A   75F021       MOV     B,#0x21
   \   00006D   E9           MOV     A,R1
   \   00006E   A4           MUL     AB
   \   00006F   2A           ADD     A,R2
   \   000070   F9           MOV     R1,A
   \   000071   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000074   E0           MOVX    A,@DPTR
   \   000075   28           ADD     A,R0
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   39           ADDC    A,R1
   \   00007A   F9           MOV     R1,A
   \   00007B   E8           MOV     A,R0
   \   00007C   2420         ADD     A,#0x20
   \   00007E   F582         MOV     DPL,A
   \   000080   E4           CLR     A
   \   000081   39           ADDC    A,R1
   \   000082   F583         MOV     DPH,A
   \   000084   E0           MOVX    A,@DPTR
   \   000085   24FF         ADD     A,#-0x1
   \   000087   F0           MOVX    @DPTR,A
   3494          
   3495                  entryFound = TRUE;
   \   000088   7E01         MOV     R6,#0x1
   \   00008A   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3496                }
   3497                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   00008D   EF           MOV     A,R7
   \   00008E   F8           MOV     R0,A
   \   00008F   7900         MOV     R1,#0x0
   \   000091   E8           MOV     A,R0
   \   000092   75F021       MOV     B,#0x21
   \   000095   A4           MUL     AB
   \   000096   C8           XCH     A,R0
   \   000097   AAF0         MOV     R2,B
   \   000099   75F000       MOV     B,#0x0
   \   00009C   A4           MUL     AB
   \   00009D   2A           ADD     A,R2
   \   00009E   FA           MOV     R2,A
   \   00009F   75F021       MOV     B,#0x21
   \   0000A2   E9           MOV     A,R1
   \   0000A3   A4           MUL     AB
   \   0000A4   2A           ADD     A,R2
   \   0000A5   F9           MOV     R1,A
   \   0000A6   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   28           ADD     A,R0
   \   0000AB   F8           MOV     R0,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   39           ADDC    A,R1
   \   0000AF   F9           MOV     R1,A
   \   0000B0   E8           MOV     A,R0
   \   0000B1   2420         ADD     A,#0x20
   \   0000B3   F582         MOV     DPL,A
   \   0000B5   E4           CLR     A
   \   0000B6   39           ADDC    A,R1
   \   0000B7   F583         MOV     DPH,A
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   6401         XRL     A,#0x1
   \   0000BC   6003         JZ      $+5
   \   0000BE   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3498                {
   3499                  // The record has aged out and has valid data
   3500                  AddrMgrEntry_t entry;
   3501                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   748C         MOV     A,#-0x74
   \   0000C9   F0           MOVX    @DPTR,A
   3502          
   3503                  entry.user = ADDRMGR_USER_BINDING;
   \   0000CA   7401         MOV     A,#0x1
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   7404         MOV     A,#0x4
   \   0000D1   F0           MOVX    @DPTR,A
   3504          
   3505                  // Remove the entry in address manager so we do not keep entries
   3506                  // with invalid addresses
   3507                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   0000D2                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0000D2   EF           MOV     A,R7
   \   0000D3   F8           MOV     R0,A
   \   0000D4   7900         MOV     R1,#0x0
   \   0000D6   E8           MOV     A,R0
   \   0000D7   75F021       MOV     B,#0x21
   \   0000DA   A4           MUL     AB
   \   0000DB   C8           XCH     A,R0
   \   0000DC   AAF0         MOV     R2,B
   \   0000DE   75F000       MOV     B,#0x0
   \   0000E1   A4           MUL     AB
   \   0000E2   2A           ADD     A,R2
   \   0000E3   FA           MOV     R2,A
   \   0000E4   75F021       MOV     B,#0x21
   \   0000E7   E9           MOV     A,R1
   \   0000E8   A4           MUL     AB
   \   0000E9   2A           ADD     A,R2
   \   0000EA   F9           MOV     R1,A
   \   0000EB   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   28           ADD     A,R0
   \   0000F0   F8           MOV     R0,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   39           ADDC    A,R1
   \   0000F4   F9           MOV     R1,A
   \   0000F5   E8           MOV     A,R0
   \   0000F6   240B         ADD     A,#0xb
   \   0000F8   FC           MOV     R4,A
   \   0000F9   E4           CLR     A
   \   0000FA   39           ADDC    A,R1
   \   0000FB   FD           MOV     R5,A
   \   0000FC   7404         MOV     A,#0x4
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   AA82         MOV     R2,DPL
   \   000103   AB83         MOV     R3,DPH
   \   000105   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3508          
   3509                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000108                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000108   7401         MOV     A,#0x1
   \   00010A   12....       LCALL   ?XSTACK_DISP101_8
   \   00010D   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000110   E9           MOV     A,R1
   \   000111   6401         XRL     A,#0x1
   \   000113   7019         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3510                  {
   3511                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   64FE         XRL     A,#0xfe
   \   00011D   7004         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   64FF         XRL     A,#0xff
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   000123   7009         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3512                    {
   3513                      // Release the entry that contains an invalid NWK address
   3514                      AddrMgrEntryRelease( &entry );
   \   000125                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000125   7401         MOV     A,#0x1
   \   000127   12....       LCALL   ?XSTACK_DISP101_8
   \   00012A   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   00012D   E9           MOV     A,R1
   3515                    }
   3516                  }
   3517          
   3518                  // Send the Bind Response with failure status
   3519                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3520                               &(ZDAppPendingBindReq[i].srcAddr),
   3521                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   00012E                ; Setup parameters for call to function ZDP_SendData
   \   00012E   EF           MOV     A,R7
   \   00012F   F8           MOV     R0,A
   \   000130   7900         MOV     R1,#0x0
   \   000132   E8           MOV     A,R0
   \   000133   75F021       MOV     B,#0x21
   \   000136   A4           MUL     AB
   \   000137   C8           XCH     A,R0
   \   000138   AAF0         MOV     R2,B
   \   00013A   75F000       MOV     B,#0x0
   \   00013D   A4           MUL     AB
   \   00013E   2A           ADD     A,R2
   \   00013F   FA           MOV     R2,A
   \   000140   75F021       MOV     B,#0x21
   \   000143   E9           MOV     A,R1
   \   000144   A4           MUL     AB
   \   000145   2A           ADD     A,R2
   \   000146   F9           MOV     R1,A
   \   000147   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   28           ADD     A,R0
   \   00014C   F8           MOV     R0,A
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   39           ADDC    A,R1
   \   000150   F9           MOV     R1,A
   \   000151   E8           MOV     A,R0
   \   000152   241E         ADD     A,#0x1e
   \   000154   F582         MOV     DPL,A
   \   000156   E4           CLR     A
   \   000157   39           ADDC    A,R1
   \   000158   F583         MOV     DPH,A
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F5..         MOV     ?V0,A
   \   00015D   78..         MOV     R0,#?V0
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000162   7401         MOV     A,#0x1
   \   000164   12....       LCALL   ?XSTACK_DISP100_8
   \   000167   88..         MOV     ?V0,R0
   \   000169   89..         MOV     ?V1,R1
   \   00016B   78..         MOV     R0,#?V0
   \   00016D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000170   75..21       MOV     ?V0,#0x21
   \   000173   75..80       MOV     ?V1,#-0x80
   \   000176   78..         MOV     R0,#?V0
   \   000178   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017B   7901         MOV     R1,#0x1
   \   00017D   EF           MOV     A,R7
   \   00017E   FA           MOV     R2,A
   \   00017F   7B00         MOV     R3,#0x0
   \   000181   EA           MOV     A,R2
   \   000182   75F021       MOV     B,#0x21
   \   000185   A4           MUL     AB
   \   000186   CA           XCH     A,R2
   \   000187   A8F0         MOV     R0,B
   \   000189   75F000       MOV     B,#0x0
   \   00018C   A4           MUL     AB
   \   00018D   28           ADD     A,R0
   \   00018E   F8           MOV     R0,A
   \   00018F   75F021       MOV     B,#0x21
   \   000192   EB           MOV     A,R3
   \   000193   A4           MUL     AB
   \   000194   28           ADD     A,R0
   \   000195   FB           MOV     R3,A
   \   000196   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   2A           ADD     A,R2
   \   00019B   FA           MOV     R2,A
   \   00019C   A3           INC     DPTR
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   3B           ADDC    A,R3
   \   00019F   FB           MOV     R3,A
   \   0001A0   EA           MOV     A,R2
   \   0001A1   2415         ADD     A,#0x15
   \   0001A3   FC           MOV     R4,A
   \   0001A4   E4           CLR     A
   \   0001A5   3B           ADDC    A,R3
   \   0001A6   FD           MOV     R5,A
   \   0001A7   EF           MOV     A,R7
   \   0001A8   FA           MOV     R2,A
   \   0001A9   7B00         MOV     R3,#0x0
   \   0001AB   EA           MOV     A,R2
   \   0001AC   75F021       MOV     B,#0x21
   \   0001AF   A4           MUL     AB
   \   0001B0   CA           XCH     A,R2
   \   0001B1   A8F0         MOV     R0,B
   \   0001B3   75F000       MOV     B,#0x0
   \   0001B6   A4           MUL     AB
   \   0001B7   28           ADD     A,R0
   \   0001B8   F8           MOV     R0,A
   \   0001B9   75F021       MOV     B,#0x21
   \   0001BC   EB           MOV     A,R3
   \   0001BD   A4           MUL     AB
   \   0001BE   28           ADD     A,R0
   \   0001BF   FB           MOV     R3,A
   \   0001C0   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   2A           ADD     A,R2
   \   0001C5   FA           MOV     R2,A
   \   0001C6   A3           INC     DPTR
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   3B           ADDC    A,R3
   \   0001C9   FB           MOV     R3,A
   \   0001CA   EA           MOV     A,R2
   \   0001CB   241F         ADD     A,#0x1f
   \   0001CD   FA           MOV     R2,A
   \   0001CE   5001         JNC     ??ZDApp_AgeOutPendingBindEntry_6
   \   0001D0   0B           INC     R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0001D1   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001D4   7405         MOV     A,#0x5
   \   0001D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D9   E9           MOV     A,R1
   3522          
   3523                  // Clear the record and set to default values
   3524                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0001DA                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0001DA   EF           MOV     A,R7
   \   0001DB   F8           MOV     R0,A
   \   0001DC   7900         MOV     R1,#0x0
   \   0001DE   E8           MOV     A,R0
   \   0001DF   75F021       MOV     B,#0x21
   \   0001E2   A4           MUL     AB
   \   0001E3   C8           XCH     A,R0
   \   0001E4   AAF0         MOV     R2,B
   \   0001E6   75F000       MOV     B,#0x0
   \   0001E9   A4           MUL     AB
   \   0001EA   2A           ADD     A,R2
   \   0001EB   FA           MOV     R2,A
   \   0001EC   75F021       MOV     B,#0x21
   \   0001EF   E9           MOV     A,R1
   \   0001F0   A4           MUL     AB
   \   0001F1   2A           ADD     A,R2
   \   0001F2   F9           MOV     R1,A
   \   0001F3   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   28           ADD     A,R0
   \   0001F8   FA           MOV     R2,A
   \   0001F9   A3           INC     DPTR
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   39           ADDC    A,R1
   \   0001FC   FB           MOV     R3,A
   \   0001FD   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3525                }
   3526              }
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   000200   0F           INC     R7
   \   000201   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3527            }
   3528          
   3529            if ( entryFound == FALSE )
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   000204   EE           MOV     A,R6
   \   000205   700F         JNZ     ??ZDApp_AgeOutPendingBindEntry_7
   3530            {
   3531              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \   000207                ; Setup parameters for call to function osal_stop_timerEx
   \   000207   7A00         MOV     R2,#0x0
   \   000209   7B10         MOV     R3,#0x10
   \   00020B   90....       MOV     DPTR,#ZDAppTaskID
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   F9           MOV     R1,A
   \   000210   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000213   E9           MOV     A,R1
   \   000214   8018         SJMP    ??ZDApp_AgeOutPendingBindEntry_8
   3532            }
   3533            else
   3534            {
   3535              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3536                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   000216                ; Setup parameters for call to function osal_start_timerEx
   \   000216   90....       MOV     DPTR,#__Constant_3e8
   \   000219   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00021C   7A00         MOV     R2,#0x0
   \   00021E   7B10         MOV     R3,#0x10
   \   000220   90....       MOV     DPTR,#ZDAppTaskID
   \   000223   E0           MOVX    A,@DPTR
   \   000224   F9           MOV     R1,A
   \   000225   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000228   7404         MOV     A,#0x4
   \   00022A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00022D   E9           MOV     A,R1
   3537            }
   3538          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   00022E   740E         MOV     A,#0xe
   \   000230   12....       LCALL   ?DEALLOC_XSTACK8
   \   000233   7F02         MOV     R7,#0x2
   \   000235   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetPendingBindDefault::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitPendingBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_GetEmptyPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AgeOutPendingBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry
   3539          #endif
   3540          #endif
   3541          
   3542          /*********************************************************************
   3543          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     32   AddrMgrWriteNVRequest
      2     12   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     14   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     43   ZDApp_AgeOutPendingBindEntry
        0     24   -> AddrMgrEntryLookupExt
        0     24   -> AddrMgrEntryRelease
        0     24   -> AddrMgrExtAddrSet
        0     24   -> ZDApp_SetPendingBindDefault
        0     29   -> ZDP_SendData
        0     28   -> osal_start_timerEx
        0     24   -> osal_stop_timerEx
      0     25   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0      0   ZDApp_CoordStartPANIDConflictCB
      2     17   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_set_event
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0     12   ZDApp_Init
        0     12   -> HalLedBlink
        0     12   -> NLME_GetExtAddr
        0     12   -> ZDAppCheckForHoldKey
        0     12   -> ZDApp_InitPendingBind
        0     12   -> ZDApp_InitZdoCBFunc
        0     12   -> ZDApp_RegisterCBs
        0     12   -> ZDOInitDevice
        0     12   -> ZDO_Init
        0     12   -> afRegister
      0     21   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2     12   ZDApp_InitZdoCBFunc
      0     24   ZDApp_JoinReq
        0     20   -> NLME_JoinRequest
        0     16   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     28   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     24   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     23   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlStartup
        0     10   -> ZDApp_LeaveCtrlReset
      0     23   ZDApp_LeaveReset
        0      9   -> ZDApp_LeaveCtrlSet
        0      9   -> ZDApp_ResetTimerStart
      0     49   ZDApp_LeaveUpdate
        0     32   -> APSME_UpdateDeviceReq
        0     32   -> AddrMgrWriteNVRequest
        0     32   -> AssocIsChild
        0     32   -> NLME_RemoveChild
        0     32   -> RTG_RemoveRtgEntry
        0     32   -> ZDSecMgrAddrClear
        0     32   -> ZDSecMgrDeviceRemoveByExtAddr
        0     32   -> nwkNeighborRemove
        0     35   -> osal_memcpy
      0     22   ZDApp_NVUpdate
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     37   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2     14   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     30   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     37   ZDApp_NwkDescListProcessing
        0     16   -> nwk_ExtPANIDValid
        0     16   -> nwk_getNwkDescList
        0     16   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     77   ZDApp_ProcessMsgCBs
        0     56   -> ZDApp_ProcessPendingBindReq
        0     56   -> ZDMatchSendState
        0     56   -> ZDO_MatchEndDeviceBind
        0     56   -> ZDO_ParseAddrRsp
        0     56   -> ZDO_ParseBindUnbindReq
        0     56   -> ZDO_ParseEndDeviceBindReq
        0     56   -> ZDO_ProcessBindUnbindReq
        0     56   -> ZDO_UpdateAddrManager
        0     56   -> osal_mem_free
      0     33   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> NLME_StartRouterRequest
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ResetTimerStart
        0     12   -> ZDApp_RestoreNwkKey
        0     12   -> ZMacSetReq
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_rand
        0     12   -> osal_set_event
      0     39   ZDApp_ProcessOSALMsg
        0     25   -> NLME_JoinRequest
        0     21   -> NLME_ReJoinRequest
        0     21   -> NLME_ReJoinRequestUnsecure
        0     21   -> NLME_SetPollRate
        0     21   -> NLME_SetQueuedPollRate
        0     21   -> NLME_SetResponseRate
        0     21   -> ZDApp_NetworkInit
        0     21   -> ZDApp_NodeProfileSync
        0     21   -> ZDApp_NwkDescListProcessing
        0     21   -> ZDApp_ProcessMsgCBs
        0     21   -> ZDApp_ProcessNetworkJoin
        0     21   -> ZDApp_ProcessSecMsg
        0     21   -> ZDApp_RestoreNwkKey
        0     21   -> ZDP_IncomingData
        0     21   -> ZMacSetReq
        0     25   -> osal_nv_read
        0     21   -> osal_rand
        0     21   -> sAddrExtCpy
      0     77   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_NVUpdate
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     35   ZDApp_ProcessSecEvent
        0     17   -> ZDApp_DeviceAuthEvt
        0     17   -> ZDApp_SaveNwkKey
        0     17   -> ZDSecMgrNewDeviceEvent
        0     17   -> ZDSecMgrSaveTCLinkKey
        0     17   -> osal_mem_free
        0     21   -> osal_start_timerEx
      0     30   ZDApp_ProcessSecMsg
        0      9   -> ZDSecMgrSwitchKeyInd
        0      9   -> ZDSecMgrTransportKeyInd
        0      9   -> ZDSecMgrUpdateDeviceInd
      0      9   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2     12   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0      9   ZDApp_ResetTimerCancel
        0      9   -> osal_clear_event
        0      9   -> osal_stop_timerEx
      0     28   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     74   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      0     14   ZDApp_SaveNetworkStateEvt
      0     52   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0     39   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0     10   ZDApp_SendEventMsg
        0     10   -> ZDApp_SendMsg
      1     38   ZDApp_SendMsg
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     33   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      2      0   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2      0   ZDApp_StopJoiningCycle
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_AgeOutPendingBindEntry
        0     14   -> ZDApp_NetworkStartEvt
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_set_event
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     26   ZDOInitDevice
        0     14   -> NLME_SetBroadcastFilter
        0     14   -> ZDAppDetermineDeviceType
        0     14   -> ZDApp_LeaveCtrlInit
        0     14   -> ZDApp_LeaveCtrlStartup
        0     14   -> ZDApp_NetworkInit
        0     14   -> ZDApp_SecInit
        0     14   -> ZDConfig_InitDescriptors
        0     14   -> osal_rand
        0     14   -> osal_set_event
        0     14   -> zgInitItems
        0     14   -> zgWriteStartupOptions
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     16   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     19   ZDO_JoinConfirmCB
        0     19   -> HalLedSet
        0     19   -> ZDApp_SendMsg
        0     19   -> nwkNeighborFindEmptySlot
        0     19   -> nwkNeighborInitTable
        0     19   -> osal_memset
        0     19   -> sAddrExtCpy
      0     27   ZDO_JoinIndicationCB
        0     22   -> ZDApp_NVUpdate
        0     22   -> osal_get_timeoutEx
        0     22   -> osal_mem_alloc
        0     26   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> ZDApp_LeaveUpdate
        0     10   -> sAddrExtCmp
      1     14   ZDO_LeaveInd
        0     14   -> NLME_GetCoordShortAddr
        0     14   -> NLME_LeaveRsp
        0     14   -> NLME_SetPollRate
        0     14   -> ZDApp_LeaveReset
        0     14   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0     14   ZDO_NetworkStatusCB
        0     14   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     16   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> ZDApp_SendMsg
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     16   ZDO_beaconNotifyIndCB
        0     16   -> osal_mem_alloc
        0     16   -> osal_memset
        0     16   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for zdoDiscCounter>
       3  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
      33  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
     102  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     568  ZDApp_AgeOutPendingBindEntry
       6  ZDApp_AgeOutPendingBindEntry::?relay
      72  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      22  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
     124  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      97  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     135  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
     122  ZDApp_GetEmptyPendingBindReq
       6  ZDApp_GetEmptyPendingBindReq::?relay
     143  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
     106  ZDApp_Init
       6  ZDApp_Init::?relay
      98  ZDApp_InitPendingBind
       6  ZDApp_InitPendingBind::?relay
     124  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      64  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      96  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      25  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      87  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      55  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      69  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      72  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
      24  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     236  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
       3  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      33  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      65  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
     125  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      55  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     373  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      32  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     344  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     682  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
     870  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     574  ZDApp_ProcessPendingBindReq
       6  ZDApp_ProcessPendingBindReq::?relay
     338  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
     100  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      26  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
     102  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      74  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      37  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      64  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
     225  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
       3  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      91  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       2  ZDApp_SavedPollRate
     205  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      34  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
     100  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
      39  ZDApp_SetPendingBindDefault
       6  ZDApp_SetPendingBindDefault::?relay
      46  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      39  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     366  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     202  ZDOInitDevice
       6  ZDOInitDevice::?relay
     157  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      95  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      67  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     361  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
     268  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
     145  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     314  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      14  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      92  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      71  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
      31  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      63  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      65  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      95  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      71  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      71  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       7  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     877  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_258
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  retryCnt
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter

 
 10 601 bytes in segment BANKED_CODE
    432 bytes in segment BANK_RELAYS
     10 bytes in segment XDATA_I
     10 bytes in segment XDATA_ID
     16 bytes in segment XDATA_ROM_C
     62 bytes in segment XDATA_Z
 
 11 043 bytes of CODE  memory
      0 bytes of CONST memory (+ 16 bytes shared)
     72 bytes of XDATA memory

Errors: none
Warnings: none
