###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                16/Mar/2016  14:39:17
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDSecMgr.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00008000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x42, 0x61, 0x72, 0x74,
#        0x20, 0x65, 0x61, 0x20, 0x48, 0x79, 0x6C, 0x63, 0x6F, 0x20, 0x20,
#        0x20}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDSecMgr.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\ZDSecMgr.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\ZDSecMgr.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDSecMgr.c
      1          /******************************************************************************
      2            Filename:       ZDSecMgr.c
      3            Revised:        $Date: 2014-06-05 11:25:00 -0700 (Thu, 05 Jun 2014) $
      4            Revision:       $Revision: 38833 $
      5          
      6            Description:    The ZigBee Device Security Manager.
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "ZGlobals.h"
     52          #include "ssp.h"
     53          #include "nwk_globals.h"
     54          #include "nwk.h"
     55          #include "NLMEDE.h"
     56          #include "AddrMgr.h"
     57          #include "AssocList.h"
     58          #include "APSMEDE.h"
     59          #include "ZDConfig.h"
     60          #include "ZDSecMgr.h"
     61          
     62          /******************************************************************************
     63           * CONSTANTS
     64           */
     65          // maximum number of devices managed by this Security Manager
     66          #if !defined ( ZDSECMGR_DEVICE_MAX )
     67            #define ZDSECMGR_DEVICE_MAX 3
     68          #endif
     69          
     70          // maximum number of LINK keys this device may store
     71          #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
     72          
     73          // total number of stored devices
     74          #if !defined ( ZDSECMGR_STORED_DEVICES )
     75            #define ZDSECMGR_STORED_DEVICES 3
     76          #endif
     77          
     78          // Total number of preconfigured trust center link key
     79          #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
     80            #define ZDSECMGR_TC_DEVICE_MAX 1
     81          #endif
     82          
     83          #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
     84            #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
     85          #endif
     86          
     87          // APSME Stub Implementations
     88          #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
     89          #define ZDSecMgrLinkKeyNVIdGet APSME_LinkKeyNVIdGet
     90          #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
     91          #define ZDSecMgrIsLinkKeyValid APSME_IsLinkKeyValid
     92          
     93          /******************************************************************************
     94           * TYPEDEFS
     95           */
     96          typedef struct
     97          {
     98            uint16            ami;
     99            uint16            keyNvId;   // index to the Link Key table in NV
    100            ZDSecMgr_Authentication_Option authenticateOption;
    101          } ZDSecMgrEntry_t;
    102          
    103          typedef struct
    104          {
    105            uint16          nwkAddr;
    106            uint8*          extAddr;
    107            uint16          parentAddr;
    108            uint8           secure;
    109            uint8           devStatus;
    110          } ZDSecMgrDevice_t;
    111          
    112          /******************************************************************************
    113           * EXTERNAL VARIABLES
    114           */
    115          extern pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
    116          
    117          /******************************************************************************
    118           * LOCAL VARIABLES
    119           */
    120          #if 0 // Taken out because the following functionality is only used for test
    121                // purpose. A more efficient (above) way is used. It can be put
    122                // back in if customers request for a white/black list feature.
    123          uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
    124          {
    125            { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    126            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
    127            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    128          };
    129          #endif
    130          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
   \                     ZDSecMgrTCExtAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    132            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    133          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 ZDSecMgrTCAuthenticated = FALSE;
   \                     ZDSecMgrTCAuthenticated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
   \                     ZDSecMgrEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    137          
    138          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 ZDSecMgrPermitJoiningEnabled;
   \                     ZDSecMgrPermitJoiningEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 ZDSecMgrPermitJoiningTimed;
   \                     ZDSecMgrPermitJoiningTimed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          APSME_TCLinkKey_t TrustCenterLinkKey;
   \                     TrustCenterLinkKey:
   \   000000                DS 32
   \   000020                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
   \                     ApsLinkKeyFrmCntr:
   \   000000                DS 27
   \   00001B                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
   \                     TCLinkKeyFrmCntr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    147          
    148          /******************************************************************************
    149           * PRIVATE FUNCTIONS
    150           *
    151           *   ZDSecMgrAddrStore
    152           *   ZDSecMgrExtAddrStore
    153           *   ZDSecMgrExtAddrLookup
    154           *   ZDSecMgrEntryInit
    155           *   ZDSecMgrEntryLookup
    156           *   ZDSecMgrEntryLookupAMI
    157           *   ZDSecMgrEntryLookupExt
    158           *   ZDSecMgrEntryLookupExtGetIndex
    159           *   ZDSecMgrEntryFree
    160           *   ZDSecMgrEntryNew
    161           *   ZDSecMgrAppKeyGet
    162           *   ZDSecMgrAppKeyReq
    163           *   ZDSecMgrSendNwkKey
    164           *   ZDSecMgrDeviceRemove
    165           *   ZDSecMgrDeviceValidateRM
    166           *   ZDSecMgrDeviceValidate
    167           *   ZDSecMgrDeviceJoin
    168           *   ZDSecMgrDeviceJoinDirect
    169           *   ZDSecMgrDeviceJoinFwd
    170           *   ZDSecMgrDeviceNew
    171           *   ZDSecMgrAssocDeviceAuth
    172           *   ZDSecMgrAuthNwkKey
    173           *   APSME_TCLinkKeyInit
    174           *   APSME_IsDefaultTCLK
    175           */
    176          
    177          //-----------------------------------------------------------------------------
    178          // address management
    179          //-----------------------------------------------------------------------------
    180          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    181          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    182          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
    183          
    184          //-----------------------------------------------------------------------------
    185          // Trust Center management
    186          //-----------------------------------------------------------------------------
    187          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
    188          void ZDSecMgrTCDataLoad( uint8* extAddr );
    189          
    190          //-----------------------------------------------------------------------------
    191          // entry data
    192          //-----------------------------------------------------------------------------
    193          void ZDSecMgrEntryInit(uint8 state);
    194          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
    195          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
    196          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    197          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
    198          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
    199          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
    200          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
    201          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
    202          void ZDSecMgrApsLinkKeyInit(void);
    203          #if defined ( NV_RESTORE )
    204          static void ZDSecMgrWriteNV(void);
    205          static void ZDSecMgrRestoreFromNV(void);
    206          static void ZDSecMgrUpdateNV( uint16 index );
    207          #endif
    208          
    209          //-----------------------------------------------------------------------------
    210          // key support
    211          //-----------------------------------------------------------------------------
    212          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
    213                                       uint8*  initExtAddr,
    214                                       uint16  partNwkAddr,
    215                                       uint8*  partExtAddr,
    216                                       uint8** key,
    217                                       uint8*  keyType );
    218          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
    219          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
    220          void ZDSecMgrNwkKeyInit(uint8 setDefault);
    221          
    222          //-----------------------------------------------------------------------------
    223          // device management
    224          //-----------------------------------------------------------------------------
    225          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
    226          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
    227          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
    228          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
    229          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
    230          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
    231          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
    232          
    233          //-----------------------------------------------------------------------------
    234          // association management
    235          //-----------------------------------------------------------------------------
    236          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
    237          
    238          //-----------------------------------------------------------------------------
    239          // authentication management
    240          //-----------------------------------------------------------------------------
    241          void ZDSecMgrAuthNwkKey( void );
    242          
    243          //-----------------------------------------------------------------------------
    244          // APSME function
    245          //-----------------------------------------------------------------------------
    246          void APSME_TCLinkKeyInit( uint8 setDefault );
    247          uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
    248          
    249          /******************************************************************************
    250           * @fn          ZDSecMgrAddrStore
    251           *
    252           * @brief       Store device addresses.
    253           *
    254           * @param       nwkAddr - [in] NWK address
    255           * @param       extAddr - [in] EXT address
    256           * @param       ami     - [out] Address Manager index
    257           *
    258           * @return      ZStatus_t
    259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrAddrStore:
    261          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   741A         MOV     A,#0x1a
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
    262            ZStatus_t      status;
    263            AddrMgrEntry_t entry;
    264          
    265          
    266            // add entry
    267            entry.user    = ADDRMGR_USER_SECURITY;
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   7402         MOV     A,#0x2
   \   000026   F0           MOVX    @DPTR,A
    268            entry.nwkAddr = nwkAddr;
   \   000027   7401         MOV     A,#0x1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E5..         MOV     A,?V2
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   E5..         MOV     A,?V3
   \   000032   F0           MOVX    @DPTR,A
    269            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000033                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000033   EE           MOV     A,R6
   \   000034   FC           MOV     R4,A
   \   000035   EF           MOV     A,R7
   \   000036   FD           MOV     R5,A
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   AA82         MOV     R2,DPL
   \   00003E   AB83         MOV     R3,DPH
   \   000040   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    270          
    271            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000043                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00004A   E9           MOV     A,R1
   \   00004B   6401         XRL     A,#0x1
   \   00004D   701A         JNZ     ??ZDSecMgrAddrStore_0
    272            {
    273              // return successful results
    274              *ami   = entry.index;
   \   00004F   740B         MOV     A,#0xb
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   85..82       MOV     DPL,?V0
   \   00005C   85..83       MOV     DPH,?V1
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    275              status = ZSuccess;
   \   000064   75..00       MOV     ?V4,#0x0
   \   000067   8018         SJMP    ??ZDSecMgrAddrStore_1
    276            }
    277            else
    278            {
    279              // return failed results
    280              *ami   = entry.index;
   \                     ??ZDSecMgrAddrStore_0:
   \   000069   740B         MOV     A,#0xb
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   85..82       MOV     DPL,?V0
   \   000076   85..83       MOV     DPH,?V1
   \   000079   E8           MOV     A,R0
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   E9           MOV     A,R1
   \   00007D   F0           MOVX    @DPTR,A
    281              status = ZNwkUnknownDevice;
   \   00007E   75..C8       MOV     ?V4,#-0x38
    282            }
    283          
    284            return status;
   \                     ??ZDSecMgrAddrStore_1:
   \   000081   A9..         MOV     R1,?V4
   \   000083   740D         MOV     A,#0xd
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   7F05         MOV     R7,#0x5
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA
    285          }
    286          
    287          /******************************************************************************
    288           * @fn          ZDSecMgrExtAddrStore
    289           *
    290           * @brief       Store EXT address.
    291           *
    292           * @param       extAddr - [in] EXT address
    293           * @param       ami     - [out] Address Manager index
    294           *
    295           * @return      ZStatus_t
    296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrStore:
    298          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   741A         MOV     A,#0x1a
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
    299            ZStatus_t      status;
    300            AddrMgrEntry_t entry;
    301          
    302          
    303            // add entry
    304            entry.user    = ADDRMGR_USER_SECURITY;
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   7402         MOV     A,#0x2
   \   000026   F0           MOVX    @DPTR,A
    305            entry.nwkAddr = nwkAddr;
   \   000027   7401         MOV     A,#0x1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E5..         MOV     A,?V2
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   E5..         MOV     A,?V3
   \   000032   F0           MOVX    @DPTR,A
    306            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000033                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000033   EE           MOV     A,R6
   \   000034   FC           MOV     R4,A
   \   000035   EF           MOV     A,R7
   \   000036   FD           MOV     R5,A
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   AA82         MOV     R2,DPL
   \   00003E   AB83         MOV     R3,DPH
   \   000040   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    307          
    308            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000043                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00004A   E9           MOV     A,R1
   \   00004B   6401         XRL     A,#0x1
   \   00004D   701A         JNZ     ??ZDSecMgrExtAddrStore_0
    309            {
    310              // return successful results
    311              *ami   = entry.index;
   \   00004F   740B         MOV     A,#0xb
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   85..82       MOV     DPL,?V0
   \   00005C   85..83       MOV     DPH,?V1
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    312              status = ZSuccess;
   \   000064   75..00       MOV     ?V4,#0x0
   \   000067   8018         SJMP    ??ZDSecMgrExtAddrStore_1
    313            }
    314            else
    315            {
    316              // return failed results
    317              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrStore_0:
   \   000069   740B         MOV     A,#0xb
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   85..82       MOV     DPL,?V0
   \   000076   85..83       MOV     DPH,?V1
   \   000079   E8           MOV     A,R0
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   E9           MOV     A,R1
   \   00007D   F0           MOVX    @DPTR,A
    318              status = ZNwkUnknownDevice;
   \   00007E   75..C8       MOV     ?V4,#-0x38
    319            }
    320          
    321            return status;
   \                     ??ZDSecMgrExtAddrStore_1:
   \   000081   A9..         MOV     R1,?V4
   \   000083   740D         MOV     A,#0xd
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   7F05         MOV     R7,#0x5
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA
    322          }
    323          
    324          /******************************************************************************
    325           * @fn          ZDSecMgrExtAddrLookup
    326           *
    327           * @brief       Lookup index for specified EXT address.
    328           *
    329           * @param       extAddr - [in] EXT address
    330           * @param       ami     - [out] Address Manager index
    331           *
    332           * @return      ZStatus_t
    333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    334          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrLookup:
    335          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
    336            ZStatus_t      status;
    337            AddrMgrEntry_t entry;
    338          
    339          
    340            // lookup entry
    341            entry.user = ADDRMGR_USER_SECURITY;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   7402         MOV     A,#0x2
   \   00001A   F0           MOVX    @DPTR,A
    342            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   00001B                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00001B   EE           MOV     A,R6
   \   00001C   FC           MOV     R4,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FD           MOV     R5,A
   \   00001F   7403         MOV     A,#0x3
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   AA82         MOV     R2,DPL
   \   000026   AB83         MOV     R3,DPH
   \   000028   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    343          
    344            if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   00002B                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002B   AA..         MOV     R2,?XSP + 0
   \   00002D   AB..         MOV     R3,?XSP + 1
   \   00002F   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000032   E9           MOV     A,R1
   \   000033   6401         XRL     A,#0x1
   \   000035   701A         JNZ     ??ZDSecMgrExtAddrLookup_0
    345            {
    346              // return successful results
    347              *ami   = entry.index;
   \   000037   740B         MOV     A,#0xb
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   85..82       MOV     DPL,?V0
   \   000044   85..83       MOV     DPH,?V1
   \   000047   E8           MOV     A,R0
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E9           MOV     A,R1
   \   00004B   F0           MOVX    @DPTR,A
    348              status = ZSuccess;
   \   00004C   75..00       MOV     ?V2,#0x0
   \   00004F   8018         SJMP    ??ZDSecMgrExtAddrLookup_1
    349            }
    350            else
    351            {
    352              // return failed results
    353              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrLookup_0:
   \   000051   740B         MOV     A,#0xb
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F8           MOV     R0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   E8           MOV     A,R0
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   E9           MOV     A,R1
   \   000065   F0           MOVX    @DPTR,A
    354              status = ZNwkUnknownDevice;
   \   000066   75..C8       MOV     ?V2,#-0x38
    355            }
    356          
    357            return status;
   \                     ??ZDSecMgrExtAddrLookup_1:
   \   000069   A9..         MOV     R1,?V2
   \   00006B   740D         MOV     A,#0xd
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   7F03         MOV     R7,#0x3
   \   000072   02....       LJMP    ?BANKED_LEAVE_XDATA
    358          }
    359          
    360          /******************************************************************************
    361           * @fn          ZDSecMgrAddrClear
    362           *
    363           * @brief       Clear security bit from Address Manager for specific device.
    364           *
    365           * @param       extAddr - [in] EXT address
    366           *
    367           * @return      ZStatus_t
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
   \                     ZDSecMgrAddrClear:
    370          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    371            ZStatus_t status;
    372            uint16 entryAmi;
    373          
    374            // get Address Manager Index
    375            status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000019   E9           MOV     A,R1
   \   00001A   F5..         MOV     ?V0,A
    376          
    377            if ( status == ZSuccess )
   \   00001C   E5..         MOV     A,?V0
   \   00001E   702D         JNZ     ??ZDSecMgrAddrClear_0
    378            {
    379              AddrMgrEntry_t addrEntry;
    380          
    381              // Clear SECURITY User bit from the address manager
    382              addrEntry.user = ADDRMGR_USER_SECURITY;
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7402         MOV     A,#0x2
   \   000027   F0           MOVX    @DPTR,A
    383              addrEntry.index = entryAmi;
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   740D         MOV     A,#0xd
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E8           MOV     A,R0
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   E9           MOV     A,R1
   \   00003C   F0           MOVX    @DPTR,A
    384          
    385              if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
   \   00003D                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?XSTACK_DISP101_8
   \   000042   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000045   E9           MOV     A,R1
   \   000046   6401         XRL     A,#0x1
   \   000048   6003         JZ      ??ZDSecMgrAddrClear_0
    386              {
    387                // return failure results
    388                status = ZFailure;
   \   00004A   75..01       MOV     ?V0,#0x1
    389              }
    390            }
    391          
    392            return status;
   \                     ??ZDSecMgrAddrClear_0:
   \   00004D   A9..         MOV     R1,?V0
   \   00004F   740F         MOV     A,#0xf
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   7F01         MOV     R7,#0x1
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    393          }
    394          
    395          /******************************************************************************
    396           * @fn          ZDSecMgrEntryInit
    397           *
    398           * @brief       Initialize entry sub module
    399           *
    400           * @param       state - device initialization state
    401           *
    402           * @return      none
    403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    404          void ZDSecMgrEntryInit(uint8 state)
   \                     ZDSecMgrEntryInit:
    405          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    406            if (ZDSecMgrEntries == NULL)
   \   000007   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDSecMgrEntryInit_0 & 0xFFFF
    407            {
    408              uint16 index;
    409          
    410              if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   7A0F         MOV     R2,#0xf
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001D   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   EB           MOV     A,R3
   \   000024   F0           MOVX    @DPTR,A
   \   000025   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   E8           MOV     A,R0
   \   00002E   49           ORL     A,R1
   \   00002F   6070         JZ      ??ZDSecMgrEntryInit_0
    411              {
    412                return;
    413              }
    414          
    415              for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
   \   000031   7E00         MOV     R6,#0x0
   \   000033   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrEntryInit_1:
   \   000035   C3           CLR     C
   \   000036   EE           MOV     A,R6
   \   000037   9403         SUBB    A,#0x3
   \   000039   EF           MOV     A,R7
   \   00003A   9400         SUBB    A,#0x0
   \   00003C   5063         JNC     ??ZDSecMgrEntryInit_0
    416              {
    417                ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
   \   00003E   EE           MOV     A,R6
   \   00003F   F8           MOV     R0,A
   \   000040   EF           MOV     A,R7
   \   000041   F9           MOV     R1,A
   \   000042   E8           MOV     A,R0
   \   000043   75F005       MOV     B,#0x5
   \   000046   A4           MUL     AB
   \   000047   C8           XCH     A,R0
   \   000048   AAF0         MOV     R2,B
   \   00004A   75F000       MOV     B,#0x0
   \   00004D   A4           MUL     AB
   \   00004E   2A           ADD     A,R2
   \   00004F   FA           MOV     R2,A
   \   000050   75F005       MOV     B,#0x5
   \   000053   E9           MOV     A,R1
   \   000054   A4           MUL     AB
   \   000055   2A           ADD     A,R2
   \   000056   F9           MOV     R1,A
   \   000057   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   28           ADD     A,R0
   \   00005C   FA           MOV     R2,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   39           ADDC    A,R1
   \   000060   8A82         MOV     DPL,R2
   \   000062   F583         MOV     DPH,A
   \   000064   74FE         MOV     A,#-0x2
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   74FF         MOV     A,#-0x1
   \   00006A   F0           MOVX    @DPTR,A
    418          
    419                ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
   \   00006B   EE           MOV     A,R6
   \   00006C   F8           MOV     R0,A
   \   00006D   EF           MOV     A,R7
   \   00006E   F9           MOV     R1,A
   \   00006F   E8           MOV     A,R0
   \   000070   75F005       MOV     B,#0x5
   \   000073   A4           MUL     AB
   \   000074   C8           XCH     A,R0
   \   000075   AAF0         MOV     R2,B
   \   000077   75F000       MOV     B,#0x0
   \   00007A   A4           MUL     AB
   \   00007B   2A           ADD     A,R2
   \   00007C   FA           MOV     R2,A
   \   00007D   75F005       MOV     B,#0x5
   \   000080   E9           MOV     A,R1
   \   000081   A4           MUL     AB
   \   000082   2A           ADD     A,R2
   \   000083   F9           MOV     R1,A
   \   000084   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000087   E0           MOVX    A,@DPTR
   \   000088   28           ADD     A,R0
   \   000089   FA           MOV     R2,A
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   39           ADDC    A,R1
   \   00008D   8A82         MOV     DPL,R2
   \   00008F   F583         MOV     DPH,A
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   7400         MOV     A,#0x0
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   7400         MOV     A,#0x0
   \   000099   F0           MOVX    @DPTR,A
    420              }
   \   00009A   0E           INC     R6
   \   00009B   EE           MOV     A,R6
   \   00009C   7097         JNZ     ??ZDSecMgrEntryInit_1
   \   00009E   0F           INC     R7
   \   00009F   8094         SJMP    ??ZDSecMgrEntryInit_1
    421            }
    422          
    423          #if defined NV_RESTORE
    424            if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
    425            {
    426              ZDSecMgrRestoreFromNV();
    427            }
    428          #else
    429            (void)state;
    430          #endif
    431          }
   \                     ??ZDSecMgrEntryInit_0:
   \   0000A1   7F01         MOV     R7,#0x1
   \   0000A3   02....       LJMP    ?BANKED_LEAVE_XDATA
    432          
    433          /******************************************************************************
    434           * @fn          ZDSecMgrEntryLookup
    435           *
    436           * @brief       Lookup entry index using specified NWK address.
    437           *
    438           * @param       nwkAddr - [in] NWK address
    439           * @param       entry   - [out] valid entry
    440           *
    441           * @return      ZStatus_t
    442           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    443          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookup:
    444          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
    445            uint16         index;
    446            AddrMgrEntry_t addrMgrEntry;
    447          
    448            // initialize results
    449            *entry = NULL;
   \   000012   85..82       MOV     DPL,?V0
   \   000015   85..83       MOV     DPH,?V1
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   7400         MOV     A,#0x0
   \   00001E   F0           MOVX    @DPTR,A
    450          
    451            // verify data is available
    452            if ( ZDSecMgrEntries != NULL )
   \   00001F   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   49           ORL     A,R1
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??ZDSecMgrEntryLookup_0 & 0xFFFF
    453            {
    454              addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   7402         MOV     A,#0x2
   \   000036   F0           MOVX    @DPTR,A
    455              addrMgrEntry.nwkAddr = nwkAddr;
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E5..         MOV     A,?V2
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   E5..         MOV     A,?V3
   \   000042   F0           MOVX    @DPTR,A
    456          
    457              if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
   \   000043                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00004A   E9           MOV     A,R1
   \   00004B   6401         XRL     A,#0x1
   \   00004D   707F         JNZ     ??ZDSecMgrEntryLookup_0
    458              {
    459                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00004F   7E00         MOV     R6,#0x0
   \   000051   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrEntryLookup_1:
   \   000053   C3           CLR     C
   \   000054   EE           MOV     A,R6
   \   000055   9403         SUBB    A,#0x3
   \   000057   EF           MOV     A,R7
   \   000058   9400         SUBB    A,#0x0
   \   00005A   5072         JNC     ??ZDSecMgrEntryLookup_0
    460                {
    461                  if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
   \   00005C   740B         MOV     A,#0xb
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FA           MOV     R2,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FB           MOV     R3,A
   \   000066   EE           MOV     A,R6
   \   000067   F8           MOV     R0,A
   \   000068   EF           MOV     A,R7
   \   000069   F9           MOV     R1,A
   \   00006A   E8           MOV     A,R0
   \   00006B   75F005       MOV     B,#0x5
   \   00006E   A4           MUL     AB
   \   00006F   C8           XCH     A,R0
   \   000070   ACF0         MOV     R4,B
   \   000072   75F000       MOV     B,#0x0
   \   000075   A4           MUL     AB
   \   000076   2C           ADD     A,R4
   \   000077   FC           MOV     R4,A
   \   000078   75F005       MOV     B,#0x5
   \   00007B   E9           MOV     A,R1
   \   00007C   A4           MUL     AB
   \   00007D   2C           ADD     A,R4
   \   00007E   F9           MOV     R1,A
   \   00007F   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000082   E0           MOVX    A,@DPTR
   \   000083   28           ADD     A,R0
   \   000084   FC           MOV     R4,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   39           ADDC    A,R1
   \   000088   8C82         MOV     DPL,R4
   \   00008A   F583         MOV     DPH,A
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   6A           XRL     A,R2
   \   00008E   7003         JNZ     ??ZDSecMgrEntryLookup_2
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   6B           XRL     A,R3
   \                     ??ZDSecMgrEntryLookup_2:
   \   000093   7032         JNZ     ??ZDSecMgrEntryLookup_3
    462                  {
    463                    // return successful results
    464                    *entry = &ZDSecMgrEntries[index];
   \   000095   EE           MOV     A,R6
   \   000096   F8           MOV     R0,A
   \   000097   EF           MOV     A,R7
   \   000098   F9           MOV     R1,A
   \   000099   E8           MOV     A,R0
   \   00009A   75F005       MOV     B,#0x5
   \   00009D   A4           MUL     AB
   \   00009E   C8           XCH     A,R0
   \   00009F   AAF0         MOV     R2,B
   \   0000A1   75F000       MOV     B,#0x0
   \   0000A4   A4           MUL     AB
   \   0000A5   2A           ADD     A,R2
   \   0000A6   FA           MOV     R2,A
   \   0000A7   75F005       MOV     B,#0x5
   \   0000AA   E9           MOV     A,R1
   \   0000AB   A4           MUL     AB
   \   0000AC   2A           ADD     A,R2
   \   0000AD   F9           MOV     R1,A
   \   0000AE   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   28           ADD     A,R0
   \   0000B3   F8           MOV     R0,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   39           ADDC    A,R1
   \   0000B7   F9           MOV     R1,A
   \   0000B8   85..82       MOV     DPL,?V0
   \   0000BB   85..83       MOV     DPH,?V1
   \   0000BE   E8           MOV     A,R0
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E9           MOV     A,R1
   \   0000C2   F0           MOVX    @DPTR,A
    465          
    466                    // break from loop
    467                    return ZSuccess;
   \   0000C3   7900         MOV     R1,#0x0
   \   0000C5   8009         SJMP    ??ZDSecMgrEntryLookup_4
    468                  }
    469                }
   \                     ??ZDSecMgrEntryLookup_3:
   \   0000C7   0E           INC     R6
   \   0000C8   EE           MOV     A,R6
   \   0000C9   7088         JNZ     ??ZDSecMgrEntryLookup_1
   \   0000CB   0F           INC     R7
   \   0000CC   8085         SJMP    ??ZDSecMgrEntryLookup_1
    470              }
    471            }
    472          
    473            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookup_0:
   \   0000CE   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookup_4:
   \   0000D0   740D         MOV     A,#0xd
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D5   7F04         MOV     R7,#0x4
   \   0000D7   02....       LJMP    ?BANKED_LEAVE_XDATA
    474          }
    475          
    476          /******************************************************************************
    477           * @fn          ZDSecMgrEntryLookupAMI
    478           *
    479           * @brief       Lookup entry using specified address index
    480           *
    481           * @param       ami   - [in] Address Manager index
    482           * @param       entry - [out] valid entry
    483           *
    484           * @return      ZStatus_t
    485           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupAMI:
    487          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    488            uint16 index;
    489          
    490            // initialize results
    491            *entry = NULL;
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   7400         MOV     A,#0x0
   \   000013   F0           MOVX    @DPTR,A
    492          
    493            // verify data is available
    494            if ( ZDSecMgrEntries != NULL )
   \   000014   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   607D         JZ      ??ZDSecMgrEntryLookupAMI_0
    495            {
    496              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B00         MOV     R3,#0x0
   \                     ??ZDSecMgrEntryLookupAMI_1:
   \   000024   C3           CLR     C
   \   000025   EA           MOV     A,R2
   \   000026   9403         SUBB    A,#0x3
   \   000028   EB           MOV     A,R3
   \   000029   9400         SUBB    A,#0x0
   \   00002B   5070         JNC     ??ZDSecMgrEntryLookupAMI_0
    497              {
    498                if ( ZDSecMgrEntries[index].ami == ami )
   \   00002D   EA           MOV     A,R2
   \   00002E   F8           MOV     R0,A
   \   00002F   EB           MOV     A,R3
   \   000030   F9           MOV     R1,A
   \   000031   E8           MOV     A,R0
   \   000032   75F005       MOV     B,#0x5
   \   000035   A4           MUL     AB
   \   000036   C8           XCH     A,R0
   \   000037   85F0..       MOV     ?V0,B
   \   00003A   75F000       MOV     B,#0x0
   \   00003D   A4           MUL     AB
   \   00003E   25..         ADD     A,?V0
   \   000040   F5..         MOV     ?V0,A
   \   000042   75F005       MOV     B,#0x5
   \   000045   E9           MOV     A,R1
   \   000046   A4           MUL     AB
   \   000047   25..         ADD     A,?V0
   \   000049   F9           MOV     R1,A
   \   00004A   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   28           ADD     A,R0
   \   00004F   F5..         MOV     ?V0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   39           ADDC    A,R1
   \   000054   85..82       MOV     DPL,?V0
   \   000057   F583         MOV     DPH,A
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6E           XRL     A,R6
   \   00005B   7003         JNZ     ??ZDSecMgrEntryLookupAMI_2
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6F           XRL     A,R7
   \                     ??ZDSecMgrEntryLookupAMI_2:
   \   000060   7034         JNZ     ??ZDSecMgrEntryLookupAMI_3
    499                {
    500                  // return successful results
    501                  *entry = &ZDSecMgrEntries[index];
   \   000062   EA           MOV     A,R2
   \   000063   F8           MOV     R0,A
   \   000064   EB           MOV     A,R3
   \   000065   F9           MOV     R1,A
   \   000066   E8           MOV     A,R0
   \   000067   75F005       MOV     B,#0x5
   \   00006A   A4           MUL     AB
   \   00006B   C8           XCH     A,R0
   \   00006C   85F0..       MOV     ?V0,B
   \   00006F   75F000       MOV     B,#0x0
   \   000072   A4           MUL     AB
   \   000073   25..         ADD     A,?V0
   \   000075   F5..         MOV     ?V0,A
   \   000077   75F005       MOV     B,#0x5
   \   00007A   E9           MOV     A,R1
   \   00007B   A4           MUL     AB
   \   00007C   25..         ADD     A,?V0
   \   00007E   F9           MOV     R1,A
   \   00007F   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000082   E0           MOVX    A,@DPTR
   \   000083   28           ADD     A,R0
   \   000084   F8           MOV     R0,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   39           ADDC    A,R1
   \   000088   F9           MOV     R1,A
   \   000089   8C82         MOV     DPL,R4
   \   00008B   8D83         MOV     DPH,R5
   \   00008D   E8           MOV     A,R0
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   E9           MOV     A,R1
   \   000091   F0           MOVX    @DPTR,A
    502          
    503                  // break from loop
    504                  return ZSuccess;
   \   000092   7900         MOV     R1,#0x0
   \   000094   8009         SJMP    ??ZDSecMgrEntryLookupAMI_4
    505                }
    506              }
   \                     ??ZDSecMgrEntryLookupAMI_3:
   \   000096   0A           INC     R2
   \   000097   EA           MOV     A,R2
   \   000098   708A         JNZ     ??ZDSecMgrEntryLookupAMI_1
   \   00009A   0B           INC     R3
   \   00009B   8087         SJMP    ??ZDSecMgrEntryLookupAMI_1
    507            }
    508          
    509            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMI_0:
   \   00009D   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMI_4:
   \   00009F   7F01         MOV     R7,#0x1
   \   0000A1   02....       LJMP    ?BANKED_LEAVE_XDATA
    510          }
    511          
    512          /******************************************************************************
    513           * @fn          ZDSecMgrEntryLookupExt
    514           *
    515           * @brief       Lookup entry index using specified EXT address.
    516           *
    517           * @param       extAddr - [in] EXT address
    518           * @param       entry   - [out] valid entry
    519           *
    520           * @return      ZStatus_t
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupExt:
    523          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    524            ZStatus_t status;
    525            uint16    ami;
    526          
    527            // initialize results
    528            *entry = NULL;
   \   000012   8E82         MOV     DPL,R6
   \   000014   8F83         MOV     DPH,R7
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   7400         MOV     A,#0x0
   \   00001C   F0           MOVX    @DPTR,A
    529            status = ZNwkUnknownDevice;
   \   00001D   75..C8       MOV     ?V2,#-0x38
    530          
    531            // lookup address index
    532            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   000020                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000020   AC..         MOV     R4,?XSP + 0
   \   000022   AD..         MOV     R5,?XSP + 1
   \   000024   AA..         MOV     R2,?V0
   \   000026   AB..         MOV     R3,?V1
   \   000028   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   00002B   E9           MOV     A,R1
   \   00002C   7015         JNZ     ??ZDSecMgrEntryLookupExt_0
    533            {
    534              status = ZDSecMgrEntryLookupAMI( ami, entry );
   \   00002E                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   00002E   EE           MOV     A,R6
   \   00002F   FC           MOV     R4,A
   \   000030   EF           MOV     A,R7
   \   000031   FD           MOV     R5,A
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000040   E9           MOV     A,R1
   \   000041   F5..         MOV     ?V2,A
    535            }
    536          
    537            return status;
   \                     ??ZDSecMgrEntryLookupExt_0:
   \   000043   A9..         MOV     R1,?V2
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   7F03         MOV     R7,#0x3
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA
    538          }
    539          
    540          /******************************************************************************
    541           * @fn          ZDSecMgrEntryLookupExtGetIndex
    542           *
    543           * @brief       Lookup entry index using specified EXT address.
    544           *
    545           * @param       extAddr - [in] EXT address
    546           * @param       entryIndex - [out] valid index to the entry table
    547           *
    548           * @return      ZStatus_t
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupExtGetIndex:
    551          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   7410         MOV     A,#0x10
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
    552            uint16 ami;
    553            uint16 index;
    554          
    555            // lookup address index
    556            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   00001E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00001E   AC..         MOV     R4,?XSP + 0
   \   000020   AD..         MOV     R5,?XSP + 1
   \   000022   AA..         MOV     R2,?V4
   \   000024   AB..         MOV     R3,?V5
   \   000026   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000029   E9           MOV     A,R1
   \   00002A   6003         JZ      $+5
   \   00002C   02....       LJMP    ??ZDSecMgrEntryLookupExtGetIndex_0 & 0xFFFF
    557            {
    558              // verify data is available
    559              if ( ZDSecMgrEntries != NULL )
   \   00002F   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   49           ORL     A,R1
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??ZDSecMgrEntryLookupExtGetIndex_0 & 0xFFFF
    560              {
    561                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00003E   75..00       MOV     ?V2,#0x0
   \   000041   75..00       MOV     ?V3,#0x0
   \                     ??ZDSecMgrEntryLookupExtGetIndex_1:
   \   000044   C3           CLR     C
   \   000045   E5..         MOV     A,?V2
   \   000047   9403         SUBB    A,#0x3
   \   000049   E5..         MOV     A,?V3
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   4003         JC      $+5
   \   00004F   02....       LJMP    ??ZDSecMgrEntryLookupExtGetIndex_0 & 0xFFFF
    562                {
    563                  if ( ZDSecMgrEntries[index].ami == ami )
   \   000052   A8..         MOV     R0,?V2
   \   000054   A9..         MOV     R1,?V3
   \   000056   E8           MOV     A,R0
   \   000057   75F005       MOV     B,#0x5
   \   00005A   A4           MUL     AB
   \   00005B   C8           XCH     A,R0
   \   00005C   AAF0         MOV     R2,B
   \   00005E   75F000       MOV     B,#0x0
   \   000061   A4           MUL     AB
   \   000062   2A           ADD     A,R2
   \   000063   FA           MOV     R2,A
   \   000064   75F005       MOV     B,#0x5
   \   000067   E9           MOV     A,R1
   \   000068   A4           MUL     AB
   \   000069   2A           ADD     A,R2
   \   00006A   F9           MOV     R1,A
   \   00006B   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   28           ADD     A,R0
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   39           ADDC    A,R1
   \   000074   8A82         MOV     DPL,R2
   \   000076   F583         MOV     DPH,A
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F8           MOV     R0,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   E0           MOVX    A,@DPTR
   \   000084   68           XRL     A,R0
   \   000085   7003         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_2
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   69           XRL     A,R1
   \                     ??ZDSecMgrEntryLookupExtGetIndex_2:
   \   00008A   703D         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_3
    564                  {
    565                    // return successful results
    566                    *entry = &ZDSecMgrEntries[index];
   \   00008C   A8..         MOV     R0,?V2
   \   00008E   A9..         MOV     R1,?V3
   \   000090   E8           MOV     A,R0
   \   000091   75F005       MOV     B,#0x5
   \   000094   A4           MUL     AB
   \   000095   C8           XCH     A,R0
   \   000096   AAF0         MOV     R2,B
   \   000098   75F000       MOV     B,#0x0
   \   00009B   A4           MUL     AB
   \   00009C   2A           ADD     A,R2
   \   00009D   FA           MOV     R2,A
   \   00009E   75F005       MOV     B,#0x5
   \   0000A1   E9           MOV     A,R1
   \   0000A2   A4           MUL     AB
   \   0000A3   2A           ADD     A,R2
   \   0000A4   F9           MOV     R1,A
   \   0000A5   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   28           ADD     A,R0
   \   0000AA   F8           MOV     R0,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   39           ADDC    A,R1
   \   0000AE   F9           MOV     R1,A
   \   0000AF   8E82         MOV     DPL,R6
   \   0000B1   8F83         MOV     DPH,R7
   \   0000B3   E8           MOV     A,R0
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E9           MOV     A,R1
   \   0000B7   F0           MOVX    @DPTR,A
    567                    *entryIndex = index;
   \   0000B8   85..82       MOV     DPL,?V0
   \   0000BB   85..83       MOV     DPH,?V1
   \   0000BE   E5..         MOV     A,?V2
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E5..         MOV     A,?V3
   \   0000C4   F0           MOVX    @DPTR,A
    568          
    569                    // break from loop
    570                    return ZSuccess;
   \   0000C5   7900         MOV     R1,#0x0
   \   0000C7   800D         SJMP    ??ZDSecMgrEntryLookupExtGetIndex_4
    571                  }
    572                }
   \                     ??ZDSecMgrEntryLookupExtGetIndex_3:
   \   0000C9   05..         INC     ?V2
   \   0000CB   E5..         MOV     A,?V2
   \   0000CD   7002         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_5
   \   0000CF   05..         INC     ?V3
   \                     ??ZDSecMgrEntryLookupExtGetIndex_5:
   \   0000D1   02....       LJMP    ??ZDSecMgrEntryLookupExtGetIndex_1 & 0xFFFF
    573              }
    574            }
    575          
    576            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupExtGetIndex_0:
   \   0000D4   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupExtGetIndex_4:
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   7F06         MOV     R7,#0x6
   \   0000DD   02....       LJMP    ?BANKED_LEAVE_XDATA
    577          }
    578          
    579          /******************************************************************************
    580           * @fn          ZDSecMgrEntryLookupAMIGetIndex
    581           *
    582           * @brief       Lookup entry using specified address index
    583           *
    584           * @param       ami   - [in] Address Manager index
    585           * @param       entryIndex - [out] valid index to the entry table
    586           *
    587           * @return      ZStatus_t
    588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    589          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupAMIGetIndex:
    590          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    591            uint16 index;
    592          
    593            // verify data is available
    594            if ( ZDSecMgrEntries != NULL )
   \   000005   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   6056         JZ      ??ZDSecMgrEntryLookupAMIGetIndex_0
    595            {
    596              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000011   7E00         MOV     R6,#0x0
   \   000013   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_1:
   \   000015   C3           CLR     C
   \   000016   EE           MOV     A,R6
   \   000017   9403         SUBB    A,#0x3
   \   000019   EF           MOV     A,R7
   \   00001A   9400         SUBB    A,#0x0
   \   00001C   5049         JNC     ??ZDSecMgrEntryLookupAMIGetIndex_0
    597              {
    598                if ( ZDSecMgrEntries[index].ami == ami )
   \   00001E   EE           MOV     A,R6
   \   00001F   F8           MOV     R0,A
   \   000020   EF           MOV     A,R7
   \   000021   F9           MOV     R1,A
   \   000022   E8           MOV     A,R0
   \   000023   75F005       MOV     B,#0x5
   \   000026   A4           MUL     AB
   \   000027   C8           XCH     A,R0
   \   000028   85F0..       MOV     ?V0,B
   \   00002B   75F000       MOV     B,#0x0
   \   00002E   A4           MUL     AB
   \   00002F   25..         ADD     A,?V0
   \   000031   F5..         MOV     ?V0,A
   \   000033   75F005       MOV     B,#0x5
   \   000036   E9           MOV     A,R1
   \   000037   A4           MUL     AB
   \   000038   25..         ADD     A,?V0
   \   00003A   F9           MOV     R1,A
   \   00003B   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   28           ADD     A,R0
   \   000040   F5..         MOV     ?V0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   39           ADDC    A,R1
   \   000045   85..82       MOV     DPL,?V0
   \   000048   F583         MOV     DPH,A
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6A           XRL     A,R2
   \   00004C   7003         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_2
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6B           XRL     A,R3
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_2:
   \   000051   700D         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_3
    599                {
    600                  // return successful results
    601                  *entryIndex = index;
   \   000053   8C82         MOV     DPL,R4
   \   000055   8D83         MOV     DPH,R5
   \   000057   EE           MOV     A,R6
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   EF           MOV     A,R7
   \   00005B   F0           MOVX    @DPTR,A
    602          
    603                  // break from loop
    604                  return ZSuccess;
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   8009         SJMP    ??ZDSecMgrEntryLookupAMIGetIndex_4
    605                }
    606              }
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_3:
   \   000060   0E           INC     R6
   \   000061   EE           MOV     A,R6
   \   000062   70B1         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_1
   \   000064   0F           INC     R7
   \   000065   80AE         SJMP    ??ZDSecMgrEntryLookupAMIGetIndex_1
    607            }
    608          
    609            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_0:
   \   000067   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_4:
   \   000069   7F01         MOV     R7,#0x1
   \   00006B   02....       LJMP    ?BANKED_LEAVE_XDATA
    610          }
    611          
    612          /******************************************************************************
    613           * @fn          ZDSecMgrEntryFree
    614           *
    615           * @brief       Free entry.
    616           *
    617           * @param       entry - [in] valid entry
    618           *
    619           * @return      ZStatus_t
    620           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    621          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrEntryFree:
    622          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    623            APSME_LinkKeyData_t   *pApsLinkKey = NULL;
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   75..00       MOV     ?V1,#0x0
    624          
    625          #if defined ( NV_RESTORE )
    626            ZStatus_t status;
    627            uint16 entryIndex;
    628          
    629            status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
    630          #endif
    631          
    632            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A18         MOV     R2,#0x18
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV     ?V2,R2
   \   000018   8B..         MOV     ?V3,R3
   \   00001A   85....       MOV     ?V0,?V2
   \   00001D   85....       MOV     ?V1,?V3
    633          
    634            if (pApsLinkKey != NULL)
   \   000020   E5..         MOV     A,?V0
   \   000022   45..         ORL     A,?V1
   \   000024   6049         JZ      ??ZDSecMgrEntryFree_0
    635            {
    636              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C18         MOV     R4,#0x18
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   AA..         MOV     R2,?V0
   \   00002E   AB..         MOV     R3,?V1
   \   000030   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    637          
    638              // Clear the APS Link key in NV
    639              osal_nv_write( entry->keyNvId, 0,
    640                                  sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   000033                ; Setup parameters for call to function osal_nv_write
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   75..18       MOV     ?V2,#0x18
   \   00003B   75..00       MOV     ?V3,#0x0
   \   00003E   78..         MOV     R0,#?V2
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C00         MOV     R4,#0x0
   \   000045   7D00         MOV     R5,#0x0
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FA           MOV     R2,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   E9           MOV     A,R1
    641          
    642              // set entry to invalid Key
    643              entry->keyNvId = SEC_NO_KEY_NV_ID;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   7400         MOV     A,#0x0
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   7400         MOV     A,#0x0
   \   000067   F0           MOVX    @DPTR,A
    644          
    645              osal_mem_free(pApsLinkKey);
   \   000068                ; Setup parameters for call to function osal_mem_free
   \   000068   AA..         MOV     R2,?V0
   \   00006A   AB..         MOV     R3,?V1
   \   00006C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    646            }
    647          
    648            // marking the entry as INVALID_NODE_ADDR
    649            entry->ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryFree_0:
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   74FE         MOV     A,#-0x2
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   74FF         MOV     A,#-0x1
   \   000079   F0           MOVX    @DPTR,A
    650          
    651            // set to default value
    652            entry->authenticateOption = ZDSecMgr_Not_Authenticated;
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   7400         MOV     A,#0x0
   \   000084   F0           MOVX    @DPTR,A
    653          
    654          #if defined ( NV_RESTORE )
    655            if ( status == ZSuccess )
    656            {
    657              ZDSecMgrUpdateNV(entryIndex);
    658            }
    659          #endif
    660          }
   \   000085   7F04         MOV     R7,#0x4
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    661          
    662          /******************************************************************************
    663           * @fn          ZDSecMgrEntryNew
    664           *
    665           * @brief       Get a new entry.
    666           *
    667           * @param       entry - [out] valid entry
    668           *
    669           * @return      ZStatus_t
    670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryNew:
    672          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FC           MOV     R4,A
   \   000007   EB           MOV     A,R3
   \   000008   FD           MOV     R5,A
    673            uint16 index;
    674          
    675            // initialize results
    676            *entry = NULL;
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   7400         MOV     A,#0x0
   \   000013   F0           MOVX    @DPTR,A
    677          
    678            // verify data is available
    679            if ( ZDSecMgrEntries != NULL )
   \   000014   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??ZDSecMgrEntryNew_0 & 0xFFFF
    680            {
    681              // find available entry
    682              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \                     ??ZDSecMgrEntryNew_1:
   \   000027   C3           CLR     C
   \   000028   EA           MOV     A,R2
   \   000029   9403         SUBB    A,#0x3
   \   00002B   EB           MOV     A,R3
   \   00002C   9400         SUBB    A,#0x0
   \   00002E   4003         JC      $+5
   \   000030   02....       LJMP    ??ZDSecMgrEntryNew_0 & 0xFFFF
    683              {
    684                if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \   000033   EA           MOV     A,R2
   \   000034   F8           MOV     R0,A
   \   000035   EB           MOV     A,R3
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   75F005       MOV     B,#0x5
   \   00003B   A4           MUL     AB
   \   00003C   C8           XCH     A,R0
   \   00003D   AEF0         MOV     R6,B
   \   00003F   75F000       MOV     B,#0x0
   \   000042   A4           MUL     AB
   \   000043   2E           ADD     A,R6
   \   000044   FE           MOV     R6,A
   \   000045   75F005       MOV     B,#0x5
   \   000048   E9           MOV     A,R1
   \   000049   A4           MUL     AB
   \   00004A   2E           ADD     A,R6
   \   00004B   F9           MOV     R1,A
   \   00004C   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   28           ADD     A,R0
   \   000051   FE           MOV     R6,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   39           ADDC    A,R1
   \   000055   8E82         MOV     DPL,R6
   \   000057   F583         MOV     DPH,A
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   64FE         XRL     A,#0xfe
   \   00005C   7004         JNZ     ??ZDSecMgrEntryNew_2
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   64FF         XRL     A,#0xff
   \                     ??ZDSecMgrEntryNew_2:
   \   000062   705D         JNZ     ??ZDSecMgrEntryNew_3
    685                {
    686                  // return successful result
    687                  *entry = &ZDSecMgrEntries[index];
   \   000064   EA           MOV     A,R2
   \   000065   F8           MOV     R0,A
   \   000066   EB           MOV     A,R3
   \   000067   F9           MOV     R1,A
   \   000068   E8           MOV     A,R0
   \   000069   75F005       MOV     B,#0x5
   \   00006C   A4           MUL     AB
   \   00006D   C8           XCH     A,R0
   \   00006E   AEF0         MOV     R6,B
   \   000070   75F000       MOV     B,#0x0
   \   000073   A4           MUL     AB
   \   000074   2E           ADD     A,R6
   \   000075   FE           MOV     R6,A
   \   000076   75F005       MOV     B,#0x5
   \   000079   E9           MOV     A,R1
   \   00007A   A4           MUL     AB
   \   00007B   2E           ADD     A,R6
   \   00007C   F9           MOV     R1,A
   \   00007D   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000080   E0           MOVX    A,@DPTR
   \   000081   28           ADD     A,R0
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   39           ADDC    A,R1
   \   000086   F9           MOV     R1,A
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
   \   00008B   E8           MOV     A,R0
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   E9           MOV     A,R1
   \   00008F   F0           MOVX    @DPTR,A
    688          
    689                  // Set the authentication option to default
    690                  ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
   \   000090   EA           MOV     A,R2
   \   000091   F8           MOV     R0,A
   \   000092   EB           MOV     A,R3
   \   000093   F9           MOV     R1,A
   \   000094   E8           MOV     A,R0
   \   000095   75F005       MOV     B,#0x5
   \   000098   A4           MUL     AB
   \   000099   C8           XCH     A,R0
   \   00009A   AEF0         MOV     R6,B
   \   00009C   75F000       MOV     B,#0x0
   \   00009F   A4           MUL     AB
   \   0000A0   2E           ADD     A,R6
   \   0000A1   FE           MOV     R6,A
   \   0000A2   75F005       MOV     B,#0x5
   \   0000A5   E9           MOV     A,R1
   \   0000A6   A4           MUL     AB
   \   0000A7   2E           ADD     A,R6
   \   0000A8   F9           MOV     R1,A
   \   0000A9   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   28           ADD     A,R0
   \   0000AE   FE           MOV     R6,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   39           ADDC    A,R1
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   7400         MOV     A,#0x0
   \   0000BC   F0           MOVX    @DPTR,A
    691          
    692                  // break from loop
    693                  return ZSuccess;
   \   0000BD   7900         MOV     R1,#0x0
   \   0000BF   800A         SJMP    ??ZDSecMgrEntryNew_4
    694                }
    695              }
   \                     ??ZDSecMgrEntryNew_3:
   \   0000C1   0A           INC     R2
   \   0000C2   EA           MOV     A,R2
   \   0000C3   7001         JNZ     ??ZDSecMgrEntryNew_5
   \   0000C5   0B           INC     R3
   \                     ??ZDSecMgrEntryNew_5:
   \   0000C6   02....       LJMP    ??ZDSecMgrEntryNew_1 & 0xFFFF
    696            }
    697          
    698            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryNew_0:
   \   0000C9   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryNew_4:
   \   0000CB   7F01         MOV     R7,#0x1
   \   0000CD   02....       LJMP    ?BANKED_LEAVE_XDATA
    699          }
    700          
    701          /******************************************************************************
    702           * @fn          ZDSecMgrAppKeyGet
    703           *
    704           * @brief       get an APP key - option APP(MASTER or LINK) key
    705           *
    706           * @param       initNwkAddr - [in] NWK address of initiator device
    707           * @param       initExtAddr - [in] EXT address of initiator device
    708           * @param       partNwkAddr - [in] NWK address of partner device
    709           * @param       partExtAddr - [in] EXT address of partner device
    710           * @param       key         - [out] APP(MASTER or LINK) key
    711           * @param       keyType     - [out] APP(MASTER or LINK) key type
    712           *
    713           * @return      ZStatus_t
    714           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    715          uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
   \                     ZDSecMgrAppKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    716                                                           // to KEY_TYPE_APP_LINK since
    717                                                           // only specific requirement
    718                                                           // right now comes from SE profile
    719          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
   \                     ZDSecMgrAppKeyGet:
    721                                       uint8*  initExtAddr,
    722                                       uint16  partNwkAddr,
    723                                       uint8*  partExtAddr,
    724                                       uint8** key,
    725                                       uint8*  keyType )
    726          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   88..         MOV     ?V0,R0
   \   000019   89..         MOV     ?V1,R1
   \   00001B   7414         MOV     A,#0x14
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F8           MOV     R0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   88..         MOV     ?V4,R0
   \   000027   89..         MOV     ?V5,R1
    727            // Intentionally unreferenced parameters
    728            (void)initNwkAddr;
    729            (void)initExtAddr;
    730            (void)partNwkAddr;
    731            (void)partExtAddr;
    732          
    733            //---------------------------------------------------------------------------
    734            // note:
    735            // should use a robust mechanism to generate keys, for example
    736            // combine EXT addresses and call a hash function
    737            //---------------------------------------------------------------------------
    738            SSP_GetTrueRand( SEC_KEY_LEN, *key );
   \   000029                ; Setup parameters for call to function SSP_GetTrueRand
   \   000029   85..82       MOV     DPL,?V0
   \   00002C   85..83       MOV     DPH,?V1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FB           MOV     R3,A
   \   000034   7910         MOV     R1,#0x10
   \   000036   12....       LCALL   `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
    739          
    740            *keyType = ZDSecMgrAppKeyType;
   \   000039   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C0E0         PUSH    A
   \   00003F   85..82       MOV     DPL,?V4
   \   000042   85..83       MOV     DPH,?V5
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    741          
    742            return ZSuccess;
   \   000048   7900         MOV     R1,#0x0
   \   00004A   7F06         MOV     R7,#0x6
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA
    743          }
    744          
    745          /******************************************************************************
    746           * @fn          ZDSecMgrAppKeyReq
    747           *
    748           * @brief       Process request for APP key between two devices.
    749           *
    750           * @param       device - [in] ZDO_RequestKeyInd_t, request info
    751           *
    752           * @return      none
    753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    754          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrAppKeyReq:
    755          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV     A,#-0x27
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    756            APSME_TransportKeyReq_t req;
    757            uint8                   initExtAddr[Z_EXTADDR_LEN];
    758            uint16                  partNwkAddr;
    759            uint8                   key[SEC_KEY_LEN];
    760          
    761          
    762            // validate initiator and partner
    763            if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
    764                 ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
   \   00000E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   2405         ADD     A,#0x5
   \   000015   FA           MOV     R2,A
   \   000016   E4           CLR     A
   \   000017   3F           ADDC    A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00001C   E9           MOV     A,R1
   \   00001D   6401         XRL     A,#0x1
   \   00001F   6003         JZ      $+5
   \   000021   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   \   000024                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000024   740F         MOV     A,#0xf
   \   000026   12....       LCALL   ?XSTACK_DISP102_8
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000037   E9           MOV     A,R1
   \   000038   6401         XRL     A,#0x1
   \   00003A   6003         JZ      $+5
   \   00003C   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
    765            {
    766              // point the key to some memory
    767              req.key = key;
   \   00003F   7417         MOV     A,#0x17
   \   000041   12....       LCALL   ?XSTACK_DISP100_8
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
    768          
    769              // get an APP key - option APP (MASTER or LINK) key
    770              if ( ZDSecMgrAppKeyGet( ind->srcAddr,
    771                                      initExtAddr,
    772                                      partNwkAddr,
    773                                      ind->partExtAddr,
    774                                      &req.key,
    775                                      &req.keyType ) == ZSuccess )
   \   00004E                ; Setup parameters for call to function ZDSecMgrAppKeyGet
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   8582..       MOV     ?V0,DPL
   \   000056   8583..       MOV     ?V1,DPH
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   7408         MOV     A,#0x8
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   8582..       MOV     ?V0,DPL
   \   000066   8583..       MOV     ?V1,DPH
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   EE           MOV     A,R6
   \   00006F   2405         ADD     A,#0x5
   \   000071   F5..         MOV     ?V0,A
   \   000073   E4           CLR     A
   \   000074   3F           ADDC    A,R7
   \   000075   F5..         MOV     ?V1,A
   \   000077   78..         MOV     R0,#?V0
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   7406         MOV     A,#0x6
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000084   7417         MOV     A,#0x17
   \   000086   12....       LCALL   ?XSTACK_DISP102_8
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FA           MOV     R2,A
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   FB           MOV     R3,A
   \   000094   12....       LCALL   `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
   \   000097   7408         MOV     A,#0x8
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   E9           MOV     A,R1
   \   00009D   6003         JZ      $+5
   \   00009F   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
    776              {
    777                // always secure
    778                req.nwkSecure = TRUE;
   \   0000A2   740C         MOV     A,#0xc
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   F0           MOVX    @DPTR,A
    779                req.apsSecure = TRUE;
   \   0000AA   740B         MOV     A,#0xb
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   7401         MOV     A,#0x1
   \   0000B1   F0           MOVX    @DPTR,A
    780                req.tunnel    = NULL;
   \   0000B2   740D         MOV     A,#0xd
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   7400         MOV     A,#0x0
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   7400         MOV     A,#0x0
   \   0000BD   F0           MOVX    @DPTR,A
    781          
    782                // send key to initiator device
    783                req.dstAddr   = ind->srcAddr;
   \   0000BE   8E82         MOV     DPL,R6
   \   0000C0   8F83         MOV     DPH,R7
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9   7402         MOV     A,#0x2
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E8           MOV     A,R0
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E9           MOV     A,R1
   \   0000D2   F0           MOVX    @DPTR,A
    784                req.extAddr   = ind->partExtAddr;
   \   0000D3   EE           MOV     A,R6
   \   0000D4   2405         ADD     A,#0x5
   \   0000D6   F8           MOV     R0,A
   \   0000D7   E4           CLR     A
   \   0000D8   3F           ADDC    A,R7
   \   0000D9   F9           MOV     R1,A
   \   0000DA   7408         MOV     A,#0x8
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E8           MOV     A,R0
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E9           MOV     A,R1
   \   0000E3   F0           MOVX    @DPTR,A
    785                req.initiator = TRUE;
   \   0000E4   740A         MOV     A,#0xa
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   7401         MOV     A,#0x1
   \   0000EB   F0           MOVX    @DPTR,A
    786                APSME_TransportKeyReq( &req );
   \   0000EC                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000EC   7402         MOV     A,#0x2
   \   0000EE   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F1   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000F4   E9           MOV     A,R1
    787          
    788                // send key to partner device
    789                req.dstAddr   = partNwkAddr;
   \   0000F5   85..82       MOV     DPL,?XSP + 0
   \   0000F8   85..83       MOV     DPH,?XSP + 1
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   7402         MOV     A,#0x2
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E8           MOV     A,R0
   \   000106   F0           MOVX    @DPTR,A
   \   000107   A3           INC     DPTR
   \   000108   E9           MOV     A,R1
   \   000109   F0           MOVX    @DPTR,A
    790                req.extAddr   = initExtAddr;
   \   00010A   740F         MOV     A,#0xf
   \   00010C   12....       LCALL   ?XSTACK_DISP100_8
   \   00010F   7408         MOV     A,#0x8
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   E8           MOV     A,R0
   \   000115   F0           MOVX    @DPTR,A
   \   000116   A3           INC     DPTR
   \   000117   E9           MOV     A,R1
   \   000118   F0           MOVX    @DPTR,A
    791                req.initiator = FALSE;
   \   000119   740A         MOV     A,#0xa
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   7400         MOV     A,#0x0
   \   000120   F0           MOVX    @DPTR,A
    792          
    793                APSME_TransportKeyReq( &req );
   \   000121                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000121   7402         MOV     A,#0x2
   \   000123   12....       LCALL   ?XSTACK_DISP101_8
   \   000126   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   000129   E9           MOV     A,R1
    794          
    795                // clear copy of key in RAM
    796                osal_memset( key, 0x00, SEC_KEY_LEN);
   \   00012A                ; Setup parameters for call to function osal_memset
   \   00012A   7C10         MOV     R4,#0x10
   \   00012C   7D00         MOV     R5,#0x0
   \   00012E   7900         MOV     R1,#0x0
   \   000130   7417         MOV     A,#0x17
   \   000132   12....       LCALL   ?XSTACK_DISP101_8
   \   000135   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    797          
    798              }
    799            }
    800          }
   \                     ??ZDSecMgrAppKeyReq_0:
   \   000138   7427         MOV     A,#0x27
   \   00013A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013D   7F02         MOV     R7,#0x2
   \   00013F   02....       LJMP    ?BANKED_LEAVE_XDATA
    801          
    802          /******************************************************************************
    803           * @fn          ZDSecMgrSendNwkKey
    804           *
    805           * @brief       Send NWK key to device joining network.
    806           *
    807           * @param       device - [in] ZDSecMgrDevice_t, device info
    808           *
    809           * @return      ZStatus_t
    810           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    811          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendNwkKey:
    812          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    813            ZStatus_t status;
    814            APSME_TransportKeyReq_t req;
    815            APSDE_FrameTunnel_t tunnel;
    816            nwkKeyDesc tmpKey;
    817          
    818            req.dstAddr   = device->nwkAddr;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   E8           MOV     A,R0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   E9           MOV     A,R1
   \   000021   F0           MOVX    @DPTR,A
    819            req.extAddr   = device->extAddr;
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   7406         MOV     A,#0x6
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E8           MOV     A,R0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   E9           MOV     A,R1
   \   000036   F0           MOVX    @DPTR,A
    820          
    821            req.keyType   = KEY_TYPE_NWK;
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   7401         MOV     A,#0x1
   \   00003E   F0           MOVX    @DPTR,A
    822          
    823            // get the Active Key into a local variable
    824            if ( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
    825                                     ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
   \   00003F                ; Setup parameters for call to function NLME_ReadNwkKeyInfo
   \   00003F   75..3A       MOV     ?V2,#0x3a
   \   000042   75..00       MOV     ?V3,#0x0
   \   000045   78..         MOV     R0,#?V2
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   740F         MOV     A,#0xf
   \   00004C   12....       LCALL   ?XSTACK_DISP100_8
   \   00004F   88..         MOV     ?V2,R0
   \   000051   89..         MOV     ?V3,R1
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   7C11         MOV     R4,#0x11
   \   00005A   7D00         MOV     R5,#0x0
   \   00005C   7A00         MOV     R2,#0x0
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   12....       LCALL   `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
   \   000063   7404         MOV     A,#0x4
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
   \   000068   E9           MOV     A,R1
   \   000069   600E         JZ      ??ZDSecMgrSendNwkKey_0
    826            {
    827              // set key data to all 0s if NV read fails
    828              osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
   \   00006B                ; Setup parameters for call to function osal_memset
   \   00006B   7C11         MOV     R4,#0x11
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   7900         MOV     R1,#0x0
   \   000071   740D         MOV     A,#0xd
   \   000073   12....       LCALL   ?XSTACK_DISP101_8
   \   000076   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    829            }
    830          
    831            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    832            {
    833              // set values
    834              req.keySeqNum = tmpKey.keySeqNum;
    835              req.key       = tmpKey.key;
    836          
    837              //devtag.pro.security.todo - make sure that if there is no link key the NWK
    838              //key isn't used to secure the frame at the APS layer -- since the receiving
    839              //device may not have a NWK key yet
    840              req.apsSecure = TRUE;
    841          
    842              // check if using secure hop to parent
    843              if ( device->parentAddr == NLME_GetShortAddr() )
    844              {
    845                req.nwkSecure = FALSE;
    846                req.tunnel    = NULL;
    847              }
    848              else
    849              {
    850                req.nwkSecure   = TRUE;
    851                req.tunnel      = &tunnel;
    852                req.tunnel->tna = device->parentAddr;
    853                req.tunnel->dea = device->extAddr;
    854              }
    855            }
    856            else
    857            {
    858              // default values
    859              //devtag.0604.verify
    860              req.nwkSecure = TRUE;
   \                     ??ZDSecMgrSendNwkKey_0:
   \   000079   740A         MOV     A,#0xa
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   7401         MOV     A,#0x1
   \   000080   F0           MOVX    @DPTR,A
    861              req.apsSecure = FALSE;
   \   000081   7409         MOV     A,#0x9
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   7400         MOV     A,#0x0
   \   000088   F0           MOVX    @DPTR,A
    862              req.tunnel    = NULL;
   \   000089   740B         MOV     A,#0xb
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   7400         MOV     A,#0x0
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   7400         MOV     A,#0x0
   \   000094   F0           MOVX    @DPTR,A
    863          
    864              if ( device->parentAddr != NLME_GetShortAddr() )
   \   000095                ; Setup parameters for call to function NLME_GetShortAddr
   \   000095   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000098   8A..         MOV     ?V2,R2
   \   00009A   8B..         MOV     ?V3,R3
   \   00009C   A8..         MOV     R0,?V2
   \   00009E   A9..         MOV     R1,?V3
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   68           XRL     A,R0
   \   0000AA   7003         JNZ     ??ZDSecMgrSendNwkKey_1
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   69           XRL     A,R1
   \                     ??ZDSecMgrSendNwkKey_1:
   \   0000AF   6018         JZ      ??ZDSecMgrSendNwkKey_2
    865              {
    866                req.dstAddr = device->parentAddr;
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F8           MOV     R0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   85..82       MOV     DPL,?XSP + 0
   \   0000C1   85..83       MOV     DPH,?XSP + 1
   \   0000C4   E8           MOV     A,R0
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E9           MOV     A,R1
   \   0000C8   F0           MOVX    @DPTR,A
    867              }
    868          
    869              // send the real key
    870              if ( zgPreConfigKeys == FALSE )
   \                     ??ZDSecMgrSendNwkKey_2:
   \   0000C9   90....       MOV     DPTR,#zgPreConfigKeys
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   7049         JNZ     ??ZDSecMgrSendNwkKey_3
    871              {
    872                req.keySeqNum = tmpKey.keySeqNum;
   \   0000CF   740D         MOV     A,#0xd
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   C0E0         PUSH    A
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   D0E0         POP     A
   \   0000DE   F0           MOVX    @DPTR,A
    873                req.key       = tmpKey.key;
   \   0000DF   740E         MOV     A,#0xe
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   A882         MOV     R0,DPL
   \   0000E6   A983         MOV     R1,DPH
   \   0000E8   7404         MOV     A,#0x4
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E8           MOV     A,R0
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E9           MOV     A,R1
   \   0000F1   F0           MOVX    @DPTR,A
    874          
    875                // check if using secure hop to to parent
    876                if ( device->parentAddr == NLME_GetShortAddr() )
   \   0000F2                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000F2   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000F5   8A..         MOV     ?V2,R2
   \   0000F7   8B..         MOV     ?V3,R3
   \   0000F9   A8..         MOV     R0,?V2
   \   0000FB   A9..         MOV     R1,?V3
   \   0000FD   8E82         MOV     DPL,R6
   \   0000FF   8F83         MOV     DPH,R7
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   68           XRL     A,R0
   \   000107   7003         JNZ     ??ZDSecMgrSendNwkKey_4
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   69           XRL     A,R1
   \                     ??ZDSecMgrSendNwkKey_4:
   \   00010C   701E         JNZ     ??ZDSecMgrSendNwkKey_5
    877                {
    878                  req.nwkSecure = FALSE;
   \   00010E   740A         MOV     A,#0xa
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   7400         MOV     A,#0x0
   \   000115   F0           MOVX    @DPTR,A
   \   000116   8014         SJMP    ??ZDSecMgrSendNwkKey_5
    879                }
    880              }
    881              else
    882              {
    883                // this is to send the all zero key when the NWK key has been preconfigured
    884                req.key       = NULL;
   \                     ??ZDSecMgrSendNwkKey_3:
   \   000118   7404         MOV     A,#0x4
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   7400         MOV     A,#0x0
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   7400         MOV     A,#0x0
   \   000123   F0           MOVX    @DPTR,A
    885                req.keySeqNum = 0;
   \   000124   7403         MOV     A,#0x3
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   7400         MOV     A,#0x0
   \   00012B   F0           MOVX    @DPTR,A
    886              }
    887            }
    888          
    889            status = APSME_TransportKeyReq( &req );
   \                     ??ZDSecMgrSendNwkKey_5:
   \   00012C                ; Setup parameters for call to function APSME_TransportKeyReq
   \   00012C   AA..         MOV     R2,?XSP + 0
   \   00012E   AB..         MOV     R3,?XSP + 1
   \   000130   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   000133   E9           MOV     A,R1
   \   000134   F5..         MOV     ?V0,A
    890          
    891            // clear copy of key in RAM before return
    892            osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
   \   000136                ; Setup parameters for call to function osal_memset
   \   000136   7C11         MOV     R4,#0x11
   \   000138   7D00         MOV     R5,#0x0
   \   00013A   7900         MOV     R1,#0x0
   \   00013C   740D         MOV     A,#0xd
   \   00013E   12....       LCALL   ?XSTACK_DISP101_8
   \   000141   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    893          
    894            return status;
   \   000144   A9..         MOV     R1,?V0
   \   000146   741E         MOV     A,#0x1e
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014B   7F04         MOV     R7,#0x4
   \   00014D   02....       LJMP    ?BANKED_LEAVE_XDATA
    895          }
    896          
    897          /******************************************************************************
    898           * @fn          ZDSecMgrDeviceRemoveByExtAddr
    899           *
    900           * @brief       Remove device entry by its ext address.
    901           *
    902           * @param       pAddr - pointer to the extended address
    903           *
    904           * @return      ZStatus_t
    905           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    906          ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
   \                     ZDSecMgrDeviceRemoveByExtAddr:
    907          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    908            ZDSecMgrEntry_t *pEntry;
    909            uint8           retValue;
    910          
    911            retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000019   E9           MOV     A,R1
   \   00001A   F5..         MOV     ?V0,A
    912          
    913            if( retValue == ZSuccess )
   \   00001C   E5..         MOV     A,?V0
   \   00001E   700E         JNZ     ??ZDSecMgrDeviceRemoveByExtAddr_0
    914            {
    915              // remove device from entry data
    916              ZDSecMgrEntryFree( pEntry );
   \   000020                ; Setup parameters for call to function ZDSecMgrEntryFree
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
    917            }
    918          
    919            return retValue;
   \                     ??ZDSecMgrDeviceRemoveByExtAddr_0:
   \   00002E   A9..         MOV     R1,?V0
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   \   000035   7F01         MOV     R7,#0x1
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA
    920          }
    921          
    922          /******************************************************************************
    923           * @fn          ZDSecMgrDeviceRemove
    924           *
    925           * @brief       Remove device from network.
    926           *
    927           * @param       device - [in] ZDSecMgrDevice_t, device info
    928           *
    929           * @return      none
    930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    931          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceRemove:
    932          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    933            APSME_RemoveDeviceReq_t remDevReq;
    934            NLME_LeaveReq_t         leaveReq;
    935            associated_devices_t*   assoc;
    936          
    937            // check if parent, remove the device
    938            if ( device->parentAddr == NLME_GetShortAddr() )
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000011   8A..         MOV     ?V2,R2
   \   000013   8B..         MOV     ?V3,R3
   \   000015   A8..         MOV     R0,?V2
   \   000017   A9..         MOV     R1,?V3
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   68           XRL     A,R0
   \   000023   7003         JNZ     ??ZDSecMgrDeviceRemove_0
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   69           XRL     A,R1
   \                     ??ZDSecMgrDeviceRemove_0:
   \   000028   6003         JZ      $+5
   \   00002A   02....       LJMP    ??ZDSecMgrDeviceRemove_1 & 0xFFFF
    939            {
    940              // this is the parent of the device
    941              leaveReq.extAddr        = device->extAddr;
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   E8           MOV     A,R0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E9           MOV     A,R1
   \   000042   F0           MOVX    @DPTR,A
    942              leaveReq.removeChildren = FALSE;
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
    943              leaveReq.rejoin         = FALSE;
   \   00004B   7403         MOV     A,#0x3
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   7400         MOV     A,#0x0
   \   000052   F0           MOVX    @DPTR,A
    944          
    945              // find child association
    946              assoc = AssocGetWithExt( device->extAddr );
   \   000053                ; Setup parameters for call to function AssocGetWithExt
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FA           MOV     R2,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000061   8A..         MOV     ?V2,R2
   \   000063   8B..         MOV     ?V3,R3
   \   000065   85....       MOV     ?V0,?V2
   \   000068   85....       MOV     ?V1,?V3
    947          
    948              if ( ( assoc != NULL                            ) &&
    949                   ( assoc->nodeRelation >= CHILD_RFD         ) &&
    950                   ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
   \   00006B   E5..         MOV     A,?V0
   \   00006D   45..         ORL     A,?V1
   \   00006F   6049         JZ      ??ZDSecMgrDeviceRemove_2
   \   000071   85..82       MOV     DPL,?V0
   \   000074   85..83       MOV     DPH,?V1
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   603C         JZ      ??ZDSecMgrDeviceRemove_2
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   C3           CLR     C
   \   00008A   9405         SUBB    A,#0x5
   \   00008C   502C         JNC     ??ZDSecMgrDeviceRemove_2
    951              {
    952                // check if associated device is authenticated
    953                if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
   \   00008E   85..82       MOV     DPL,?V0
   \   000091   85..83       MOV     DPH,?V1
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00009C   500A         JNC     ??ZDSecMgrDeviceRemove_3
    954                {
    955                  leaveReq.silent = FALSE;
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   7400         MOV     A,#0x0
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   8008         SJMP    ??ZDSecMgrDeviceRemove_4
    956                }
    957                else
    958                {
    959                  leaveReq.silent = TRUE;
   \                     ??ZDSecMgrDeviceRemove_3:
   \   0000A8   7404         MOV     A,#0x4
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   7401         MOV     A,#0x1
   \   0000AF   F0           MOVX    @DPTR,A
    960                }
    961          
    962                NLME_LeaveReq( &leaveReq );
   \                     ??ZDSecMgrDeviceRemove_4:
   \   0000B0                ; Setup parameters for call to function NLME_LeaveReq
   \   0000B0   AA..         MOV     R2,?XSP + 0
   \   0000B2   AB..         MOV     R3,?XSP + 1
   \   0000B4   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000B7   E9           MOV     A,R1
   \   0000B8   8074         SJMP    ??ZDSecMgrDeviceRemove_5
    963              }
    964              else if ( device->nwkAddr == NLME_GetShortAddr() )
   \                     ??ZDSecMgrDeviceRemove_2:
   \   0000BA                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000BA   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000BD   8A..         MOV     ?V2,R2
   \   0000BF   8B..         MOV     ?V3,R3
   \   0000C1   A8..         MOV     R0,?V2
   \   0000C3   A9..         MOV     R1,?V3
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   68           XRL     A,R0
   \   0000CB   7003         JNZ     ??ZDSecMgrDeviceRemove_6
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   69           XRL     A,R1
   \                     ??ZDSecMgrDeviceRemove_6:
   \   0000D0   705C         JNZ     ??ZDSecMgrDeviceRemove_5
    965              {
    966                // this is when ZC wants that ZR removes itself from the network
    967                leaveReq.extAddr = NULL;
   \   0000D2   85..82       MOV     DPL,?XSP + 0
   \   0000D5   85..83       MOV     DPH,?XSP + 1
   \   0000D8   7400         MOV     A,#0x0
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   7400         MOV     A,#0x0
   \   0000DE   F0           MOVX    @DPTR,A
    968                leaveReq.silent = FALSE;
   \   0000DF   7404         MOV     A,#0x4
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   7400         MOV     A,#0x0
   \   0000E6   F0           MOVX    @DPTR,A
    969          
    970                NLME_LeaveReq( &leaveReq );
   \   0000E7                ; Setup parameters for call to function NLME_LeaveReq
   \   0000E7   AA..         MOV     R2,?XSP + 0
   \   0000E9   AB..         MOV     R3,?XSP + 1
   \   0000EB   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000EE   E9           MOV     A,R1
   \   0000EF   803D         SJMP    ??ZDSecMgrDeviceRemove_5
    971              }
    972            }
    973            else
    974            {
    975              // this is not the parent of the device
    976              remDevReq.parentAddr   = device->parentAddr;
   \                     ??ZDSecMgrDeviceRemove_1:
   \   0000F1   8E82         MOV     DPL,R6
   \   0000F3   8F83         MOV     DPH,R7
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F8           MOV     R0,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F9           MOV     R1,A
   \   0000FE   7405         MOV     A,#0x5
   \   000100   12....       LCALL   ?XSTACK_DISP0_8
   \   000103   E8           MOV     A,R0
   \   000104   F0           MOVX    @DPTR,A
   \   000105   A3           INC     DPTR
   \   000106   E9           MOV     A,R1
   \   000107   F0           MOVX    @DPTR,A
    977              remDevReq.childExtAddr = device->extAddr;
   \   000108   8E82         MOV     DPL,R6
   \   00010A   8F83         MOV     DPH,R7
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F8           MOV     R0,A
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F9           MOV     R1,A
   \   000113   7407         MOV     A,#0x7
   \   000115   12....       LCALL   ?XSTACK_DISP0_8
   \   000118   E8           MOV     A,R0
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   A3           INC     DPTR
   \   00011B   E9           MOV     A,R1
   \   00011C   F0           MOVX    @DPTR,A
    978          
    979          #if defined ( APP_TP2_TEST_MODE )
    980              if ( guTxApsSecON == TRUE )
    981              {
    982                remDevReq.apsSecure = TRUE;
    983              }
    984              else
    985              {
    986                remDevReq.apsSecure = FALSE;
    987              }
    988          
    989              APSME_RemoveDeviceReq( &remDevReq );
    990          
    991          #else
    992              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    993              {
    994                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice, one
    995                // APS un-encrypted and one APS encrypted, to make sure that it can interoperate
    996                // with legacy Coordinator devices which can only handle one or the other.
    997                if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
    998                {
    999                  remDevReq.apsSecure = FALSE;
   1000          
   1001                  APSME_RemoveDeviceReq( &remDevReq );
   1002                }
   1003          
   1004                remDevReq.apsSecure = TRUE;
   1005          
   1006                APSME_RemoveDeviceReq( &remDevReq );
   1007              }
   1008              else
   1009              {
   1010                remDevReq.apsSecure = FALSE;
   \   00011D   7409         MOV     A,#0x9
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   7400         MOV     A,#0x0
   \   000124   F0           MOVX    @DPTR,A
   1011          
   1012                APSME_RemoveDeviceReq( &remDevReq );
   \   000125                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   000125   7405         MOV     A,#0x5
   \   000127   12....       LCALL   ?XSTACK_DISP101_8
   \   00012A   12....       LCALL   `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   \   00012D   E9           MOV     A,R1
   1013              }
   1014          #endif
   1015            }
   1016          }
   \                     ??ZDSecMgrDeviceRemove_5:
   \   00012E   740A         MOV     A,#0xa
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   7F04         MOV     R7,#0x4
   \   000135   02....       LJMP    ?BANKED_LEAVE_XDATA
   1017          
   1018          /******************************************************************************
   1019           * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
   1020           *
   1021           * @brief       Decide whether device is allowed.
   1022           *
   1023           * @param       device - [in] ZDSecMgrDevice_t, device info
   1024           *
   1025           * @return      ZStatus_t
   1026           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1027          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateRM:
   1028          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1029            ZStatus_t status;
   1030          
   1031            status = ZSuccess;
   \   000004   7900         MOV     R1,#0x0
   1032          
   1033            (void)device;  // Intentionally unreferenced parameter
   1034          
   1035            // For test purpose, turning off the zgSecurePermitJoin flag will force
   1036            // the trust center to reject any newly joining devices by sending
   1037            // Remove-device to the parents.
   1038            if ( zgSecurePermitJoin == FALSE )
   \   000006   90....       MOV     DPTR,#zgSecurePermitJoin
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   7002         JNZ     ??ZDSecMgrDeviceValidateRM_0
   1039            {
   1040              status = ZNwkUnknownDevice;
   \   00000C   79C8         MOV     R1,#-0x38
   1041            }
   1042          
   1043          
   1044          
   1045          #if 0  // Taken out because the following functionality is only used for test
   1046                 // purpose. A more efficient (above) way is used. It can be put
   1047                 // back in if customers request for a white/black list feature.
   1048                 // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
   1049          
   1050            // The following code processes the device black list (stored device list)
   1051            // If the joining device is not part of the forbidden device list
   1052            // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
   1053            // will send Remove-device and ban the device from joining.
   1054          
   1055            uint8     index;
   1056            uint8*    restricted;
   1057          
   1058            // Look through the stored device list - used for restricted devices
   1059            for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
   1060            {
   1061              restricted = ZDSecMgrStoredDeviceList[index];
   1062          
   1063              if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
   1064              {
   1065                // return as unknown device in regards to validation
   1066                status = ZNwkUnknownDevice;
   1067          
   1068                // break from loop
   1069                index = ZDSECMGR_STORED_DEVICES;
   1070              }
   1071            }
   1072          
   1073          #endif
   1074          
   1075            return status;
   \                     ??ZDSecMgrDeviceValidateRM_0:
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   1076          }
   1077          
   1078          /******************************************************************************
   1079           * @fn          ZDSecMgrDeviceValidate
   1080           *
   1081           * @brief       Decide whether device is allowed.
   1082           *
   1083           * @param       device - [in] ZDSecMgrDevice_t, device info
   1084           *
   1085           * @return      ZStatus_t
   1086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1087          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidate:
   1088          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1089            ZStatus_t status;
   1090          
   1091            if ( ZDSecMgrPermitJoiningEnabled == TRUE )
   \   000009   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6401         XRL     A,#0x1
   \   00000F   700C         JNZ     ??ZDSecMgrDeviceValidate_0
   1092            {
   1093              status = ZDSecMgrDeviceValidateRM( device );
   \   000011                ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
   \   000011   EE           MOV     A,R6
   \   000012   FA           MOV     R2,A
   \   000013   EF           MOV     A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
   \   000018   E9           MOV     A,R1
   \   000019   F5..         MOV     ?V0,A
   \   00001B   8003         SJMP    ??ZDSecMgrDeviceValidate_1
   1094            }
   1095            else
   1096            {
   1097              status = ZNwkUnknownDevice;
   \                     ??ZDSecMgrDeviceValidate_0:
   \   00001D   75..C8       MOV     ?V0,#-0x38
   1098            }
   1099          
   1100            return status;
   \                     ??ZDSecMgrDeviceValidate_1:
   \   000020   A9..         MOV     R1,?V0
   \   000022   7F01         MOV     R7,#0x1
   \   000024   02....       LJMP    ?BANKED_LEAVE_XDATA
   1101          }
   1102          
   1103          /******************************************************************************
   1104           * @fn          ZDSecMgrDeviceJoin
   1105           *
   1106           * @brief       Try to join this device.
   1107           *
   1108           * @param       device - [in] ZDSecMgrDevice_t, device info
   1109           *
   1110           * @return      ZStatus_t
   1111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1112          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoin:
   1113          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1114            ZStatus_t status = ZSuccess;
   \   00000E   75..00       MOV     ?V0,#0x0
   1115            uint16    ami;
   1116          
   1117            // attempt to validate device that joined/rejoined without security
   1118            if ( device->secure == FALSE )
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   700A         JNZ     ??ZDSecMgrDeviceJoin_0
   1119            {
   1120              status = ZDSecMgrDeviceValidate( device );
   \   00001E                ; Setup parameters for call to function ZDSecMgrDeviceValidate
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
   \   000025   E9           MOV     A,R1
   \   000026   F5..         MOV     ?V0,A
   1121            }
   1122          
   1123            if ( status == ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_0:
   \   000028   E5..         MOV     A,?V0
   \   00002A   7064         JNZ     ??ZDSecMgrDeviceJoin_1
   1124            {
   1125              // Add the device to the address manager
   1126              ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \   00002C                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00002C   A8..         MOV     R0,?XSP + 0
   \   00002E   A9..         MOV     R1,?XSP + 1
   \   000030   88..         MOV     ?V2,R0
   \   000032   89..         MOV     ?V3,R1
   \   000034   78..         MOV     R0,#?V2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FC           MOV     R4,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FD           MOV     R5,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FB           MOV     R3,A
   \   00004D   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000050   7402         MOV     A,#0x2
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   E9           MOV     A,R1
   1127          
   1128              // Only send the key to devices that have not been authenticated
   1129              if ( ( device->devStatus & DEV_SEC_INIT_STATUS ) &&
   1130                   ( device->secure == FALSE ) )
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   A2E2         MOV     C,0xE0 /* A   */.2
   \   000064   5017         JNC     ??ZDSecMgrDeviceJoin_2
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   700A         JNZ     ??ZDSecMgrDeviceJoin_2
   1131              {
   1132                //send the nwk key data to the joining device
   1133                status = ZDSecMgrSendNwkKey( device );
   \   000073                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
   \   00007A   E9           MOV     A,R1
   \   00007B   F5..         MOV     ?V0,A
   1134              }
   1135          
   1136              if ( status != ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_2:
   \   00007D   E5..         MOV     A,?V0
   \   00007F   600F         JZ      ??ZDSecMgrDeviceJoin_1
   1137              {
   1138                ZDSecMgrAddrClear( device->extAddr );
   \   000081                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FA           MOV     R2,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   00008F   E9           MOV     A,R1
   1139              }
   1140            }
   1141          
   1142            if ( status != ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_1:
   \   000090   E5..         MOV     A,?V0
   \   000092   6009         JZ      ??ZDSecMgrDeviceJoin_3
   1143            {
   1144              // not allowed or transport key failed, remove the device
   1145              ZDSecMgrDeviceRemove( device );
   \   000094                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000094   EE           MOV     A,R6
   \   000095   FA           MOV     R2,A
   \   000096   EF           MOV     A,R7
   \   000097   FB           MOV     R3,A
   \   000098   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   \   00009B   8073         SJMP    ??ZDSecMgrDeviceJoin_4
   1146            }
   1147            else
   1148            {
   1149              // Pass the Trust Center Device Indication to higher layer if callback registered
   1150              if (zdoCBFunc[ZDO_TC_DEVICE_CBID] != NULL )
   \                     ??ZDSecMgrDeviceJoin_3:
   \   00009D   90....       MOV     DPTR,#zdoCBFunc + 16
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F8           MOV     R0,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F9           MOV     R1,A
   \   0000A5   E8           MOV     A,R0
   \   0000A6   49           ORL     A,R1
   \   0000A7   6067         JZ      ??ZDSecMgrDeviceJoin_4
   1151              {
   1152                ZDO_TC_Device_t dev;
   1153          
   1154                dev.nwkAddr = device->nwkAddr;
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F8           MOV     R0,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   E8           MOV     A,R0
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E9           MOV     A,R1
   \   0000BB   F0           MOVX    @DPTR,A
   1155                osal_memcpy( dev.extAddr, device->extAddr, Z_EXTADDR_LEN );
   \   0000BC                ; Setup parameters for call to function osal_memcpy
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F5..         MOV     ?V4,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F5..         MOV     ?V5,A
   \   0000C9   75..00       MOV     ?V6,#0x0
   \   0000CC   78..         MOV     R0,#?V4
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D1   7C08         MOV     R4,#0x8
   \   0000D3   7D00         MOV     R5,#0x0
   \   0000D5   7407         MOV     A,#0x7
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   AA82         MOV     R2,DPL
   \   0000DC   AB83         MOV     R3,DPH
   \   0000DE   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E1   7403         MOV     A,#0x3
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   1156                dev.parentAddr = device->parentAddr;
   \   0000E6   8E82         MOV     DPL,R6
   \   0000E8   8F83         MOV     DPH,R7
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F8           MOV     R0,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F9           MOV     R1,A
   \   0000F3   740C         MOV     A,#0xc
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   E8           MOV     A,R0
   \   0000F9   F0           MOVX    @DPTR,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E9           MOV     A,R1
   \   0000FC   F0           MOVX    @DPTR,A
   1157          
   1158                zdoCBFunc[ZDO_TC_DEVICE_CBID]( (void*)&dev );
   \   0000FD                ; Setup parameters for indirect call
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   12....       LCALL   ?XSTACK_DISP101_8
   \   000102   90....       MOV     DPTR,#zdoCBFunc + 16
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F8           MOV     R0,A
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F583         MOV     DPH,A
   \   00010B   8882         MOV     DPL,R0
   \   00010D   12....       LCALL   ?CALL_IND
   1159              }
   1160            }
   1161          
   1162            return status;
   \                     ??ZDSecMgrDeviceJoin_4:
   \   000110   A9..         MOV     R1,?V0
   \   000112   740E         MOV     A,#0xe
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
   \   000117   7F07         MOV     R7,#0x7
   \   000119   02....       LJMP    ?BANKED_LEAVE_XDATA
   1163          }
   1164          
   1165          /******************************************************************************
   1166           * @fn          ZDSecMgrDeviceJoinDirect
   1167           *
   1168           * @brief       Try to join this device as a direct child.
   1169           *
   1170           * @param       device - [in] ZDSecMgrDevice_t, device info
   1171           *
   1172           * @return      ZStatus_t
   1173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1174          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinDirect:
   1175          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1176            ZStatus_t status;
   1177          
   1178            status = ZDSecMgrDeviceJoin( device );
   \   000009                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   000010   E9           MOV     A,R1
   \   000011   F5..         MOV     ?V0,A
   1179          
   1180            if ( status == ZSuccess )
   \   000013   E5..         MOV     A,?V0
   \   000015   700F         JNZ     ??ZDSecMgrDeviceJoinDirect_0
   1181            {
   1182              // set association status to authenticated
   1183              ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \   000017                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000017                ; Setup parameters for call to function AssocGetWithShort
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FA           MOV     R2,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000023   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1184            }
   1185          
   1186            return status;
   \                     ??ZDSecMgrDeviceJoinDirect_0:
   \   000026   A9..         MOV     R1,?V0
   \   000028   7F01         MOV     R7,#0x1
   \   00002A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1187          }
   1188          
   1189          /******************************************************************************
   1190           * @fn          ZDSecMgrDeviceJoinFwd
   1191           *
   1192           * @brief       Forward join to Trust Center.
   1193           *
   1194           * @param       device - [in] ZDSecMgrDevice_t, device info
   1195           *
   1196           * @return      ZStatus_t
   1197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1198          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinFwd:
   1199          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1200            ZStatus_t               status;
   1201            APSME_UpdateDeviceReq_t req;
   1202          
   1203            // forward any joining device to the Trust Center -- the Trust Center will
   1204            // decide if the device is allowed to join
   1205            status = ZSuccess;
   \   00000E   75..00       MOV     ?V0,#0x0
   1206          
   1207            // forward authorization to the Trust Center
   1208            req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   7400         MOV     A,#0x0
   \   00001D   F0           MOVX    @DPTR,A
   1209            req.devAddr    = device->nwkAddr;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E8           MOV     A,R0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   E9           MOV     A,R1
   \   000030   F0           MOVX    @DPTR,A
   1210            req.devExtAddr = device->extAddr;
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E8           MOV     A,R0
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E9           MOV     A,R1
   \   000045   F0           MOVX    @DPTR,A
   1211          
   1212            // set security status, option for router to reject if policy set
   1213            if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   A2E7         MOV     C,0xE0 /* A   */.7
   \   000054   503D         JNC     ??ZDSecMgrDeviceJoinFwd_0
   1214            {
   1215              if ( device->devStatus & DEV_REJOIN_STATUS )
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   A2E6         MOV     C,0xE0 /* A   */.6
   \   000064   5023         JNC     ??ZDSecMgrDeviceJoinFwd_1
   1216              {
   1217                if ( device->secure == TRUE )
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   6401         XRL     A,#0x1
   \   000073   700A         JNZ     ??ZDSecMgrDeviceJoinFwd_2
   1218                {
   1219                  req.status = APSME_UD_HIGH_SECURED_REJOIN;
   \   000075   7406         MOV     A,#0x6
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   7404         MOV     A,#0x4
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   804F         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1220                }
   1221                else
   1222                {
   1223                  req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_2:
   \   00007F   7406         MOV     A,#0x6
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   7407         MOV     A,#0x7
   \   000086   F0           MOVX    @DPTR,A
   \   000087   8045         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1224                }
   1225              }
   1226              else
   1227              {
   1228                req.status = APSME_UD_HIGH_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_1:
   \   000089   7406         MOV     A,#0x6
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   7405         MOV     A,#0x5
   \   000090   F0           MOVX    @DPTR,A
   \   000091   803B         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1229              }
   1230            }
   1231            else
   1232            {
   1233              if ( device->devStatus & DEV_REJOIN_STATUS )
   \                     ??ZDSecMgrDeviceJoinFwd_0:
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   A2E6         MOV     C,0xE0 /* A   */.6
   \   0000A1   5023         JNC     ??ZDSecMgrDeviceJoinFwd_4
   1234              {
   1235                if ( device->secure == TRUE )
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   6401         XRL     A,#0x1
   \   0000B0   700A         JNZ     ??ZDSecMgrDeviceJoinFwd_5
   1236                {
   1237                  req.status = APSME_UD_STANDARD_SECURED_REJOIN;
   \   0000B2   7406         MOV     A,#0x6
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   7400         MOV     A,#0x0
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   8012         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1238                }
   1239                else
   1240                {
   1241                  req.status = APSME_UD_STANDARD_TRUST_CENTER_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_5:
   \   0000BC   7406         MOV     A,#0x6
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   8008         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1242                }
   1243              }
   1244              else
   1245              {
   1246                req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_4:
   \   0000C6   7406         MOV     A,#0x6
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   7401         MOV     A,#0x1
   \   0000CD   F0           MOVX    @DPTR,A
   1247              }
   1248            }
   1249          
   1250            // set association status to authenticated
   1251            ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \                     ??ZDSecMgrDeviceJoinFwd_3:
   \   0000CE                ; Setup parameters for call to function AssocGetWithShort
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   FB           MOV     R3,A
   \   0000D7   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   0000DA   8A..         MOV     ?V2,R2
   \   0000DC   8B..         MOV     ?V3,R3
   \   0000DE   AA..         MOV     R2,?V2
   \   0000E0   AB..         MOV     R3,?V3
   \   0000E2                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   0000E2   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1252          
   1253          #if defined ( APP_TP2_TEST_MODE )
   1254            if ( guTxApsSecON == TRUE )
   1255            {
   1256              req.apsSecure = TRUE;
   1257            }
   1258            else
   1259            {
   1260              req.apsSecure = FALSE;
   1261            }
   1262          
   1263            // send and APSME_UPDATE_DEVICE request to the trust center
   1264            status = APSME_UpdateDeviceReq( &req );
   1265          
   1266          #else
   1267            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1268            {
   1269              // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1270              // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1271              // with legacy Coordinator devices which can only handle one or the other.
   1272              if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   1273              {
   1274                req.apsSecure = FALSE;
   1275          
   1276                // send and APSME_UPDATE_DEVICE request to the trust center
   1277                status = APSME_UpdateDeviceReq( &req );
   1278              }
   1279          
   1280              // send the message APS encrypted
   1281              req.apsSecure = TRUE;
   1282          
   1283              // send and APSME_UPDATE_DEVICE request to the trust center
   1284              status = APSME_UpdateDeviceReq( &req );
   1285            }
   1286            else
   1287            {
   1288              req.apsSecure = FALSE;
   \   0000E5   7407         MOV     A,#0x7
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   7400         MOV     A,#0x0
   \   0000EC   F0           MOVX    @DPTR,A
   1289          
   1290              // send and APSME_UPDATE_DEVICE request to the trust center
   1291              status = APSME_UpdateDeviceReq( &req );
   \   0000ED                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000ED   AA..         MOV     R2,?XSP + 0
   \   0000EF   AB..         MOV     R3,?XSP + 1
   \   0000F1   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   0000F4   E9           MOV     A,R1
   \   0000F5   F5..         MOV     ?V0,A
   1292            }
   1293          #endif
   1294          
   1295            return status;
   \   0000F7   A9..         MOV     R1,?V0
   \   0000F9   7408         MOV     A,#0x8
   \   0000FB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FE   7F04         MOV     R7,#0x4
   \   000100   02....       LJMP    ?BANKED_LEAVE_XDATA
   1296          }
   1297          
   1298          /******************************************************************************
   1299           * @fn          ZDSecMgrDeviceNew
   1300           *
   1301           * @brief       Process a new device.
   1302           *
   1303           * @param       device - [in] ZDSecMgrDevice_t, device info
   1304           *
   1305           * @return      ZStatus_t
   1306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1307          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
   \                     ZDSecMgrDeviceNew:
   1308          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1309            ZStatus_t status;
   1310          
   1311            if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1312                || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   \   000009   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6006         JZ      ??ZDSecMgrDeviceNew_0
   \   00000F                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00000F   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000012   E9           MOV     A,R1
   \   000013   600C         JZ      ??ZDSecMgrDeviceNew_1
   1313            {
   1314              // try to join this device
   1315              status = ZDSecMgrDeviceJoinDirect( joiner );
   \                     ??ZDSecMgrDeviceNew_0:
   \   000015                ; Setup parameters for call to function ZDSecMgrDeviceJoinDirect
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??ZDSecMgrDeviceJoinDirect::?relay`; Banked call to: ZDSecMgrDeviceJoinDirect
   \   00001C   E9           MOV     A,R1
   \   00001D   F5..         MOV     ?V0,A
   \   00001F   800A         SJMP    ??ZDSecMgrDeviceNew_2
   1316            }
   1317            else
   1318            {
   1319              status = ZDSecMgrDeviceJoinFwd( joiner );
   \                     ??ZDSecMgrDeviceNew_1:
   \   000021                ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   `??ZDSecMgrDeviceJoinFwd::?relay`; Banked call to: ZDSecMgrDeviceJoinFwd
   \   000028   E9           MOV     A,R1
   \   000029   F5..         MOV     ?V0,A
   1320            }
   1321          
   1322            return status;
   \                     ??ZDSecMgrDeviceNew_2:
   \   00002B   A9..         MOV     R1,?V0
   \   00002D   7F01         MOV     R7,#0x1
   \   00002F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1323          }
   1324          
   1325          /******************************************************************************
   1326           * @fn          ZDSecMgrAssocDeviceAuth
   1327           *
   1328           * @brief       Set associated device status to authenticated
   1329           *
   1330           * @param       assoc - [in, out] associated_devices_t
   1331           *
   1332           * @return      none
   1333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1334          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
   \                     ZDSecMgrAssocDeviceAuth:
   1335          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1336            if ( assoc != NULL )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   600D         JZ      ??ZDSecMgrAssocDeviceAuth_0
   1337            {
   1338              assoc->devStatus |= DEV_SEC_AUTH_STATUS;
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   D2E3         SETB    0xE0 /* A   */.3
   \   000014   F0           MOVX    @DPTR,A
   1339            }
   1340          }
   \                     ??ZDSecMgrAssocDeviceAuth_0:
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
   1341          
   1342          /******************************************************************************
   1343           * @fn          ZDSecMgrAuthNwkKey
   1344           *
   1345           * @brief       Handle next step in authentication process
   1346           *
   1347           * @param       none
   1348           *
   1349           * @return      none
   1350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1351          void ZDSecMgrAuthNwkKey()
   \                     ZDSecMgrAuthNwkKey:
   1352          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1353            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   700D         JNZ     ??ZDSecMgrAuthNwkKey_0
   1354            {
   1355              // inform ZDO that device has been authenticated
   1356              osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A80         MOV     R2,#-0x80
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   90....       MOV     DPTR,#ZDAppTaskID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000018   E9           MOV     A,R1
   1357            }
   1358          }
   \                     ??ZDSecMgrAuthNwkKey_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
   1359          
   1360          /******************************************************************************
   1361           * PUBLIC FUNCTIONS
   1362           */
   1363          /******************************************************************************
   1364           * @fn          ZDSecMgrInit
   1365           *
   1366           * @brief       Initialize ZigBee Device Security Manager.
   1367           *
   1368           * @param       state - device initialization state
   1369           *
   1370           * @return      none
   1371           */
   1372          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1373          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
   1374          void ZDSecMgrAddrMgrCB( uint8           update,
   1375                                  AddrMgrEntry_t* newEntry,
   1376                                  AddrMgrEntry_t* oldEntry )
   1377          {
   1378            (void)update;
   1379            (void)newEntry;
   1380            (void)oldEntry;
   1381          }
   1382          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1383          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1384          void ZDSecMgrInit(uint8 state)
   \                     ZDSecMgrInit:
   1385          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1386            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1387            {
   1388              // initialize sub modules
   1389              ZDSecMgrEntryInit(state);
   1390          
   1391              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1392              {
   1393                APSME_SetRequest( apsTrustCenterAddress, 0, NLME_GetExtAddr() );
   1394              }
   1395          
   1396              // register with Address Manager
   1397          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1398              AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
   1399          #endif
   1400            }
   1401          
   1402            if ( ZG_SECURE_ENABLED )
   1403            {
   1404              if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1405                   || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   \   000007   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6006         JZ      ??ZDSecMgrInit_0
   \   00000D                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00000D   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000010   E9           MOV     A,R1
   \   000011   600C         JZ      ??ZDSecMgrInit_1
   1406              {
   1407                // setup joining permissions
   1408                ZDSecMgrPermitJoiningEnabled = TRUE;
   \                     ??ZDSecMgrInit_0:
   \   000013   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000016   7401         MOV     A,#0x1
   \   000018   F0           MOVX    @DPTR,A
   1409                ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000019   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   00001C   7400         MOV     A,#0x0
   \   00001E   F0           MOVX    @DPTR,A
   1410              }
   1411            }
   1412          
   1413            // configure security based on security mode and type of device
   1414            ZDSecMgrConfig();
   \                     ??ZDSecMgrInit_1:
   \   00001F                ; Setup parameters for call to function ZDSecMgrConfig
   \   00001F   12....       LCALL   `??ZDSecMgrConfig::?relay`; Banked call to: ZDSecMgrConfig
   1415          }
   \   000022   7F01         MOV     R7,#0x1
   \   000024   02....       LJMP    ?BANKED_LEAVE_XDATA
   1416          
   1417          /******************************************************************************
   1418           * @fn          ZDSecMgrConfig
   1419           *
   1420           * @brief       Configure ZigBee Device Security Manager.
   1421           *
   1422           * @param       none
   1423           *
   1424           * @return      none
   1425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1426          void ZDSecMgrConfig( void )
   \                     ZDSecMgrConfig:
   1427          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1428            if ( ZG_SECURE_ENABLED )
   1429            {
   1430              SSP_Init();
   \   000004                ; Setup parameters for call to function SSP_Init
   \   000004   12....       LCALL   `??SSP_Init::?relay` ; Banked call to: SSP_Init
   1431          
   1432              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1433              {
   1434                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1435                {
   1436                  // COMMERCIAL MODE - COORDINATOR DEVICE
   1437                  APSME_SecurityCM_CD();
   1438                }
   1439                else if ( ZSTACK_ROUTER_BUILD )
   1440                {
   1441                  // COMMERCIAL MODE - ROUTER DEVICE
   1442                  APSME_SecurityCM_RD();
   1443                }
   1444                else
   1445                {
   1446                  // COMMERCIAL MODE - END DEVICE
   1447                  APSME_SecurityCM_ED();
   1448                }
   1449              }
   1450              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1451              {
   1452                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   \   000007   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   7005         JNZ     ??ZDSecMgrConfig_0
   1453                {
   1454                  // RESIDENTIAL MODE - COORDINATOR DEVICE
   1455                  APSME_SecurityRM_CD();
   \   00000D                ; Setup parameters for call to function APSME_SecurityRM_CD
   \   00000D   12....       LCALL   `??APSME_SecurityRM_CD::?relay`; Banked call to: APSME_SecurityRM_CD
   \   000010   8016         SJMP    ??ZDSecMgrConfig_1
   1456                }
   1457                else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDSecMgrConfig_0:
   \   000012   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6008         JZ      ??ZDSecMgrConfig_2
   \   000018   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6401         XRL     A,#0x1
   \   00001E   7005         JNZ     ??ZDSecMgrConfig_3
   1458                {
   1459                  // RESIDENTIAL MODE - ROUTER DEVICE
   1460                  APSME_SecurityRM_RD();
   \                     ??ZDSecMgrConfig_2:
   \   000020                ; Setup parameters for call to function APSME_SecurityRM_RD
   \   000020   12....       LCALL   `??APSME_SecurityRM_RD::?relay`; Banked call to: APSME_SecurityRM_RD
   \   000023   8003         SJMP    ??ZDSecMgrConfig_1
   1461                }
   1462                else
   1463                {
   1464                  // RESIDENTIAL MODE - END DEVICE
   1465                  APSME_SecurityRM_ED();
   \                     ??ZDSecMgrConfig_3:
   \   000025                ; Setup parameters for call to function APSME_SecurityRM_ED
   \   000025   12....       LCALL   `??APSME_SecurityRM_ED::?relay`; Banked call to: APSME_SecurityRM_ED
   1466                }
   1467              }
   1468            }
   1469            else
   1470            {
   1471              // NO SECURITY
   1472              APSME_SecurityNM();
   1473            }
   1474          }
   \                     ??ZDSecMgrConfig_1:
   \   000028   D083         POP     DPH
   \   00002A   D082         POP     DPL
   \   00002C   02....       LJMP    ?BRET
   1475          
   1476          /******************************************************************************
   1477           * @fn          ZDSecMgrPermitJoining
   1478           *
   1479           * @brief       Process request to change joining permissions.
   1480           *
   1481           * @param       duration - [in] timed duration for join in seconds
   1482           *                         - 0x00 not allowed
   1483           *                         - 0xFF allowed without timeout
   1484           *
   1485           * @return      uint8 - success(TRUE:FALSE)
   1486           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1487          uint8 ZDSecMgrPermitJoining( uint8 duration )
   \                     ZDSecMgrPermitJoining:
   1488          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   1489            uint8 accept;
   1490          
   1491            ZDSecMgrPermitJoiningTimed = FALSE;
   \   000006   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000009   7400         MOV     A,#0x0
   \   00000B   F0           MOVX    @DPTR,A
   1492          
   1493            if ( duration > 0 )
   \   00000C   E8           MOV     A,R0
   \   00000D   6013         JZ      ??ZDSecMgrPermitJoining_0
   1494            {
   1495              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   00000F   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
   1496          
   1497              if ( duration != 0xFF )
   \   000015   74FF         MOV     A,#-0x1
   \   000017   68           XRL     A,R0
   \   000018   600E         JZ      ??ZDSecMgrPermitJoining_1
   1498              {
   1499                ZDSecMgrPermitJoiningTimed = TRUE;
   \   00001A   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   00001D   7401         MOV     A,#0x1
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8006         SJMP    ??ZDSecMgrPermitJoining_1
   1500              }
   1501            }
   1502            else
   1503            {
   1504              ZDSecMgrPermitJoiningEnabled = FALSE;
   \                     ??ZDSecMgrPermitJoining_0:
   \   000022   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000025   7400         MOV     A,#0x0
   \   000027   F0           MOVX    @DPTR,A
   1505            }
   1506          
   1507            accept = TRUE;
   \                     ??ZDSecMgrPermitJoining_1:
   \   000028   7901         MOV     R1,#0x1
   1508          
   1509            return accept;
   \   00002A   D083         POP     DPH
   \   00002C   D082         POP     DPL
   \   00002E   02....       LJMP    ?BRET
   1510          }
   1511          
   1512          /******************************************************************************
   1513           * @fn          ZDSecMgrPermitJoiningTimeout
   1514           *
   1515           * @brief       Process permit joining timeout
   1516           *
   1517           * @param       none
   1518           *
   1519           * @return      none
   1520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1521          void ZDSecMgrPermitJoiningTimeout( void )
   \                     ZDSecMgrPermitJoiningTimeout:
   1522          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1523            if ( ZDSecMgrPermitJoiningTimed == TRUE )
   \   000004   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   700C         JNZ     ??ZDSecMgrPermitJoiningTimeout_0
   1524            {
   1525              ZDSecMgrPermitJoiningEnabled = FALSE;
   \   00000C   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   7400         MOV     A,#0x0
   \   000011   F0           MOVX    @DPTR,A
   1526              ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000012   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
   1527            }
   1528          }
   \                     ??ZDSecMgrPermitJoiningTimeout_0:
   \   000018   D083         POP     DPH
   \   00001A   D082         POP     DPL
   \   00001C   02....       LJMP    ?BRET
   1529          
   1530          /******************************************************************************
   1531           * @fn          ZDSecMgrNewDeviceEvent
   1532           *
   1533           * @brief       Process a the new device event, if found reset new device
   1534           *              event/timer.
   1535           *
   1536           * @param       ShortAddr - of New Device to process
   1537           *
   1538           * @return      uint8 - found(TRUE:FALSE)
   1539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1540          uint8 ZDSecMgrNewDeviceEvent( uint16 ShortAddr )
   \                     ZDSecMgrNewDeviceEvent:
   1541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1542            uint8                 found;
   1543            ZDSecMgrDevice_t      device;
   1544            AddrMgrEntry_t        addrEntry;
   1545            associated_devices_t* assoc;
   1546            ZStatus_t             status;
   1547          
   1548            // initialize return results
   1549            found = FALSE;
   \   00000E   75..00       MOV     ?V2,#0x0
   1550          
   1551            assoc = AssocGetWithShort( ShortAddr );
   \   000011                ; Setup parameters for call to function AssocGetWithShort
   \   000011   AA..         MOV     R2,?V0
   \   000013   AB..         MOV     R3,?V1
   \   000015   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000018   8A..         MOV     ?V4,R2
   \   00001A   8B..         MOV     ?V5,R3
   \   00001C   AE..         MOV     R6,?V4
   \   00001E   AF..         MOV     R7,?V5
   1552          
   1553            if ( assoc != NULL )
   \   000020   EE           MOV     A,R6
   \   000021   4F           ORL     A,R7
   \   000022   7003         JNZ     $+5
   \   000024   02....       LJMP    ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
   1554            {
   1555              // device found
   1556              found = TRUE;
   \   000027   75..01       MOV     ?V2,#0x1
   1557          
   1558              // check for preconfigured security
   1559              if ( zgPreConfigKeys == TRUE )
   \   00002A   90....       MOV     DPTR,#zgPreConfigKeys
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6401         XRL     A,#0x1
   \   000030   7007         JNZ     ??ZDSecMgrNewDeviceEvent_1
   1560              {
   1561                // set association status to authenticated
   1562                ZDSecMgrAssocDeviceAuth( assoc );
   \   000032                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000032   EE           MOV     A,R6
   \   000033   FA           MOV     R2,A
   \   000034   EF           MOV     A,R7
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1563              }
   1564          
   1565              // set up device info
   1566              addrEntry.user  = ADDRMGR_USER_DEFAULT;
   \                     ??ZDSecMgrNewDeviceEvent_1:
   \   000039   7408         MOV     A,#0x8
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7400         MOV     A,#0x0
   \   000040   F0           MOVX    @DPTR,A
   1567              addrEntry.index = assoc->addrIdx;
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   7413         MOV     A,#0x13
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E8           MOV     A,R0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \   000055   F0           MOVX    @DPTR,A
   1568              AddrMgrEntryGet( &addrEntry );
   \   000056                ; Setup parameters for call to function AddrMgrEntryGet
   \   000056   7408         MOV     A,#0x8
   \   000058   12....       LCALL   ?XSTACK_DISP101_8
   \   00005B   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   00005E   E9           MOV     A,R1
   1569          
   1570              device.nwkAddr    = assoc->shortAddr;
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   E8           MOV     A,R0
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   E9           MOV     A,R1
   \   000072   F0           MOVX    @DPTR,A
   1571              device.extAddr    = addrEntry.extAddr;
   \   000073   740B         MOV     A,#0xb
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   A882         MOV     R0,DPL
   \   00007A   A983         MOV     R1,DPH
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   E8           MOV     A,R0
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E9           MOV     A,R1
   \   000085   F0           MOVX    @DPTR,A
   1572              device.parentAddr = NLME_GetShortAddr();
   \   000086                ; Setup parameters for call to function NLME_GetShortAddr
   \   000086   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   EA           MOV     A,R2
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   EB           MOV     A,R3
   \   000092   F0           MOVX    @DPTR,A
   1573          
   1574              // the new device performed Secured Rejoin
   1575              if ( ( assoc->devStatus & DEV_SECURED_JOIN ) &&
   1576                   ( assoc->devStatus & DEV_REJOIN_STATUS ) )
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   5460         ANL     A,#0x60
   \   00009F   6460         XRL     A,#0x60
   \   0000A1   700A         JNZ     ??ZDSecMgrNewDeviceEvent_2
   1577              {
   1578                device.secure     = TRUE;
   \   0000A3   7406         MOV     A,#0x6
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   7401         MOV     A,#0x1
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   8008         SJMP    ??ZDSecMgrNewDeviceEvent_3
   1579              }
   1580              else
   1581              {
   1582                device.secure     = FALSE;
   \                     ??ZDSecMgrNewDeviceEvent_2:
   \   0000AD   7406         MOV     A,#0x6
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   7400         MOV     A,#0x0
   \   0000B4   F0           MOVX    @DPTR,A
   1583              }
   1584              device.devStatus  = assoc->devStatus;
   \                     ??ZDSecMgrNewDeviceEvent_3:
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   C0E0         PUSH    A
   \   0000C1   7407         MOV     A,#0x7
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   D0E0         POP     A
   \   0000C8   F0           MOVX    @DPTR,A
   1585          
   1586              // process new device
   1587              status = ZDSecMgrDeviceNew( &device );
   \   0000C9                ; Setup parameters for call to function ZDSecMgrDeviceNew
   \   0000C9   AA..         MOV     R2,?XSP + 0
   \   0000CB   AB..         MOV     R3,?XSP + 1
   \   0000CD   12....       LCALL   `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
   \   0000D0   E9           MOV     A,R1
   \   0000D1   F5..         MOV     ?V3,A
   1588          
   1589              if ( status == ZSuccess )
   \   0000D3   E5..         MOV     A,?V3
   \   0000D5   700F         JNZ     ??ZDSecMgrNewDeviceEvent_4
   1590              {
   1591                assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
   \   0000D7   8E82         MOV     DPL,R6
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   C2E2         CLR     0xE0 /* A   */.2
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   801A         SJMP    ??ZDSecMgrNewDeviceEvent_0
   1592              }
   1593              else
   1594              {
   1595                // Clear SECURITY bit from Address Manager
   1596                ZDSecMgrAddrClear( addrEntry.extAddr );
   \                     ??ZDSecMgrNewDeviceEvent_4:
   \   0000E6                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   0000E6   740B         MOV     A,#0xb
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   AA82         MOV     R2,DPL
   \   0000ED   AB83         MOV     R3,DPH
   \   0000EF   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   0000F2   E9           MOV     A,R1
   1597          
   1598                // Remove the Association completely
   1599                AssocRemove( addrEntry.extAddr );
   \   0000F3                ; Setup parameters for call to function AssocRemove
   \   0000F3   740B         MOV     A,#0xb
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   AA82         MOV     R2,DPL
   \   0000FA   AB83         MOV     R3,DPH
   \   0000FC   12....       LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
   \   0000FF   E9           MOV     A,R1
   1600              }
   1601            }
   1602          
   1603            return found;
   \                     ??ZDSecMgrNewDeviceEvent_0:
   \   000100   A9..         MOV     R1,?V2
   \   000102   7415         MOV     A,#0x15
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
   \   000107   7F06         MOV     R7,#0x6
   \   000109   02....       LJMP    ?BANKED_LEAVE_XDATA
   1604          }
   1605          
   1606          /******************************************************************************
   1607           * @fn          ZDSecMgrTCExtAddrCheck
   1608           *
   1609           * @brief       Verifies if received ext. address matches TC ext. address.
   1610           *
   1611           * @param       extAddr - Extended address to be verified.
   1612           *
   1613           * @return      TRUE - extended address matches
   1614           *              FALSE - otherwise
   1615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1616          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
   \                     ZDSecMgrTCExtAddrCheck:
   1617          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1618            uint8  lookup[Z_EXTADDR_LEN];
   1619            APSME_GetRequest( apsTrustCenterAddress, 0, lookup );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   7A00         MOV     R2,#0x0
   \   000014   7B00         MOV     R3,#0x0
   \   000016   79AB         MOV     R1,#-0x55
   \   000018   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   00001B   E9           MOV     A,R1
   1620            return osal_ExtAddrEqual( extAddr, lookup );
   \   00001C                ; Setup parameters for call to function sAddrExtCmp
   \   00001C   AC..         MOV     R4,?XSP + 0
   \   00001E   AD..         MOV     R5,?XSP + 1
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000027   7408         MOV     A,#0x8
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002C   7F01         MOV     R7,#0x1
   \   00002E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1621          }
   1622          
   1623          /******************************************************************************
   1624           * @fn          ZDSecMgrTCDataLoad
   1625           *
   1626           * @brief       Stores the address of TC into address manager.
   1627           *
   1628           * @param       extAddr - Extended address to be verified.
   1629           *
   1630           * @return      none
   1631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1632          void ZDSecMgrTCDataLoad( uint8* extAddr )
   \                     ZDSecMgrTCDataLoad:
   1633          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1634            uint16 ami;
   1635            AddrMgrEntry_t entry;
   1636          
   1637            // lookup using TC short address
   1638            entry.user    = ADDRMGR_USER_DEFAULT;
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   1639            osal_cpyExtAddr( entry.extAddr, extAddr );
   \   000016                ; Setup parameters for call to function sAddrExtCpy
   \   000016   EE           MOV     A,R6
   \   000017   FC           MOV     R4,A
   \   000018   EF           MOV     A,R7
   \   000019   FD           MOV     R5,A
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1640          
   1641            // Verify if TC address has been added to Address Manager
   1642            if ( !APSME_IsDistributedSecurity() && ( AddrMgrEntryLookupExt( &entry ) != TRUE ) )
   \   000026                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000026   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000029   E9           MOV     A,R1
   \   00002A   702B         JNZ     ??ZDSecMgrTCDataLoad_0
   \   00002C                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP101_8
   \   000031   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000034   E9           MOV     A,R1
   \   000035   6401         XRL     A,#0x1
   \   000037   601E         JZ      ??ZDSecMgrTCDataLoad_0
   1643            {
   1644              ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami );
   \   000039                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000039   A8..         MOV     R0,?XSP + 0
   \   00003B   A9..         MOV     R1,?XSP + 1
   \   00003D   88..         MOV     ?V0,R0
   \   00003F   89..         MOV     ?V1,R1
   \   000041   78..         MOV     R0,#?V0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   EE           MOV     A,R6
   \   000047   FC           MOV     R4,A
   \   000048   EF           MOV     A,R7
   \   000049   FD           MOV     R5,A
   \   00004A   7A00         MOV     R2,#0x0
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   E9           MOV     A,R1
   1645            }
   1646          }
   \                     ??ZDSecMgrTCDataLoad_0:
   \   000057   740F         MOV     A,#0xf
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   7F02         MOV     R7,#0x2
   \   00005E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1647          
   1648          /******************************************************************************
   1649           * @fn          ZDSecMgrTransportKeyInd
   1650           *
   1651           * @brief       Process the ZDO_TransportKeyInd_t message.
   1652           *
   1653           * @param       ind - [in] ZDO_TransportKeyInd_t indication
   1654           *
   1655           * @return      none
   1656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1657          void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
   \                     ZDSecMgrTransportKeyInd:
   1658          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1659            uint8 index;
   1660            uint8 zgPreConfigKey[SEC_KEY_LEN];
   1661          
   1662            ZDSecMgrUpdateTCAddress( ind->srcExtAddr );
   \   00000E                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   00000E   EE           MOV     A,R6
   \   00000F   2416         ADD     A,#0x16
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1663            // check for distributed security
   1664            if ( ( ZG_BUILD_RTR_TYPE ) && osal_isbufset( ind->srcExtAddr, 0xFF, Z_EXTADDR_LEN ) )
   \   000018                ; Setup parameters for call to function osal_isbufset
   \   000018   7C08         MOV     R4,#0x8
   \   00001A   79FF         MOV     R1,#-0x1
   \   00001C   EE           MOV     A,R6
   \   00001D   2416         ADD     A,#0x16
   \   00001F   FA           MOV     R2,A
   \   000020   E4           CLR     A
   \   000021   3F           ADDC    A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   000026   E9           MOV     A,R1
   \   000027   6006         JZ      ??ZDSecMgrTransportKeyInd_0
   1665            {
   1666              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   000029   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00002C   7401         MOV     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
   1667            }
   1668          
   1669            // load Trust Center data if needed
   1670            ZDSecMgrTCDataLoad( ind->srcExtAddr );
   \                     ??ZDSecMgrTransportKeyInd_0:
   \   00002F                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   00002F   EE           MOV     A,R6
   \   000030   2416         ADD     A,#0x16
   \   000032   FA           MOV     R2,A
   \   000033   E4           CLR     A
   \   000034   3F           ADDC    A,R7
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
   1671          
   1672            if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   1673                 ( ind->keyType == 6            ) )
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   6401         XRL     A,#0x1
   \   000044   6010         JZ      ??ZDSecMgrTransportKeyInd_1
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6406         XRL     A,#0x6
   \   000051   6003         JZ      $+5
   \   000053   02....       LJMP    ??ZDSecMgrTransportKeyInd_2 & 0xFFFF
   1674            {
   1675              // check for dummy NWK key (all zeros)
   1676              for ( index = 0;
   \                     ??ZDSecMgrTransportKeyInd_1:
   \   000056   75..00       MOV     ?V0,#0x0
   1677                    ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
   \                     ??ZDSecMgrTransportKeyInd_3:
   \   000059   E5..         MOV     A,?V0
   \   00005B   C3           CLR     C
   \   00005C   9410         SUBB    A,#0x10
   \   00005E   5019         JNC     ??ZDSecMgrTransportKeyInd_4
   \   000060   A8..         MOV     R0,?V0
   \   000062   7900         MOV     R1,#0x0
   \   000064   EE           MOV     A,R6
   \   000065   28           ADD     A,R0
   \   000066   F582         MOV     DPL,A
   \   000068   EF           MOV     A,R7
   \   000069   39           ADDC    A,R1
   \   00006A   F583         MOV     DPH,A
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   7004         JNZ     ??ZDSecMgrTransportKeyInd_4
   1678                    index++ );
   \   000075   05..         INC     ?V0
   \   000077   80E0         SJMP    ??ZDSecMgrTransportKeyInd_3
   1679          
   1680              if ( index == SEC_KEY_LEN )
   \                     ??ZDSecMgrTransportKeyInd_4:
   \   000079   7410         MOV     A,#0x10
   \   00007B   65..         XRL     A,?V0
   \   00007D   702F         JNZ     ??ZDSecMgrTransportKeyInd_5
   1681              {
   1682                // load preconfigured key - once!!
   1683                if ( !_NIB.nwkKeyLoaded )
   \   00007F   90....       MOV     DPTR,#_NIB + 61
   \   000082   E0           MOVX    A,@DPTR
   \   000083   7052         JNZ     ??ZDSecMgrTransportKeyInd_6
   1684                {
   1685                  ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000085                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000085   AC..         MOV     R4,?XSP + 0
   \   000087   AD..         MOV     R5,?XSP + 1
   \   000089   7A62         MOV     R2,#0x62
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   \   000090   E9           MOV     A,R1
   1686                  SSP_UpdateNwkKey( zgPreConfigKey, 0 );
   \   000091                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000091   7900         MOV     R1,#0x0
   \   000093   AA..         MOV     R2,?XSP + 0
   \   000095   AB..         MOV     R3,?XSP + 1
   \   000097   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1687                  SSP_SwitchNwkKey( 0 );
   \   00009A                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00009A   7900         MOV     R1,#0x0
   \   00009C   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1688          
   1689                  // clear local copy of key
   1690                  osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   00009F                ; Setup parameters for call to function osal_memset
   \   00009F   7C10         MOV     R4,#0x10
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   7900         MOV     R1,#0x0
   \   0000A5   AA..         MOV     R2,?XSP + 0
   \   0000A7   AB..         MOV     R3,?XSP + 1
   \   0000A9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000AC   8029         SJMP    ??ZDSecMgrTransportKeyInd_6
   1691                }
   1692              }
   1693              else
   1694              {
   1695                SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
   \                     ??ZDSecMgrTransportKeyInd_5:
   \   0000AE                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F9           MOV     R1,A
   \   0000B9   EE           MOV     A,R6
   \   0000BA   2406         ADD     A,#0x6
   \   0000BC   FA           MOV     R2,A
   \   0000BD   E4           CLR     A
   \   0000BE   3F           ADDC    A,R7
   \   0000BF   FB           MOV     R3,A
   \   0000C0   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1696                if ( !_NIB.nwkKeyLoaded )
   \   0000C3   90....       MOV     DPTR,#_NIB + 61
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   700E         JNZ     ??ZDSecMgrTransportKeyInd_6
   1697                {
   1698                  SSP_SwitchNwkKey( ind->keySeqNum );
   \   0000C9                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000C9   8E82         MOV     DPL,R6
   \   0000CB   8F83         MOV     DPH,R7
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F9           MOV     R1,A
   \   0000D4   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1699                }
   1700              }
   1701          
   1702              // handle next step in authentication process
   1703              ZDSecMgrAuthNwkKey();
   \                     ??ZDSecMgrTransportKeyInd_6:
   \   0000D7                ; Setup parameters for call to function ZDSecMgrAuthNwkKey
   \   0000D7   12....       LCALL   `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
   \   0000DA   8018         SJMP    ??ZDSecMgrTransportKeyInd_7
   1704            }
   1705            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrTransportKeyInd_2:
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   6404         XRL     A,#0x4
   \   0000E7   600B         JZ      ??ZDSecMgrTransportKeyInd_7
   1706            {
   1707              // This should not happen because TCLK should not be Tx
   1708            }
   1709            else if ( ind->keyType == KEY_TYPE_APP_LINK )
   \   0000E9   8E82         MOV     DPL,R6
   \   0000EB   8F83         MOV     DPH,R7
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   6403         XRL     A,#0x3
   1710            {
   1711              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1712              {
   1713                uint16           ami;
   1714                ZDSecMgrEntry_t* entry;
   1715          
   1716                // get the address index
   1717                if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
   1718                {
   1719                  // store new EXT address
   1720                  ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   1721                  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1722                }
   1723          
   1724                ZDSecMgrEntryLookupAMI( ami, &entry );
   1725          
   1726                if ( entry == NULL )
   1727                {
   1728                  // get new entry
   1729                  if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   1730                  {
   1731                    // finish setting up entry
   1732                    entry->ami = ami;
   1733                  }
   1734                }
   1735          
   1736                ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
   1737          
   1738          #if defined NV_RESTORE
   1739                ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
   1740          #endif
   1741              }
   1742            }
   1743          }
   \                     ??ZDSecMgrTransportKeyInd_7:
   \   0000F4   7410         MOV     A,#0x10
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F9   7F01         MOV     R7,#0x1
   \   0000FB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1744          
   1745          /******************************************************************************
   1746           * @fn          ZDSecMgrUpdateDeviceInd
   1747           *
   1748           * @brief       Process the ZDO_UpdateDeviceInd_t message.
   1749           *
   1750           * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
   1751           *
   1752           * @return      none
   1753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1754          void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
   \                     ZDSecMgrUpdateDeviceInd:
   1755          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1756            ZDSecMgrDevice_t device;
   1757          
   1758            device.nwkAddr    = ind->devAddr;
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   E8           MOV     A,R0
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   E9           MOV     A,R1
   \   000026   F0           MOVX    @DPTR,A
   1759            device.extAddr    = ind->devExtAddr;
   \   000027   EE           MOV     A,R6
   \   000028   2404         ADD     A,#0x4
   \   00002A   F8           MOV     R0,A
   \   00002B   E4           CLR     A
   \   00002C   3F           ADDC    A,R7
   \   00002D   F9           MOV     R1,A
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E8           MOV     A,R0
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E9           MOV     A,R1
   \   000037   F0           MOVX    @DPTR,A
   1760            device.parentAddr = ind->srcAddr;
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F8           MOV     R0,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E8           MOV     A,R0
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   E9           MOV     A,R1
   \   00004C   F0           MOVX    @DPTR,A
   1761            device.devStatus  = DEV_SEC_INIT_STATUS;
   \   00004D   7407         MOV     A,#0x7
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7404         MOV     A,#0x4
   \   000054   F0           MOVX    @DPTR,A
   1762            device.secure     = FALSE;
   \   000055   7406         MOV     A,#0x6
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   7400         MOV     A,#0x0
   \   00005C   F0           MOVX    @DPTR,A
   1763          
   1764            // Trust Center should identify the type of JOIN/REJOIN and
   1765            // Transport the NWK key accordingly, it will only be transported for:
   1766            //              APSME_UD_STANDARD_UNSECURED_JOIN
   1767            //   OR         APSME_UD_STANDARD_TRUST_CENTER_REJOIN
   1768            if ( ind->status != APSME_UD_DEVICE_LEFT )
   \   00005D   EE           MOV     A,R6
   \   00005E   240E         ADD     A,#0xe
   \   000060   F582         MOV     DPL,A
   \   000062   E4           CLR     A
   \   000063   3F           ADDC    A,R7
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6402         XRL     A,#0x2
   \   000069   602E         JZ      ??ZDSecMgrUpdateDeviceInd_0
   1769            {
   1770              if ( ind->status == APSME_UD_STANDARD_SECURED_REJOIN )
   \   00006B   EE           MOV     A,R6
   \   00006C   240E         ADD     A,#0xe
   \   00006E   F582         MOV     DPL,A
   \   000070   E4           CLR     A
   \   000071   3F           ADDC    A,R7
   \   000072   F583         MOV     DPH,A
   \   000074   E0           MOVX    A,@DPTR
   \   000075   701A         JNZ     ??ZDSecMgrUpdateDeviceInd_1
   1771              {
   1772                device.devStatus &= ~DEV_SEC_INIT_STATUS;
   \   000077   7407         MOV     A,#0x7
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   C2E2         CLR     0xE0 /* A   */.2
   \   00007F   F0           MOVX    @DPTR,A
   1773                device.devStatus |=  DEV_SEC_AUTH_STATUS;
   \   000080   7407         MOV     A,#0x7
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   D2E3         SETB    0xE0 /* A   */.3
   \   000088   F0           MOVX    @DPTR,A
   1774                device.secure = TRUE;
   \   000089   7406         MOV     A,#0x6
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   7401         MOV     A,#0x1
   \   000090   F0           MOVX    @DPTR,A
   1775              }
   1776          
   1777              ZDSecMgrDeviceJoin( &device );
   \                     ??ZDSecMgrUpdateDeviceInd_1:
   \   000091                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000091   AA..         MOV     R2,?XSP + 0
   \   000093   AB..         MOV     R3,?XSP + 1
   \   000095   12....       LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   000098   E9           MOV     A,R1
   1778            }
   1779          }
   \                     ??ZDSecMgrUpdateDeviceInd_0:
   \   000099   7408         MOV     A,#0x8
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   7F01         MOV     R7,#0x1
   \   0000A0   02....       LJMP    ?BANKED_LEAVE_XDATA
   1780          
   1781          /******************************************************************************
   1782           * @fn          ZDSecMgrRemoveDeviceInd
   1783           *
   1784           * @brief       Process the ZDO_RemoveDeviceInd_t message.
   1785           *
   1786           * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
   1787           *
   1788           * @return      none
   1789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1790          void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
   \                     ZDSecMgrRemoveDeviceInd:
   1791          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1792            ZDSecMgrDevice_t device;
   1793          
   1794            // only accept from Trust Center
   1795            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   49           ORL     A,R1
   \   00001B   7038         JNZ     ??ZDSecMgrRemoveDeviceInd_0
   1796            {
   1797              // look up NWK address
   1798              if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
   \   00001D                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00001D   AC..         MOV     R4,?XSP + 0
   \   00001F   AD..         MOV     R5,?XSP + 1
   \   000021   EE           MOV     A,R6
   \   000022   2404         ADD     A,#0x4
   \   000024   FA           MOV     R2,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00002B   E9           MOV     A,R1
   \   00002C   6401         XRL     A,#0x1
   \   00002E   7025         JNZ     ??ZDSecMgrRemoveDeviceInd_0
   1799              {
   1800                device.parentAddr = NLME_GetShortAddr();
   \   000030                ; Setup parameters for call to function NLME_GetShortAddr
   \   000030   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000033   7404         MOV     A,#0x4
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   EA           MOV     A,R2
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   EB           MOV     A,R3
   \   00003C   F0           MOVX    @DPTR,A
   1801                device.extAddr    = ind->childExtAddr;
   \   00003D   EE           MOV     A,R6
   \   00003E   2404         ADD     A,#0x4
   \   000040   F8           MOV     R0,A
   \   000041   E4           CLR     A
   \   000042   3F           ADDC    A,R7
   \   000043   F9           MOV     R1,A
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
   1802          
   1803                // remove device
   1804                ZDSecMgrDeviceRemove( &device );
   \   00004E                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   00004E   AA..         MOV     R2,?XSP + 0
   \   000050   AB..         MOV     R3,?XSP + 1
   \   000052   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   1805              }
   1806            }
   1807          }
   \                     ??ZDSecMgrRemoveDeviceInd_0:
   \   000055   7408         MOV     A,#0x8
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F01         MOV     R7,#0x1
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1808          
   1809          /******************************************************************************
   1810           * @fn          ZDSecMgrRequestKeyInd
   1811           *
   1812           * @brief       Process the ZDO_RequestKeyInd_t message.
   1813           *
   1814           * @param       ind - [in] ZDO_RequestKeyInd_t indication
   1815           *
   1816           * @return      none
   1817           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1818          void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrRequestKeyInd:
   1819          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1820            if ( ind->keyType == KEY_TYPE_NWK )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6401         XRL     A,#0x1
   \   000014   6014         JZ      ??ZDSecMgrRequestKeyInd_0
   1821            {
   1822            }
   1823            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   7007         JNZ     ??ZDSecMgrRequestKeyInd_0
   1824            {
   1825              ZDSecMgrAppKeyReq( ind );
   \   000023                ; Setup parameters for call to function ZDSecMgrAppKeyReq
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
   1826            }
   1827            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   1828            {
   1829            }
   1830            //else ignore
   1831          }
   \                     ??ZDSecMgrRequestKeyInd_0:
   \   00002A   7F01         MOV     R7,#0x1
   \   00002C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1832          
   1833          /******************************************************************************
   1834           * @fn          ZDSecMgrSwitchKeyInd
   1835           *
   1836           * @brief       Process the ZDO_SwitchKeyInd_t message.
   1837           *
   1838           * @param       ind - [in] ZDO_SwitchKeyInd_t indication
   1839           *
   1840           * @return      none
   1841           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1842          void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
   \                     ZDSecMgrSwitchKeyInd:
   1843          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1844            SSP_SwitchNwkKey( ind->keySeqNum );
   \   000009                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1845          
   1846            // Save if nv
   1847            ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1848          }
   \   000019   7F01         MOV     R7,#0x1
   \   00001B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1849          
   1850          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1851          /******************************************************************************
   1852           * @fn          ZDSecMgrUpdateNwkKey
   1853           *
   1854           * @brief       Load a new NWK key and trigger a network update to the dstAddr.
   1855           *
   1856           * @param       key       - [in] new NWK key
   1857           * @param       keySeqNum - [in] new NWK key sequence number
   1858           *
   1859           * @return      ZStatus_t
   1860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1861          ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
   \                     ZDSecMgrUpdateNwkKey:
   1862          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V3,R1
   \   000010   8C..         MOV     ?V0,R4
   \   000012   8D..         MOV     ?V1,R5
   1863            ZStatus_t               status;
   1864            APSME_TransportKeyReq_t req;
   1865          
   1866            // initialize common elements of local variables
   1867            req.keyType   = KEY_TYPE_NWK;
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7401         MOV     A,#0x1
   \   00001B   F0           MOVX    @DPTR,A
   1868          
   1869            req.dstAddr   = dstAddr;
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   E5..         MOV     A,?V0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E5..         MOV     A,?V1
   \   000028   F0           MOVX    @DPTR,A
   1870            req.keySeqNum = keySeqNum;
   \   000029   E5..         MOV     A,?V3
   \   00002B   C0E0         PUSH    A
   \   00002D   7403         MOV     A,#0x3
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   1871            req.key       = key;
   \   000035   7404         MOV     A,#0x4
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   EE           MOV     A,R6
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   EF           MOV     A,R7
   \   00003E   F0           MOVX    @DPTR,A
   1872            req.extAddr   = NULL;
   \   00003F   7406         MOV     A,#0x6
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7400         MOV     A,#0x0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
   1873            req.nwkSecure = TRUE;
   \   00004B   740A         MOV     A,#0xa
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
   1874            req.tunnel    = NULL;
   \   000053   740B         MOV     A,#0xb
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   7400         MOV     A,#0x0
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   7400         MOV     A,#0x0
   \   00005E   F0           MOVX    @DPTR,A
   1875          
   1876            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1877            {
   1878              // Broadcast transport NWK key
   1879              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   1880                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   1881                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   1882              {
   1883                req.apsSecure = FALSE;
   1884                status = APSME_TransportKeyReq( &req );
   1885              }
   1886              else
   1887              {
   1888                AddrMgrEntry_t          addrEntry;
   1889          
   1890                addrEntry.user = ADDRMGR_USER_SECURITY;
   1891                addrEntry.nwkAddr = dstAddr;
   1892          
   1893                status = ZFailure;
   1894          
   1895                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   1896                {
   1897                  req.extAddr = addrEntry.extAddr;
   1898                  req.apsSecure = TRUE;
   1899                  status = APSME_TransportKeyReq( &req );
   1900                }
   1901              }
   1902            }
   1903            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1904            {
   1905              req.apsSecure = FALSE;
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   7400         MOV     A,#0x0
   \   000066   F0           MOVX    @DPTR,A
   1906              status = APSME_TransportKeyReq( &req );
   \   000067                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000067   AA..         MOV     R2,?XSP + 0
   \   000069   AB..         MOV     R3,?XSP + 1
   \   00006B   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   00006E   E9           MOV     A,R1
   \   00006F   F5..         MOV     ?V2,A
   1907            }
   1908          
   1909            SSP_UpdateNwkKey( key, keySeqNum );
   \   000071                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000071   A9..         MOV     R1,?V3
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1910          
   1911            // Save if nv
   1912            ZDApp_NVUpdate();
   \   00007A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00007A   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1913          
   1914            return status;
   \   00007D   A9..         MOV     R1,?V2
   \   00007F   740D         MOV     A,#0xd
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   \   000084   7F04         MOV     R7,#0x4
   \   000086   02....       LJMP    ?BANKED_LEAVE_XDATA
   1915          }
   1916          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   1917          
   1918          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1919          /******************************************************************************
   1920           * @fn          ZDSecMgrSwitchNwkKey
   1921           *
   1922           * @brief       Causes the NWK key to switch via a network command to the dstAddr.
   1923           *
   1924           * @param       keySeqNum - [in] new NWK key sequence number
   1925           *
   1926           * @return      ZStatus_t
   1927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1928          ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
   \                     ZDSecMgrSwitchNwkKey:
   1929          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   1930            ZStatus_t            status;
   1931            APSME_SwitchKeyReq_t req;
   1932          
   1933            // initialize common elements of local variables
   1934            req.dstAddr = dstAddr;
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   E5..         MOV     A,?V0
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   E5..         MOV     A,?V1
   \   00001C   F0           MOVX    @DPTR,A
   1935            req.keySeqNum = keySeqNum;
   \   00001D   EF           MOV     A,R7
   \   00001E   C0E0         PUSH    A
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   D0E0         POP     A
   \   000027   F0           MOVX    @DPTR,A
   1936          
   1937            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1938            {
   1939              // Broadcast switch NWK key
   1940              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   1941                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   1942                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   1943              {
   1944                req.apsSecure = FALSE;
   1945                status = APSME_SwitchKeyReq( &req );
   1946              }
   1947              else
   1948              {
   1949                AddrMgrEntry_t          addrEntry;
   1950          
   1951                addrEntry.user = ADDRMGR_USER_SECURITY;
   1952                addrEntry.nwkAddr = dstAddr;
   1953          
   1954                status = ZFailure;
   1955          
   1956                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   1957                {
   1958                  req.dstAddr = addrEntry.nwkAddr;
   1959                  req.apsSecure = TRUE;
   1960                  status = APSME_SwitchKeyReq( &req );
   1961                }
   1962              }
   1963            }
   1964            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1965            {
   1966              req.apsSecure = FALSE;
   \   000028   7403         MOV     A,#0x3
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7400         MOV     A,#0x0
   \   00002F   F0           MOVX    @DPTR,A
   1967              status = APSME_SwitchKeyReq( &req );
   \   000030                ; Setup parameters for call to function APSME_SwitchKeyReq
   \   000030   AA..         MOV     R2,?XSP + 0
   \   000032   AB..         MOV     R3,?XSP + 1
   \   000034   12....       LCALL   `??APSME_SwitchKeyReq::?relay`; Banked call to: APSME_SwitchKeyReq
   \   000037   E9           MOV     A,R1
   \   000038   FE           MOV     R6,A
   1968            }
   1969          
   1970            SSP_SwitchNwkKey( keySeqNum );
   \   000039                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000039   EF           MOV     A,R7
   \   00003A   F9           MOV     R1,A
   \   00003B   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1971          
   1972            // Save if nv
   1973            ZDApp_NVUpdate();
   \   00003E                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00003E   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1974          
   1975            return status;
   \   000041   EE           MOV     A,R6
   \   000042   F9           MOV     R1,A
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   7F02         MOV     R7,#0x2
   \   00004A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1976          }
   1977          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   1978          
   1979          /******************************************************************************
   1980           * @fn          ZDSecMgrRequestAppKey
   1981           *
   1982           * @brief       Request an application key with partner.
   1983           *
   1984           * @param       partExtAddr - [in] partner extended address
   1985           *
   1986           * @return      ZStatus_t
   1987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1988          ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
   \                     ZDSecMgrRequestAppKey:
   1989          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1990            ZStatus_t status;
   1991            APSME_RequestKeyReq_t req;
   1992          
   1993            req.dstAddr = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   1994            req.keyType = KEY_TYPE_APP_MASTER;
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   7402         MOV     A,#0x2
   \   00001E   F0           MOVX    @DPTR,A
   1995          
   1996            req.partExtAddr = partExtAddr;
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   EE           MOV     A,R6
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   EF           MOV     A,R7
   \   000028   F0           MOVX    @DPTR,A
   1997            status = APSME_RequestKeyReq( &req );
   \   000029                ; Setup parameters for call to function APSME_RequestKeyReq
   \   000029   AA..         MOV     R2,?XSP + 0
   \   00002B   AB..         MOV     R3,?XSP + 1
   \   00002D   12....       LCALL   `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   \   000030   E9           MOV     A,R1
   \   000031   F5..         MOV     ?V0,A
   1998          
   1999            return status;
   \   000033   A9..         MOV     R1,?V0
   \   000035   7404         MOV     A,#0x4
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003A   7F01         MOV     R7,#0x1
   \   00003C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2000          }
   2001          
   2002          #if ( ZG_BUILD_JOINING_TYPE )
   2003          /******************************************************************************
   2004           * @fn          ZDSecMgrSetupPartner
   2005           *
   2006           * @brief       Setup for application key partner.
   2007           *
   2008           * @param       partNwkAddr - [in] partner network address
   2009           *
   2010           * @return      ZStatus_t
   2011           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2012          ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
   \                     ZDSecMgrSetupPartner:
   2013          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   2014            AddrMgrEntry_t entry;
   2015            ZStatus_t      status;
   2016          
   2017            status = ZFailure;
   \   000012   7E01         MOV     R6,#0x1
   2018          
   2019            // update the address manager
   2020            entry.user    = ADDRMGR_USER_SECURITY;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   7402         MOV     A,#0x2
   \   00001C   F0           MOVX    @DPTR,A
   2021            entry.nwkAddr = partNwkAddr;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E5..         MOV     A,?V0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E5..         MOV     A,?V1
   \   000028   F0           MOVX    @DPTR,A
   2022            AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
   \   000029                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000029   AC..         MOV     R4,?V2
   \   00002B   AD..         MOV     R5,?V3
   \   00002D   7403         MOV     A,#0x3
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   AA82         MOV     R2,DPL
   \   000034   AB83         MOV     R3,DPH
   \   000036   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2023          
   2024            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000039                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000039   AA..         MOV     R2,?XSP + 0
   \   00003B   AB..         MOV     R3,?XSP + 1
   \   00003D   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000040   E9           MOV     A,R1
   \   000041   6401         XRL     A,#0x1
   \   000043   7038         JNZ     ??ZDSecMgrSetupPartner_0
   2025            {
   2026              status = ZSuccess;
   \   000045   7E00         MOV     R6,#0x0
   2027          
   2028              // check for address discovery
   2029              if ( partNwkAddr == INVALID_NODE_ADDR )
   \   000047   74FE         MOV     A,#-0x2
   \   000049   65..         XRL     A,?V0
   \   00004B   7004         JNZ     ??ZDSecMgrSetupPartner_1
   \   00004D   74FF         MOV     A,#-0x1
   \   00004F   65..         XRL     A,?V1
   \                     ??ZDSecMgrSetupPartner_1:
   \   000051   7011         JNZ     ??ZDSecMgrSetupPartner_2
   2030              {
   2031                status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000053                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7C00         MOV     R4,#0x0
   \   000057   7900         MOV     R1,#0x0
   \   000059   AA..         MOV     R2,?V2
   \   00005B   AB..         MOV     R3,?V3
   \   00005D   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000060   E9           MOV     A,R1
   \   000061   FE           MOV     R6,A
   \   000062   8019         SJMP    ??ZDSecMgrSetupPartner_0
   2032              }
   2033              else if ( !AddrMgrExtAddrValid( partExtAddr ) )
   \                     ??ZDSecMgrSetupPartner_2:
   \   000064                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000064   AA..         MOV     R2,?V2
   \   000066   AB..         MOV     R3,?V3
   \   000068   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00006B   E9           MOV     A,R1
   \   00006C   700F         JNZ     ??ZDSecMgrSetupPartner_0
   2034              {
   2035                status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00006E                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   00006E   7D00         MOV     R5,#0x0
   \   000070   7C00         MOV     R4,#0x0
   \   000072   7900         MOV     R1,#0x0
   \   000074   AA..         MOV     R2,?V0
   \   000076   AB..         MOV     R3,?V1
   \   000078   12....       LCALL   `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   00007B   E9           MOV     A,R1
   \   00007C   FE           MOV     R6,A
   2036              }
   2037            }
   2038          
   2039            return status;
   \                     ??ZDSecMgrSetupPartner_0:
   \   00007D   EE           MOV     A,R6
   \   00007E   F9           MOV     R1,A
   \   00007F   740D         MOV     A,#0xd
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   \   000084   7F04         MOV     R7,#0x4
   \   000086   02....       LJMP    ?BANKED_LEAVE_XDATA
   2040          }
   2041          #endif // ( ZG_BUILD_JOINING_TYPE )
   2042          
   2043          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2044          /******************************************************************************
   2045           * @fn          ZDSecMgrAppKeyTypeSet
   2046           *
   2047           * @brief       Set application key type.
   2048           *
   2049           * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
   2050           *                                                   KEY_TYPE_APP_LINK@3
   2051           *
   2052           * @return      ZStatus_t
   2053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2054          ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
   \                     ZDSecMgrAppKeyTypeSet:
   2055          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   2056            if ( keyType == KEY_TYPE_APP_LINK )
   \   000006   7403         MOV     A,#0x3
   \   000008   68           XRL     A,R0
   \   000009   7008         JNZ     ??ZDSecMgrAppKeyTypeSet_0
   2057            {
   2058              ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
   \   00000B   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   00000E   7403         MOV     A,#0x3
   \   000010   F0           MOVX    @DPTR,A
   \   000011   8006         SJMP    ??ZDSecMgrAppKeyTypeSet_1
   2059            }
   2060            else
   2061            {
   2062              ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
   \                     ??ZDSecMgrAppKeyTypeSet_0:
   \   000013   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   000016   7402         MOV     A,#0x2
   \   000018   F0           MOVX    @DPTR,A
   2063            }
   2064          
   2065            return ZSuccess;
   \                     ??ZDSecMgrAppKeyTypeSet_1:
   \   000019   7900         MOV     R1,#0x0
   \   00001B   D083         POP     DPH
   \   00001D   D082         POP     DPL
   \   00001F   02....       LJMP    ?BRET
   2066          }
   2067          #endif
   2068          
   2069          /******************************************************************************
   2070           * ZigBee Device Security Manager - Stub Implementations
   2071           */
   2072          
   2073          
   2074          /******************************************************************************
   2075           * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
   2076           *
   2077           * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
   2078           *
   2079           * @param       extAddr - [in] EXT address
   2080           * @param       data    - [in] APSME_LinkKeyData_t
   2081           *
   2082           * @return      ZStatus_t
   2083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2084          ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
   \                     APSME_LinkKeySet:
   2085          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   8C..         MOV     ?V6,R4
   \   000010   8D..         MOV     ?V7,R5
   2086            ZStatus_t status;
   2087            ZDSecMgrEntry_t* entry;
   2088            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   \   000012   75..00       MOV     ?V0,#0x0
   \   000015   75..00       MOV     ?V1,#0x0
   2089            uint16 Index;
   2090          
   2091            // lookup entry index for specified EXT address
   2092            status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
   \   000018                ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP100_8
   \   00001D   88..         MOV     ?V8,R0
   \   00001F   89..         MOV     ?V9,R1
   \   000021   78..         MOV     R0,#?V8
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP102_8
   \   00002B   AA..         MOV     R2,?V4
   \   00002D   AB..         MOV     R3,?V5
   \   00002F   12....       LCALL   `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   E9           MOV     A,R1
   \   000038   F5..         MOV     ?V2,A
   2093          
   2094            if ( status == ZSuccess )
   \   00003A   E5..         MOV     A,?V2
   \   00003C   6003         JZ      $+5
   \   00003E   02....       LJMP    ??APSME_LinkKeySet_0 & 0xFFFF
   2095            {
   2096              // point to NV item
   2097              entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   2401         ADD     A,#0x1
   \   000049   FA           MOV     R2,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   3402         ADDC    A,#0x2
   \   00004E   FB           MOV     R3,A
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F583         MOV     DPH,A
   \   00005B   8882         MOV     DPL,R0
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   EA           MOV     A,R2
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   EB           MOV     A,R3
   \   000063   F0           MOVX    @DPTR,A
   2098          
   2099              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000064                ; Setup parameters for call to function osal_mem_alloc
   \   000064   7A18         MOV     R2,#0x18
   \   000066   7B00         MOV     R3,#0x0
   \   000068   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006B   8A..         MOV     ?V8,R2
   \   00006D   8B..         MOV     ?V9,R3
   \   00006F   85....       MOV     ?V0,?V8
   \   000072   85....       MOV     ?V1,?V9
   2100          
   2101              if (pApsLinkKey != NULL)
   \   000075   E5..         MOV     A,?V0
   \   000077   45..         ORL     A,?V1
   \   000079   7003         JNZ     $+5
   \   00007B   02....       LJMP    ??APSME_LinkKeySet_0 & 0xFFFF
   2102              {
   2103                // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2104                osal_nv_read( entry->keyNvId, 0,
   2105                             sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   00007E                ; Setup parameters for call to function osal_nv_read
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   75..18       MOV     ?V8,#0x18
   \   000086   75..00       MOV     ?V9,#0x0
   \   000089   78..         MOV     R0,#?V8
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   7C00         MOV     R4,#0x0
   \   000090   7D00         MOV     R5,#0x0
   \   000092   7404         MOV     A,#0x4
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F8           MOV     R0,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F583         MOV     DPH,A
   \   00009D   8882         MOV     DPL,R0
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FA           MOV     R2,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FB           MOV     R3,A
   \   0000A6   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
   2106          
   2107                // set new values of the key
   2108                osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
   \   0000AF                ; Setup parameters for call to function osal_memcpy
   \   0000AF   85....       MOV     ?V8,?V6
   \   0000B2   85....       MOV     ?V9,?V7
   \   0000B5   75..00       MOV     ?V10,#0x0
   \   0000B8   78..         MOV     R0,#?V8
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BD   7C10         MOV     R4,#0x10
   \   0000BF   7D00         MOV     R5,#0x0
   \   0000C1   AA..         MOV     R2,?V0
   \   0000C3   AB..         MOV     R3,?V1
   \   0000C5   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C8   7403         MOV     A,#0x3
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   2109                pApsLinkKey->rxFrmCntr = 0;
   \   0000CD   7C00         MOV     R4,#0x0
   \   0000CF   7D00         MOV     R5,#0x0
   \   0000D1   7E00         MOV     R6,#0x0
   \   0000D3   7F00         MOV     R7,#0x0
   \   0000D5   E5..         MOV     A,?V0
   \   0000D7   2414         ADD     A,#0x14
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   E4           CLR     A
   \   0000DC   35..         ADDC    A,?V1
   \   0000DE   F583         MOV     DPH,A
   \   0000E0   EC           MOV     A,R4
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   ED           MOV     A,R5
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   EE           MOV     A,R6
   \   0000E7   F0           MOVX    @DPTR,A
   \   0000E8   A3           INC     DPTR
   \   0000E9   EF           MOV     A,R7
   \   0000EA   F0           MOVX    @DPTR,A
   2110                pApsLinkKey->txFrmCntr = 0;
   \   0000EB   7C00         MOV     R4,#0x0
   \   0000ED   7D00         MOV     R5,#0x0
   \   0000EF   7E00         MOV     R6,#0x0
   \   0000F1   7F00         MOV     R7,#0x0
   \   0000F3   E5..         MOV     A,?V0
   \   0000F5   2410         ADD     A,#0x10
   \   0000F7   F582         MOV     DPL,A
   \   0000F9   E4           CLR     A
   \   0000FA   35..         ADDC    A,?V1
   \   0000FC   F583         MOV     DPH,A
   \   0000FE   EC           MOV     A,R4
   \   0000FF   F0           MOVX    @DPTR,A
   \   000100   A3           INC     DPTR
   \   000101   ED           MOV     A,R5
   \   000102   F0           MOVX    @DPTR,A
   \   000103   A3           INC     DPTR
   \   000104   EE           MOV     A,R6
   \   000105   F0           MOVX    @DPTR,A
   \   000106   A3           INC     DPTR
   \   000107   EF           MOV     A,R7
   \   000108   F0           MOVX    @DPTR,A
   2111          
   2112                osal_nv_write( entry->keyNvId, 0,
   2113                              sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000109                ; Setup parameters for call to function osal_nv_write
   \   000109   78..         MOV     R0,#?V0
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010E   75..18       MOV     ?V8,#0x18
   \   000111   75..00       MOV     ?V9,#0x0
   \   000114   78..         MOV     R0,#?V8
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000119   7C00         MOV     R4,#0x0
   \   00011B   7D00         MOV     R5,#0x0
   \   00011D   7404         MOV     A,#0x4
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   E0           MOVX    A,@DPTR
   \   000123   F8           MOV     R0,A
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   F583         MOV     DPH,A
   \   000128   8882         MOV     DPL,R0
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   FA           MOV     R2,A
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   FB           MOV     R3,A
   \   000131   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000134   7404         MOV     A,#0x4
   \   000136   12....       LCALL   ?DEALLOC_XSTACK8
   \   000139   E9           MOV     A,R1
   2114          
   2115                // clear copy of key in RAM
   2116                osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   00013A                ; Setup parameters for call to function osal_memset
   \   00013A   7C18         MOV     R4,#0x18
   \   00013C   7D00         MOV     R5,#0x0
   \   00013E   7900         MOV     R1,#0x0
   \   000140   AA..         MOV     R2,?V0
   \   000142   AB..         MOV     R3,?V1
   \   000144   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2117          
   2118                osal_mem_free(pApsLinkKey);
   \   000147                ; Setup parameters for call to function osal_mem_free
   \   000147   AA..         MOV     R2,?V0
   \   000149   AB..         MOV     R3,?V1
   \   00014B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2119          
   2120                // set initial values for counters in RAM
   2121                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
   \   00014E   7C00         MOV     R4,#0x0
   \   000150   7D00         MOV     R5,#0x0
   \   000152   7E00         MOV     R6,#0x0
   \   000154   7F00         MOV     R7,#0x0
   \   000156   85..82       MOV     DPL,?XSP + 0
   \   000159   85..83       MOV     DPH,?XSP + 1
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F8           MOV     R0,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F583         MOV     DPH,A
   \   000162   8882         MOV     DPL,R0
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F8           MOV     R0,A
   \   000168   A3           INC     DPTR
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   F9           MOV     R1,A
   \   00016B   E8           MOV     A,R0
   \   00016C   75F009       MOV     B,#0x9
   \   00016F   A4           MUL     AB
   \   000170   C8           XCH     A,R0
   \   000171   AAF0         MOV     R2,B
   \   000173   75F000       MOV     B,#0x0
   \   000176   A4           MUL     AB
   \   000177   2A           ADD     A,R2
   \   000178   FA           MOV     R2,A
   \   000179   75F009       MOV     B,#0x9
   \   00017C   E9           MOV     A,R1
   \   00017D   A4           MUL     AB
   \   00017E   2A           ADD     A,R2
   \   00017F   F9           MOV     R1,A
   \   000180   74..         MOV     A,#(ApsLinkKeyFrmCntr + 247) & 0xff
   \   000182   28           ADD     A,R0
   \   000183   F582         MOV     DPL,A
   \   000185   74..         MOV     A,#((ApsLinkKeyFrmCntr - 4617) >> 8) & 0xff
   \   000187   39           ADDC    A,R1
   \   000188   F583         MOV     DPH,A
   \   00018A   EC           MOV     A,R4
   \   00018B   F0           MOVX    @DPTR,A
   \   00018C   A3           INC     DPTR
   \   00018D   ED           MOV     A,R5
   \   00018E   F0           MOVX    @DPTR,A
   \   00018F   A3           INC     DPTR
   \   000190   EE           MOV     A,R6
   \   000191   F0           MOVX    @DPTR,A
   \   000192   A3           INC     DPTR
   \   000193   EF           MOV     A,R7
   \   000194   F0           MOVX    @DPTR,A
   2122                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
   \   000195   7C00         MOV     R4,#0x0
   \   000197   7D00         MOV     R5,#0x0
   \   000199   7E00         MOV     R6,#0x0
   \   00019B   7F00         MOV     R7,#0x0
   \   00019D   85..82       MOV     DPL,?XSP + 0
   \   0001A0   85..83       MOV     DPH,?XSP + 1
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   F8           MOV     R0,A
   \   0001A5   A3           INC     DPTR
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   F583         MOV     DPH,A
   \   0001A9   8882         MOV     DPL,R0
   \   0001AB   A3           INC     DPTR
   \   0001AC   A3           INC     DPTR
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   F8           MOV     R0,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   F9           MOV     R1,A
   \   0001B2   E8           MOV     A,R0
   \   0001B3   75F009       MOV     B,#0x9
   \   0001B6   A4           MUL     AB
   \   0001B7   C8           XCH     A,R0
   \   0001B8   AAF0         MOV     R2,B
   \   0001BA   75F000       MOV     B,#0x0
   \   0001BD   A4           MUL     AB
   \   0001BE   2A           ADD     A,R2
   \   0001BF   FA           MOV     R2,A
   \   0001C0   75F009       MOV     B,#0x9
   \   0001C3   E9           MOV     A,R1
   \   0001C4   A4           MUL     AB
   \   0001C5   2A           ADD     A,R2
   \   0001C6   F9           MOV     R1,A
   \   0001C7   74..         MOV     A,#(ApsLinkKeyFrmCntr + 251) & 0xff
   \   0001C9   28           ADD     A,R0
   \   0001CA   F582         MOV     DPL,A
   \   0001CC   74..         MOV     A,#((ApsLinkKeyFrmCntr - 4613) >> 8) & 0xff
   \   0001CE   39           ADDC    A,R1
   \   0001CF   F583         MOV     DPH,A
   \   0001D1   EC           MOV     A,R4
   \   0001D2   F0           MOVX    @DPTR,A
   \   0001D3   A3           INC     DPTR
   \   0001D4   ED           MOV     A,R5
   \   0001D5   F0           MOVX    @DPTR,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   EE           MOV     A,R6
   \   0001D8   F0           MOVX    @DPTR,A
   \   0001D9   A3           INC     DPTR
   \   0001DA   EF           MOV     A,R7
   \   0001DB   F0           MOVX    @DPTR,A
   2123              }
   2124            }
   2125          
   2126            return status;
   \                     ??APSME_LinkKeySet_0:
   \   0001DC   A9..         MOV     R1,?V2
   \   0001DE   7404         MOV     A,#0x4
   \   0001E0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E3   7F0B         MOV     R7,#0xb
   \   0001E5   02....       LJMP    ?BANKED_LEAVE_XDATA
   2127          }
   2128          
   2129          /******************************************************************************
   2130           * @fn          ZDSecMgrAuthenticationSet
   2131           *
   2132           * @brief       Mark the specific device as authenticated or not
   2133           *
   2134           * @param       extAddr - [in] EXT address
   2135           * @param       option  - [in] authenticated or not
   2136           *
   2137           * @return      ZStatus_t
   2138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2139          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
   \                     ZDSecMgrAuthenticationSet:
   2140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V1,R1
   2141            ZStatus_t        status;
   2142            ZDSecMgrEntry_t* entry;
   2143          
   2144          
   2145            // lookup entry index for specified EXT address
   2146            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   000010                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000010   AC..         MOV     R4,?XSP + 0
   \   000012   AD..         MOV     R5,?XSP + 1
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00001B   E9           MOV     A,R1
   \   00001C   F5..         MOV     ?V0,A
   2147          
   2148            if ( status == ZSuccess )
   \   00001E   E5..         MOV     A,?V0
   \   000020   7019         JNZ     ??ZDSecMgrAuthenticationSet_0
   2149            {
   2150              entry->authenticateOption = option;
   \   000022   E5..         MOV     A,?V1
   \   000024   C0E0         PUSH    A
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F583         MOV     DPH,A
   \   000032   8882         MOV     DPL,R0
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   D0E0         POP     A
   \   00003A   F0           MOVX    @DPTR,A
   2151            }
   2152          
   2153            return status;
   \                     ??ZDSecMgrAuthenticationSet_0:
   \   00003B   A9..         MOV     R1,?V0
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   7F02         MOV     R7,#0x2
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   2154          }
   2155          
   2156          /******************************************************************************
   2157           * @fn          ZDSecMgrAuthenticationCheck
   2158           *
   2159           * @brief       Check if the specific device has been authenticated or not
   2160           *              For non-trust center device, always return TRUE
   2161           *
   2162           * @param       shortAddr - [in] short address
   2163           *
   2164           * @return      TRUE @ authenticated with CBKE
   2165           *              FALSE @ not authenticated
   2166           */
   2167          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2168          uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
   \                     ZDSecMgrAuthenticationCheck:
   2169          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2170          #if defined (TC_LINKKEY_JOIN)
   2171          
   2172            ZDSecMgrEntry_t* entry;
   2173            uint8 extAddr[Z_EXTADDR_LEN];
   2174          
   2175            // If the local device is not the trust center, always return TRUE
   2176            APSME_GetRequest( apsTrustCenterAddress, 0, extAddr );
   2177            if ( ! osal_ExtAddrEqual( extAddr , NLME_GetExtAddr() ) )
   2178            {
   2179              return TRUE;
   2180            }
   2181            // Otherwise, check the authentication option
   2182            else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
   2183            {
   2184              // lookup entry index for specified EXT address
   2185              if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
   2186              {
   2187                if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
   2188                {
   2189                  return TRUE;
   2190                }
   2191                else
   2192                {
   2193                  return FALSE;
   2194                }
   2195              }
   2196              else
   2197              {
   2198                // it may have been secured with TCLK only
   2199                uint16    ami;
   2200          
   2201                // lookup address index in address manager
   2202                if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   2203                {
   2204                  return TRUE;
   2205                }
   2206              }
   2207            }
   2208            return FALSE;
   2209          
   2210          #else
   2211            (void)shortAddr;  // Intentionally unreferenced parameter
   2212          
   2213            // For non AMI/SE Profile, perform no check and always return TRUE.
   2214            return TRUE;
   \   000000   7901         MOV     R1,#0x1
   \   000002   02....       LJMP    ?BRET
   2215          
   2216          #endif // TC_LINKKEY_JOIN
   2217          }
   2218          
   2219          /******************************************************************************
   2220           * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
   2221           *
   2222           * @brief       Get Key NV ID for specified NWK address.
   2223           *
   2224           * @param       extAddr - [in] EXT address
   2225           * @param       keyNvId - [out] NV ID
   2226           *
   2227           * @return      ZStatus_t
   2228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2229          ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
   \                     APSME_LinkKeyNVIdGet:
   2230          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   2231            ZStatus_t status;
   2232            ZDSecMgrEntry_t* entry;
   2233          
   2234            // lookup entry index for specified NWK address
   2235            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   000012                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000012   AC..         MOV     R4,?XSP + 0
   \   000014   AD..         MOV     R5,?XSP + 1
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00001D   E9           MOV     A,R1
   \   00001E   F5..         MOV     ?V2,A
   2236          
   2237            if ( status == ZSuccess )
   \   000020   E5..         MOV     A,?V2
   \   000022   7022         JNZ     ??APSME_LinkKeyNVIdGet_0
   2238            {
   2239              // return the index to the NV table
   2240              *pKeyNvId = entry->keyNvId;
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F583         MOV     DPH,A
   \   000030   8882         MOV     DPL,R0
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   85..82       MOV     DPL,?V0
   \   00003C   85..83       MOV     DPH,?V1
   \   00003F   E8           MOV     A,R0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E9           MOV     A,R1
   \   000043   F0           MOVX    @DPTR,A
   \   000044   800D         SJMP    ??APSME_LinkKeyNVIdGet_1
   2241            }
   2242            else
   2243            {
   2244              *pKeyNvId = SEC_NO_KEY_NV_ID;
   \                     ??APSME_LinkKeyNVIdGet_0:
   \   000046   85..82       MOV     DPL,?V0
   \   000049   85..83       MOV     DPH,?V1
   \   00004C   7400         MOV     A,#0x0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   7400         MOV     A,#0x0
   \   000052   F0           MOVX    @DPTR,A
   2245            }
   2246          
   2247            return status;
   \                     ??APSME_LinkKeyNVIdGet_1:
   \   000053   A9..         MOV     R1,?V2
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV     R7,#0x3
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2248          }
   2249          
   2250          /******************************************************************************
   2251           * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
   2252           *
   2253           * @brief       Verifies if Link Key in NV has been set.
   2254           *
   2255           * @param       extAddr - [in] EXT address
   2256           *
   2257           * @return      TRUE - Link Key has been established
   2258           *              FALSE - Link Key in NV has default value.
   2259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2260          uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
   \                     APSME_IsLinkKeyValid:
   2261          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2262            APSME_LinkKeyData_t *pKeyData;
   2263            uint16 apsLinkKeyNvId;
   2264            uint8 nullKey[SEC_KEY_LEN];
   2265            uint8 status = FALSE;
   \   00000E   75..00       MOV     ?V0,#0x0
   2266          
   2267            // initialize default vealue to compare to
   2268            osal_memset(nullKey, 0x00, SEC_KEY_LEN);
   \   000011                ; Setup parameters for call to function osal_memset
   \   000011   7C10         MOV     R4,#0x10
   \   000013   7D00         MOV     R5,#0x0
   \   000015   7900         MOV     R1,#0x0
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP101_8
   \   00001C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2269          
   2270            // check for APS link NV ID
   2271            APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
   \   00001F                ; Setup parameters for call to function APSME_LinkKeyNVIdGet
   \   00001F   AC..         MOV     R4,?XSP + 0
   \   000021   AD..         MOV     R5,?XSP + 1
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
   \   00002A   E9           MOV     A,R1
   2272          
   2273            if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   E8           MOV     A,R0
   \   000037   49           ORL     A,R1
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??APSME_IsLinkKeyValid_0 & 0xFFFF
   2274            {
   2275              pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00003D                ; Setup parameters for call to function osal_mem_alloc
   \   00003D   7A18         MOV     R2,#0x18
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000044   8A..         MOV     ?V4,R2
   \   000046   8B..         MOV     ?V5,R3
   \   000048   85....       MOV     ?V2,?V4
   \   00004B   85....       MOV     ?V3,?V5
   2276          
   2277              if (pKeyData != NULL)
   \   00004E   E5..         MOV     A,?V2
   \   000050   45..         ORL     A,?V3
   \   000052   606C         JZ      ??APSME_IsLinkKeyValid_0
   2278              {
   2279                // retrieve key from NV
   2280                if ( osal_nv_read( apsLinkKeyNvId, 0,
   2281                                  sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
   \   000054                ; Setup parameters for call to function osal_nv_read
   \   000054   78..         MOV     R0,#?V2
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   75..18       MOV     ?V4,#0x18
   \   00005C   75..00       MOV     ?V5,#0x0
   \   00005F   78..         MOV     R0,#?V4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   7C00         MOV     R4,#0x0
   \   000066   7D00         MOV     R5,#0x0
   \   000068   7404         MOV     A,#0x4
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FA           MOV     R2,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000075   7404         MOV     A,#0x4
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   E9           MOV     A,R1
   \   00007B   702F         JNZ     ??APSME_IsLinkKeyValid_1
   2282                {
   2283                  // if stored key is different than default value, then a key has been established
   2284                  if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
   \   00007D                ; Setup parameters for call to function osal_memcmp
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?XSTACK_DISP100_8
   \   000082   88..         MOV     ?V4,R0
   \   000084   89..         MOV     ?V5,R1
   \   000086   75..00       MOV     ?V6,#0x0
   \   000089   78..         MOV     R0,#?V4
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008E   7C10         MOV     R4,#0x10
   \   000090   7D00         MOV     R5,#0x0
   \   000092   85..82       MOV     DPL,?V2
   \   000095   85..83       MOV     DPH,?V3
   \   000098   A982         MOV     R1,DPL
   \   00009A   AA83         MOV     R2,DPH
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000A1   7403         MOV     A,#0x3
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV     A,R1
   \   0000A7   7003         JNZ     ??APSME_IsLinkKeyValid_1
   2285                  {
   2286                    status = TRUE;
   \   0000A9   75..01       MOV     ?V0,#0x1
   2287                  }
   2288                }
   2289          
   2290                // clear copy of key in RAM
   2291                osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
   \                     ??APSME_IsLinkKeyValid_1:
   \   0000AC                ; Setup parameters for call to function osal_memset
   \   0000AC   7C18         MOV     R4,#0x18
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7900         MOV     R1,#0x0
   \   0000B2   AA..         MOV     R2,?V2
   \   0000B4   AB..         MOV     R3,?V3
   \   0000B6   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2292          
   2293                osal_mem_free(pKeyData);
   \   0000B9                ; Setup parameters for call to function osal_mem_free
   \   0000B9   AA..         MOV     R2,?V2
   \   0000BB   AB..         MOV     R3,?V3
   \   0000BD   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2294              }
   2295            }
   2296          
   2297            return status;
   \                     ??APSME_IsLinkKeyValid_0:
   \   0000C0   A9..         MOV     R1,?V0
   \   0000C2   7412         MOV     A,#0x12
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C7   7F07         MOV     R7,#0x7
   \   0000C9   02....       LJMP    ?BANKED_LEAVE_XDATA
   2298          }
   2299          
   2300          /******************************************************************************
   2301           * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
   2302           *
   2303           * @brief       Verify and process key transportation to child.
   2304           *
   2305           * @param       ind - [in] APSME_TransportKeyInd_t
   2306           *
   2307           * @return      uint8 - success(TRUE:FALSE)
   2308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2309          uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
   \                     APSME_KeyFwdToChild:
   2310          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2311            // verify from Trust Center
   2312            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   702F         JNZ     ??APSME_KeyFwdToChild_0
   2313            {
   2314              // check for initial NWK key
   2315              if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   2316                   ( ind->keyType == 6            ) )
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   600B         JZ      ??APSME_KeyFwdToChild_1
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6406         XRL     A,#0x6
   \   00002A   7015         JNZ     ??APSME_KeyFwdToChild_2
   2317              {
   2318                // set association status to authenticated
   2319                ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
   \                     ??APSME_KeyFwdToChild_1:
   \   00002C                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002C                ; Setup parameters for call to function AssocGetWithExt
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FA           MOV     R2,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FB           MOV     R3,A
   \   00003B   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   00003E   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   2320              }
   2321          
   2322              return TRUE;
   \                     ??APSME_KeyFwdToChild_2:
   \   000041   7901         MOV     R1,#0x1
   \   000043   8002         SJMP    ??APSME_KeyFwdToChild_3
   2323            }
   2324          
   2325            return FALSE;
   \                     ??APSME_KeyFwdToChild_0:
   \   000045   7900         MOV     R1,#0x0
   \                     ??APSME_KeyFwdToChild_3:
   \   000047   7F01         MOV     R7,#0x1
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
   2326          }
   2327          
   2328          /******************************************************************************
   2329           * @fn          ZDSecMgrAddLinkKey
   2330           *
   2331           * @brief       Add the application link key to ZDSecMgr. Also mark the device
   2332           *              as authenticated in the authenticateOption. Note that this function
   2333           *              is hardwared to CBKE right now.
   2334           *
   2335           * @param       shortAddr - short address of the partner device
   2336           * @param       extAddr - extended address of the partner device
   2337           * @param       key - link key
   2338           *
   2339           * @return      ZStatus_t
   2340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2341          ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
   \                     ZDSecMgrAddLinkKey:
   2342          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   7412         MOV     A,#0x12
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
   2343            uint16           ami;
   2344            ZDSecMgrEntry_t* entry;
   2345          
   2346            /* Store the device address in the addr manager */
   2347            if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
   \   00001E                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP100_8
   \   000023   88..         MOV     ?V4,R0
   \   000025   89..         MOV     ?V5,R1
   \   000027   78..         MOV     R0,#?V4
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   EE           MOV     A,R6
   \   00002D   FC           MOV     R4,A
   \   00002E   EF           MOV     A,R7
   \   00002F   FD           MOV     R5,A
   \   000030   AA..         MOV     R2,?V2
   \   000032   AB..         MOV     R3,?V3
   \   000034   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003C   E9           MOV     A,R1
   \   00003D   6004         JZ      ??ZDSecMgrAddLinkKey_0
   2348            {
   2349              /* Adding to Addr Manager fails */
   2350              return ZFailure;
   \   00003F   7901         MOV     R1,#0x1
   \   000041   805C         SJMP    ??ZDSecMgrAddLinkKey_1
   2351            }
   2352          
   2353            /* Lookup entry using specified address index */
   2354            ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrAddLinkKey_0:
   \   000043                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000043   AC..         MOV     R4,?XSP + 0
   \   000045   AD..         MOV     R5,?XSP + 1
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FA           MOV     R2,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000054   E9           MOV     A,R1
   2355          
   2356            // If no existing entry, create one
   2357            if ( entry == NULL )
   \   000055   85..82       MOV     DPL,?XSP + 0
   \   000058   85..83       MOV     DPH,?XSP + 1
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   49           ORL     A,R1
   \   000062   702D         JNZ     ??ZDSecMgrAddLinkKey_2
   2358            {
   2359              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   000064                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   000064   AA..         MOV     R2,?XSP + 0
   \   000066   AB..         MOV     R3,?XSP + 1
   \   000068   12....       LCALL   `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   00006B   E9           MOV     A,R1
   \   00006C   701F         JNZ     ??ZDSecMgrAddLinkKey_3
   2360              {
   2361                entry->ami = ami;
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FA           MOV     R2,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FB           MOV     R3,A
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F8           MOV     R0,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F583         MOV     DPH,A
   \   000084   8882         MOV     DPL,R0
   \   000086   EA           MOV     A,R2
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   EB           MOV     A,R3
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   8004         SJMP    ??ZDSecMgrAddLinkKey_2
   2362              }
   2363              else
   2364              {
   2365                /* Security Manager full */
   2366                return ZBufferFull;
   \                     ??ZDSecMgrAddLinkKey_3:
   \   00008D   7911         MOV     R1,#0x11
   \   00008F   800E         SJMP    ??ZDSecMgrAddLinkKey_1
   2367              }
   2368            }
   2369            // Write the link key
   2370            APSME_LinkKeySet( extAddr, key );
   \                     ??ZDSecMgrAddLinkKey_2:
   \   000091                ; Setup parameters for call to function APSME_LinkKeySet
   \   000091   AC..         MOV     R4,?V0
   \   000093   AD..         MOV     R5,?V1
   \   000095   EE           MOV     A,R6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   FB           MOV     R3,A
   \   000099   12....       LCALL   `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   \   00009C   E9           MOV     A,R1
   2371          
   2372          #if defined (TC_LINKKEY_JOIN)
   2373            // Mark the device as authenticated.
   2374            ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
   2375          #endif
   2376          
   2377          #if defined NV_RESTORE
   2378            ZDSecMgrWriteNV();  // Write the new established link key to NV.
   2379          #endif
   2380          
   2381            return ZSuccess;
   \   00009D   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAddLinkKey_1:
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A4   7F06         MOV     R7,#0x6
   \   0000A6   02....       LJMP    ?BANKED_LEAVE_XDATA
   2382          }
   2383          
   2384          /******************************************************************************
   2385           * @fn          ZDSecMgrInitNV
   2386           *
   2387           * @brief       Initialize the SecMgr entry data in NV with all values set to 0
   2388           *
   2389           * @param       none
   2390           *
   2391           * @return      uint8 - <osal_nv_item_init> return codes
   2392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2393          uint8 ZDSecMgrInitNV(void)
   \                     ZDSecMgrInitNV:
   2394          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2395          
   2396            uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
   2397                          (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   F5..         MOV     ?V1,A
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C11         MOV     R4,#0x11
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7A4C         MOV     R2,#0x4c
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   E9           MOV     A,R1
   \   000025   FE           MOV     R6,A
   2398          
   2399            // If the item does not already exist, set all values to 0
   2400            if (rtrn != SUCCESS)
   \   000026   EE           MOV     A,R6
   \   000027   6036         JZ      ??ZDSecMgrInitNV_0
   2401            {
   2402              nvDeviceListHdr_t hdr;
   2403              hdr.numRecs = 0;
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   7400         MOV     A,#0x0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   2404              osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \   000036                ; Setup parameters for call to function osal_nv_write
   \   000036   A8..         MOV     R0,?XSP + 0
   \   000038   A9..         MOV     R1,?XSP + 1
   \   00003A   88..         MOV     ?V0,R0
   \   00003C   89..         MOV     ?V1,R1
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   75..02       MOV     ?V0,#0x2
   \   000046   75..00       MOV     ?V1,#0x0
   \   000049   78..         MOV     R0,#?V0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7C00         MOV     R4,#0x0
   \   000050   7D00         MOV     R5,#0x0
   \   000052   7A4C         MOV     R2,#0x4c
   \   000054   7B00         MOV     R3,#0x0
   \   000056   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   E9           MOV     A,R1
   2405            }
   2406          
   2407            rtrn |= osal_nv_item_init( ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN,
   2408                                       zgApsTrustCenterAddr );
   \                     ??ZDSecMgrInitNV_0:
   \   00005F                ; Setup parameters for call to function osal_nv_item_init
   \   00005F   75....       MOV     ?V0,#zgApsTrustCenterAddr & 0xff
   \   000062   75....       MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000065   78..         MOV     R0,#?V0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7C08         MOV     R4,#0x8
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A71         MOV     R2,#0x71
   \   000070   7B00         MOV     R3,#0x0
   \   000072   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   E9           MOV     A,R1
   \   00007B   CE           XCH     A,R6
   \   00007C   4E           ORL     A,R6
   \   00007D   CE           XCH     A,R6
   2409          
   2410            return rtrn;
   \   00007E   EE           MOV     A,R6
   \   00007F   F9           MOV     R1,A
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
   \   000085   7F02         MOV     R7,#0x2
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
   2411          }
   2412          
   2413          #if defined ( NV_RESTORE )
   2414          /*********************************************************************
   2415           * @fn      ZDSecMgrWriteNV()
   2416           *
   2417           * @brief   Save off the APS link key list to NV
   2418           *
   2419           * @param   none
   2420           *
   2421           * @return  none
   2422           */
   2423          static void ZDSecMgrWriteNV( void )
   2424          {
   2425            uint16 i;
   2426            nvDeviceListHdr_t hdr;
   2427          
   2428            hdr.numRecs = 0;
   2429          
   2430            if (ZDSecMgrEntries != NULL)
   2431            {
   2432              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   2433              {
   2434                // Save off the record
   2435                osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2436                              (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2437                              sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
   2438          
   2439                if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
   2440                {
   2441                  hdr.numRecs++;
   2442                }
   2443              }
   2444            }
   2445          
   2446            // Save off the header
   2447            osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   2448          }
   2449          #endif // NV_RESTORE
   2450          
   2451          #if defined ( NV_RESTORE )
   2452          /******************************************************************************
   2453           * @fn          ZDSecMgrRestoreFromNV
   2454           *
   2455           * @brief       Restore the APS Link Key entry data from NV. It does not restore
   2456           *              the key data itself as they remain in NV until they are used.
   2457           *              Only list data is restored.
   2458           *              Restore zgTrustCenterAdress from NV.
   2459           *
   2460           * @param       none
   2461           *
   2462           * @return      None.
   2463           */
   2464          static void ZDSecMgrRestoreFromNV( void )
   2465          {
   2466            nvDeviceListHdr_t hdr;
   2467            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2468          
   2469            if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
   2470                ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
   2471            {
   2472              uint8 x;
   2473          
   2474              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   2475          
   2476              for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
   2477              {
   2478                if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
   2479                                  (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
   2480                                  sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
   2481                {
   2482                  // update data only for valid entries
   2483                  if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
   2484                  {
   2485                    if (pApsLinkKey != NULL)
   2486                    {
   2487                      // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2488                      osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
   2489                                   sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   2490          
   2491                      // set new values for the counter
   2492                      pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
   2493          
   2494                      // restore values for counters in RAM
   2495                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
   2496                                                      pApsLinkKey->txFrmCntr;
   2497          
   2498                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
   2499                                                      pApsLinkKey->rxFrmCntr;
   2500          
   2501                      osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
   2502                                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   2503          
   2504                      // clear copy of key in RAM
   2505                      osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   2506                    }
   2507                  }
   2508                }
   2509              }
   2510          
   2511              if (pApsLinkKey != NULL)
   2512              {
   2513                osal_mem_free(pApsLinkKey);
   2514              }
   2515            }
   2516          
   2517            osal_nv_read( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   2518          }
   2519          #endif // NV_RESTORE
   2520          
   2521          /*********************************************************************
   2522           * @fn          ZDSecMgrSetDefaultNV
   2523           *
   2524           * @brief       Write the defaults to NV for Entry table and for APS key data table
   2525           *
   2526           * @param       none
   2527           *
   2528           * @return      none
   2529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2530          void ZDSecMgrSetDefaultNV( void )
   \                     ZDSecMgrSetDefaultNV:
   2531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2532            uint16 i;
   2533            nvDeviceListHdr_t hdr;
   2534            ZDSecMgrEntry_t secMgrEntry;
   2535            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   75..00       MOV     ?V1,#0x0
   2536          
   2537            // Initialize the header
   2538            hdr.numRecs = 0;
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   7400         MOV     A,#0x0
   \   00001C   F0           MOVX    @DPTR,A
   2539          
   2540            // clear the header
   2541            osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   A8..         MOV     R0,?XSP + 0
   \   00001F   A9..         MOV     R1,?XSP + 1
   \   000021   88..         MOV     ?V2,R0
   \   000023   89..         MOV     ?V3,R1
   \   000025   78..         MOV     R0,#?V2
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..02       MOV     ?V2,#0x2
   \   00002D   75..00       MOV     ?V3,#0x0
   \   000030   78..         MOV     R0,#?V2
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A4C         MOV     R2,#0x4c
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   2542          
   2543            osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
   \   000046                ; Setup parameters for call to function osal_memset
   \   000046   7C05         MOV     R4,#0x5
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?XSTACK_DISP101_8
   \   000051   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2544          
   2545            for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000054   7E00         MOV     R6,#0x0
   \   000056   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrSetDefaultNV_0:
   \   000058   C3           CLR     C
   \   000059   EE           MOV     A,R6
   \   00005A   9403         SUBB    A,#0x3
   \   00005C   EF           MOV     A,R7
   \   00005D   9400         SUBB    A,#0x0
   \   00005F   504D         JNC     ??ZDSecMgrSetDefaultNV_1
   2546            {
   2547              // Clear the record
   2548              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2549                          (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2550                                  sizeof(ZDSecMgrEntry_t), &secMgrEntry );
   \   000061                ; Setup parameters for call to function osal_nv_write
   \   000061   7402         MOV     A,#0x2
   \   000063   12....       LCALL   ?XSTACK_DISP100_8
   \   000066   88..         MOV     ?V2,R0
   \   000068   89..         MOV     ?V3,R1
   \   00006A   78..         MOV     R0,#?V2
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   75..05       MOV     ?V2,#0x5
   \   000072   75..00       MOV     ?V3,#0x0
   \   000075   78..         MOV     R0,#?V2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   EE           MOV     A,R6
   \   00007B   F8           MOV     R0,A
   \   00007C   EF           MOV     A,R7
   \   00007D   F9           MOV     R1,A
   \   00007E   E8           MOV     A,R0
   \   00007F   75F005       MOV     B,#0x5
   \   000082   A4           MUL     AB
   \   000083   C8           XCH     A,R0
   \   000084   AAF0         MOV     R2,B
   \   000086   75F000       MOV     B,#0x0
   \   000089   A4           MUL     AB
   \   00008A   2A           ADD     A,R2
   \   00008B   FA           MOV     R2,A
   \   00008C   75F005       MOV     B,#0x5
   \   00008F   E9           MOV     A,R1
   \   000090   A4           MUL     AB
   \   000091   2A           ADD     A,R2
   \   000092   F9           MOV     R1,A
   \   000093   E8           MOV     A,R0
   \   000094   2402         ADD     A,#0x2
   \   000096   FC           MOV     R4,A
   \   000097   E4           CLR     A
   \   000098   39           ADDC    A,R1
   \   000099   FD           MOV     R5,A
   \   00009A   7A4C         MOV     R2,#0x4c
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000A1   7404         MOV     A,#0x4
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV     A,R1
   2551            }
   \   0000A7   0E           INC     R6
   \   0000A8   EE           MOV     A,R6
   \   0000A9   70AD         JNZ     ??ZDSecMgrSetDefaultNV_0
   \   0000AB   0F           INC     R7
   \   0000AC   80AA         SJMP    ??ZDSecMgrSetDefaultNV_0
   2552          
   2553            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \                     ??ZDSecMgrSetDefaultNV_1:
   \   0000AE                ; Setup parameters for call to function osal_mem_alloc
   \   0000AE   7A18         MOV     R2,#0x18
   \   0000B0   7B00         MOV     R3,#0x0
   \   0000B2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B5   8A..         MOV     ?V2,R2
   \   0000B7   8B..         MOV     ?V3,R3
   \   0000B9   85....       MOV     ?V0,?V2
   \   0000BC   85....       MOV     ?V1,?V3
   2554          
   2555            if (pApsLinkKey != NULL)
   \   0000BF   E5..         MOV     A,?V0
   \   0000C1   45..         ORL     A,?V1
   \   0000C3   604D         JZ      ??ZDSecMgrSetDefaultNV_2
   2556            {
   2557              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   0000C5                ; Setup parameters for call to function osal_memset
   \   0000C5   7C18         MOV     R4,#0x18
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   7900         MOV     R1,#0x0
   \   0000CB   AA..         MOV     R2,?V0
   \   0000CD   AB..         MOV     R3,?V1
   \   0000CF   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2558          
   2559              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   0000D2   7E00         MOV     R6,#0x0
   \   0000D4   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrSetDefaultNV_3:
   \   0000D6   C3           CLR     C
   \   0000D7   EE           MOV     A,R6
   \   0000D8   9403         SUBB    A,#0x3
   \   0000DA   EF           MOV     A,R7
   \   0000DB   9400         SUBB    A,#0x0
   \   0000DD   502C         JNC     ??ZDSecMgrSetDefaultNV_4
   2560              {
   2561                // Clear the record
   2562                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   2563                              sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   0000DF                ; Setup parameters for call to function osal_nv_write
   \   0000DF   78..         MOV     R0,#?V0
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   75..18       MOV     ?V2,#0x18
   \   0000E7   75..00       MOV     ?V3,#0x0
   \   0000EA   78..         MOV     R0,#?V2
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EF   7C00         MOV     R4,#0x0
   \   0000F1   7D00         MOV     R5,#0x0
   \   0000F3   EE           MOV     A,R6
   \   0000F4   2401         ADD     A,#0x1
   \   0000F6   FA           MOV     R2,A
   \   0000F7   EF           MOV     A,R7
   \   0000F8   3402         ADDC    A,#0x2
   \   0000FA   FB           MOV     R3,A
   \   0000FB   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000FE   7404         MOV     A,#0x4
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
   \   000103   E9           MOV     A,R1
   2564              }
   \   000104   0E           INC     R6
   \   000105   EE           MOV     A,R6
   \   000106   70CE         JNZ     ??ZDSecMgrSetDefaultNV_3
   \   000108   0F           INC     R7
   \   000109   80CB         SJMP    ??ZDSecMgrSetDefaultNV_3
   2565          
   2566              osal_mem_free(pApsLinkKey);
   \                     ??ZDSecMgrSetDefaultNV_4:
   \   00010B                ; Setup parameters for call to function osal_mem_free
   \   00010B   AA..         MOV     R2,?V0
   \   00010D   AB..         MOV     R3,?V1
   \   00010F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2567            }
   2568          }
   \                     ??ZDSecMgrSetDefaultNV_2:
   \   000112   7407         MOV     A,#0x7
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
   \   000117   7F04         MOV     R7,#0x4
   \   000119   02....       LJMP    ?BANKED_LEAVE_XDATA
   2569          
   2570          #if defined ( NV_RESTORE )
   2571          /*********************************************************************
   2572           * @fn      ZDSecMgrUpdateNV()
   2573           *
   2574           * @brief   Updates one entry of the APS link key table to NV
   2575           *
   2576           * @param   index - to the entry in security manager table
   2577           *
   2578           * @return  none
   2579           */
   2580          static void ZDSecMgrUpdateNV( uint16 index )
   2581          {
   2582            nvDeviceListHdr_t hdr;
   2583          
   2584            if (ZDSecMgrEntries != NULL)
   2585            {
   2586              // Save off the record
   2587              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2588                             (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
   2589                             sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
   2590            }
   2591          
   2592            if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
   2593            {
   2594              if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   2595              {
   2596                if (hdr.numRecs > 0)
   2597                {
   2598                  hdr.numRecs--;
   2599                }
   2600              }
   2601              else
   2602              {
   2603                hdr.numRecs++;
   2604              }
   2605          
   2606              // Save off the header
   2607              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   2608            }
   2609          }
   2610          #endif // NV_RESTORE
   2611          
   2612          /******************************************************************************
   2613           * @fn          ZDSecMgrAPSRemove
   2614           *
   2615           * @brief       Remove device from network.
   2616           *
   2617           * @param       nwkAddr - device's NWK address
   2618           * @param       extAddr - device's Extended address
   2619           * @param       parentAddr - parent's NWK address
   2620           *
   2621           * @return      ZStatus_t
   2622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2623          ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
   \                     ZDSecMgrAPSRemove:
   2624          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   7414         MOV     A,#0x14
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V3,A
   2625            ZDSecMgrDevice_t device;
   2626          
   2627            if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
   2628                 ( extAddr == NULL )              ||
   2629                 ( parentAddr == INVALID_NODE_ADDR ) )
   \   00001E   74FE         MOV     A,#-0x2
   \   000020   65..         XRL     A,?V0
   \   000022   7004         JNZ     ??ZDSecMgrAPSRemove_0
   \   000024   74FF         MOV     A,#-0x1
   \   000026   65..         XRL     A,?V1
   \                     ??ZDSecMgrAPSRemove_0:
   \   000028   6010         JZ      ??ZDSecMgrAPSRemove_1
   \   00002A   EE           MOV     A,R6
   \   00002B   4F           ORL     A,R7
   \   00002C   600C         JZ      ??ZDSecMgrAPSRemove_1
   \   00002E   74FE         MOV     A,#-0x2
   \   000030   65..         XRL     A,?V2
   \   000032   7004         JNZ     ??ZDSecMgrAPSRemove_2
   \   000034   74FF         MOV     A,#-0x1
   \   000036   65..         XRL     A,?V3
   \                     ??ZDSecMgrAPSRemove_2:
   \   000038   7004         JNZ     ??ZDSecMgrAPSRemove_3
   2630            {
   2631              return ( ZFailure );
   \                     ??ZDSecMgrAPSRemove_1:
   \   00003A   7901         MOV     R1,#0x1
   \   00003C   802C         SJMP    ??ZDSecMgrAPSRemove_4
   2632            }
   2633          
   2634            device.nwkAddr = nwkAddr;
   \                     ??ZDSecMgrAPSRemove_3:
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E5..         MOV     A,?V0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E5..         MOV     A,?V1
   \   00004A   F0           MOVX    @DPTR,A
   2635            device.extAddr = extAddr;
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   EE           MOV     A,R6
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   EF           MOV     A,R7
   \   000054   F0           MOVX    @DPTR,A
   2636            device.parentAddr = parentAddr;
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E5..         MOV     A,?V2
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E5..         MOV     A,?V3
   \   000060   F0           MOVX    @DPTR,A
   2637          
   2638            // remove device
   2639            ZDSecMgrDeviceRemove( &device );
   \   000061                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000061   AA..         MOV     R2,?XSP + 0
   \   000063   AB..         MOV     R3,?XSP + 1
   \   000065   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   2640          
   2641            return ( ZSuccess );
   \   000068   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAPSRemove_4:
   \   00006A   7408         MOV     A,#0x8
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   7F04         MOV     R7,#0x4
   \   000071   02....       LJMP    ?BANKED_LEAVE_XDATA
   2642          }
   2643          
   2644          /******************************************************************************
   2645           * @fn          APSME_TCLinkKeyInit
   2646           *
   2647           * @brief       Initialize the NV table for preconfigured TC link key
   2648           *
   2649           *              When zgUseDefaultTCL is set to TRUE, the default preconfig
   2650           *              Trust Center Link Key is written to NV. A single tclk is used
   2651           *              by all devices joining the network.
   2652           *
   2653           * @param       setDefault - TRUE to set default values
   2654           *
   2655           * @return      none
   2656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2657          void APSME_TCLinkKeyInit(uint8 setDefault)
   \                     APSME_TCLinkKeyInit:
   2658          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   2659            uint8             i;
   2660            APSME_TCLinkKey_t tcLinkKey;
   2661            uint8             rtrn;
   2662          
   2663            // Initialize all NV items for preconfigured TCLK
   2664            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \   00000C   7E00         MOV     R6,#0x0
   \                     ??APSME_TCLinkKeyInit_0:
   \   00000E   EE           MOV     A,R6
   \   00000F   6003         JZ      $+5
   \   000011   02....       LJMP    ??APSME_TCLinkKeyInit_1 & 0xFFFF
   2665            {
   2666              // Making sure data is cleared for every key all the time
   2667              osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C20         MOV     R4,#0x20
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2668          
   2669              // Initialize first element of the table with the default TCLK
   2670              if((i == 0) && ( zgUseDefaultTCLK == TRUE ))
   \   000021   EE           MOV     A,R6
   \   000022   7038         JNZ     ??APSME_TCLinkKeyInit_2
   \   000024   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   7030         JNZ     ??APSME_TCLinkKeyInit_2
   2671              {
   2672                osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   00002C                ; Setup parameters for call to function osal_memset
   \   00002C   7C08         MOV     R4,#0x8
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   79FF         MOV     R1,#-0x1
   \   000032   AA..         MOV     R2,?XSP + 0
   \   000034   AB..         MOV     R3,?XSP + 1
   \   000036   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2673                osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
   \   000039                ; Setup parameters for call to function osal_memcpy
   \   000039   75....       MOV     ?V4,#defaultTCLinkKey & 0xff
   \   00003C   75....       MOV     ?V5,#(defaultTCLinkKey >> 8) & 0xff
   \   00003F   75..80       MOV     ?V6,#-0x80
   \   000042   78..         MOV     R0,#?V4
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000047   7C10         MOV     R4,#0x10
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   740B         MOV     A,#0xb
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   AA82         MOV     R2,DPL
   \   000052   AB83         MOV     R3,DPH
   \   000054   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000057   7403         MOV     A,#0x3
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   2674              }
   2675          
   2676              // If the item doesn't exist in NV memory, create and initialize
   2677              // it with the default value passed in, either defaultTCLK or 0
   2678              rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
   2679                                         sizeof(APSME_TCLinkKey_t), &tcLinkKey);
   \                     ??APSME_TCLinkKeyInit_2:
   \   00005C                ; Setup parameters for call to function osal_nv_item_init
   \   00005C   A8..         MOV     R0,?XSP + 0
   \   00005E   A9..         MOV     R1,?XSP + 1
   \   000060   88..         MOV     ?V2,R0
   \   000062   89..         MOV     ?V3,R1
   \   000064   78..         MOV     R0,#?V2
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   7C20         MOV     R4,#0x20
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   EE           MOV     A,R6
   \   00006E   F8           MOV     R0,A
   \   00006F   7900         MOV     R1,#0x0
   \   000071   E8           MOV     A,R0
   \   000072   2401         ADD     A,#0x1
   \   000074   FA           MOV     R2,A
   \   000075   E9           MOV     A,R1
   \   000076   3401         ADDC    A,#0x1
   \   000078   FB           MOV     R3,A
   \   000079   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081   E9           MOV     A,R1
   \   000082   FF           MOV     R7,A
   2680          
   2681              if (rtrn == SUCCESS)
   \   000083   EF           MOV     A,R7
   \   000084   6003         JZ      $+5
   \   000086   02....       LJMP    ??APSME_TCLinkKeyInit_3 & 0xFFFF
   2682              {
   2683                // set the Frame counters to 0 to existing keys in NV
   2684                osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   2685                               sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   000089                ; Setup parameters for call to function osal_nv_read
   \   000089   A8..         MOV     R0,?XSP + 0
   \   00008B   A9..         MOV     R1,?XSP + 1
   \   00008D   88..         MOV     ?V2,R0
   \   00008F   89..         MOV     ?V3,R1
   \   000091   78..         MOV     R0,#?V2
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   75..20       MOV     ?V2,#0x20
   \   000099   75..00       MOV     ?V3,#0x0
   \   00009C   78..         MOV     R0,#?V2
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   7C00         MOV     R4,#0x0
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   EE           MOV     A,R6
   \   0000A6   F8           MOV     R0,A
   \   0000A7   7900         MOV     R1,#0x0
   \   0000A9   E8           MOV     A,R0
   \   0000AA   2401         ADD     A,#0x1
   \   0000AC   FA           MOV     R2,A
   \   0000AD   E9           MOV     A,R1
   \   0000AE   3401         ADDC    A,#0x1
   \   0000B0   FB           MOV     R3,A
   \   0000B1   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000B4   7404         MOV     A,#0x4
   \   0000B6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B9   E9           MOV     A,R1
   2686          
   2687          #if defined ( NV_RESTORE )
   2688                if (setDefault == TRUE)
   2689                {
   2690                  // clear the value stored in NV
   2691                  tcLinkKey.txFrmCntr = 0;
   2692                }
   2693                else
   2694                {
   2695                  // increase the value stored in NV
   2696                  tcLinkKey.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
   2697                }
   2698          #else
   2699                // Clear the counters if NV_RESTORE is not enabled and this NV item
   2700                // already existed in the NV memory
   2701                tcLinkKey.txFrmCntr = 0;
   \   0000BA   7A00         MOV     R2,#0x0
   \   0000BC   7B00         MOV     R3,#0x0
   \   0000BE   7C00         MOV     R4,#0x0
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   7418         MOV     A,#0x18
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   EA           MOV     A,R2
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   EB           MOV     A,R3
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   EC           MOV     A,R4
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   ED           MOV     A,R5
   \   0000D1   F0           MOVX    @DPTR,A
   2702                tcLinkKey.rxFrmCntr = 0;
   \   0000D2   7A00         MOV     R2,#0x0
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   7C00         MOV     R4,#0x0
   \   0000D8   7D00         MOV     R5,#0x0
   \   0000DA   741C         MOV     A,#0x1c
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   EA           MOV     A,R2
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   EB           MOV     A,R3
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   EC           MOV     A,R4
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   ED           MOV     A,R5
   \   0000E9   F0           MOVX    @DPTR,A
   2703          #endif  // NV_RESTORE
   2704          
   2705                osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   2706                                sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   0000EA                ; Setup parameters for call to function osal_nv_write
   \   0000EA   A8..         MOV     R0,?XSP + 0
   \   0000EC   A9..         MOV     R1,?XSP + 1
   \   0000EE   88..         MOV     ?V2,R0
   \   0000F0   89..         MOV     ?V3,R1
   \   0000F2   78..         MOV     R0,#?V2
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F7   75..20       MOV     ?V2,#0x20
   \   0000FA   75..00       MOV     ?V3,#0x0
   \   0000FD   78..         MOV     R0,#?V2
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000102   7C00         MOV     R4,#0x0
   \   000104   7D00         MOV     R5,#0x0
   \   000106   EE           MOV     A,R6
   \   000107   F8           MOV     R0,A
   \   000108   7900         MOV     R1,#0x0
   \   00010A   E8           MOV     A,R0
   \   00010B   2401         ADD     A,#0x1
   \   00010D   FA           MOV     R2,A
   \   00010E   E9           MOV     A,R1
   \   00010F   3401         ADDC    A,#0x1
   \   000111   FB           MOV     R3,A
   \   000112   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000115   7404         MOV     A,#0x4
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011A   E9           MOV     A,R1
   2707          
   2708                // set initial values for counters in RAM
   2709                TCLinkKeyFrmCntr[i].txFrmCntr = tcLinkKey.txFrmCntr;
   \   00011B   7418         MOV     A,#0x18
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   12....       LCALL   ?XLOAD_R0123
   \   000123   EE           MOV     A,R6
   \   000124   FC           MOV     R4,A
   \   000125   7D00         MOV     R5,#0x0
   \   000127   EC           MOV     A,R4
   \   000128   75F009       MOV     B,#0x9
   \   00012B   A4           MUL     AB
   \   00012C   CC           XCH     A,R4
   \   00012D   85F0..       MOV     ?V1,B
   \   000130   75F000       MOV     B,#0x0
   \   000133   A4           MUL     AB
   \   000134   25..         ADD     A,?V1
   \   000136   F5..         MOV     ?V1,A
   \   000138   75F009       MOV     B,#0x9
   \   00013B   ED           MOV     A,R5
   \   00013C   A4           MUL     AB
   \   00013D   25..         ADD     A,?V1
   \   00013F   FD           MOV     R5,A
   \   000140   74..         MOV     A,#TCLinkKeyFrmCntr & 0xff
   \   000142   2C           ADD     A,R4
   \   000143   F582         MOV     DPL,A
   \   000145   74..         MOV     A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   000147   3D           ADDC    A,R5
   \   000148   F583         MOV     DPH,A
   \   00014A   12....       LCALL   ?XSTORE_R0123
   2710                TCLinkKeyFrmCntr[i].rxFrmCntr = tcLinkKey.rxFrmCntr;
   \   00014D   741C         MOV     A,#0x1c
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   12....       LCALL   ?XLOAD_R0123
   \   000155   EE           MOV     A,R6
   \   000156   FC           MOV     R4,A
   \   000157   7D00         MOV     R5,#0x0
   \   000159   EC           MOV     A,R4
   \   00015A   75F009       MOV     B,#0x9
   \   00015D   A4           MUL     AB
   \   00015E   CC           XCH     A,R4
   \   00015F   85F0..       MOV     ?V1,B
   \   000162   75F000       MOV     B,#0x0
   \   000165   A4           MUL     AB
   \   000166   25..         ADD     A,?V1
   \   000168   F5..         MOV     ?V1,A
   \   00016A   75F009       MOV     B,#0x9
   \   00016D   ED           MOV     A,R5
   \   00016E   A4           MUL     AB
   \   00016F   25..         ADD     A,?V1
   \   000171   FD           MOV     R5,A
   \   000172   74..         MOV     A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   000174   2C           ADD     A,R4
   \   000175   F582         MOV     DPL,A
   \   000177   74..         MOV     A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   000179   3D           ADDC    A,R5
   \   00017A   F583         MOV     DPH,A
   \   00017C   12....       LCALL   ?XSTORE_R0123
   2711              }
   2712            }
   \                     ??APSME_TCLinkKeyInit_3:
   \   00017F   0E           INC     R6
   \   000180   02....       LJMP    ??APSME_TCLinkKeyInit_0 & 0xFFFF
   2713          
   2714            // clear copy of key in RAM
   2715            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeyInit_1:
   \   000183                ; Setup parameters for call to function osal_memset
   \   000183   7C20         MOV     R4,#0x20
   \   000185   7D00         MOV     R5,#0x0
   \   000187   7900         MOV     R1,#0x0
   \   000189   AA..         MOV     R2,?XSP + 0
   \   00018B   AB..         MOV     R3,?XSP + 1
   \   00018D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2716          
   2717          }
   \   000190   7420         MOV     A,#0x20
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
   \   000195   7F07         MOV     R7,#0x7
   \   000197   02....       LJMP    ?BANKED_LEAVE_XDATA
   2718          
   2719          /******************************************************************************
   2720           * @fn          APSME_TCLinkKeySync
   2721           *
   2722           * @brief       Sync Trust Center LINK key data.
   2723           *
   2724           * @param       srcAddr - [in] srcAddr
   2725           * @param       si      - [in, out] SSP_Info_t
   2726           *
   2727           * @return      ZStatus_t
   2728           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2729          ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeySync:
   2730          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V12,R2
   \   00000C   8B..         MOV     ?V13,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   2731            uint8 i, selectedId = ZDSECMGR_TC_DEVICE_MAX;
   \   000012   7F01         MOV     R7,#0x1
   2732            ZStatus_t status = ZSecNoKey;
   \   000014   7EA1         MOV     R6,#-0x5f
   2733            APSME_TCLinkKey_t tcLinkKey;
   2734            uint32 *tclkRxFrmCntr;
   2735            uint16 originatorAddr = APSME_TRUSTCENTER_NWKADDR;
   \   000016   75..00       MOV     ?V8,#0x0
   \   000019   75..00       MOV     ?V9,#0x0
   2736          
   2737            // Look up the IEEE address of the trust center if it's available
   2738            if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
   \   00001C                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001C   E5..         MOV     A,?V2
   \   00001E   2406         ADD     A,#0x6
   \   000020   FA           MOV     R2,A
   \   000021   E4           CLR     A
   \   000022   35..         ADDC    A,?V3
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000028   E9           MOV     A,R1
   \   000029   7013         JNZ     ??APSME_TCLinkKeySync_0
   2739            {
   2740              APSME_LookupExtAddr( srcAddr, si->extAddr );
   \   00002B                ; Setup parameters for call to function APSME_LookupExtAddr
   \   00002B   E5..         MOV     A,?V2
   \   00002D   2406         ADD     A,#0x6
   \   00002F   FC           MOV     R4,A
   \   000030   E4           CLR     A
   \   000031   35..         ADDC    A,?V3
   \   000033   FD           MOV     R5,A
   \   000034   AA..         MOV     R2,?V12
   \   000036   AB..         MOV     R3,?V13
   \   000038   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   00003B   E9           MOV     A,R1
   \   00003C   801D         SJMP    ??APSME_TCLinkKeySync_1
   2741            }
   2742            else if ( osal_ExtAddrEqual( si->extAddr, _NIB.nwkCoordExtAddress ) )
   \                     ??APSME_TCLinkKeySync_0:
   \   00003E                ; Setup parameters for call to function sAddrExtCmp
   \   00003E   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   000040   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   000042   E5..         MOV     A,?V2
   \   000044   2406         ADD     A,#0x6
   \   000046   FA           MOV     R2,A
   \   000047   E4           CLR     A
   \   000048   35..         ADDC    A,?V3
   \   00004A   FB           MOV     R3,A
   \   00004B   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00004E   E9           MOV     A,R1
   \   00004F   600A         JZ      ??APSME_TCLinkKeySync_1
   2743            {
   2744              originatorAddr = _NIB.nwkCoordAddress;
   \   000051   90....       MOV     DPTR,#_NIB + 23
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V8,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F5..         MOV     ?V9,A
   2745              // in case originated not from our parent, use the default TC address
   2746            }
   2747          
   2748            // Look up the TC link key associated with the device
   2749            // or the default TC link key (extAddr is all FFs), whichever is found
   2750            for ( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \                     ??APSME_TCLinkKeySync_1:
   \   00005B   75..00       MOV     ?V0,#0x0
   \                     ??APSME_TCLinkKeySync_2:
   \   00005E   E5..         MOV     A,?V0
   \   000060   6003         JZ      $+5
   \   000062   02....       LJMP    ??APSME_TCLinkKeySync_3 & 0xFFFF
   2751            {
   2752              // Read entry i of the TC link key table from NV
   2753              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
   2754                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   000065                ; Setup parameters for call to function osal_nv_read
   \   000065   A8..         MOV     R0,?XSP + 0
   \   000067   A9..         MOV     R1,?XSP + 1
   \   000069   88..         MOV     ?V4,R0
   \   00006B   89..         MOV     ?V5,R1
   \   00006D   78..         MOV     R0,#?V4
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   75..20       MOV     ?V4,#0x20
   \   000075   75..00       MOV     ?V5,#0x0
   \   000078   78..         MOV     R0,#?V4
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   7C00         MOV     R4,#0x0
   \   00007F   7D00         MOV     R5,#0x0
   \   000081   A8..         MOV     R0,?V0
   \   000083   7900         MOV     R1,#0x0
   \   000085   E8           MOV     A,R0
   \   000086   2401         ADD     A,#0x1
   \   000088   FA           MOV     R2,A
   \   000089   E9           MOV     A,R1
   \   00008A   3401         ADDC    A,#0x1
   \   00008C   FB           MOV     R3,A
   \   00008D   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000090   7404         MOV     A,#0x4
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   \   000095   E9           MOV     A,R1
   2755          
   2756              // prefer exact match over default
   2757              if ( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
   \   000096                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   000096   AC..         MOV     R4,?XSP + 0
   \   000098   AD..         MOV     R5,?XSP + 1
   \   00009A   E5..         MOV     A,?V2
   \   00009C   2406         ADD     A,#0x6
   \   00009E   FA           MOV     R2,A
   \   00009F   E4           CLR     A
   \   0000A0   35..         ADDC    A,?V3
   \   0000A2   FB           MOV     R3,A
   \   0000A3   12....       LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   0000A6   E9           MOV     A,R1
   \   0000A7   6004         JZ      ??APSME_TCLinkKeySync_4
   2758              {
   2759                selectedId = i;
   \   0000A9   AF..         MOV     R7,?V0
   2760                // break from the loop
   2761                break;
   \   0000AB   8038         SJMP    ??APSME_TCLinkKeySync_3
   2762              }
   2763              else if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
   \                     ??APSME_TCLinkKeySync_4:
   \   0000AD                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   0000AD   AA..         MOV     R2,?XSP + 0
   \   0000AF   AB..         MOV     R3,?XSP + 1
   \   0000B1   12....       LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
   \   0000B4   E9           MOV     A,R1
   \   0000B5   6029         JZ      ??APSME_TCLinkKeySync_5
   2764              {
   2765                if ( ( originatorAddr != APSME_TRUSTCENTER_NWKADDR ) && ( si->keyID == SEC_KEYID_TRANSPORT )
   2766                     && (i == 0) && ( zgUseDefaultTCLK == TRUE ) )
   \   0000B7   E5..         MOV     A,?V8
   \   0000B9   45..         ORL     A,?V9
   \   0000BB   601C         JZ      ??APSME_TCLinkKeySync_6
   \   0000BD   E5..         MOV     A,?V2
   \   0000BF   240E         ADD     A,#0xe
   \   0000C1   F582         MOV     DPL,A
   \   0000C3   E4           CLR     A
   \   0000C4   35..         ADDC    A,?V3
   \   0000C6   F583         MOV     DPH,A
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   6402         XRL     A,#0x2
   \   0000CB   700C         JNZ     ??APSME_TCLinkKeySync_6
   \   0000CD   E5..         MOV     A,?V0
   \   0000CF   7008         JNZ     ??APSME_TCLinkKeySync_6
   \   0000D1   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   6401         XRL     A,#0x1
   \   0000D7   6007         JZ      ??APSME_TCLinkKeySync_5
   2767                {
   2768                  //if a Key is received directly from an unusual TC,
   2769                  // don't use the first element of the table initialized with the default TCLK
   2770                  continue;
   2771                }
   2772                if ( selectedId == ZDSECMGR_TC_DEVICE_MAX )
   \                     ??APSME_TCLinkKeySync_6:
   \   0000D9   7401         MOV     A,#0x1
   \   0000DB   6F           XRL     A,R7
   \   0000DC   7002         JNZ     ??APSME_TCLinkKeySync_5
   2773                {
   2774                  selectedId = i;
   \   0000DE   AF..         MOV     R7,?V0
   2775                }
   2776              }
   2777            }
   \                     ??APSME_TCLinkKeySync_5:
   \   0000E0   05..         INC     ?V0
   \   0000E2   02....       LJMP    ??APSME_TCLinkKeySync_2 & 0xFFFF
   2778          
   2779            if ( selectedId < ZDSECMGR_TC_DEVICE_MAX )
   \                     ??APSME_TCLinkKeySync_3:
   \   0000E5   EF           MOV     A,R7
   \   0000E6   6003         JZ      $+5
   \   0000E8   02....       LJMP    ??APSME_TCLinkKeySync_7 & 0xFFFF
   2780            {
   2781               // Only for UNIQUE keys, verify that the incoming frame counter is valid
   2782              if ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY )
   \   0000EB   90....       MOV     DPTR,#zgApsLinkKeyType
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   6003         JZ      $+5
   \   0000F1   02....       LJMP    ??APSME_TCLinkKeySync_8 & 0xFFFF
   2783              {
   2784                tclkRxFrmCntr = &TCLinkKeyFrmCntr[selectedId].rxFrmCntr;
   \   0000F4   EF           MOV     A,R7
   \   0000F5   F8           MOV     R0,A
   \   0000F6   7900         MOV     R1,#0x0
   \   0000F8   E8           MOV     A,R0
   \   0000F9   75F009       MOV     B,#0x9
   \   0000FC   A4           MUL     AB
   \   0000FD   C8           XCH     A,R0
   \   0000FE   AAF0         MOV     R2,B
   \   000100   75F000       MOV     B,#0x0
   \   000103   A4           MUL     AB
   \   000104   2A           ADD     A,R2
   \   000105   FA           MOV     R2,A
   \   000106   75F009       MOV     B,#0x9
   \   000109   E9           MOV     A,R1
   \   00010A   A4           MUL     AB
   \   00010B   2A           ADD     A,R2
   \   00010C   F9           MOV     R1,A
   \   00010D   74..         MOV     A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   00010F   28           ADD     A,R0
   \   000110   F8           MOV     R0,A
   \   000111   74..         MOV     A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   000113   39           ADDC    A,R1
   \   000114   F9           MOV     R1,A
   \   000115   88..         MOV     ?V10,R0
   \   000117   89..         MOV     ?V11,R1
   2785          
   2786                if ( si->frmCntr >= *tclkRxFrmCntr )
   \   000119   85..82       MOV     DPL,?V10
   \   00011C   85..83       MOV     DPH,?V11
   \   00011F   78..         MOV     R0,#?V4
   \   000121   12....       LCALL   ?L_MOV_X
   \   000124   E5..         MOV     A,?V2
   \   000126   2412         ADD     A,#0x12
   \   000128   F582         MOV     DPL,A
   \   00012A   E4           CLR     A
   \   00012B   35..         ADDC    A,?V3
   \   00012D   F583         MOV     DPH,A
   \   00012F   78..         MOV     R0,#?V4
   \   000131   12....       LCALL   ?UL_GT_X
   \   000134   4051         JC      ??APSME_TCLinkKeySync_9
   2787                {
   2788                  // set the keyNvId to use
   2789                  si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
   \   000136   EF           MOV     A,R7
   \   000137   F8           MOV     R0,A
   \   000138   7900         MOV     R1,#0x0
   \   00013A   E8           MOV     A,R0
   \   00013B   2401         ADD     A,#0x1
   \   00013D   F8           MOV     R0,A
   \   00013E   E9           MOV     A,R1
   \   00013F   3401         ADDC    A,#0x1
   \   000141   F9           MOV     R1,A
   \   000142   E5..         MOV     A,?V2
   \   000144   240F         ADD     A,#0xf
   \   000146   F582         MOV     DPL,A
   \   000148   E4           CLR     A
   \   000149   35..         ADDC    A,?V3
   \   00014B   F583         MOV     DPH,A
   \   00014D   E8           MOV     A,R0
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   A3           INC     DPTR
   \   000150   E9           MOV     A,R1
   \   000151   F0           MOVX    @DPTR,A
   2790          
   2791                  // update the rx frame counter
   2792                  *tclkRxFrmCntr = si->frmCntr + 1;
   \   000152   E5..         MOV     A,?V2
   \   000154   2412         ADD     A,#0x12
   \   000156   F582         MOV     DPL,A
   \   000158   E4           CLR     A
   \   000159   35..         ADDC    A,?V3
   \   00015B   F583         MOV     DPH,A
   \   00015D   78..         MOV     R0,#?V4
   \   00015F   12....       LCALL   ?L_MOV_X
   \   000162   90....       MOV     DPTR,#__Constant_1
   \   000165   78..         MOV     R0,#?V4
   \   000167   12....       LCALL   ?L_ADD_X
   \   00016A   AA..         MOV     R2,?V4
   \   00016C   AB..         MOV     R3,?V5
   \   00016E   AC..         MOV     R4,?V6
   \   000170   AD..         MOV     R5,?V7
   \   000172   85..82       MOV     DPL,?V10
   \   000175   85..83       MOV     DPH,?V11
   \   000178   EA           MOV     A,R2
   \   000179   F0           MOVX    @DPTR,A
   \   00017A   A3           INC     DPTR
   \   00017B   EB           MOV     A,R3
   \   00017C   F0           MOVX    @DPTR,A
   \   00017D   A3           INC     DPTR
   \   00017E   EC           MOV     A,R4
   \   00017F   F0           MOVX    @DPTR,A
   \   000180   A3           INC     DPTR
   \   000181   ED           MOV     A,R5
   \   000182   F0           MOVX    @DPTR,A
   2793          
   2794                  status = ZSuccess;
   \   000183   7E00         MOV     R6,#0x0
   \   000185   8022         SJMP    ??APSME_TCLinkKeySync_7
   2795                }
   2796                else
   2797                {
   2798                  status = ZSecOldFrmCount;
   \                     ??APSME_TCLinkKeySync_9:
   \   000187   7EA2         MOV     R6,#-0x5e
   \   000189   801E         SJMP    ??APSME_TCLinkKeySync_7
   2799                }
   2800              }
   2801              else
   2802              {
   2803                // set the keyNvId to use
   2804                si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
   \                     ??APSME_TCLinkKeySync_8:
   \   00018B   EF           MOV     A,R7
   \   00018C   F8           MOV     R0,A
   \   00018D   7900         MOV     R1,#0x0
   \   00018F   E8           MOV     A,R0
   \   000190   2401         ADD     A,#0x1
   \   000192   F8           MOV     R0,A
   \   000193   E9           MOV     A,R1
   \   000194   3401         ADDC    A,#0x1
   \   000196   F9           MOV     R1,A
   \   000197   E5..         MOV     A,?V2
   \   000199   240F         ADD     A,#0xf
   \   00019B   F582         MOV     DPL,A
   \   00019D   E4           CLR     A
   \   00019E   35..         ADDC    A,?V3
   \   0001A0   F583         MOV     DPH,A
   \   0001A2   E8           MOV     A,R0
   \   0001A3   F0           MOVX    @DPTR,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   E9           MOV     A,R1
   \   0001A6   F0           MOVX    @DPTR,A
   2805          
   2806                status = ZSuccess;
   \   0001A7   7E00         MOV     R6,#0x0
   2807              }
   2808            }
   2809          
   2810            // clear copy of key in RAM
   2811            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeySync_7:
   \   0001A9                ; Setup parameters for call to function osal_memset
   \   0001A9   7C20         MOV     R4,#0x20
   \   0001AB   7D00         MOV     R5,#0x0
   \   0001AD   7900         MOV     R1,#0x0
   \   0001AF   AA..         MOV     R2,?XSP + 0
   \   0001B1   AB..         MOV     R3,?XSP + 1
   \   0001B3   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2812          
   2813            return status;
   \   0001B6   EE           MOV     A,R6
   \   0001B7   F9           MOV     R1,A
   \   0001B8   7420         MOV     A,#0x20
   \   0001BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001BD   7F0E         MOV     R7,#0xe
   \   0001BF   02....       LJMP    ?BANKED_LEAVE_XDATA
   2814          }
   2815          
   2816          /******************************************************************************
   2817           * @fn          APSME_TCLinkKeyLoad
   2818           *
   2819           * @brief       Load Trust Center LINK key data.
   2820           *
   2821           * @param       dstAddr - [in] dstAddr
   2822           * @param       si      - [in, out] SSP_Info_t
   2823           *
   2824           * @return      ZStatus_t
   2825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2826          ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeyLoad:
   2827          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 45
   \   000005   74D3         MOV     A,#-0x2d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V10,R2
   \   00000C   8B..         MOV     ?V11,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   2828            uint8 i;
   2829            ZStatus_t status = ZSecNoKey;
   \   000012   7EA1         MOV     R6,#-0x5f
   2830            APSME_TCLinkKey_t tcLinkKey;
   2831            AddrMgrEntry_t addrEntry;
   2832            uint32 *tclkTxFrmCntr;
   2833            uint8 extAddrFound;
   2834            uint8 defaultTCLKIdx = ZDSECMGR_TC_DEVICE_MAX;
   \   000014   75..01       MOV     ?V0,#0x1
   2835          
   2836            // Look up the ami of the srcAddr if available
   2837            addrEntry.user    = ADDRMGR_USER_DEFAULT;
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
   2838            addrEntry.nwkAddr = dstAddr;
   \   000020   7401         MOV     A,#0x1
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E5..         MOV     A,?V10
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   E5..         MOV     A,?V11
   \   00002B   F0           MOVX    @DPTR,A
   2839          
   2840            extAddrFound = AddrMgrExtAddrValid( si->extAddr );
   \   00002C                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00002C   E5..         MOV     A,?V2
   \   00002E   2406         ADD     A,#0x6
   \   000030   FA           MOV     R2,A
   \   000031   E4           CLR     A
   \   000032   35..         ADDC    A,?V3
   \   000034   FB           MOV     R3,A
   \   000035   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000038   E9           MOV     A,R1
   \   000039   F5..         MOV     ?V1,A
   2841          
   2842            // Look up the TC link key associated with the device
   2843            // or the master TC link key (ami = 0xFFFF), whichever is found
   2844            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \   00003B   7F00         MOV     R7,#0x0
   \                     ??APSME_TCLinkKeyLoad_0:
   \   00003D   EF           MOV     A,R7
   \   00003E   706C         JNZ     ??APSME_TCLinkKeyLoad_1
   2845            {
   2846              // Read entry i of the TC link key table from NV
   2847              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
   2848                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   000040                ; Setup parameters for call to function osal_nv_read
   \   000040   740D         MOV     A,#0xd
   \   000042   12....       LCALL   ?XSTACK_DISP100_8
   \   000045   88..         MOV     ?V4,R0
   \   000047   89..         MOV     ?V5,R1
   \   000049   78..         MOV     R0,#?V4
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   75..20       MOV     ?V4,#0x20
   \   000051   75..00       MOV     ?V5,#0x0
   \   000054   78..         MOV     R0,#?V4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   7C00         MOV     R4,#0x0
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   EF           MOV     A,R7
   \   00005E   F8           MOV     R0,A
   \   00005F   7900         MOV     R1,#0x0
   \   000061   E8           MOV     A,R0
   \   000062   2401         ADD     A,#0x1
   \   000064   FA           MOV     R2,A
   \   000065   E9           MOV     A,R1
   \   000066   3401         ADDC    A,#0x1
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00006C   7404         MOV     A,#0x4
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   E9           MOV     A,R1
   2849          
   2850              if( extAddrFound && AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
   \   000072   E5..         MOV     A,?V1
   \   000074   6018         JZ      ??APSME_TCLinkKeyLoad_2
   \   000076                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   000076   740D         MOV     A,#0xd
   \   000078   12....       LCALL   ?XSTACK_DISP102_8
   \   00007B   E5..         MOV     A,?V2
   \   00007D   2406         ADD     A,#0x6
   \   00007F   FA           MOV     R2,A
   \   000080   E4           CLR     A
   \   000081   35..         ADDC    A,?V3
   \   000083   FB           MOV     R3,A
   \   000084   12....       LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   000087   E9           MOV     A,R1
   \   000088   6004         JZ      ??APSME_TCLinkKeyLoad_2
   2851              {
   2852                status = ZSuccess;
   \   00008A   7E00         MOV     R6,#0x0
   2853          
   2854                break; // break from the loop
   \   00008C   801E         SJMP    ??APSME_TCLinkKeyLoad_1
   2855              }
   2856          
   2857              if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
   \                     ??APSME_TCLinkKeyLoad_2:
   \   00008E                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   00008E   740D         MOV     A,#0xd
   \   000090   12....       LCALL   ?XSTACK_DISP101_8
   \   000093   12....       LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
   \   000096   E9           MOV     A,R1
   \   000097   6010         JZ      ??APSME_TCLinkKeyLoad_3
   2858              {
   2859                if ( !extAddrFound && ( !APSME_IsDistributedSecurity() ) )
   \   000099   E5..         MOV     A,?V1
   \   00009B   700A         JNZ     ??APSME_TCLinkKeyLoad_4
   \   00009D                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00009D   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   0000A0   E9           MOV     A,R1
   \   0000A1   7004         JNZ     ??APSME_TCLinkKeyLoad_4
   2860                {
   2861                  status = ZSuccess;
   \   0000A3   7E00         MOV     R6,#0x0
   2862          
   2863                  break; // break from the loop
   \   0000A5   8005         SJMP    ??APSME_TCLinkKeyLoad_1
   2864                }
   2865          
   2866                // Remember the last default TCLK index
   2867                defaultTCLKIdx = i;
   \                     ??APSME_TCLinkKeyLoad_4:
   \   0000A7   8F..         MOV     ?V0,R7
   2868              }
   2869            }
   \                     ??APSME_TCLinkKeyLoad_3:
   \   0000A9   0F           INC     R7
   \   0000AA   8091         SJMP    ??APSME_TCLinkKeyLoad_0
   2870          
   2871            if ( (status != ZSuccess) && (defaultTCLKIdx < ZDSECMGR_TC_DEVICE_MAX) )
   \                     ??APSME_TCLinkKeyLoad_1:
   \   0000AC   EE           MOV     A,R6
   \   0000AD   6008         JZ      ??APSME_TCLinkKeyLoad_5
   \   0000AF   E5..         MOV     A,?V0
   \   0000B1   7004         JNZ     ??APSME_TCLinkKeyLoad_5
   2872            {
   2873              // Exact match was not found; use the last default TC Link Key
   2874              i = defaultTCLKIdx;
   \   0000B3   AF..         MOV     R7,?V0
   2875              status = ZSuccess;
   \   0000B5   7E00         MOV     R6,#0x0
   2876            }
   2877          
   2878            if ( status == ZSuccess )
   \                     ??APSME_TCLinkKeyLoad_5:
   \   0000B7   EE           MOV     A,R6
   \   0000B8   7079         JNZ     ??APSME_TCLinkKeyLoad_6
   2879            {
   2880              tclkTxFrmCntr = &TCLinkKeyFrmCntr[i].txFrmCntr;
   \   0000BA   EF           MOV     A,R7
   \   0000BB   F8           MOV     R0,A
   \   0000BC   7900         MOV     R1,#0x0
   \   0000BE   E8           MOV     A,R0
   \   0000BF   75F009       MOV     B,#0x9
   \   0000C2   A4           MUL     AB
   \   0000C3   C8           XCH     A,R0
   \   0000C4   AAF0         MOV     R2,B
   \   0000C6   75F000       MOV     B,#0x0
   \   0000C9   A4           MUL     AB
   \   0000CA   2A           ADD     A,R2
   \   0000CB   FA           MOV     R2,A
   \   0000CC   75F009       MOV     B,#0x9
   \   0000CF   E9           MOV     A,R1
   \   0000D0   A4           MUL     AB
   \   0000D1   2A           ADD     A,R2
   \   0000D2   F9           MOV     R1,A
   \   0000D3   74..         MOV     A,#TCLinkKeyFrmCntr & 0xff
   \   0000D5   28           ADD     A,R0
   \   0000D6   F8           MOV     R0,A
   \   0000D7   74..         MOV     A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000D9   39           ADDC    A,R1
   \   0000DA   F9           MOV     R1,A
   \   0000DB   88..         MOV     ?V8,R0
   \   0000DD   89..         MOV     ?V9,R1
   2881          
   2882              // set the keyNvId to use
   2883              si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
   \   0000DF   EF           MOV     A,R7
   \   0000E0   F8           MOV     R0,A
   \   0000E1   7900         MOV     R1,#0x0
   \   0000E3   E8           MOV     A,R0
   \   0000E4   2401         ADD     A,#0x1
   \   0000E6   F8           MOV     R0,A
   \   0000E7   E9           MOV     A,R1
   \   0000E8   3401         ADDC    A,#0x1
   \   0000EA   F9           MOV     R1,A
   \   0000EB   E5..         MOV     A,?V2
   \   0000ED   240F         ADD     A,#0xf
   \   0000EF   F582         MOV     DPL,A
   \   0000F1   E4           CLR     A
   \   0000F2   35..         ADDC    A,?V3
   \   0000F4   F583         MOV     DPH,A
   \   0000F6   E8           MOV     A,R0
   \   0000F7   F0           MOVX    @DPTR,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E9           MOV     A,R1
   \   0000FA   F0           MOVX    @DPTR,A
   2884          
   2885              // update link key related fields
   2886              si->keyID   = SEC_KEYID_LINK;
   \   0000FB   E5..         MOV     A,?V2
   \   0000FD   240E         ADD     A,#0xe
   \   0000FF   F582         MOV     DPL,A
   \   000101   E4           CLR     A
   \   000102   35..         ADDC    A,?V3
   \   000104   F583         MOV     DPH,A
   \   000106   7400         MOV     A,#0x0
   \   000108   F0           MOVX    @DPTR,A
   2887              si->frmCntr = *tclkTxFrmCntr;
   \   000109   85..82       MOV     DPL,?V8
   \   00010C   85..83       MOV     DPH,?V9
   \   00010F   12....       LCALL   ?XLOAD_R0123
   \   000112   E5..         MOV     A,?V2
   \   000114   2412         ADD     A,#0x12
   \   000116   F582         MOV     DPL,A
   \   000118   E4           CLR     A
   \   000119   35..         ADDC    A,?V3
   \   00011B   F583         MOV     DPH,A
   \   00011D   12....       LCALL   ?XSTORE_R0123
   2888          
   2889              // update outgoing frame counter
   2890              (*tclkTxFrmCntr)++;
   \   000120   90....       MOV     DPTR,#__Constant_1
   \   000123   78..         MOV     R0,#?V4
   \   000125   12....       LCALL   ?L_MOV_X
   \   000128   85..82       MOV     DPL,?V8
   \   00012B   85..83       MOV     DPH,?V9
   \   00012E   78..         MOV     R0,#?V4
   \   000130   12....       LCALL   ?L_ADD_TO_X
   2891          
   2892          #if defined ( NV_RESTORE )
   2893              // write periodically to NV
   2894              if ( !(*tclkTxFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
   2895              {
   2896                // set the flag to write key to NV
   2897                TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
   2898          
   2899                // Notify the ZDApp that the frame counter has changed.
   2900                osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
   2901              }
   2902          #endif
   2903            }
   2904          
   2905            // If no TC link key found, remove the device from the address manager
   2906            if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
   \                     ??APSME_TCLinkKeyLoad_6:
   \   000133   EE           MOV     A,R6
   \   000134   6014         JZ      ??APSME_TCLinkKeyLoad_7
   \   000136                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000136   AA..         MOV     R2,?XSP + 0
   \   000138   AB..         MOV     R3,?XSP + 1
   \   00013A   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00013D   E9           MOV     A,R1
   \   00013E   6401         XRL     A,#0x1
   \   000140   7008         JNZ     ??APSME_TCLinkKeyLoad_7
   2907            {
   2908              AddrMgrEntryRelease( &addrEntry );
   \   000142                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000142   AA..         MOV     R2,?XSP + 0
   \   000144   AB..         MOV     R3,?XSP + 1
   \   000146   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000149   E9           MOV     A,R1
   2909            }
   2910          
   2911              // clear copy of key in RAM
   2912            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeyLoad_7:
   \   00014A                ; Setup parameters for call to function osal_memset
   \   00014A   7C20         MOV     R4,#0x20
   \   00014C   7D00         MOV     R5,#0x0
   \   00014E   7900         MOV     R1,#0x0
   \   000150   740D         MOV     A,#0xd
   \   000152   12....       LCALL   ?XSTACK_DISP101_8
   \   000155   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2913          
   2914            return status;
   \   000158   EE           MOV     A,R6
   \   000159   F9           MOV     R1,A
   \   00015A   742D         MOV     A,#0x2d
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015F   7F0C         MOV     R7,#0xc
   \   000161   02....       LJMP    ?BANKED_LEAVE_XDATA
   2915          }
   2916          
   2917          /******************************************************************************
   2918           * @fn          APSME_IsDefaultTCLK
   2919           *
   2920           * @brief       Return TRUE or FALSE based on the extended address.  If the
   2921           *              input ext address is all FFs, it means the trust center link
   2922           *              assoiciated with the address is the default trust center link key
   2923           *
   2924           * @param       extAddr - [in] extended address
   2925           *
   2926           * @return      uint8 TRUE/FALSE
   2927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2928          uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
   \                     APSME_IsDefaultTCLK:
   2929          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2930            return osal_isbufset( extAddr, 0xFF, Z_EXTADDR_LEN );
   \   000009                ; Setup parameters for call to function osal_isbufset
   \   000009   7C08         MOV     R4,#0x8
   \   00000B   79FF         MOV     R1,#-0x1
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   000014   7F01         MOV     R7,#0x1
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
   2931          }
   2932          
   2933          /******************************************************************************
   2934           * @fn          ZDSecMgrNwkKeyInit
   2935           *
   2936           * @brief       Initialize the NV items for
   2937           *                  ZCD_NV_NWKKEY,
   2938           *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
   2939           *                  ZCD_NV_NWK_ALTERN_KEY_INFO
   2940           *
   2941           * @param       setDefault
   2942           *
   2943           * @return      none
   2944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2945          void ZDSecMgrNwkKeyInit(uint8 setDefault)
   \                     ZDSecMgrNwkKeyInit:
   2946          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV     A,#-0x26
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   2947            uint8 status;
   2948            nwkKeyDesc nwkKey;
   2949          
   2950            // Initialize NV items for NWK key, this structure contains the frame counter
   2951            // and is only used when NV_RESTORE is enabled
   2952            nwkActiveKeyItems keyItems;
   2953          
   2954            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C15         MOV     R4,#0x15
   \   00000E   7D00         MOV     R5,#0x0
   \   000010   7900         MOV     R1,#0x0
   \   000012   7411         MOV     A,#0x11
   \   000014   12....       LCALL   ?XSTACK_DISP101_8
   \   000017   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2955          
   2956            status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
   \   00001A                ; Setup parameters for call to function osal_nv_item_init
   \   00001A   7411         MOV     A,#0x11
   \   00001C   12....       LCALL   ?XSTACK_DISP100_8
   \   00001F   88..         MOV     ?V0,R0
   \   000021   89..         MOV     ?V1,R1
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C15         MOV     R4,#0x15
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A82         MOV     R2,#-0x7e
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   E9           MOV     A,R1
   \   000039   FE           MOV     R6,A
   2957          
   2958          #if defined ( NV_RESTORE )
   2959            // reset the values of NV items if NV_RESTORE is not enabled
   2960            if ((status == SUCCESS) && (setDefault == TRUE))
   2961            {
   2962              // clear NV data to default values
   2963              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   2964            }
   2965          #else
   2966            (void)setDefault;   // to eliminate compiler warning
   2967          
   2968            // reset the values of NV items if NV_RESTORE is not enabled
   2969            if (status == SUCCESS)
   \   00003A   EE           MOV     A,R6
   \   00003B   702A         JNZ     ??ZDSecMgrNwkKeyInit_0
   2970            {
   2971              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   \   00003D                ; Setup parameters for call to function osal_nv_write
   \   00003D   7411         MOV     A,#0x11
   \   00003F   12....       LCALL   ?XSTACK_DISP100_8
   \   000042   88..         MOV     ?V0,R0
   \   000044   89..         MOV     ?V1,R1
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..15       MOV     ?V0,#0x15
   \   00004E   75..00       MOV     ?V1,#0x0
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   7C00         MOV     R4,#0x0
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7A82         MOV     R2,#-0x7e
   \   00005C   7B00         MOV     R3,#0x0
   \   00005E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000061   7404         MOV     A,#0x4
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
   \   000066   E9           MOV     A,R1
   2972            }
   2973          #endif // defined (NV_RESTORE)
   2974          
   2975            // Initialize NV items for NWK Active and Alternate keys. These items are used
   2976            // all the time, independently of NV_RESTORE being set or not
   2977            osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
   \                     ??ZDSecMgrNwkKeyInit_0:
   \   000067                ; Setup parameters for call to function osal_memset
   \   000067   7C11         MOV     R4,#0x11
   \   000069   7D00         MOV     R5,#0x0
   \   00006B   7900         MOV     R1,#0x0
   \   00006D   AA..         MOV     R2,?XSP + 0
   \   00006F   AB..         MOV     R3,?XSP + 1
   \   000071   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2978          
   2979            status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
   \   000074                ; Setup parameters for call to function osal_nv_item_init
   \   000074   A8..         MOV     R0,?XSP + 0
   \   000076   A9..         MOV     R1,?XSP + 1
   \   000078   88..         MOV     ?V0,R0
   \   00007A   89..         MOV     ?V1,R1
   \   00007C   78..         MOV     R0,#?V0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   7C11         MOV     R4,#0x11
   \   000083   7D00         MOV     R5,#0x0
   \   000085   7A3A         MOV     R2,#0x3a
   \   000087   7B00         MOV     R3,#0x0
   \   000089   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00008C   7402         MOV     A,#0x2
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   E9           MOV     A,R1
   \   000092   FE           MOV     R6,A
   2980          
   2981          #if defined ( NV_RESTORE )
   2982            // reset the values of NV items if NV_RESTORE is not enabled
   2983            if ((status == SUCCESS) && (setDefault == TRUE))
   2984            {
   2985              // clear NV data to default values
   2986              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   2987            }
   2988          #else
   2989            // reset the values of NV items if NV_RESTORE is not enabled
   2990            if (status == SUCCESS)
   \   000093   EE           MOV     A,R6
   \   000094   7029         JNZ     ??ZDSecMgrNwkKeyInit_1
   2991            {
   2992              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   000096                ; Setup parameters for call to function osal_nv_write
   \   000096   A8..         MOV     R0,?XSP + 0
   \   000098   A9..         MOV     R1,?XSP + 1
   \   00009A   88..         MOV     ?V0,R0
   \   00009C   89..         MOV     ?V1,R1
   \   00009E   78..         MOV     R0,#?V0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   75..11       MOV     ?V0,#0x11
   \   0000A6   75..00       MOV     ?V1,#0x0
   \   0000A9   78..         MOV     R0,#?V0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   7C00         MOV     R4,#0x0
   \   0000B0   7D00         MOV     R5,#0x0
   \   0000B2   7A3A         MOV     R2,#0x3a
   \   0000B4   7B00         MOV     R3,#0x0
   \   0000B6   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B9   7404         MOV     A,#0x4
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BE   E9           MOV     A,R1
   2993            }
   2994          #endif // defined (NV_RESTORE)
   2995          
   2996            status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
   \                     ??ZDSecMgrNwkKeyInit_1:
   \   0000BF                ; Setup parameters for call to function osal_nv_item_init
   \   0000BF   A8..         MOV     R0,?XSP + 0
   \   0000C1   A9..         MOV     R1,?XSP + 1
   \   0000C3   88..         MOV     ?V0,R0
   \   0000C5   89..         MOV     ?V1,R1
   \   0000C7   78..         MOV     R0,#?V0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   7C11         MOV     R4,#0x11
   \   0000CE   7D00         MOV     R5,#0x0
   \   0000D0   7A3B         MOV     R2,#0x3b
   \   0000D2   7B00         MOV     R3,#0x0
   \   0000D4   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000D7   7402         MOV     A,#0x2
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV     A,R1
   \   0000DD   FE           MOV     R6,A
   2997          
   2998          #if defined ( NV_RESTORE )
   2999            // reset the values of NV items if NV_RESTORE is not enabled
   3000            if ((status == SUCCESS) && (setDefault == TRUE))
   3001            {
   3002              // clear NV data to default values
   3003              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   3004            }
   3005          #else
   3006            // reset the values of NV items if NV_RESTORE is not enabled
   3007            if (status == SUCCESS)
   \   0000DE   EE           MOV     A,R6
   \   0000DF   7029         JNZ     ??ZDSecMgrNwkKeyInit_2
   3008            {
   3009              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   0000E1                ; Setup parameters for call to function osal_nv_write
   \   0000E1   A8..         MOV     R0,?XSP + 0
   \   0000E3   A9..         MOV     R1,?XSP + 1
   \   0000E5   88..         MOV     ?V0,R0
   \   0000E7   89..         MOV     ?V1,R1
   \   0000E9   78..         MOV     R0,#?V0
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EE   75..11       MOV     ?V0,#0x11
   \   0000F1   75..00       MOV     ?V1,#0x0
   \   0000F4   78..         MOV     R0,#?V0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   7C00         MOV     R4,#0x0
   \   0000FB   7D00         MOV     R5,#0x0
   \   0000FD   7A3B         MOV     R2,#0x3b
   \   0000FF   7B00         MOV     R3,#0x0
   \   000101   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000104   7404         MOV     A,#0x4
   \   000106   12....       LCALL   ?DEALLOC_XSTACK8
   \   000109   E9           MOV     A,R1
   3010            }
   3011          #endif // defined (NV_RESTORE)
   3012          
   3013          }
   \                     ??ZDSecMgrNwkKeyInit_2:
   \   00010A   7426         MOV     A,#0x26
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010F   7F02         MOV     R7,#0x2
   \   000111   02....       LJMP    ?BANKED_LEAVE_XDATA
   3014          
   3015          /*********************************************************************
   3016           * @fn          ZDSecMgrReadKeyFromNv
   3017           *
   3018           * @brief       Looks for a specific key in NV based on Index value
   3019           *
   3020           * @param   keyNvId - Index of key to look in NV
   3021           *                    valid values are:
   3022           *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
   3023           *                    ZCD_NV_NWK_ALTERN_KEY_INFO
   3024           *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3025           *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3026           *                    ZCD_NV_PRECFGKEY
   3027           *
   3028           * @param  *keyinfo - Data is read into this buffer.
   3029           *
   3030           * @return  SUCCESS if NV data was copied to the keyinfo parameter .
   3031           *          Otherwise, NV_OPER_FAILED for failure.
   3032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3033          ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
   \                     ZDSecMgrReadKeyFromNv:
   3034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3035            if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
   3036                (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
   \   00000D   743A         MOV     A,#0x3a
   \   00000F   6E           XRL     A,R6
   \   000010   7003         JNZ     ??ZDSecMgrReadKeyFromNv_0
   \   000012   7400         MOV     A,#0x0
   \   000014   6F           XRL     A,R7
   \                     ??ZDSecMgrReadKeyFromNv_0:
   \   000015   600A         JZ      ??ZDSecMgrReadKeyFromNv_1
   \   000017   743B         MOV     A,#0x3b
   \   000019   6E           XRL     A,R6
   \   00001A   7003         JNZ     ??ZDSecMgrReadKeyFromNv_2
   \   00001C   7400         MOV     A,#0x0
   \   00001E   6F           XRL     A,R7
   \                     ??ZDSecMgrReadKeyFromNv_2:
   \   00001F   7023         JNZ     ??ZDSecMgrReadKeyFromNv_3
   3037            {
   3038              // get NWK active or alternate key from NV
   3039              return (osal_nv_read(keyNvId,
   3040                                   osal_offsetof(nwkKeyDesc, key),
   3041                                   SEC_KEY_LEN,
   3042                                   keyinfo));
   \                     ??ZDSecMgrReadKeyFromNv_1:
   \   000021                ; Setup parameters for call to function osal_nv_read
   \   000021   78..         MOV     R0,#?V0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75..10       MOV     ?V2,#0x10
   \   000029   75..00       MOV     ?V3,#0x0
   \   00002C   78..         MOV     R0,#?V2
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   7C01         MOV     R4,#0x1
   \   000033   7D00         MOV     R5,#0x0
   \   000035   EE           MOV     A,R6
   \   000036   FA           MOV     R2,A
   \   000037   EF           MOV     A,R7
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000041   02....       LJMP    ??ZDSecMgrReadKeyFromNv_4 & 0xFFFF
   3043            }
   3044            else if ((keyNvId >= ZCD_NV_TCLK_TABLE_START) &&
   3045                     (keyNvId < (ZCD_NV_TCLK_TABLE_START + ZDSECMGR_TC_DEVICE_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_3:
   \   000044   C3           CLR     C
   \   000045   EE           MOV     A,R6
   \   000046   9401         SUBB    A,#0x1
   \   000048   EF           MOV     A,R7
   \   000049   9401         SUBB    A,#0x1
   \   00004B   402B         JC      ??ZDSecMgrReadKeyFromNv_5
   \   00004D   C3           CLR     C
   \   00004E   EE           MOV     A,R6
   \   00004F   9402         SUBB    A,#0x2
   \   000051   EF           MOV     A,R7
   \   000052   9401         SUBB    A,#0x1
   \   000054   5022         JNC     ??ZDSecMgrReadKeyFromNv_5
   3046            {
   3047              // Read entry keyNvId of the TC link key table from NV. keyNvId should be
   3048              // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3049              return (osal_nv_read(keyNvId,
   3050                                   osal_offsetof(APSME_TCLinkKey_t, key),
   3051                                   SEC_KEY_LEN,
   3052                                   keyinfo));
   \   000056                ; Setup parameters for call to function osal_nv_read
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   75..10       MOV     ?V2,#0x10
   \   00005E   75..00       MOV     ?V3,#0x0
   \   000061   78..         MOV     R0,#?V2
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   7C08         MOV     R4,#0x8
   \   000068   7D00         MOV     R5,#0x0
   \   00006A   EE           MOV     A,R6
   \   00006B   FA           MOV     R2,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000071   7404         MOV     A,#0x4
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   8062         SJMP    ??ZDSecMgrReadKeyFromNv_4
   3053            }
   3054            else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
   3055                     (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_5:
   \   000078   C3           CLR     C
   \   000079   EE           MOV     A,R6
   \   00007A   9401         SUBB    A,#0x1
   \   00007C   EF           MOV     A,R7
   \   00007D   9402         SUBB    A,#0x2
   \   00007F   402B         JC      ??ZDSecMgrReadKeyFromNv_6
   \   000081   C3           CLR     C
   \   000082   EE           MOV     A,R6
   \   000083   9404         SUBB    A,#0x4
   \   000085   EF           MOV     A,R7
   \   000086   9402         SUBB    A,#0x2
   \   000088   5022         JNC     ??ZDSecMgrReadKeyFromNv_6
   3056            {
   3057              // Read entry keyNvId of the APS link key table from NV. keyNvId should be
   3058              // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3059              return (osal_nv_read(keyNvId,
   3060                                   osal_offsetof(APSME_LinkKeyData_t, key),
   3061                                   SEC_KEY_LEN,
   3062                                   keyinfo));
   \   00008A                ; Setup parameters for call to function osal_nv_read
   \   00008A   78..         MOV     R0,#?V0
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008F   75..10       MOV     ?V2,#0x10
   \   000092   75..00       MOV     ?V3,#0x0
   \   000095   78..         MOV     R0,#?V2
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   7C00         MOV     R4,#0x0
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   EE           MOV     A,R6
   \   00009F   FA           MOV     R2,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   FB           MOV     R3,A
   \   0000A2   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000A5   7404         MOV     A,#0x4
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AA   802E         SJMP    ??ZDSecMgrReadKeyFromNv_4
   3063            }
   3064            else if (keyNvId == ZCD_NV_PRECFGKEY)
   \                     ??ZDSecMgrReadKeyFromNv_6:
   \   0000AC   7462         MOV     A,#0x62
   \   0000AE   6E           XRL     A,R6
   \   0000AF   7003         JNZ     ??ZDSecMgrReadKeyFromNv_7
   \   0000B1   7400         MOV     A,#0x0
   \   0000B3   6F           XRL     A,R7
   \                     ??ZDSecMgrReadKeyFromNv_7:
   \   0000B4   7022         JNZ     ??ZDSecMgrReadKeyFromNv_8
   3065            {
   3066              // Read entry keyNvId of the Preconfig key from NV.
   3067              return (osal_nv_read(keyNvId,
   3068                                   0,
   3069                                   SEC_KEY_LEN,
   3070                                   keyinfo));
   \   0000B6                ; Setup parameters for call to function osal_nv_read
   \   0000B6   78..         MOV     R0,#?V0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   75..10       MOV     ?V2,#0x10
   \   0000BE   75..00       MOV     ?V3,#0x0
   \   0000C1   78..         MOV     R0,#?V2
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   7C00         MOV     R4,#0x0
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   EE           MOV     A,R6
   \   0000CB   FA           MOV     R2,A
   \   0000CC   EF           MOV     A,R7
   \   0000CD   FB           MOV     R3,A
   \   0000CE   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000D1   7404         MOV     A,#0x4
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D6   8002         SJMP    ??ZDSecMgrReadKeyFromNv_4
   3071            }
   3072          
   3073            return NV_OPER_FAILED;
   \                     ??ZDSecMgrReadKeyFromNv_8:
   \   0000D8   790A         MOV     R1,#0xa
   \                     ??ZDSecMgrReadKeyFromNv_4:
   \   0000DA   7F04         MOV     R7,#0x4
   \   0000DC   02....       LJMP    ?BANKED_LEAVE_XDATA
   3074          }
   3075          
   3076          /******************************************************************************
   3077           * @fn          ZDSecMgrApsLinkKeyInit
   3078           *
   3079           * @brief       Initialize the NV table for Application link keys
   3080           *
   3081           * @param       none
   3082           *
   3083           * @return      none
   3084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3085          void ZDSecMgrApsLinkKeyInit(void)
   \                     ZDSecMgrApsLinkKeyInit:
   3086          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3087            APSME_LinkKeyData_t pApsLinkKey;
   3088            uint8 i;
   3089            uint8 status;
   3090          
   3091            // Initialize all NV items for APS link key, if not exist already.
   3092            osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C18         MOV     R4,#0x18
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3093          
   3094            for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000017   7E00         MOV     R6,#0x0
   \                     ??ZDSecMgrApsLinkKeyInit_0:
   \   000019   EE           MOV     A,R6
   \   00001A   C3           CLR     C
   \   00001B   9403         SUBB    A,#0x3
   \   00001D   505E         JNC     ??ZDSecMgrApsLinkKeyInit_1
   3095            {
   3096              status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
   3097                                          sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \   00001F                ; Setup parameters for call to function osal_nv_item_init
   \   00001F   A8..         MOV     R0,?XSP + 0
   \   000021   A9..         MOV     R1,?XSP + 1
   \   000023   88..         MOV     ?V0,R0
   \   000025   89..         MOV     ?V1,R1
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7C18         MOV     R4,#0x18
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   EE           MOV     A,R6
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E8           MOV     A,R0
   \   000035   2401         ADD     A,#0x1
   \   000037   FA           MOV     R2,A
   \   000038   E9           MOV     A,R1
   \   000039   3402         ADDC    A,#0x2
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044   E9           MOV     A,R1
   \   000045   FF           MOV     R7,A
   3098          
   3099          #if defined ( NV_RESTORE )
   3100              (void)status;   // to eliminate compiler warning
   3101          #else
   3102              // reset the values of NV items if NV_RESTORE is not enabled
   3103              if (status == SUCCESS)
   \   000046   EF           MOV     A,R7
   \   000047   7031         JNZ     ??ZDSecMgrApsLinkKeyInit_2
   3104              {
   3105                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3106                               sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \   000049                ; Setup parameters for call to function osal_nv_write
   \   000049   A8..         MOV     R0,?XSP + 0
   \   00004B   A9..         MOV     R1,?XSP + 1
   \   00004D   88..         MOV     ?V0,R0
   \   00004F   89..         MOV     ?V1,R1
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   75..18       MOV     ?V0,#0x18
   \   000059   75..00       MOV     ?V1,#0x0
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7C00         MOV     R4,#0x0
   \   000063   7D00         MOV     R5,#0x0
   \   000065   EE           MOV     A,R6
   \   000066   F8           MOV     R0,A
   \   000067   7900         MOV     R1,#0x0
   \   000069   E8           MOV     A,R0
   \   00006A   2401         ADD     A,#0x1
   \   00006C   FA           MOV     R2,A
   \   00006D   E9           MOV     A,R1
   \   00006E   3402         ADDC    A,#0x2
   \   000070   FB           MOV     R3,A
   \   000071   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   3107          
   3108              }
   3109          #endif // defined (NV_RESTORE)
   3110            }
   \                     ??ZDSecMgrApsLinkKeyInit_2:
   \   00007A   0E           INC     R6
   \   00007B   809C         SJMP    ??ZDSecMgrApsLinkKeyInit_0
   3111          }
   \                     ??ZDSecMgrApsLinkKeyInit_1:
   \   00007D   7418         MOV     A,#0x18
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   7F02         MOV     R7,#0x2
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
   3112          
   3113          /******************************************************************************
   3114           * @fn          ZDSecMgrInitNVKeyTables
   3115           *
   3116           * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
   3117           *
   3118           * @param       setDefault - TRUE to set default values
   3119           *
   3120           * @return      none
   3121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3122          void ZDSecMgrInitNVKeyTables(uint8 setDefault)
   \                     ZDSecMgrInitNVKeyTables:
   3123          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3124            ZDSecMgrNwkKeyInit(setDefault);
   \   000007                ; Setup parameters for call to function ZDSecMgrNwkKeyInit
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
   3125            ZDSecMgrApsLinkKeyInit();
   \   00000C                ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
   \   00000C   12....       LCALL   `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
   3126            APSME_TCLinkKeyInit(setDefault);
   \   00000F                ; Setup parameters for call to function APSME_TCLinkKeyInit
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
   3127          }
   \   000014   7F01         MOV     R7,#0x1
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
   3128          
   3129          /******************************************************************************
   3130           * @fn          ZDSecMgrSaveApsLinkKey
   3131           *
   3132           * @brief       Save APS Link Key to NV. It will loop through all the keys
   3133           *              to see which one to save.
   3134           *
   3135           * @param       none
   3136           *
   3137           * @return      none
   3138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3139          void ZDSecMgrSaveApsLinkKey(void)
   \                     ZDSecMgrSaveApsLinkKey:
   3140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3141            APSME_LinkKeyData_t *pKeyData = NULL;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   75..00       MOV     ?V1,#0x0
   3142            int i;
   3143          
   3144            pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A18         MOV     R2,#0x18
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   85....       MOV     ?V0,?V2
   \   000019   85....       MOV     ?V1,?V3
   3145          
   3146            if (pKeyData != NULL)
   \   00001C   E5..         MOV     A,?V0
   \   00001E   45..         ORL     A,?V1
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
   3147            {
   3148              // checks all pending flags to know which one to save
   3149              for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
   \   000025   7E00         MOV     R6,#0x0
   \   000027   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrSaveApsLinkKey_1:
   \   000029   C3           CLR     C
   \   00002A   EE           MOV     A,R6
   \   00002B   9403         SUBB    A,#0x3
   \   00002D   EF           MOV     A,R7
   \   00002E   9400         SUBB    A,#0x0
   \   000030   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000032   65D0         XRL     A,PSW
   \   000034   33           RLC     A
   \   000035   4003         JC      $+5
   \   000037   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_2 & 0xFFFF
   3150              {
   3151                if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \   00003A   EE           MOV     A,R6
   \   00003B   F8           MOV     R0,A
   \   00003C   EF           MOV     A,R7
   \   00003D   F9           MOV     R1,A
   \   00003E   E8           MOV     A,R0
   \   00003F   75F009       MOV     B,#0x9
   \   000042   A4           MUL     AB
   \   000043   C8           XCH     A,R0
   \   000044   AAF0         MOV     R2,B
   \   000046   75F000       MOV     B,#0x0
   \   000049   A4           MUL     AB
   \   00004A   2A           ADD     A,R2
   \   00004B   FA           MOV     R2,A
   \   00004C   75F009       MOV     B,#0x9
   \   00004F   E9           MOV     A,R1
   \   000050   A4           MUL     AB
   \   000051   2A           ADD     A,R2
   \   000052   F9           MOV     R1,A
   \   000053   74..         MOV     A,#(ApsLinkKeyFrmCntr + 8) & 0xff
   \   000055   28           ADD     A,R0
   \   000056   F582         MOV     DPL,A
   \   000058   74..         MOV     A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00005A   39           ADDC    A,R1
   \   00005B   F583         MOV     DPH,A
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   6401         XRL     A,#0x1
   \   000060   6003         JZ      $+5
   \   000062   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_3 & 0xFFFF
   3152                {
   3153                  // retrieve key from NV
   3154                  if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3155                                   sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
   \   000065                ; Setup parameters for call to function osal_nv_read
   \   000065   78..         MOV     R0,#?V0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   75..18       MOV     ?V2,#0x18
   \   00006D   75..00       MOV     ?V3,#0x0
   \   000070   78..         MOV     R0,#?V2
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   7C00         MOV     R4,#0x0
   \   000077   7D00         MOV     R5,#0x0
   \   000079   EE           MOV     A,R6
   \   00007A   2401         ADD     A,#0x1
   \   00007C   FA           MOV     R2,A
   \   00007D   EF           MOV     A,R7
   \   00007E   3402         ADDC    A,#0x2
   \   000080   FB           MOV     R3,A
   \   000081   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000084   7404         MOV     A,#0x4
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   E9           MOV     A,R1
   \   00008A   6003         JZ      $+5
   \   00008C   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_3 & 0xFFFF
   3156                  {
   3157                    pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
   \   00008F   EE           MOV     A,R6
   \   000090   F8           MOV     R0,A
   \   000091   EF           MOV     A,R7
   \   000092   F9           MOV     R1,A
   \   000093   E8           MOV     A,R0
   \   000094   75F009       MOV     B,#0x9
   \   000097   A4           MUL     AB
   \   000098   C8           XCH     A,R0
   \   000099   AAF0         MOV     R2,B
   \   00009B   75F000       MOV     B,#0x0
   \   00009E   A4           MUL     AB
   \   00009F   2A           ADD     A,R2
   \   0000A0   FA           MOV     R2,A
   \   0000A1   75F009       MOV     B,#0x9
   \   0000A4   E9           MOV     A,R1
   \   0000A5   A4           MUL     AB
   \   0000A6   2A           ADD     A,R2
   \   0000A7   F9           MOV     R1,A
   \   0000A8   74..         MOV     A,#ApsLinkKeyFrmCntr & 0xff
   \   0000AA   28           ADD     A,R0
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   74..         MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   0000AF   39           ADDC    A,R1
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   12....       LCALL   ?XLOAD_R0123
   \   0000B5   E5..         MOV     A,?V0
   \   0000B7   2410         ADD     A,#0x10
   \   0000B9   F582         MOV     DPL,A
   \   0000BB   E4           CLR     A
   \   0000BC   35..         ADDC    A,?V1
   \   0000BE   F583         MOV     DPH,A
   \   0000C0   12....       LCALL   ?XSTORE_R0123
   3158                    pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F8           MOV     R0,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   F9           MOV     R1,A
   \   0000C7   E8           MOV     A,R0
   \   0000C8   75F009       MOV     B,#0x9
   \   0000CB   A4           MUL     AB
   \   0000CC   C8           XCH     A,R0
   \   0000CD   AAF0         MOV     R2,B
   \   0000CF   75F000       MOV     B,#0x0
   \   0000D2   A4           MUL     AB
   \   0000D3   2A           ADD     A,R2
   \   0000D4   FA           MOV     R2,A
   \   0000D5   75F009       MOV     B,#0x9
   \   0000D8   E9           MOV     A,R1
   \   0000D9   A4           MUL     AB
   \   0000DA   2A           ADD     A,R2
   \   0000DB   F9           MOV     R1,A
   \   0000DC   74..         MOV     A,#(ApsLinkKeyFrmCntr + 4) & 0xff
   \   0000DE   28           ADD     A,R0
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   74..         MOV     A,#((ApsLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000E3   39           ADDC    A,R1
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   12....       LCALL   ?XLOAD_R0123
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   2414         ADD     A,#0x14
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E4           CLR     A
   \   0000F0   35..         ADDC    A,?V1
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   12....       LCALL   ?XSTORE_R0123
   3159          
   3160                    // Write the APS link key back to the NV
   3161                    osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3162                                  sizeof(APSME_LinkKeyData_t), pKeyData);
   \   0000F7                ; Setup parameters for call to function osal_nv_write
   \   0000F7   78..         MOV     R0,#?V0
   \   0000F9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FC   75..18       MOV     ?V2,#0x18
   \   0000FF   75..00       MOV     ?V3,#0x0
   \   000102   78..         MOV     R0,#?V2
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   7C00         MOV     R4,#0x0
   \   000109   7D00         MOV     R5,#0x0
   \   00010B   EE           MOV     A,R6
   \   00010C   2401         ADD     A,#0x1
   \   00010E   FA           MOV     R2,A
   \   00010F   EF           MOV     A,R7
   \   000110   3402         ADDC    A,#0x2
   \   000112   FB           MOV     R3,A
   \   000113   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000116   7404         MOV     A,#0x4
   \   000118   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011B   E9           MOV     A,R1
   3163          
   3164                    // clear the pending write flag
   3165                    ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   00011C   EE           MOV     A,R6
   \   00011D   F8           MOV     R0,A
   \   00011E   EF           MOV     A,R7
   \   00011F   F9           MOV     R1,A
   \   000120   E8           MOV     A,R0
   \   000121   75F009       MOV     B,#0x9
   \   000124   A4           MUL     AB
   \   000125   C8           XCH     A,R0
   \   000126   AAF0         MOV     R2,B
   \   000128   75F000       MOV     B,#0x0
   \   00012B   A4           MUL     AB
   \   00012C   2A           ADD     A,R2
   \   00012D   FA           MOV     R2,A
   \   00012E   75F009       MOV     B,#0x9
   \   000131   E9           MOV     A,R1
   \   000132   A4           MUL     AB
   \   000133   2A           ADD     A,R2
   \   000134   F9           MOV     R1,A
   \   000135   74..         MOV     A,#(ApsLinkKeyFrmCntr + 8) & 0xff
   \   000137   28           ADD     A,R0
   \   000138   F582         MOV     DPL,A
   \   00013A   74..         MOV     A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00013C   39           ADDC    A,R1
   \   00013D   F583         MOV     DPH,A
   \   00013F   7400         MOV     A,#0x0
   \   000141   F0           MOVX    @DPTR,A
   3166                  }
   3167                }
   3168              }
   \                     ??ZDSecMgrSaveApsLinkKey_3:
   \   000142   0E           INC     R6
   \   000143   EE           MOV     A,R6
   \   000144   7001         JNZ     ??ZDSecMgrSaveApsLinkKey_4
   \   000146   0F           INC     R7
   \                     ??ZDSecMgrSaveApsLinkKey_4:
   \   000147   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
   3169          
   3170              // clear copy of key in RAM
   3171              osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
   \                     ??ZDSecMgrSaveApsLinkKey_2:
   \   00014A                ; Setup parameters for call to function osal_memset
   \   00014A   7C18         MOV     R4,#0x18
   \   00014C   7D00         MOV     R5,#0x0
   \   00014E   7900         MOV     R1,#0x0
   \   000150   AA..         MOV     R2,?V0
   \   000152   AB..         MOV     R3,?V1
   \   000154   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3172          
   3173              osal_mem_free(pKeyData);
   \   000157                ; Setup parameters for call to function osal_mem_free
   \   000157   AA..         MOV     R2,?V0
   \   000159   AB..         MOV     R3,?V1
   \   00015B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3174            }
   3175          }
   \                     ??ZDSecMgrSaveApsLinkKey_0:
   \   00015E   7F04         MOV     R7,#0x4
   \   000160   02....       LJMP    ?BANKED_LEAVE_XDATA
   3176          
   3177          /******************************************************************************
   3178           * @fn          ZDSecMgrSaveTCLinkKey
   3179           *
   3180           * @brief       Save TC Link Key to NV. It will loop through all the keys
   3181           *              to see which one to save.
   3182           *
   3183           * @param       none
   3184           *
   3185           * @return      none
   3186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3187          void ZDSecMgrSaveTCLinkKey(void)
   \                     ZDSecMgrSaveTCLinkKey:
   3188          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3189            APSME_TCLinkKey_t *pKeyData = NULL;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   75..00       MOV     ?V1,#0x0
   3190            uint16 i;
   3191          
   3192            pKeyData = (APSME_TCLinkKey_t *)osal_mem_alloc(sizeof(APSME_TCLinkKey_t));
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A20         MOV     R2,#0x20
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   85....       MOV     ?V0,?V2
   \   000019   85....       MOV     ?V1,?V3
   3193          
   3194            if (pKeyData != NULL)
   \   00001C   E5..         MOV     A,?V0
   \   00001E   45..         ORL     A,?V1
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_0 & 0xFFFF
   3195            {
   3196              for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \   000025   7E00         MOV     R6,#0x0
   \   000027   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrSaveTCLinkKey_1:
   \   000029   EE           MOV     A,R6
   \   00002A   4F           ORL     A,R7
   \   00002B   6003         JZ      $+5
   \   00002D   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_2 & 0xFFFF
   3197              {
   3198                if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \   000030   EE           MOV     A,R6
   \   000031   F8           MOV     R0,A
   \   000032   EF           MOV     A,R7
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   75F009       MOV     B,#0x9
   \   000038   A4           MUL     AB
   \   000039   C8           XCH     A,R0
   \   00003A   AAF0         MOV     R2,B
   \   00003C   75F000       MOV     B,#0x0
   \   00003F   A4           MUL     AB
   \   000040   2A           ADD     A,R2
   \   000041   FA           MOV     R2,A
   \   000042   75F009       MOV     B,#0x9
   \   000045   E9           MOV     A,R1
   \   000046   A4           MUL     AB
   \   000047   2A           ADD     A,R2
   \   000048   F9           MOV     R1,A
   \   000049   74..         MOV     A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   00004B   28           ADD     A,R0
   \   00004C   F582         MOV     DPL,A
   \   00004E   74..         MOV     A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   000050   39           ADDC    A,R1
   \   000051   F583         MOV     DPH,A
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6401         XRL     A,#0x1
   \   000056   6003         JZ      $+5
   \   000058   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_3 & 0xFFFF
   3199                {
   3200                  if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
   3201                                   sizeof(APSME_TCLinkKey_t), pKeyData) == SUCCESS)
   \   00005B                ; Setup parameters for call to function osal_nv_read
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   75..20       MOV     ?V2,#0x20
   \   000063   75..00       MOV     ?V3,#0x0
   \   000066   78..         MOV     R0,#?V2
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   7C00         MOV     R4,#0x0
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   EE           MOV     A,R6
   \   000070   2401         ADD     A,#0x1
   \   000072   FA           MOV     R2,A
   \   000073   EF           MOV     A,R7
   \   000074   3401         ADDC    A,#0x1
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007A   7404         MOV     A,#0x4
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   E9           MOV     A,R1
   \   000080   6003         JZ      $+5
   \   000082   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_3 & 0xFFFF
   3202                  {
   3203                    pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   000085   EE           MOV     A,R6
   \   000086   F8           MOV     R0,A
   \   000087   EF           MOV     A,R7
   \   000088   F9           MOV     R1,A
   \   000089   E8           MOV     A,R0
   \   00008A   75F009       MOV     B,#0x9
   \   00008D   A4           MUL     AB
   \   00008E   C8           XCH     A,R0
   \   00008F   AAF0         MOV     R2,B
   \   000091   75F000       MOV     B,#0x0
   \   000094   A4           MUL     AB
   \   000095   2A           ADD     A,R2
   \   000096   FA           MOV     R2,A
   \   000097   75F009       MOV     B,#0x9
   \   00009A   E9           MOV     A,R1
   \   00009B   A4           MUL     AB
   \   00009C   2A           ADD     A,R2
   \   00009D   F9           MOV     R1,A
   \   00009E   74..         MOV     A,#TCLinkKeyFrmCntr & 0xff
   \   0000A0   28           ADD     A,R0
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   74..         MOV     A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000A5   39           ADDC    A,R1
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   12....       LCALL   ?XLOAD_R0123
   \   0000AB   E5..         MOV     A,?V0
   \   0000AD   2418         ADD     A,#0x18
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   E4           CLR     A
   \   0000B2   35..         ADDC    A,?V1
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   12....       LCALL   ?XSTORE_R0123
   3204                    pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
   \   0000B9   EE           MOV     A,R6
   \   0000BA   F8           MOV     R0,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   F9           MOV     R1,A
   \   0000BD   E8           MOV     A,R0
   \   0000BE   75F009       MOV     B,#0x9
   \   0000C1   A4           MUL     AB
   \   0000C2   C8           XCH     A,R0
   \   0000C3   AAF0         MOV     R2,B
   \   0000C5   75F000       MOV     B,#0x0
   \   0000C8   A4           MUL     AB
   \   0000C9   2A           ADD     A,R2
   \   0000CA   FA           MOV     R2,A
   \   0000CB   75F009       MOV     B,#0x9
   \   0000CE   E9           MOV     A,R1
   \   0000CF   A4           MUL     AB
   \   0000D0   2A           ADD     A,R2
   \   0000D1   F9           MOV     R1,A
   \   0000D2   74..         MOV     A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0000D4   28           ADD     A,R0
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   74..         MOV     A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000D9   39           ADDC    A,R1
   \   0000DA   F583         MOV     DPH,A
   \   0000DC   12....       LCALL   ?XLOAD_R0123
   \   0000DF   E5..         MOV     A,?V0
   \   0000E1   241C         ADD     A,#0x1c
   \   0000E3   F582         MOV     DPL,A
   \   0000E5   E4           CLR     A
   \   0000E6   35..         ADDC    A,?V1
   \   0000E8   F583         MOV     DPH,A
   \   0000EA   12....       LCALL   ?XSTORE_R0123
   3205          
   3206                    // Write the TC link key back to the NV
   3207                    osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
   3208                                  sizeof(APSME_TCLinkKey_t), pKeyData);
   \   0000ED                ; Setup parameters for call to function osal_nv_write
   \   0000ED   78..         MOV     R0,#?V0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F2   75..20       MOV     ?V2,#0x20
   \   0000F5   75..00       MOV     ?V3,#0x0
   \   0000F8   78..         MOV     R0,#?V2
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FD   7C00         MOV     R4,#0x0
   \   0000FF   7D00         MOV     R5,#0x0
   \   000101   EE           MOV     A,R6
   \   000102   2401         ADD     A,#0x1
   \   000104   FA           MOV     R2,A
   \   000105   EF           MOV     A,R7
   \   000106   3401         ADDC    A,#0x1
   \   000108   FB           MOV     R3,A
   \   000109   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00010C   7404         MOV     A,#0x4
   \   00010E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000111   E9           MOV     A,R1
   3209          
   3210                    // clear the pending write flag
   3211                    TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   000112   EE           MOV     A,R6
   \   000113   F8           MOV     R0,A
   \   000114   EF           MOV     A,R7
   \   000115   F9           MOV     R1,A
   \   000116   E8           MOV     A,R0
   \   000117   75F009       MOV     B,#0x9
   \   00011A   A4           MUL     AB
   \   00011B   C8           XCH     A,R0
   \   00011C   AAF0         MOV     R2,B
   \   00011E   75F000       MOV     B,#0x0
   \   000121   A4           MUL     AB
   \   000122   2A           ADD     A,R2
   \   000123   FA           MOV     R2,A
   \   000124   75F009       MOV     B,#0x9
   \   000127   E9           MOV     A,R1
   \   000128   A4           MUL     AB
   \   000129   2A           ADD     A,R2
   \   00012A   F9           MOV     R1,A
   \   00012B   74..         MOV     A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   00012D   28           ADD     A,R0
   \   00012E   F582         MOV     DPL,A
   \   000130   74..         MOV     A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   000132   39           ADDC    A,R1
   \   000133   F583         MOV     DPH,A
   \   000135   7400         MOV     A,#0x0
   \   000137   F0           MOVX    @DPTR,A
   3212                  }
   3213                }
   3214              }
   \                     ??ZDSecMgrSaveTCLinkKey_3:
   \   000138   0E           INC     R6
   \   000139   EE           MOV     A,R6
   \   00013A   7001         JNZ     ??ZDSecMgrSaveTCLinkKey_4
   \   00013C   0F           INC     R7
   \                     ??ZDSecMgrSaveTCLinkKey_4:
   \   00013D   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_1 & 0xFFFF
   3215                // clear copy of key in RAM
   3216              osal_memset( pKeyData, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??ZDSecMgrSaveTCLinkKey_2:
   \   000140                ; Setup parameters for call to function osal_memset
   \   000140   7C20         MOV     R4,#0x20
   \   000142   7D00         MOV     R5,#0x0
   \   000144   7900         MOV     R1,#0x0
   \   000146   AA..         MOV     R2,?V0
   \   000148   AB..         MOV     R3,?V1
   \   00014A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3217          
   3218              osal_mem_free(pKeyData);
   \   00014D                ; Setup parameters for call to function osal_mem_free
   \   00014D   AA..         MOV     R2,?V0
   \   00014F   AB..         MOV     R3,?V1
   \   000151   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3219            }
   3220          }
   \                     ??ZDSecMgrSaveTCLinkKey_0:
   \   000154   7F04         MOV     R7,#0x4
   \   000156   02....       LJMP    ?BANKED_LEAVE_XDATA
   3221          
   3222          /******************************************************************************
   3223           * @fn          ZDSecMgrUpdateTCAddress
   3224           *
   3225           * @brief       Update Trust Center address and save to NV.
   3226           *
   3227           * @param       extAddr - [in] extended address or NULL if no TC protected
   3228           *
   3229           * @return      none
   3230           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3231          void ZDSecMgrUpdateTCAddress( uint8 *extAddr )
   \                     ZDSecMgrUpdateTCAddress:
   3232          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   3233            uint8 noTCAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   \   00000E   90....       MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000011   AC..         MOV     R4,?XSP + 0
   \   000013   AD..         MOV     R5,?XSP + 1
   \   000015   7408         MOV     A,#0x8
   \   000017   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   3234            APSME_SetRequest( apsTrustCenterAddress, 0, ( extAddr != NULL) ? extAddr : noTCAddress );
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   6006         JZ      ??ZDSecMgrUpdateTCAddress_0
   \   00001E   EE           MOV     A,R6
   \   00001F   FC           MOV     R4,A
   \   000020   EF           MOV     A,R7
   \   000021   FD           MOV     R5,A
   \   000022   800C         SJMP    ??ZDSecMgrUpdateTCAddress_1
   \                     ??ZDSecMgrUpdateTCAddress_0:
   \   000024   A8..         MOV     R0,?XSP + 0
   \   000026   A9..         MOV     R1,?XSP + 1
   \   000028   88..         MOV     ?V0,R0
   \   00002A   89..         MOV     ?V1,R1
   \   00002C   AC..         MOV     R4,?V0
   \   00002E   AD..         MOV     R5,?V1
   \                     ??ZDSecMgrUpdateTCAddress_1:
   \   000030                ; Setup parameters for call to function APSME_SetRequest
   \   000030   7A00         MOV     R2,#0x0
   \   000032   7B00         MOV     R3,#0x0
   \   000034   79AB         MOV     R1,#-0x55
   \   000036   12....       LCALL   `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
   \   000039   E9           MOV     A,R1
   3235          #if defined ( NV_RESTORE )
   3236            osal_nv_write( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   3237          #endif
   3238          }
   \   00003A   7408         MOV     A,#0x8
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   7F02         MOV     R7,#0x2
   \   000041   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDSecMgrAppKeyType>`:
   \   000000   03           DB 3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrExtAddrStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrExtAddrLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrClear::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrClear

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupAMI::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMI

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupExtGetIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExtGetIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupAMIGetIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMIGetIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryFree::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryFree

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSendNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSendNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemoveByExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidateRM::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidateRM

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoinDirect::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinDirect

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoinFwd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinFwd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAssocDeviceAuth::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAssocDeviceAuth

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrPermitJoining::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoining

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrPermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrNewDeviceEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNewDeviceEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTCExtAddrCheck::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCExtAddrCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTCDataLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCDataLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTransportKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTransportKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRemoveDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRemoveDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRequestKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSwitchKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSwitchKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSwitchNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSwitchNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRequestAppKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestAppKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSetupPartner::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSetupPartner

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyTypeSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyTypeSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_LinkKeySet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeySet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticationSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticationCheck::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_LinkKeyNVIdGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeyNVIdGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_IsLinkKeyValid::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsLinkKeyValid

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_KeyFwdToChild::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_KeyFwdToChild

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInitNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInitNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSetDefaultNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAPSRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAPSRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeySync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeySync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeyLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_IsDefaultTCLK::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsDefaultTCLK

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrNwkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNwkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrReadKeyFromNv::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrReadKeyFromNv

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrApsLinkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrApsLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInitNVKeyTables::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInitNVKeyTables

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSaveApsLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSaveApsLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSaveTCLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSaveTCLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateTCAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateTCAddress

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1
   3239          
   3240          #if defined ( ZBA_FALLBACK_NWKKEY )
   3241          /******************************************************************************
   3242           * @fn          ZDSecMgrFallbackNwkKey
   3243           *
   3244           * @brief       Use the ZBA fallback network key.
   3245           *
   3246           * @param       none
   3247           *
   3248           * @return      none
   3249           */
   3250          void ZDSecMgrFallbackNwkKey( void )
   3251          {
   3252            if ( !_NIB.nwkKeyLoaded )
   3253            {
   3254              uint8 fallbackKey[SEC_KEY_LEN];
   3255          
   3256              ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
   3257              SSP_UpdateNwkKey( fallbackKey, 0);
   3258              SSP_SwitchNwkKey( 0 );
   3259          
   3260              // clear local copy of key
   3261              osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
   3262          
   3263              // handle next step in authentication process
   3264              ZDSecMgrAuthNwkKey();
   3265            }
   3266          }
   3267          #endif // defined ( ZBA_FALLBACK_NWKKEY )
   3268          
   3269          #if defined ( NV_RESTORE )
   3270          /******************************************************************************
   3271           * @fn          ZDSecMgrClearNVKeyValues
   3272           *
   3273           * @brief       If NV_RESTORE is enabled and the status of the network needs
   3274           *              default values this fuction clears ZCD_NV_NWKKEY,
   3275           *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
   3276           *
   3277           * @param       none
   3278           *
   3279           * @return      none
   3280           */
   3281          void ZDSecMgrClearNVKeyValues(void)
   3282          {
   3283            nwkActiveKeyItems keyItems;
   3284            nwkKeyDesc nwkKey;
   3285          
   3286            osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
   3287          
   3288            osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
   3289          
   3290            // Initialize NV items for NWK Active and Alternate keys.
   3291            osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
   3292          
   3293            osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   3294          
   3295            osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   3296          }
   3297          #endif // defined ( NV_RESTORE )
   3298          
   3299          /******************************************************************************
   3300          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     74   APSME_IsDefaultTCLK
        0      9   -> osal_isbufset
      0     37   APSME_IsLinkKeyValid
        0     33   -> APSME_LinkKeyNVIdGet
        0     33   -> osal_mem_alloc
        0     33   -> osal_mem_free
        0     36   -> osal_memcmp
        0     33   -> osal_memset
        0     37   -> osal_nv_read
      0      9   APSME_KeyFwdToChild
        0      9   -> AssocGetWithExt
        0      9   -> ZDSecMgrAssocDeviceAuth
      0     46   APSME_LinkKeyNVIdGet
        0     13   -> ZDSecMgrEntryLookupExt
      0     45   APSME_LinkKeySet
        0     25   -> ZDSecMgrEntryLookupExtGetIndex
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
        0     23   -> osal_memset
        0     27   -> osal_nv_read
        0     27   -> osal_nv_write
      0     60   APSME_TCLinkKeyInit
        0     50   -> osal_memcpy
        0     47   -> osal_memset
        0     49   -> osal_nv_item_init
        0     51   -> osal_nv_read
        0     51   -> osal_nv_write
      0     69   APSME_TCLinkKeyLoad
        0     65   -> APSME_IsDefaultTCLK
        0     65   -> APSME_IsDistributedSecurity
        0     65   -> AddrMgrEntryLookupNwk
        0     65   -> AddrMgrEntryRelease
        0     65   -> AddrMgrExtAddrEqual
        0     65   -> AddrMgrExtAddrValid
        0     65   -> osal_memset
        0     69   -> osal_nv_read
      0     58   APSME_TCLinkKeySync
        0     54   -> APSME_IsDefaultTCLK
        0     54   -> APSME_LookupExtAddr
        0     54   -> AddrMgrExtAddrEqual
        0     54   -> AddrMgrExtAddrValid
        0     54   -> osal_memset
        0     58   -> osal_nv_read
        0     54   -> sAddrExtCmp
      0     22   ZDSecMgrAPSRemove
        0     20   -> ZDSecMgrDeviceRemove
      0     22   ZDSecMgrAddLinkKey
        0     18   -> APSME_LinkKeySet
        0     20   -> ZDSecMgrAddrStore
        0     18   -> ZDSecMgrEntryLookupAMI
        0     18   -> ZDSecMgrEntryNew
      0     59   ZDSecMgrAddrClear
        0     24   -> AddrMgrEntryRelease
        0     24   -> ZDSecMgrExtAddrLookup
      0     57   ZDSecMgrAddrStore
        0     26   -> AddrMgrEntryUpdate
        0     26   -> AddrMgrExtAddrSet
      1     71   ZDSecMgrAppKeyGet
        0     14   -> SSP_GetTrueRand
      0     66   ZDSecMgrAppKeyReq
        0     49   -> APSME_LookupExtAddr
        0     49   -> APSME_LookupNwkAddr
        0     49   -> APSME_TransportKeyReq
        0     57   -> ZDSecMgrAppKeyGet
        0     49   -> osal_memset
      2      0   ZDSecMgrAppKeyTypeSet
      0     47   ZDSecMgrApsLinkKeyInit
        0     34   -> osal_memset
        0     36   -> osal_nv_item_init
        0     38   -> osal_nv_write
      2     35   ZDSecMgrAssocDeviceAuth
      2     25   ZDSecMgrAuthNwkKey
        2      0   -> osal_set_event
      0      0   ZDSecMgrAuthenticationCheck
      1     12   ZDSecMgrAuthenticationSet
        0     12   -> ZDSecMgrEntryLookupExt
      2      9   ZDSecMgrConfig
        2      0   -> APSME_SecurityRM_CD
        2      0   -> APSME_SecurityRM_ED
        2      0   -> APSME_SecurityRM_RD
        2      0   -> SSP_Init
      0     49   ZDSecMgrDeviceJoin
        0     29   -> ZDSecMgrAddrClear
        0     31   -> ZDSecMgrAddrStore
        0     29   -> ZDSecMgrDeviceRemove
        0     29   -> ZDSecMgrDeviceValidate
        0     29   -> ZDSecMgrSendNwkKey
        0     32   -> osal_memcpy
      0     18   ZDSecMgrDeviceJoinDirect
        0      9   -> AssocGetWithShort
        0      9   -> ZDSecMgrAssocDeviceAuth
        0      9   -> ZDSecMgrDeviceJoin
      0     29   ZDSecMgrDeviceJoinFwd
        0     20   -> APSME_UpdateDeviceReq
        0     20   -> AssocGetWithShort
        0     20   -> ZDSecMgrAssocDeviceAuth
      0     44   ZDSecMgrDeviceNew
        0      9   -> APSME_IsDistributedSecurity
        0      9   -> ZDSecMgrDeviceJoinDirect
        0      9   -> ZDSecMgrDeviceJoinFwd
      0     51   ZDSecMgrDeviceRemove
        0     22   -> APSME_RemoveDeviceReq
        0     22   -> AssocGetWithExt
        0     22   -> NLME_GetShortAddr
        0     22   -> NLME_LeaveReq
      0     11   ZDSecMgrDeviceRemoveByExtAddr
        0     11   -> ZDSecMgrEntryFree
        0     11   -> ZDSecMgrEntryLookupExt
      0     38   ZDSecMgrDeviceValidate
        0      9   -> ZDSecMgrDeviceValidateRM
      2      9   ZDSecMgrDeviceValidateRM
      0     27   ZDSecMgrEntryFree
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_write
      0      9   ZDSecMgrEntryInit
        0      9   -> osal_mem_alloc
      0     25   ZDSecMgrEntryLookup
        0     25   -> AddrMgrEntryLookupNwk
      0     27   ZDSecMgrEntryLookupAMI
      0      9   ZDSecMgrEntryLookupAMIGetIndex
      0     26   ZDSecMgrEntryLookupExt
        0     13   -> ZDSecMgrEntryLookupAMI
        0     13   -> ZDSecMgrExtAddrLookup
      0     41   ZDSecMgrEntryLookupExtGetIndex
        0     16   -> ZDSecMgrExtAddrLookup
      0     27   ZDSecMgrEntryNew
      0     48   ZDSecMgrExtAddrLookup
        0     24   -> AddrMgrEntryLookupExt
        0     24   -> AddrMgrExtAddrSet
      0     28   ZDSecMgrExtAddrStore
        0     26   -> AddrMgrEntryUpdate
        0     26   -> AddrMgrExtAddrSet
      0      9   ZDSecMgrInit
        0      9   -> APSME_IsDistributedSecurity
        0      9   -> ZDSecMgrConfig
      0     16   ZDSecMgrInitNV
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_write
      0      9   ZDSecMgrInitNVKeyTables
        0      9   -> APSME_TCLinkKeyInit
        0      9   -> ZDSecMgrApsLinkKeyInit
        0      9   -> ZDSecMgrNwkKeyInit
      1     35   ZDSecMgrNewDeviceEvent
        0     35   -> AddrMgrEntryGet
        0     35   -> AssocGetWithShort
        0     35   -> AssocRemove
        0     35   -> NLME_GetShortAddr
        0     35   -> ZDSecMgrAddrClear
        0     35   -> ZDSecMgrAssocDeviceAuth
        0     35   -> ZDSecMgrDeviceNew
      0     61   ZDSecMgrNwkKeyInit
        0     48   -> osal_memset
        0     50   -> osal_nv_item_init
        0     52   -> osal_nv_write
      2      0   ZDSecMgrPermitJoining
      2      0   ZDSecMgrPermitJoiningTimeout
      0     41   ZDSecMgrReadKeyFromNv
        0     16   -> osal_nv_read
      0     17   ZDSecMgrRemoveDeviceInd
        0     17   -> APSME_LookupNwkAddr
        0     17   -> NLME_GetShortAddr
        0     17   -> ZDSecMgrDeviceRemove
      0     13   ZDSecMgrRequestAppKey
        0     13   -> APSME_RequestKeyReq
      0      9   ZDSecMgrRequestKeyInd
        0      9   -> ZDSecMgrAppKeyReq
      0     16   ZDSecMgrSaveApsLinkKey
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      0     16   ZDSecMgrSaveTCLinkKey
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      1     75   ZDSecMgrSendNwkKey
        0     42   -> APSME_TransportKeyReq
        0     42   -> NLME_GetShortAddr
        0     46   -> NLME_ReadNwkKeyInfo
        0     42   -> osal_memset
      0     23   ZDSecMgrSetDefaultNV
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     19   -> osal_memset
        0     23   -> osal_nv_write
      0     25   ZDSecMgrSetupPartner
        0     25   -> AddrMgrEntryUpdate
        0     25   -> AddrMgrExtAddrSet
        0     25   -> AddrMgrExtAddrValid
        0     25   -> ZDP_IEEEAddrReq
        0     25   -> ZDP_NwkAddrReq
      0      9   ZDSecMgrSwitchKeyInd
        0      9   -> SSP_SwitchNwkKey
        0      9   -> ZDApp_NVUpdate
      1     14   ZDSecMgrSwitchNwkKey
        0     14   -> APSME_SwitchKeyReq
        0     14   -> SSP_SwitchNwkKey
        0     14   -> ZDApp_NVUpdate
      0     52   ZDSecMgrTCDataLoad
        0     25   -> APSME_IsDistributedSecurity
        0     25   -> AddrMgrEntryLookupExt
        0     27   -> ZDSecMgrAddrStore
        0     25   -> sAddrExtCpy
      0     17   ZDSecMgrTCExtAddrCheck
        0     17   -> APSME_GetRequest
        0     17   -> sAddrExtCmp
      0     25   ZDSecMgrTransportKeyInd
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrAuthNwkKey
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> ZDSecMgrTCDataLoad
        0     25   -> ZDSecMgrUpdateTCAddress
        0     25   -> osal_isbufset
        0     25   -> osal_memset
      0     17   ZDSecMgrUpdateDeviceInd
        0     17   -> ZDSecMgrDeviceJoin
      1     25   ZDSecMgrUpdateNwkKey
        0     25   -> APSME_TransportKeyReq
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDApp_NVUpdate
      0     43   ZDSecMgrUpdateTCAddress
        0     18   -> APSME_SetRequest


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       1  ?<Initializer for ZDSecMgrAppKeyType>
      25  APSME_IsDefaultTCLK
       6  APSME_IsDefaultTCLK::?relay
     204  APSME_IsLinkKeyValid
       6  APSME_IsLinkKeyValid::?relay
      76  APSME_KeyFwdToChild
       6  APSME_KeyFwdToChild::?relay
      95  APSME_LinkKeyNVIdGet
       6  APSME_LinkKeyNVIdGet::?relay
     488  APSME_LinkKeySet
       6  APSME_LinkKeySet::?relay
     410  APSME_TCLinkKeyInit
       6  APSME_TCLinkKeyInit::?relay
     356  APSME_TCLinkKeyLoad
       6  APSME_TCLinkKeyLoad::?relay
     450  APSME_TCLinkKeySync
       6  APSME_TCLinkKeySync::?relay
      27  ApsLinkKeyFrmCntr
       9  TCLinkKeyFrmCntr
      32  TrustCenterLinkKey
     116  ZDSecMgrAPSRemove
       6  ZDSecMgrAPSRemove::?relay
     169  ZDSecMgrAddLinkKey
       6  ZDSecMgrAddLinkKey::?relay
      89  ZDSecMgrAddrClear
       6  ZDSecMgrAddrClear::?relay
     141  ZDSecMgrAddrStore
       6  ZDSecMgrAddrStore::?relay
      79  ZDSecMgrAppKeyGet
       6  ZDSecMgrAppKeyGet::?relay
     322  ZDSecMgrAppKeyReq
       6  ZDSecMgrAppKeyReq::?relay
       1  ZDSecMgrAppKeyType
      34  ZDSecMgrAppKeyTypeSet
       6  ZDSecMgrAppKeyTypeSet::?relay
     135  ZDSecMgrApsLinkKeyInit
       6  ZDSecMgrApsLinkKeyInit::?relay
      28  ZDSecMgrAssocDeviceAuth
       6  ZDSecMgrAssocDeviceAuth::?relay
      32  ZDSecMgrAuthNwkKey
       6  ZDSecMgrAuthNwkKey::?relay
       5  ZDSecMgrAuthenticationCheck
       6  ZDSecMgrAuthenticationCheck::?relay
      71  ZDSecMgrAuthenticationSet
       6  ZDSecMgrAuthenticationSet::?relay
      47  ZDSecMgrConfig
       6  ZDSecMgrConfig::?relay
     284  ZDSecMgrDeviceJoin
       6  ZDSecMgrDeviceJoin::?relay
      45  ZDSecMgrDeviceJoinDirect
       6  ZDSecMgrDeviceJoinDirect::?relay
     259  ZDSecMgrDeviceJoinFwd
       6  ZDSecMgrDeviceJoinFwd::?relay
      50  ZDSecMgrDeviceNew
       6  ZDSecMgrDeviceNew::?relay
     312  ZDSecMgrDeviceRemove
       6  ZDSecMgrDeviceRemove::?relay
      58  ZDSecMgrDeviceRemoveByExtAddr
       6  ZDSecMgrDeviceRemoveByExtAddr::?relay
      39  ZDSecMgrDeviceValidate
       6  ZDSecMgrDeviceValidate::?relay
      21  ZDSecMgrDeviceValidateRM
       6  ZDSecMgrDeviceValidateRM::?relay
       2  ZDSecMgrEntries
     138  ZDSecMgrEntryFree
       6  ZDSecMgrEntryFree::?relay
     166  ZDSecMgrEntryInit
       6  ZDSecMgrEntryInit::?relay
     218  ZDSecMgrEntryLookup
       6  ZDSecMgrEntryLookup::?relay
     164  ZDSecMgrEntryLookupAMI
       6  ZDSecMgrEntryLookupAMI::?relay
     110  ZDSecMgrEntryLookupAMIGetIndex
       6  ZDSecMgrEntryLookupAMIGetIndex::?relay
      79  ZDSecMgrEntryLookupExt
       6  ZDSecMgrEntryLookupExt::?relay
     224  ZDSecMgrEntryLookupExtGetIndex
       6  ZDSecMgrEntryLookupExtGetIndex::?relay
     208  ZDSecMgrEntryNew
       6  ZDSecMgrEntryNew::?relay
     117  ZDSecMgrExtAddrLookup
       6  ZDSecMgrExtAddrLookup::?relay
     141  ZDSecMgrExtAddrStore
       6  ZDSecMgrExtAddrStore::?relay
      39  ZDSecMgrInit
       6  ZDSecMgrInit::?relay
     138  ZDSecMgrInitNV
       6  ZDSecMgrInitNV::?relay
      25  ZDSecMgrInitNVKeyTables
       6  ZDSecMgrInitNVKeyTables::?relay
     268  ZDSecMgrNewDeviceEvent
       6  ZDSecMgrNewDeviceEvent::?relay
     276  ZDSecMgrNwkKeyInit
       6  ZDSecMgrNwkKeyInit::?relay
      49  ZDSecMgrPermitJoining
       6  ZDSecMgrPermitJoining::?relay
       1  ZDSecMgrPermitJoiningEnabled
       1  ZDSecMgrPermitJoiningTimed
      31  ZDSecMgrPermitJoiningTimeout
       6  ZDSecMgrPermitJoiningTimeout::?relay
     223  ZDSecMgrReadKeyFromNv
       6  ZDSecMgrReadKeyFromNv::?relay
      95  ZDSecMgrRemoveDeviceInd
       6  ZDSecMgrRemoveDeviceInd::?relay
      63  ZDSecMgrRequestAppKey
       6  ZDSecMgrRequestAppKey::?relay
      47  ZDSecMgrRequestKeyInd
       6  ZDSecMgrRequestKeyInd::?relay
     355  ZDSecMgrSaveApsLinkKey
       6  ZDSecMgrSaveApsLinkKey::?relay
     345  ZDSecMgrSaveTCLinkKey
       6  ZDSecMgrSaveTCLinkKey::?relay
     336  ZDSecMgrSendNwkKey
       6  ZDSecMgrSendNwkKey::?relay
     284  ZDSecMgrSetDefaultNV
       6  ZDSecMgrSetDefaultNV::?relay
     137  ZDSecMgrSetupPartner
       6  ZDSecMgrSetupPartner::?relay
      30  ZDSecMgrSwitchKeyInd
       6  ZDSecMgrSwitchKeyInd::?relay
      77  ZDSecMgrSwitchNwkKey
       6  ZDSecMgrSwitchNwkKey::?relay
       1  ZDSecMgrTCAuthenticated
      97  ZDSecMgrTCDataLoad
       6  ZDSecMgrTCDataLoad::?relay
       8  ZDSecMgrTCExtAddr
      49  ZDSecMgrTCExtAddrCheck
       6  ZDSecMgrTCExtAddrCheck::?relay
     254  ZDSecMgrTransportKeyInd
       6  ZDSecMgrTransportKeyInd::?relay
     163  ZDSecMgrUpdateDeviceInd
       6  ZDSecMgrUpdateDeviceInd::?relay
     137  ZDSecMgrUpdateNwkKey
       6  ZDSecMgrUpdateNwkKey::?relay
      68  ZDSecMgrUpdateTCAddress
       6  ZDSecMgrUpdateTCAddress::?relay
       4  __Constant_1

 
 9 591 bytes in segment BANKED_CODE
   378 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    12 bytes in segment XDATA_ROM_C
    81 bytes in segment XDATA_Z
 
 9 970 bytes of CODE  memory
     8 bytes of CONST memory (+ 4 bytes shared)
    82 bytes of XDATA memory

Errors: none
Warnings: none
