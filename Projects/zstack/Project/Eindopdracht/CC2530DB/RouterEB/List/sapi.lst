###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                09/Mar/2016  13:12:46
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\sapi\sapi.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\sapi\sapi.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\List\sapi.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\RouterEB\Obj\sapi.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\sapi\sapi.c
      1          /**************************************************************************************************
      2            Filename:       sapi.c
      3            Revised:        $Date: 2010-05-03 17:46:57 -0700 (Mon, 03 May 2010) $
      4            Revision:       $Revision: 22364 $
      5          
      6            Description:    Z-Stack Simple Application Interface.
      7          
      8          
      9            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /******************************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "hal_drivers.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Tasks.h"
     48          //#include "OSAL_Custom.h"
     49          
     50          #if defined ( MT_TASK )
     51            #include "MT.h"
     52            #include "MT_TASK.h"
     53          #endif
     54          
     55          #include "nwk.h"
     56          #include "APS.h"
     57          #include "ZDApp.h"
     58          
     59          #include "osal_nv.h"
     60          #include "NLMEDE.h"
     61          #include "AF.h"
     62          #include "OnBoard.h"
     63          #include "nwk_util.h"
     64          #include "ZDProfile.h"
     65          #include "ZDObject.h"
     66          #include "hal_led.h"
     67          #include "hal_key.h"
     68          #include "sapi.h"
     69          #include "MT_SAPI.h"
     70          
     71          extern uint8 zgStartDelay;
     72          extern uint8 zgSapiEndpoint;
     73          
     74          /*********************************************************************
     75           * CONSTANTS
     76           */
     77          
     78          #if !defined OSAL_SAPI
     79          #define OSAL_SAPI  TRUE
     80          #endif
     81          
     82          #if !defined SAPI_CB_FUNC
     83          #define SAPI_CB_FUNC  TRUE
     84          #endif
     85          
     86          // Message ID's for application user messages must be in 0xE0-0xEF range
     87          #define ZB_USER_MSG                       0xE0
     88          #define SAPICB_DATA_CNF   0xE0
     89          #define SAPICB_BIND_CNF   0xE1
     90          #define SAPICB_START_CNF  0xE2
     91          
     92          /*********************************************************************
     93           * TYPEDEFS
     94           */
     95          
     96          /*********************************************************************
     97           * GLOBAL VARIABLES
     98           */
     99          
    100          #if OSAL_SAPI
    101          // The order in this table must be identical to the task initialization calls below in osalInitTask.

   \                                 In  segment XDATA_ROM_C, align 1
    102          const pTaskEventHandlerFn tasksArr[] = {
   \                     tasksArr:
   \   000000   ....         DW `??macEventLoop::?relay`
   \   000002   ....         DW `??nwk_event_loop::?relay`
   \   000004   ....         DW `??Hal_ProcessEvent::?relay`
   \   000006   ....         DW `??APS_event_loop::?relay`
   \   000008   ....         DW `??ZDApp_event_loop::?relay`
   \   00000A   ....         DW `??SAPI_ProcessEvent::?relay`
    103            macEventLoop,
    104            nwk_event_loop,
    105            Hal_ProcessEvent,
    106          #if defined( MT_TASK )
    107            MT_ProcessEvent,
    108          #endif
    109            APS_event_loop,
    110            ZDApp_event_loop,
    111          
    112            SAPI_ProcessEvent
    113          };
    114          

   \                                 In  segment XDATA_ROM_C, align 1
    115          const uint8 tasksCnt = sizeof( tasksArr ) / sizeof( tasksArr[0] );
   \                     tasksCnt:
   \   000000   06           DB 6

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          uint16 *tasksEvents;
   \                     tasksEvents:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    117          #endif
    118          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          endPointDesc_t sapi_epDesc;
   \                     sapi_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          uint8 sapi_TaskID;
   \                     sapi_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          static uint16 sapi_bindInProgress;
   \                     sapi_bindInProgress:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124           * LOCAL FUNCTIONS
    125           */
    126          
    127          void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    128          static void SAPI_SendCback( uint8 event, uint8 status, uint16 data );
    129          
    130          static void SAPI_StartConfirm( uint8 status );
    131          static void SAPI_SendDataConfirm( uint8 handle, uint8 status );
    132          static void SAPI_BindConfirm( uint16 commandId, uint8 status );
    133          static void SAPI_FindDeviceConfirm( uint8 searchType,
    134                                              uint8 *searchKey, uint8 *result );
    135          static void SAPI_ReceiveDataIndication( uint16 source,
    136                                        uint16 command, uint16 len, uint8 *pData  );
    137          static void SAPI_AllowBindConfirm( uint16 source );
    138          
    139          /******************************************************************************
    140           * @fn          zb_SystemReset
    141           *
    142           * @brief       The zb_SystemReset function reboots the ZigBee device.  The
    143           *              zb_SystemReset function can be called after a call to
    144           *              zb_WriteConfiguration to restart Z-Stack with the updated
    145           *              configuration.
    146           *
    147           * @param       none
    148           *
    149           * @return      none
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void zb_SystemReset ( void )
   \                     zb_SystemReset:
    152          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    153            SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
   \   000000                ; Setup parameters for call to function Onboard_soft_reset
   \   000000   12....       LCALL   Onboard_soft_reset & 0xFFFF
    154          }
   \   000003   02....       LJMP    ?BRET
    155          
    156          /******************************************************************************
    157           * @fn          zb_StartRequest
    158           *
    159           * @brief       The zb_StartRequest function starts the ZigBee stack.  When the
    160           *              ZigBee stack starts, the device reads configuration parameters
    161           *              from Nonvolatile memory and the device joins its network.  The
    162           *              ZigBee stack calls the zb_StartConrifm callback function when
    163           *              the startup process completes.
    164           *
    165           * @param       none
    166           *
    167           * @return      none
    168           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          void zb_StartRequest()
   \                     zb_StartRequest:
    170          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    171            uint8 logicalType;
    172          
    173            zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
   \   000009                ; Setup parameters for call to function zb_ReadConfiguration
   \   000009   AC..         MOV     R4,?XSP + 0
   \   00000B   AD..         MOV     R5,?XSP + 1
   \   00000D   7A01         MOV     R2,#0x1
   \   00000F   7987         MOV     R1,#-0x79
   \   000011   12....       LCALL   `??zb_ReadConfiguration::?relay`; Banked call to: zb_ReadConfiguration
   \   000014   E9           MOV     A,R1
    174          
    175            // Check for bad combinations of compile flag definitions and device type setting.
    176            if ((logicalType > ZG_DEVICETYPE_ENDDEVICE)      ||
    177          #if !ZG_BUILD_ENDDEVICE_TYPE   // Only RTR or Coord possible.
    178                (logicalType == ZG_DEVICETYPE_ENDDEVICE)     ||
    179          #endif
    180          #if !ZG_BUILD_RTR_TYPE         // Only End Device possible.
    181                (logicalType == ZG_DEVICETYPE_ROUTER)        ||
    182                (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
    183          #elif ZG_BUILD_RTRONLY_TYPE    // Only RTR possible.
    184                (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
    185          #elif !ZG_BUILD_JOINING_TYPE   // Only Coord possible.
    186                (logicalType == ZG_DEVICETYPE_ROUTER)        ||
    187          #endif
    188                (0))
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C3           CLR     C
   \   00001D   9403         SUBB    A,#0x3
   \   00001F   401C         JC      ??zb_StartRequest_0
    189            {
    190              logicalType = ZB_INVALID_PARAMETER;
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   7402         MOV     A,#0x2
   \   000029   F0           MOVX    @DPTR,A
    191              SAPI_SendCback(SAPICB_START_CNF, logicalType, 0);
   \   00002A                ; Setup parameters for call to function SAPI_SendCback
   \   00002A   7C00         MOV     R4,#0x0
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FA           MOV     R2,A
   \   000036   79E2         MOV     R1,#-0x1e
   \   000038   12....       LCALL   `??SAPI_SendCback::?relay`; Banked call to: SAPI_SendCback
   \   00003B   8014         SJMP    ??zb_StartRequest_1
    192            }
    193            else
    194            {
    195              logicalType = ZB_SUCCESS;
   \                     ??zb_StartRequest_0:
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   7400         MOV     A,#0x0
   \   000045   F0           MOVX    @DPTR,A
    196              ZDOInitDevice(zgStartDelay);
   \   000046                ; Setup parameters for call to function ZDOInitDevice
   \   000046   90....       MOV     DPTR,#zgStartDelay
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FA           MOV     R2,A
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000050   E9           MOV     A,R1
    197            }
    198          
    199            return;
   \                     ??zb_StartRequest_1:
   \   000051   7401         MOV     A,#0x1
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   D083         POP     DPH
   \   000058   D082         POP     DPL
   \   00005A   02....       LJMP    ?BRET
    200          }
    201          
    202          /******************************************************************************
    203           * @fn          zb_BindDevice
    204           *
    205           * @brief       The zb_BindDevice function establishes or removes a ‘binding’
    206           *              between two devices.  Once bound, an application can send
    207           *              messages to a device by referencing the commandId for the
    208           *              binding.
    209           *
    210           * @param       create - TRUE to create a binding, FALSE to remove a binding
    211           *              commandId - The identifier of the binding
    212           *              pDestination - The 64-bit IEEE address of the device to bind to
    213           *
    214           * @return      The status of the bind operation is returned in the
    215           *              zb_BindConfirm callback.
    216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    217          void zb_BindDevice ( uint8 create, uint16 commandId, uint8 *pDestination )
   \                     zb_BindDevice:
    218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V1,R1
   \   000017   8C..         MOV     ?V2,R4
   \   000019   8D..         MOV     ?V3,R5
    219            zAddrType_t destination;
    220            uint8 ret = ZB_ALREADY_IN_PROGRESS;
   \   00001B   75..20       MOV     ?V0,#0x20
    221          
    222            if ( create )
   \   00001E   E5..         MOV     A,?V1
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??zb_BindDevice_0 & 0xFFFF
    223            {
    224              if (sapi_bindInProgress == 0xffff)
   \   000025   90....       MOV     DPTR,#sapi_bindInProgress
   \   000028   E0           MOVX    A,@DPTR
   \   000029   64FF         XRL     A,#0xff
   \   00002B   7004         JNZ     ??zb_BindDevice_1
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   64FF         XRL     A,#0xff
   \                     ??zb_BindDevice_1:
   \   000031   6003         JZ      $+5
   \   000033   02....       LJMP    ??zb_BindDevice_2 & 0xFFFF
    225              {
    226                if ( pDestination )
   \   000036   E5..         MOV     A,?V2
   \   000038   45..         ORL     A,?V3
   \   00003A   606E         JZ      ??zb_BindDevice_3
    227                {
    228                  destination.addrMode = Addr64Bit;
   \   00003C   740A         MOV     A,#0xa
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7403         MOV     A,#0x3
   \   000043   F0           MOVX    @DPTR,A
    229                  osal_cpyExtAddr( destination.addr.extAddr, pDestination );
   \   000044                ; Setup parameters for call to function sAddrExtCpy
   \   000044   AC..         MOV     R4,?V2
   \   000046   AD..         MOV     R5,?V3
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?XSTACK_DISP101_8
   \   00004D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    230          
    231                  ret = APSME_BindRequest( sapi_epDesc.endPoint, commandId,
    232                                           &destination, sapi_epDesc.endPoint );
   \   000050                ; Setup parameters for call to function APSME_BindRequest
   \   000050   90....       MOV     DPTR,#sapi_epDesc
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V4,A
   \   000056   78..         MOV     R0,#?V4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005B   7403         MOV     A,#0x3
   \   00005D   12....       LCALL   ?XSTACK_DISP102_8
   \   000060   7401         MOV     A,#0x1
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FA           MOV     R2,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FB           MOV     R3,A
   \   00006A   90....       MOV     DPTR,#sapi_epDesc
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   000072   7401         MOV     A,#0x1
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
   \   000078   F5..         MOV     ?V0,A
    233          
    234                  if ( ret == ZSuccess )
   \   00007A   E5..         MOV     A,?V0
   \   00007C   6003         JZ      $+5
   \   00007E   02....       LJMP    ??zb_BindDevice_2 & 0xFFFF
    235                  {
    236                    // Find nwk addr
    237                    ZDP_NwkAddrReq(pDestination, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000081                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000081   7D00         MOV     R5,#0x0
   \   000083   7C00         MOV     R4,#0x0
   \   000085   7900         MOV     R1,#0x0
   \   000087   AA..         MOV     R2,?V2
   \   000089   AB..         MOV     R3,?V3
   \   00008B   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   00008E   E9           MOV     A,R1
    238                    osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   00008F                ; Setup parameters for call to function osal_start_timerEx
   \   00008F   90....       MOV     DPTR,#__Constant_fa
   \   000092   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000095   7A00         MOV     R2,#0x0
   \   000097   7B01         MOV     R3,#0x1
   \   000099   90....       MOV     DPTR,#ZDAppTaskID
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F9           MOV     R1,A
   \   00009E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000A1   7404         MOV     A,#0x4
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV     A,R1
   \   0000A7   02....       LJMP    ??zb_BindDevice_2 & 0xFFFF
    239                  }
    240                }
    241                else
    242                {
    243                  ret = ZB_INVALID_PARAMETER;
   \                     ??zb_BindDevice_3:
   \   0000AA   75..02       MOV     ?V0,#0x2
    244                  destination.addrMode = Addr16Bit;
   \   0000AD   740A         MOV     A,#0xa
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   F0           MOVX    @DPTR,A
    245                  destination.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   74FF         MOV     A,#-0x1
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   74FF         MOV     A,#-0x1
   \   0000C0   F0           MOVX    @DPTR,A
    246                  if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumOutClusters,
    247                                              sapi_epDesc.simpleDesc->pAppOutClusterList ) )
   \   0000C1                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0000C1   90....       MOV     DPTR,#sapi_epDesc + 3
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   C8           XCH     A,R0
   \   0000C9   240A         ADD     A,#0xa
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   C8           XCH     A,R0
   \   0000CE   3400         ADDC    A,#0x0
   \   0000D0   F583         MOV     DPH,A
   \   0000D2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000D5   90....       MOV     DPTR,#sapi_epDesc + 3
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F8           MOV     R0,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   C8           XCH     A,R0
   \   0000DD   2409         ADD     A,#0x9
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   C8           XCH     A,R0
   \   0000E2   3400         ADDC    A,#0x0
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   FC           MOV     R4,A
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?XSTACK_DISP101_8
   \   0000ED   7901         MOV     R1,#0x1
   \   0000EF   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0000F2   7402         MOV     A,#0x2
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F7   E9           MOV     A,R1
   \   0000F8   6050         JZ      ??zb_BindDevice_4
    248                  {
    249                    // Try to match with a device in the allow bind mode
    250                    ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
    251                        sapi_epDesc.simpleDesc->AppProfId, 1, &commandId, 0, (cId_t *)NULL, 0 );
   \   0000FA                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000FA   75..00       MOV     ?V4,#0x0
   \   0000FD   78..         MOV     R0,#?V4
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000102   E4           CLR     A
   \   000103   F5..         MOV     ?V4,A
   \   000105   F5..         MOV     ?V5,A
   \   000107   78..         MOV     R0,#?V4
   \   000109   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010C   75..00       MOV     ?V4,#0x0
   \   00010F   78..         MOV     R0,#?V4
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000114   7404         MOV     A,#0x4
   \   000116   12....       LCALL   ?XSTACK_DISP100_8
   \   000119   88..         MOV     ?V4,R0
   \   00011B   89..         MOV     ?V5,R1
   \   00011D   78..         MOV     R0,#?V4
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000122   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000125   E0           MOVX    A,@DPTR
   \   000126   F8           MOV     R0,A
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   F583         MOV     DPH,A
   \   00012B   8882         MOV     DPL,R0
   \   00012D   A3           INC     DPTR
   \   00012E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000131   7901         MOV     R1,#0x1
   \   000133   7CFF         MOV     R4,#-0x1
   \   000135   7DFF         MOV     R5,#-0x1
   \   000137   740A         MOV     A,#0xa
   \   000139   12....       LCALL   ?XSTACK_DISP101_8
   \   00013C   12....       LCALL   `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   00013F   7408         MOV     A,#0x8
   \   000141   12....       LCALL   ?DEALLOC_XSTACK8
   \   000144   E9           MOV     A,R1
   \   000145   F5..         MOV     ?V0,A
   \   000147   02....       LJMP    ??zb_BindDevice_5 & 0xFFFF
    252                  }
    253                  else if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumInClusters,
    254                                                   sapi_epDesc.simpleDesc->pAppInClusterList ) )
   \                     ??zb_BindDevice_4:
   \   00014A                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00014A   90....       MOV     DPTR,#sapi_epDesc + 3
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   F8           MOV     R0,A
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   C8           XCH     A,R0
   \   000152   2407         ADD     A,#0x7
   \   000154   F582         MOV     DPL,A
   \   000156   C8           XCH     A,R0
   \   000157   3400         ADDC    A,#0x0
   \   000159   F583         MOV     DPH,A
   \   00015B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00015E   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000161   E0           MOVX    A,@DPTR
   \   000162   F8           MOV     R0,A
   \   000163   A3           INC     DPTR
   \   000164   E0           MOVX    A,@DPTR
   \   000165   C8           XCH     A,R0
   \   000166   2406         ADD     A,#0x6
   \   000168   F582         MOV     DPL,A
   \   00016A   C8           XCH     A,R0
   \   00016B   3400         ADDC    A,#0x0
   \   00016D   F583         MOV     DPH,A
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   FC           MOV     R4,A
   \   000171   7402         MOV     A,#0x2
   \   000173   12....       LCALL   ?XSTACK_DISP101_8
   \   000176   7901         MOV     R1,#0x1
   \   000178   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00017B   7402         MOV     A,#0x2
   \   00017D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000180   E9           MOV     A,R1
   \   000181   604D         JZ      ??zb_BindDevice_5
    255                  {
    256                    ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
    257                        sapi_epDesc.simpleDesc->AppProfId, 0, (cId_t *)NULL, 1, &commandId, 0 );
   \   000183                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000183   75..00       MOV     ?V4,#0x0
   \   000186   78..         MOV     R0,#?V4
   \   000188   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00018B   7401         MOV     A,#0x1
   \   00018D   12....       LCALL   ?XSTACK_DISP100_8
   \   000190   88..         MOV     ?V4,R0
   \   000192   89..         MOV     ?V5,R1
   \   000194   78..         MOV     R0,#?V4
   \   000196   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000199   75..01       MOV     ?V4,#0x1
   \   00019C   78..         MOV     R0,#?V4
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A1   E4           CLR     A
   \   0001A2   F5..         MOV     ?V4,A
   \   0001A4   F5..         MOV     ?V5,A
   \   0001A6   78..         MOV     R0,#?V4
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AB   90....       MOV     DPTR,#sapi_epDesc + 3
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   F8           MOV     R0,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   F583         MOV     DPH,A
   \   0001B4   8882         MOV     DPL,R0
   \   0001B6   A3           INC     DPTR
   \   0001B7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001BA   7900         MOV     R1,#0x0
   \   0001BC   7CFF         MOV     R4,#-0x1
   \   0001BE   7DFF         MOV     R5,#-0x1
   \   0001C0   740A         MOV     A,#0xa
   \   0001C2   12....       LCALL   ?XSTACK_DISP101_8
   \   0001C5   12....       LCALL   `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   0001C8   7408         MOV     A,#0x8
   \   0001CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CD   E9           MOV     A,R1
   \   0001CE   F5..         MOV     ?V0,A
    258                  }
    259          
    260                  if ( ret == ZB_SUCCESS )
   \                     ??zb_BindDevice_5:
   \   0001D0   E5..         MOV     A,?V0
   \   0001D2   703B         JNZ     ??zb_BindDevice_2
    261                  {
    262                    // Set a timer to make sure bind completes
    263          #if ( ZG_BUILD_RTR_TYPE )
    264                    osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, AIB_MaxBindingTime);
   \   0001D4                ; Setup parameters for call to function osal_start_timerEx
   \   0001D4   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F5..         MOV     ?V4,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   F5..         MOV     ?V5,A
   \   0001DE   E4           CLR     A
   \   0001DF   F5..         MOV     ?V6,A
   \   0001E1   F5..         MOV     ?V7,A
   \   0001E3   78..         MOV     R0,#?V4
   \   0001E5   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0001E8   7A00         MOV     R2,#0x0
   \   0001EA   7B20         MOV     R3,#0x20
   \   0001EC   90....       MOV     DPTR,#sapi_TaskID
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   F9           MOV     R1,A
   \   0001F1   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001F4   7404         MOV     A,#0x4
   \   0001F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F9   E9           MOV     A,R1
    265          #else
    266                    // AIB_MaxBindingTime is not defined for an End Device
    267                    osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, zgApsDefaultMaxBindingTime);
    268          #endif
    269                    sapi_bindInProgress = commandId;
   \   0001FA   85..82       MOV     DPL,?XSP + 0
   \   0001FD   85..83       MOV     DPH,?XSP + 1
   \   000200   E0           MOVX    A,@DPTR
   \   000201   F8           MOV     R0,A
   \   000202   A3           INC     DPTR
   \   000203   E0           MOVX    A,@DPTR
   \   000204   F9           MOV     R1,A
   \   000205   90....       MOV     DPTR,#sapi_bindInProgress
   \   000208   E8           MOV     A,R0
   \   000209   F0           MOVX    @DPTR,A
   \   00020A   A3           INC     DPTR
   \   00020B   E9           MOV     A,R1
   \   00020C   F0           MOVX    @DPTR,A
    270                    return; // dont send cback event
   \   00020D   8063         SJMP    ??zb_BindDevice_6
    271                  }
    272                }
    273              }
    274              SAPI_SendCback( SAPICB_BIND_CNF, ret, commandId );
   \                     ??zb_BindDevice_2:
   \   00020F                ; Setup parameters for call to function SAPI_SendCback
   \   00020F   85..82       MOV     DPL,?XSP + 0
   \   000212   85..83       MOV     DPH,?XSP + 1
   \   000215   E0           MOVX    A,@DPTR
   \   000216   FC           MOV     R4,A
   \   000217   A3           INC     DPTR
   \   000218   E0           MOVX    A,@DPTR
   \   000219   FD           MOV     R5,A
   \   00021A   AA..         MOV     R2,?V0
   \   00021C   79E1         MOV     R1,#-0x1f
   \   00021E   12....       LCALL   `??SAPI_SendCback::?relay`; Banked call to: SAPI_SendCback
   \   000221   804F         SJMP    ??zb_BindDevice_6
    275            }
    276            else
    277            {
    278              // Remove local bindings for the commandId
    279              BindingEntry_t *pBind;
    280          
    281              // Loop through bindings an remove any that match the cluster
    282              while ( pBind = bindFind( sapi_epDesc.simpleDesc->EndPoint, commandId, 0 ) )
   \                     ??zb_BindDevice_0:
   \   000223                ; Setup parameters for call to function bindFind
   \   000223   7C00         MOV     R4,#0x0
   \   000225   85..82       MOV     DPL,?XSP + 0
   \   000228   85..83       MOV     DPH,?XSP + 1
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   FA           MOV     R2,A
   \   00022D   A3           INC     DPTR
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   FB           MOV     R3,A
   \   000230   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000233   E0           MOVX    A,@DPTR
   \   000234   F8           MOV     R0,A
   \   000235   A3           INC     DPTR
   \   000236   E0           MOVX    A,@DPTR
   \   000237   F583         MOV     DPH,A
   \   000239   8882         MOV     DPL,R0
   \   00023B   E0           MOVX    A,@DPTR
   \   00023C   F9           MOV     R1,A
   \   00023D   12....       LCALL   `??bindFind::?relay` ; Banked call to: bindFind
   \   000240   8A..         MOV     ?V4,R2
   \   000242   8B..         MOV     ?V5,R3
   \   000244   A8..         MOV     R0,?V4
   \   000246   A9..         MOV     R1,?V5
   \   000248   E8           MOV     A,R0
   \   000249   FE           MOV     R6,A
   \   00024A   E9           MOV     A,R1
   \   00024B   FF           MOV     R7,A
   \   00024C   E8           MOV     A,R0
   \   00024D   49           ORL     A,R1
   \   00024E   600A         JZ      ??zb_BindDevice_7
    283              {
    284                bindRemoveEntry(pBind);
   \   000250                ; Setup parameters for call to function bindRemoveEntry
   \   000250   EE           MOV     A,R6
   \   000251   FA           MOV     R2,A
   \   000252   EF           MOV     A,R7
   \   000253   FB           MOV     R3,A
   \   000254   12....       LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   000257   E9           MOV     A,R1
   \   000258   80C9         SJMP    ??zb_BindDevice_0
    285              }
    286              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \                     ??zb_BindDevice_7:
   \   00025A                ; Setup parameters for call to function osal_start_timerEx
   \   00025A   90....       MOV     DPTR,#__Constant_fa
   \   00025D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000260   7A00         MOV     R2,#0x0
   \   000262   7B01         MOV     R3,#0x1
   \   000264   90....       MOV     DPTR,#ZDAppTaskID
   \   000267   E0           MOVX    A,@DPTR
   \   000268   F9           MOV     R1,A
   \   000269   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00026C   7404         MOV     A,#0x4
   \   00026E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000271   E9           MOV     A,R1
    287            }
    288            return;
   \                     ??zb_BindDevice_6:
   \   000272   740B         MOV     A,#0xb
   \   000274   12....       LCALL   ?DEALLOC_XSTACK8
   \   000277   7F08         MOV     R7,#0x8
   \   000279   02....       LJMP    ?BANKED_LEAVE_XDATA
    289          }
    290          /******************************************************************************
    291           * @fn          zb_PermitJoiningRequest
    292           *
    293           * @brief       The zb_PermitJoiningRequest function is used to control the
    294           *              joining permissions and thus allow or disallow new devices from
    295           *              joining the network.
    296           *
    297           * @param       destination - The destination parameter indicates the address
    298           *                            of the device for which the joining permissions
    299           *                            should be set. This is usually the local device
    300           *                            address or the special broadcast address that denotes
    301           *                            all routers and coordinator ( 0xFFFC ). This way
    302           *                            the joining permissions of a single device or the
    303           *                            whole network can be controlled.
    304           *              timeout -  Indicates the amount of time in seconds for which
    305           *                         the joining permissions should be turned on.
    306           *                         If timeout is set to 0x00, the device will turn off the
    307           *                         joining permissions indefinitely. If it is set to 0xFF,
    308           *                         the joining permissions will be turned on indefinitely.
    309           *
    310           *
    311           * @return      ZB_SUCCESS or a failure code
    312           *
    313           */
    314          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    315          uint8 zb_PermitJoiningRequest ( uint16 destination, uint8 timeout )
   \                     zb_PermitJoiningRequest:
    316          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
    317          #if defined( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    318            zAddrType_t dstAddr;
    319          
    320            dstAddr.addrMode = Addr16Bit;
    321            dstAddr.addr.shortAddr = destination;
    322          
    323            return( (uint8) ZDP_MgmtPermitJoinReq( &dstAddr, timeout, 0, 0 ) );
    324          #else
    325            (void)destination;
    326            (void)timeout;
    327            return ZUnsupportedMode;
   \   000002   7912         MOV     R1,#0x12
   \   000004   02....       LJMP    ?BRET
    328          #endif
    329          }
    330          /******************************************************************************
    331           * @fn          zb_AllowBind
    332           *
    333           * @brief       The zb_AllowBind function puts the device into the
    334           *              Allow Binding Mode for a given period of time.  A peer device
    335           *              can establish a binding to a device in the Allow Binding Mode
    336           *              by calling zb_BindDevice with a destination address of NULL
    337           *
    338           * @param       timeout - The number of seconds to remain in the allow binding
    339           *                        mode.  Valid values range from 1 through 65.
    340           *                        If 0, the Allow Bind mode will be set false without TO
    341           *                        If greater than 64, the Allow Bind mode will be true
    342           *
    343           * @return      ZB_SUCCESS if the device entered the allow bind mode, else
    344           *              an error code.
    345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    346          void zb_AllowBind ( uint8 timeout )
   \                     zb_AllowBind:
    347          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    348          
    349            osal_stop_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER);
   \   000007                ; Setup parameters for call to function osal_stop_timerEx
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7B40         MOV     R3,#0x40
   \   00000B   90....       MOV     DPTR,#sapi_TaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000013   E9           MOV     A,R1
    350          
    351            if ( timeout == 0 )
   \   000014   EE           MOV     A,R6
   \   000015   7015         JNZ     ??zb_AllowBind_0
    352            {
    353              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   000017                ; Setup parameters for call to function afSetMatch
   \   000017   7A00         MOV     R2,#0x0
   \   000019   90....       MOV     DPTR,#sapi_epDesc + 3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F583         MOV     DPH,A
   \   000022   8882         MOV     DPL,R0
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   000029   E9           MOV     A,R1
   \   00002A   805C         SJMP    ??zb_AllowBind_1
    354            }
    355            else
    356            {
    357              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, TRUE);
   \                     ??zb_AllowBind_0:
   \   00002C                ; Setup parameters for call to function afSetMatch
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F583         MOV     DPH,A
   \   000037   8882         MOV     DPL,R0
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   00003E   E9           MOV     A,R1
    358              if ( timeout != 0xFF )
   \   00003F   74FF         MOV     A,#-0x1
   \   000041   6E           XRL     A,R6
   \   000042   6044         JZ      ??zb_AllowBind_1
    359              {
    360                if ( timeout > 64 )
   \   000044   EE           MOV     A,R6
   \   000045   C3           CLR     C
   \   000046   9441         SUBB    A,#0x41
   \   000048   4002         JC      ??zb_AllowBind_2
    361                {
    362                  timeout = 64;
   \   00004A   7E40         MOV     R6,#0x40
    363                }
    364                osal_start_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER, timeout*1000);
   \                     ??zb_AllowBind_2:
   \   00004C                ; Setup parameters for call to function osal_start_timerEx
   \   00004C   EE           MOV     A,R6
   \   00004D   F8           MOV     R0,A
   \   00004E   7900         MOV     R1,#0x0
   \   000050   E8           MOV     A,R0
   \   000051   75F0E8       MOV     B,#-0x18
   \   000054   A4           MUL     AB
   \   000055   C8           XCH     A,R0
   \   000056   AAF0         MOV     R2,B
   \   000058   75F003       MOV     B,#0x3
   \   00005B   A4           MUL     AB
   \   00005C   2A           ADD     A,R2
   \   00005D   FA           MOV     R2,A
   \   00005E   75F0E8       MOV     B,#-0x18
   \   000061   E9           MOV     A,R1
   \   000062   A4           MUL     AB
   \   000063   2A           ADD     A,R2
   \   000064   F9           MOV     R1,A
   \   000065   88..         MOV     ?V0,R0
   \   000067   E9           MOV     A,R1
   \   000068   F5..         MOV     ?V1,A
   \   00006A   33           RLC     A
   \   00006B   95E0         SUBB    A,0xE0 /* A   */
   \   00006D   F5..         MOV     ?V2,A
   \   00006F   F5..         MOV     ?V3,A
   \   000071   78..         MOV     R0,#?V0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000076   7A00         MOV     R2,#0x0
   \   000078   7B40         MOV     R3,#0x40
   \   00007A   90....       MOV     DPTR,#sapi_TaskID
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000082   7404         MOV     A,#0x4
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   \   000087   E9           MOV     A,R1
    365              }
    366            }
    367            return;
   \                     ??zb_AllowBind_1:
   \   000088   7F04         MOV     R7,#0x4
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA
    368          }
    369          /******************************************************************************
    370           * @fn          zb_SendDataRequest
    371           *
    372           * @brief       The zb_SendDataRequest function initiates transmission of data
    373           *              to a peer device
    374           *
    375           * @param       destination - The destination of the data.  The destination can
    376           *                            be one of the following:
    377           *                            - 16-Bit short address of device [0-0xfffD]
    378           *                            - ZB_BROADCAST_ADDR sends the data to all devices
    379           *                              in the network.
    380           *                            - ZB_BINDING_ADDR sends the data to a previously
    381           *                              bound device.
    382           *
    383           *              commandId - The command ID to send with the message.  If the
    384           *                          ZB_BINDING_ADDR destination is used, this parameter
    385           *                          also indicates the binding to use.
    386           *
    387           *              len - The size of the pData buffer in bytes
    388           *              handle - A handle used to identify the send data request.
    389           *              txOptions - TRUE if requesting acknowledgement from the destination.
    390           *              radius - The max number of hops the packet can travel through
    391           *                       before it is dropped.
    392           *
    393           * @return      none
    394           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    395          void zb_SendDataRequest ( uint16 destination, uint16 commandId, uint8 len,
   \                     zb_SendDataRequest:
    396                                    uint8 *pData, uint8 handle, uint8 txOptions, uint8 radius )
    397          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V6,R4
   \   000010   8D..         MOV     ?V7,R5
   \   000012   89..         MOV     ?V3,R1
   \   000014   741E         MOV     A,#0x1e
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V4,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V5,A
   \   000020   7421         MOV     A,#0x21
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0,A
   \   000028   7422         MOV     A,#0x22
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V2,A
    398            afStatus_t status;
    399            afAddrType_t dstAddr;
    400          
    401            txOptions |= AF_DISCV_ROUTE;
    402          
    403            // Set the destination address
    404            if (destination == ZB_BINDING_ADDR)
   \   000030   74FE         MOV     A,#-0x2
   \   000032   6E           XRL     A,R6
   \   000033   7003         JNZ     ??zb_SendDataRequest_0
   \   000035   74FF         MOV     A,#-0x1
   \   000037   6F           XRL     A,R7
   \                     ??zb_SendDataRequest_0:
   \   000038   700A         JNZ     ??zb_SendDataRequest_1
    405            {
    406              // Binding
    407              dstAddr.addrMode = afAddrNotPresent;
   \   00003A   7408         MOV     A,#0x8
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   7400         MOV     A,#0x0
   \   000041   F0           MOVX    @DPTR,A
   \   000042   8024         SJMP    ??zb_SendDataRequest_2
    408            }
    409            else
    410            {
    411              // Use short address
    412              dstAddr.addr.shortAddr = destination;
   \                     ??zb_SendDataRequest_1:
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   EE           MOV     A,R6
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   EF           MOV     A,R7
   \   00004E   F0           MOVX    @DPTR,A
    413              dstAddr.addrMode = afAddr16Bit;
   \   00004F   7408         MOV     A,#0x8
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   7402         MOV     A,#0x2
   \   000056   F0           MOVX    @DPTR,A
    414          
    415              if ( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( destination ) )
   \   000057                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059   EF           MOV     A,R7
   \   00005A   FB           MOV     R3,A
   \   00005B   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00005E   E9           MOV     A,R1
   \   00005F   6007         JZ      ??zb_SendDataRequest_2
    416              {
    417                txOptions &= ~AF_ACK_REQUEST;
   \   000061   C3           CLR     C
   \   000062   E5..         MOV     A,?V0
   \   000064   92E4         MOV     0xE0 /* A   */.4,C
   \   000066   F5..         MOV     ?V0,A
    418              }
    419            }
    420          
    421            dstAddr.panId = 0;                                    // Not an inter-pan message.
   \                     ??zb_SendDataRequest_2:
   \   000068   740A         MOV     A,#0xa
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   7400         MOV     A,#0x0
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   7400         MOV     A,#0x0
   \   000073   F0           MOVX    @DPTR,A
    422            dstAddr.endPoint = sapi_epDesc.simpleDesc->EndPoint;  // Set the endpoint.
   \   000074   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F8           MOV     R0,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F583         MOV     DPH,A
   \   00007D   8882         MOV     DPL,R0
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C0E0         PUSH    A
   \   000082   7409         MOV     A,#0x9
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   D0E0         POP     A
   \   000089   F0           MOVX    @DPTR,A
    423          
    424            // Send the message
    425            status = AF_DataRequest(&dstAddr, &sapi_epDesc, commandId, len,
    426                                    pData, &handle, txOptions, radius);
   \   00008A                ; Setup parameters for call to function AF_DataRequest
   \   00008A   E5..         MOV     A,?V2
   \   00008C   F5..         MOV     ?V8,A
   \   00008E   78..         MOV     R0,#?V8
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   7421         MOV     A,#0x21
   \   000095   12....       LCALL   ?XSTACK_DISP100_8
   \   000098   88..         MOV     ?V8,R0
   \   00009A   89..         MOV     ?V9,R1
   \   00009C   78..         MOV     R0,#?V8
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   78..         MOV     R0,#?V4
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A6   85....       MOV     ?V8,?V3
   \   0000A9   75..00       MOV     ?V9,#0x0
   \   0000AC   78..         MOV     R0,#?V8
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   78..         MOV     R0,#?V6
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   A9..         MOV     R1,?V0
   \   0000B8   7C..         MOV     R4,#sapi_epDesc & 0xff
   \   0000BA   7D..         MOV     R5,#(sapi_epDesc >> 8) & 0xff
   \   0000BC   7409         MOV     A,#0x9
   \   0000BE   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C1   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000C4   7409         MOV     A,#0x9
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C9   E9           MOV     A,R1
   \   0000CA   F5..         MOV     ?V1,A
    427          
    428            if (status != afStatus_SUCCESS)
   \   0000CC   E5..         MOV     A,?V1
   \   0000CE   6010         JZ      ??zb_SendDataRequest_3
    429            {
    430              SAPI_SendCback( SAPICB_DATA_CNF, status, handle );
   \   0000D0                ; Setup parameters for call to function SAPI_SendCback
   \   0000D0   7420         MOV     A,#0x20
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   FC           MOV     R4,A
   \   0000D7   7D00         MOV     R5,#0x0
   \   0000D9   AA..         MOV     R2,?V1
   \   0000DB   79E0         MOV     R1,#-0x20
   \   0000DD   12....       LCALL   `??SAPI_SendCback::?relay`; Banked call to: SAPI_SendCback
    431            }
    432          }
   \                     ??zb_SendDataRequest_3:
   \   0000E0   740C         MOV     A,#0xc
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E5   7F0A         MOV     R7,#0xa
   \   0000E7   02....       LJMP    ?BANKED_LEAVE_XDATA
    433          
    434          /******************************************************************************
    435           * @fn          zb_ReadConfiguration
    436           *
    437           * @brief       The zb_ReadConfiguration function is used to get a
    438           *              Configuration Protperty from Nonvolatile memory.
    439           *
    440           * @param       configId - The identifier for the configuration property
    441           *              len - The size of the pValue buffer in bytes
    442           *              pValue - A buffer to hold the configuration property
    443           *
    444           * @return      none
    445           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    446          uint8 zb_ReadConfiguration( uint8 configId, uint8 len, void *pValue )
   \                     zb_ReadConfiguration:
    447          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    448            uint8 size;
    449          
    450            size = (uint8)osal_nv_item_len( configId );
   \   00000D                ; Setup parameters for call to function osal_nv_item_len
   \   00000D   AA..         MOV     R2,?V4
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000014   EA           MOV     A,R2
   \   000015   FE           MOV     R6,A
    451            if ( size > len )
   \   000016   EF           MOV     A,R7
   \   000017   C3           CLR     C
   \   000018   9E           SUBB    A,R6
   \   000019   5004         JNC     ??zb_ReadConfiguration_0
    452            {
    453              return ZFailure;
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   801F         SJMP    ??zb_ReadConfiguration_1
    454            }
    455            else
    456            {
    457              return( osal_nv_read(configId, 0, size, pValue) );
   \                     ??zb_ReadConfiguration_0:
   \   00001F                ; Setup parameters for call to function osal_nv_read
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   8E..         MOV     ?V2,R6
   \   000026   75..00       MOV     ?V3,#0x0
   \   000029   78..         MOV     R0,#?V2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   AA..         MOV     R2,?V4
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zb_ReadConfiguration_1:
   \   00003E   7F05         MOV     R7,#0x5
   \   000040   02....       LJMP    ?BANKED_LEAVE_XDATA
    458            }
    459          }
    460          /******************************************************************************
    461           * @fn          zb_WriteConfiguration
    462           *
    463           * @brief       The zb_WriteConfiguration function is used to write a
    464           *              Configuration Property to nonvolatile memory.
    465           *
    466           * @param       configId - The identifier for the configuration property
    467           *              len - The size of the pValue buffer in bytes
    468           *              pValue - A buffer containing the new value of the
    469           *                       configuration property
    470           *
    471           * @return      none
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          uint8 zb_WriteConfiguration( uint8 configId, uint8 len, void *pValue )
   \                     zb_WriteConfiguration:
    474          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    475            return( osal_nv_write(configId, 0, len, pValue) );
   \   00000D                ; Setup parameters for call to function osal_nv_write
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   8E..         MOV     ?V2,R6
   \   000014   75..00       MOV     ?V3,#0x0
   \   000017   78..         MOV     R0,#?V2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   EF           MOV     A,R7
   \   000021   FA           MOV     R2,A
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000027   7404         MOV     A,#0x4
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002C   7F04         MOV     R7,#0x4
   \   00002E   02....       LJMP    ?BANKED_LEAVE_XDATA
    476          }
    477          /******************************************************************************
    478           * @fn          zb_GetDeviceInfo
    479           *
    480           * @brief       The zb_GetDeviceInfo function retrieves a Device Information
    481           *              Property.
    482           *
    483           * @param       param - The identifier for the device information
    484           *              pValue - A buffer to hold the device information
    485           *
    486           * @return      none
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          void zb_GetDeviceInfo ( uint8 param, void *pValue )
   \                     zb_GetDeviceInfo:
    489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    490            switch(param)
   \   00000B   E5..         MOV     A,?V0
   \   00000D   6024         JZ      ??zb_GetDeviceInfo_0
   \   00000F   14           DEC     A
   \   000010   6042         JZ      ??zb_GetDeviceInfo_1
   \   000012   14           DEC     A
   \   000013   6060         JZ      ??zb_GetDeviceInfo_2
   \   000015   14           DEC     A
   \   000016   607E         JZ      ??zb_GetDeviceInfo_3
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??zb_GetDeviceInfo_4 & 0xFFFF
   \   00001E   14           DEC     A
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??zb_GetDeviceInfo_5 & 0xFFFF
   \   000024   14           DEC     A
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??zb_GetDeviceInfo_6 & 0xFFFF
   \   00002A   14           DEC     A
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??zb_GetDeviceInfo_7 & 0xFFFF
   \   000030   02....       LJMP    ??zb_GetDeviceInfo_8 & 0xFFFF
    491            {
    492              case ZB_INFO_DEV_STATE:
    493                osal_memcpy(pValue, &devState, sizeof(uint8));
   \                     ??zb_GetDeviceInfo_0:
   \   000033                ; Setup parameters for call to function osal_memcpy
   \   000033   75....       MOV     ?V4,#devState & 0xff
   \   000036   75....       MOV     ?V5,#(devState >> 8) & 0xff
   \   000039   75..00       MOV     ?V6,#0x0
   \   00003C   78..         MOV     R0,#?V4
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000041   7C01         MOV     R4,#0x1
   \   000043   7D00         MOV     R5,#0x0
   \   000045   EE           MOV     A,R6
   \   000046   FA           MOV     R2,A
   \   000047   EF           MOV     A,R7
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004C   7403         MOV     A,#0x3
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
    494                break;
   \   000051   02....       LJMP    ??zb_GetDeviceInfo_8 & 0xFFFF
    495              case ZB_INFO_IEEE_ADDR:
    496                osal_memcpy(pValue, &aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_1:
   \   000054                ; Setup parameters for call to function osal_memcpy
   \   000054   75....       MOV     ?V4,#aExtendedAddress & 0xff
   \   000057   75....       MOV     ?V5,#(aExtendedAddress >> 8) & 0xff
   \   00005A   75..00       MOV     ?V6,#0x0
   \   00005D   78..         MOV     R0,#?V4
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000062   7C08         MOV     R4,#0x8
   \   000064   7D00         MOV     R5,#0x0
   \   000066   EE           MOV     A,R6
   \   000067   FA           MOV     R2,A
   \   000068   EF           MOV     A,R7
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006D   7403         MOV     A,#0x3
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
    497                break;
   \   000072   02....       LJMP    ??zb_GetDeviceInfo_8 & 0xFFFF
    498              case ZB_INFO_SHORT_ADDR:
    499                osal_memcpy(pValue, &_NIB.nwkDevAddress, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_2:
   \   000075                ; Setup parameters for call to function osal_memcpy
   \   000075   75....       MOV     ?V4,#(_NIB + 20) & 0xff
   \   000078   75....       MOV     ?V5,#((_NIB + 20) >> 8) & 0xff
   \   00007B   75..00       MOV     ?V6,#0x0
   \   00007E   78..         MOV     R0,#?V4
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000083   7C02         MOV     R4,#0x2
   \   000085   7D00         MOV     R5,#0x0
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
    500                break;
   \   000093   02....       LJMP    ??zb_GetDeviceInfo_8 & 0xFFFF
    501              case ZB_INFO_PARENT_SHORT_ADDR:
    502                osal_memcpy(pValue, &_NIB.nwkCoordAddress, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_3:
   \   000096                ; Setup parameters for call to function osal_memcpy
   \   000096   75....       MOV     ?V4,#(_NIB + 23) & 0xff
   \   000099   75....       MOV     ?V5,#((_NIB + 23) >> 8) & 0xff
   \   00009C   75..00       MOV     ?V6,#0x0
   \   00009F   78..         MOV     R0,#?V4
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A4   7C02         MOV     R4,#0x2
   \   0000A6   7D00         MOV     R5,#0x0
   \   0000A8   EE           MOV     A,R6
   \   0000A9   FA           MOV     R2,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   FB           MOV     R3,A
   \   0000AC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AF   7403         MOV     A,#0x3
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
    503                break;
   \   0000B4   807E         SJMP    ??zb_GetDeviceInfo_8
    504              case ZB_INFO_PARENT_IEEE_ADDR:
    505                osal_memcpy(pValue, &_NIB.nwkCoordExtAddress, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_4:
   \   0000B6                ; Setup parameters for call to function osal_memcpy
   \   0000B6   75....       MOV     ?V4,#(_NIB + 25) & 0xff
   \   0000B9   75....       MOV     ?V5,#((_NIB + 25) >> 8) & 0xff
   \   0000BC   75..00       MOV     ?V6,#0x0
   \   0000BF   78..         MOV     R0,#?V4
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C4   7C08         MOV     R4,#0x8
   \   0000C6   7D00         MOV     R5,#0x0
   \   0000C8   EE           MOV     A,R6
   \   0000C9   FA           MOV     R2,A
   \   0000CA   EF           MOV     A,R7
   \   0000CB   FB           MOV     R3,A
   \   0000CC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CF   7403         MOV     A,#0x3
   \   0000D1   12....       LCALL   ?DEALLOC_XSTACK8
    506                break;
   \   0000D4   805E         SJMP    ??zb_GetDeviceInfo_8
    507              case ZB_INFO_CHANNEL:
    508                osal_memcpy(pValue, &_NIB.nwkLogicalChannel, sizeof(uint8));
   \                     ??zb_GetDeviceInfo_5:
   \   0000D6                ; Setup parameters for call to function osal_memcpy
   \   0000D6   75....       MOV     ?V4,#(_NIB + 22) & 0xff
   \   0000D9   75....       MOV     ?V5,#((_NIB + 22) >> 8) & 0xff
   \   0000DC   75..00       MOV     ?V6,#0x0
   \   0000DF   78..         MOV     R0,#?V4
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E4   7C01         MOV     R4,#0x1
   \   0000E6   7D00         MOV     R5,#0x0
   \   0000E8   EE           MOV     A,R6
   \   0000E9   FA           MOV     R2,A
   \   0000EA   EF           MOV     A,R7
   \   0000EB   FB           MOV     R3,A
   \   0000EC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EF   7403         MOV     A,#0x3
   \   0000F1   12....       LCALL   ?DEALLOC_XSTACK8
    509                break;
   \   0000F4   803E         SJMP    ??zb_GetDeviceInfo_8
    510              case ZB_INFO_PAN_ID:
    511                osal_memcpy(pValue, &_NIB.nwkPanId, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_6:
   \   0000F6                ; Setup parameters for call to function osal_memcpy
   \   0000F6   75....       MOV     ?V4,#(_NIB + 33) & 0xff
   \   0000F9   75....       MOV     ?V5,#((_NIB + 33) >> 8) & 0xff
   \   0000FC   75..00       MOV     ?V6,#0x0
   \   0000FF   78..         MOV     R0,#?V4
   \   000101   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000104   7C02         MOV     R4,#0x2
   \   000106   7D00         MOV     R5,#0x0
   \   000108   EE           MOV     A,R6
   \   000109   FA           MOV     R2,A
   \   00010A   EF           MOV     A,R7
   \   00010B   FB           MOV     R3,A
   \   00010C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010F   7403         MOV     A,#0x3
   \   000111   12....       LCALL   ?DEALLOC_XSTACK8
    512                break;
   \   000114   801E         SJMP    ??zb_GetDeviceInfo_8
    513              case ZB_INFO_EXT_PAN_ID:
    514                osal_memcpy(pValue, &_NIB.extendedPANID, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_7:
   \   000116                ; Setup parameters for call to function osal_memcpy
   \   000116   75....       MOV     ?V4,#(_NIB + 53) & 0xff
   \   000119   75....       MOV     ?V5,#((_NIB + 53) >> 8) & 0xff
   \   00011C   75..00       MOV     ?V6,#0x0
   \   00011F   78..         MOV     R0,#?V4
   \   000121   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000124   7C08         MOV     R4,#0x8
   \   000126   7D00         MOV     R5,#0x0
   \   000128   EE           MOV     A,R6
   \   000129   FA           MOV     R2,A
   \   00012A   EF           MOV     A,R7
   \   00012B   FB           MOV     R3,A
   \   00012C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012F   7403         MOV     A,#0x3
   \   000131   12....       LCALL   ?DEALLOC_XSTACK8
    515                break;
    516            }
    517          }
   \                     ??zb_GetDeviceInfo_8:
   \   000134   7F07         MOV     R7,#0x7
   \   000136   02....       LJMP    ?BANKED_LEAVE_XDATA
    518          
    519          /******************************************************************************
    520           * @fn          zb_FindDeviceRequest
    521           *
    522           * @brief       The zb_FindDeviceRequest function is used to determine the
    523           *              short address for a device in the network.  The device initiating
    524           *              a call to zb_FindDeviceRequest and the device being discovered
    525           *              must both be a member of the same network.  When the search is
    526           *              complete, the zv_FindDeviceConfirm callback function is called.
    527           *
    528           * @param       searchType - The type of search to perform. Can be one of following:
    529           *                           ZB_IEEE_SEARCH - Search for 16-bit addr given IEEE addr.
    530           *              searchKey - Value to search on.
    531           *
    532           * @return      none
    533           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          void zb_FindDeviceRequest( uint8 searchType, void *searchKey )
   \                     zb_FindDeviceRequest:
    535          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    536            if (searchType == ZB_IEEE_SEARCH)
   \   00000B   7401         MOV     A,#0x1
   \   00000D   65..         XRL     A,?V0
   \   00000F   700E         JNZ     ??zb_FindDeviceRequest_0
    537            {
    538              ZDP_NwkAddrReq((uint8*) searchKey, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000011                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000011   7D00         MOV     R5,#0x0
   \   000013   7C00         MOV     R4,#0x0
   \   000015   7900         MOV     R1,#0x0
   \   000017   EE           MOV     A,R6
   \   000018   FA           MOV     R2,A
   \   000019   EF           MOV     A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   00001E   E9           MOV     A,R1
    539            }
    540          }
   \                     ??zb_FindDeviceRequest_0:
   \   00001F   7F01         MOV     R7,#0x1
   \   000021   02....       LJMP    ?BANKED_LEAVE_XDATA
    541          /******************************************************************************
    542           * @fn          SAPI_StartConfirm
    543           *
    544           * @brief       The SAPI_StartConfirm callback is called by the ZigBee stack
    545           *              after a start request operation completes
    546           *
    547           * @param       status - The status of the start operation.  Status of
    548           *                       ZB_SUCCESS indicates the start operation completed
    549           *                       successfully.  Else the status is an error code.
    550           *
    551           * @return      none
    552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    553          void SAPI_StartConfirm( uint8 status )
   \                     SAPI_StartConfirm:
    554          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    555          #if defined ( MT_SAPI_CB_FUNC )
    556            /* First check if MT has subscribed for this callback. If so , pass it as
    557            a event to MonitorTest and return control to calling function after that */
    558            if ( SAPICB_CHECK( SPI_CB_SAPI_START_CNF ) )
    559            {
    560              zb_MTCallbackStartConfirm( status );
    561            }
    562            else
    563          #endif  //MT_SAPI_CB_FUNC
    564            {
    565          #if ( SAPI_CB_FUNC )
    566              zb_StartConfirm( status );
   \   000007                ; Setup parameters for call to function zb_StartConfirm
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??zb_StartConfirm::?relay`; Banked call to: zb_StartConfirm
    567          #endif
    568            }
    569          }
   \   00000C   7F01         MOV     R7,#0x1
   \   00000E   02....       LJMP    ?BANKED_LEAVE_XDATA
    570          
    571          /******************************************************************************
    572           * @fn          SAPI_SendDataConfirm
    573           *
    574           * @brief       The SAPI_SendDataConfirm callback function is called by the
    575           *              ZigBee after a send data operation completes
    576           *
    577           * @param       handle - The handle identifying the data transmission.
    578           *              status - The status of the operation.
    579           *
    580           * @return      none
    581           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    582          void SAPI_SendDataConfirm( uint8 handle, uint8 status )
   \                     SAPI_SendDataConfirm:
    583          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    584          #if defined ( MT_SAPI_CB_FUNC )
    585            /* First check if MT has subscribed for this callback. If so , pass it as
    586            a event to MonitorTest and return control to calling function after that */
    587            if ( SAPICB_CHECK( SPI_CB_SAPI_SEND_DATA_CNF ) )
    588            {
    589              zb_MTCallbackSendDataConfirm( handle, status );
    590            }
    591            else
    592          #endif  //MT_SAPI_CB_FUNC
    593            {
    594          #if ( SAPI_CB_FUNC )
    595              zb_SendDataConfirm( handle, status );
   \   000009                ; Setup parameters for call to function zb_SendDataConfirm
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??zb_SendDataConfirm::?relay`; Banked call to: zb_SendDataConfirm
    596          #endif
    597            }
    598          }
   \   000010   7F01         MOV     R7,#0x1
   \   000012   02....       LJMP    ?BANKED_LEAVE_XDATA
    599          
    600          /******************************************************************************
    601           * @fn          SAPI_BindConfirm
    602           *
    603           * @brief       The SAPI_BindConfirm callback is called by the ZigBee stack
    604           *              after a bind operation completes.
    605           *
    606           * @param       commandId - The command ID of the binding being confirmed.
    607           *              status - The status of the bind operation.
    608           *              allowBind - TRUE if the bind operation was initiated by a call
    609           *                          to zb_AllowBindRespones.  FALSE if the operation
    610           *                          was initiated by a call to ZB_BindDevice
    611           *
    612           * @return      none
    613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    614          void SAPI_BindConfirm( uint16 commandId, uint8 status )
   \                     SAPI_BindConfirm:
    615          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    616          #if defined ( MT_SAPI_CB_FUNC )
    617            /* First check if MT has subscribed for this callback. If so , pass it as
    618            a event to MonitorTest and return control to calling function after that */
    619            if ( SAPICB_CHECK( SPI_CB_SAPI_BIND_CNF ) )
    620            {
    621              zb_MTCallbackBindConfirm( commandId, status );
    622            }
    623            else
    624          #endif  //MT_SAPI_CB_FUNC
    625            {
    626          #if ( SAPI_CB_FUNC )
    627              zb_BindConfirm( commandId, status );
   \   00000B                ; Setup parameters for call to function zb_BindConfirm
   \   00000B   A9..         MOV     R1,?V0
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `??zb_BindConfirm::?relay`; Banked call to: zb_BindConfirm
    628          #endif
    629            }
    630          }
   \   000014   7F01         MOV     R7,#0x1
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
    631          
    632          /******************************************************************************
    633           * @fn          SAPI_AllowBindConfirm
    634           *
    635           * @brief       Indicates when another device attempted to bind to this device
    636           *
    637           * @param
    638           *
    639           * @return      none
    640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          void SAPI_AllowBindConfirm( uint16 source )
   \                     SAPI_AllowBindConfirm:
    642          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    643            #if defined ( MT_SAPI_CB_FUNC )
    644            /* First check if MT has subscribed for this callback. If so , pass it as
    645            a event to MonitorTest and return control to calling function after that */
    646            if ( SAPICB_CHECK( SPI_CB_SAPI_ALLOW_BIND_CNF ) )
    647            {
    648              zb_MTCallbackAllowBindConfirm( source );
    649            }
    650            else
    651          #endif  //MT_SAPI_CB_FUNC
    652            {
    653          #if ( SAPI_CB_FUNC )
    654              zb_AllowBindConfirm( source );
   \   000009                ; Setup parameters for call to function zb_AllowBindConfirm
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   `??zb_AllowBindConfirm::?relay`; Banked call to: zb_AllowBindConfirm
    655          #endif
    656            }
    657          }
   \   000010   7F01         MOV     R7,#0x1
   \   000012   02....       LJMP    ?BANKED_LEAVE_XDATA
    658          /******************************************************************************
    659           * @fn          SAPI_FindDeviceConfirm
    660           *
    661           * @brief       The SAPI_FindDeviceConfirm callback function is called by the
    662           *              ZigBee stack when a find device operation completes.
    663           *
    664           * @param       searchType - The type of search that was performed.
    665           *              searchKey - Value that the search was executed on.
    666           *              result - The result of the search.
    667           *
    668           * @return      none
    669           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    670          void SAPI_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     SAPI_FindDeviceConfirm:
    671          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    672          #if defined ( MT_SAPI_CB_FUNC )
    673            /* First check if MT has subscribed for this callback. If so , pass it as
    674            a event to MonitorTest and return control to calling function after that */
    675            if ( SAPICB_CHECK( SPI_CB_SAPI_FIND_DEV_CNF ) )
    676            {
    677              zb_MTCallbackFindDeviceConfirm( searchType, searchKey, result );
    678            }
    679            else
    680          #endif  //MT_SAPI_CB_FUNC
    681            {
    682          #if ( SAPI_CB_FUNC )
    683              zb_FindDeviceConfirm( searchType, searchKey, result );
   \   00000F                ; Setup parameters for call to function zb_FindDeviceConfirm
   \   00000F   EE           MOV     A,R6
   \   000010   FC           MOV     R4,A
   \   000011   EF           MOV     A,R7
   \   000012   FD           MOV     R5,A
   \   000013   AA..         MOV     R2,?V0
   \   000015   AB..         MOV     R3,?V1
   \   000017   A9..         MOV     R1,?V2
   \   000019   12....       LCALL   `??zb_FindDeviceConfirm::?relay`; Banked call to: zb_FindDeviceConfirm
    684          #endif
    685            }
    686          }
   \   00001C   7F03         MOV     R7,#0x3
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
    687          /******************************************************************************
    688           * @fn          SAPI_ReceiveDataIndication
    689           *
    690           * @brief       The SAPI_ReceiveDataIndication callback function is called
    691           *              asynchronously by the ZigBee stack to notify the application
    692           *              when data is received from a peer device.
    693           *
    694           * @param       source - The short address of the peer device that sent the data
    695           *              command - The commandId associated with the data
    696           *              len - The number of bytes in the pData parameter
    697           *              pData - The data sent by the peer device
    698           *
    699           * @return      none
    700           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    701          void SAPI_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     SAPI_ReceiveDataIndication:
    702          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V2,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V3,A
   \   000019   7410         MOV     A,#0x10
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V4,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V5,A
    703          #if defined ( MT_SAPI_CB_FUNC )
    704            /* First check if MT has subscribed for this callback. If so , pass it as
    705            a event to MonitorTest and return control to calling function after that */
    706            if ( SAPICB_CHECK( SPI_CB_SAPI_RCV_DATA_IND ) )
    707            {
    708              zb_MTCallbackReceiveDataIndication( source, command, len, pData  );
    709            }
    710            else
    711          #endif  //MT_SAPI_CB_FUNC
    712            {
    713          #if ( SAPI_CB_FUNC )
    714              zb_ReceiveDataIndication( source, command, len, pData  );
   \   000025                ; Setup parameters for call to function zb_ReceiveDataIndication
   \   000025   78..         MOV     R0,#?V4
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   78..         MOV     R0,#?V2
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   EE           MOV     A,R6
   \   000030   FC           MOV     R4,A
   \   000031   EF           MOV     A,R7
   \   000032   FD           MOV     R5,A
   \   000033   AA..         MOV     R2,?V0
   \   000035   AB..         MOV     R3,?V1
   \   000037   12....       LCALL   `??zb_ReceiveDataIndication::?relay`; Banked call to: zb_ReceiveDataIndication
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
    715          #endif
    716            }
    717          }
   \   00003F   7F06         MOV     R7,#0x6
   \   000041   02....       LJMP    ?BANKED_LEAVE_XDATA
    718          /*********************************************************************
    719           * @fn      SAPI_ProcessEvent
    720           *
    721           * @brief   Simple API Task event processor.  This function
    722           *          is called to process all events for the task.  Events
    723           *          include timers, messages and any other user defined events.
    724           *
    725           * @param   task_id  - The OSAL assigned task ID.
    726           * @param   events - events to process.  This is a bit map and can
    727           *                   contain more than one event.
    728           *
    729           * @return  none
    730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    731          UINT16 SAPI_ProcessEvent( byte task_id, UINT16 events )
   \                     SAPI_ProcessEvent:
    732          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
    733            osal_event_hdr_t *pMsg;
    734            afIncomingMSGPacket_t *pMSGpkt;
    735            afDataConfirm_t *pDataConfirm;
    736          
    737            if ( events & SYS_EVENT_MSG )
   \   000010   E5..         MOV     A,?V0
   \   000012   5400         ANL     A,#0x0
   \   000014   F8           MOV     R0,A
   \   000015   E5..         MOV     A,?V1
   \   000017   5480         ANL     A,#0x80
   \   000019   F9           MOV     R1,A
   \   00001A   E8           MOV     A,R0
   \   00001B   49           ORL     A,R1
   \   00001C   7003         JNZ     $+5
   \   00001E   02....       LJMP    ??SAPI_ProcessEvent_0 & 0xFFFF
    738            {
    739              pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
   \   000021                ; Setup parameters for call to function osal_msg_receive
   \   000021   A9..         MOV     R1,?V2
   \   000023   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000026   8A..         MOV     ?V8,R2
   \   000028   8B..         MOV     ?V9,R3
   \   00002A   AE..         MOV     R6,?V8
   \   00002C   AF..         MOV     R7,?V9
    740              while ( pMsg )
   \                     ??SAPI_ProcessEvent_1:
   \   00002E   EE           MOV     A,R6
   \   00002F   4F           ORL     A,R7
   \   000030   7003         JNZ     $+5
   \   000032   02....       LJMP    ??SAPI_ProcessEvent_2 & 0xFFFF
    741              {
    742                switch ( pMsg->event )
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   24E6         ADD     A,#-0x1a
   \   00003C   6059         JZ      ??SAPI_ProcessEvent_3
   \   00003E   245A         ADD     A,#0x5a
   \   000040   7003         JNZ     $+5
   \   000042   02....       LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
   \   000045   24EF         ADD     A,#-0x11
   \   000047   7003         JNZ     $+5
   \   000049   02....       LJMP    ??SAPI_ProcessEvent_5 & 0xFFFF
   \   00004C   14           DEC     A
   \   00004D   7003         JNZ     $+5
   \   00004F   02....       LJMP    ??SAPI_ProcessEvent_6 & 0xFFFF
   \   000052   14           DEC     A
   \   000053   601A         JZ      ??SAPI_ProcessEvent_7
   \   000055   24F3         ADD     A,#-0xd
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??SAPI_ProcessEvent_8 & 0xFFFF
   \   00005C   14           DEC     A
   \   00005D   7003         JNZ     $+5
   \   00005F   02....       LJMP    ??SAPI_ProcessEvent_9 & 0xFFFF
   \   000062   14           DEC     A
   \   000063   7003         JNZ     $+5
   \   000065   02....       LJMP    ??SAPI_ProcessEvent_10 & 0xFFFF
   \   000068   24E5         ADD     A,#-0x1b
   \   00006A   600D         JZ      ??SAPI_ProcessEvent_11
   \   00006C   02....       LJMP    ??SAPI_ProcessEvent_12 & 0xFFFF
    743                {
    744                  case ZDO_CB_MSG:
    745                    SAPI_ProcessZDOMsgs( (zdoIncomingMsg_t *)pMsg );
   \                     ??SAPI_ProcessEvent_7:
   \   00006F                ; Setup parameters for call to function SAPI_ProcessZDOMsgs
   \   00006F   EE           MOV     A,R6
   \   000070   FA           MOV     R2,A
   \   000071   EF           MOV     A,R7
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   `??SAPI_ProcessZDOMsgs::?relay`; Banked call to: SAPI_ProcessZDOMsgs
    746                    break;
   \   000076   02....       LJMP    ??SAPI_ProcessEvent_12 & 0xFFFF
    747          
    748                  case AF_DATA_CONFIRM_CMD:
    749                    // This message is received as a confirmation of a data packet sent.
    750                    // The status is of ZStatus_t type [defined in ZComDef.h]
    751                    // The message fields are defined in AF.h
    752                    pDataConfirm = (afDataConfirm_t *) pMsg;
   \                     ??SAPI_ProcessEvent_11:
   \   000079   8E..         MOV     ?V6,R6
   \   00007B   8F..         MOV     ?V7,R7
    753                    SAPI_SendDataConfirm( pDataConfirm->transID, pDataConfirm->hdr.status );
   \   00007D                ; Setup parameters for call to function SAPI_SendDataConfirm
   \   00007D   85..82       MOV     DPL,?V6
   \   000080   85..83       MOV     DPH,?V7
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FA           MOV     R2,A
   \   000086   85..82       MOV     DPL,?V6
   \   000089   85..83       MOV     DPH,?V7
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   12....       LCALL   `??SAPI_SendDataConfirm::?relay`; Banked call to: SAPI_SendDataConfirm
    754                    break;
   \   000094   02....       LJMP    ??SAPI_ProcessEvent_12 & 0xFFFF
    755          
    756                  case AF_INCOMING_MSG_CMD:
    757                    pMSGpkt = (afIncomingMSGPacket_t *) pMsg;
   \                     ??SAPI_ProcessEvent_3:
   \   000097   8E..         MOV     ?V4,R6
   \   000099   8F..         MOV     ?V5,R7
    758                    SAPI_ReceiveDataIndication( pMSGpkt->srcAddr.addr.shortAddr, pMSGpkt->clusterId,
    759                                                pMSGpkt->cmd.DataLength, pMSGpkt->cmd.Data);
   \   00009B                ; Setup parameters for call to function SAPI_ReceiveDataIndication
   \   00009B   E5..         MOV     A,?V4
   \   00009D   2422         ADD     A,#0x22
   \   00009F   F582         MOV     DPL,A
   \   0000A1   E4           CLR     A
   \   0000A2   35..         ADDC    A,?V5
   \   0000A4   F583         MOV     DPH,A
   \   0000A6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A9   E5..         MOV     A,?V4
   \   0000AB   2420         ADD     A,#0x20
   \   0000AD   F582         MOV     DPL,A
   \   0000AF   E4           CLR     A
   \   0000B0   35..         ADDC    A,?V5
   \   0000B2   F583         MOV     DPH,A
   \   0000B4   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000B7   85..82       MOV     DPL,?V4
   \   0000BA   85..83       MOV     DPH,?V5
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   FC           MOV     R4,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FD           MOV     R5,A
   \   0000C6   85..82       MOV     DPL,?V4
   \   0000C9   85..83       MOV     DPH,?V5
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   FB           MOV     R3,A
   \   0000D7   12....       LCALL   `??SAPI_ReceiveDataIndication::?relay`; Banked call to: SAPI_ReceiveDataIndication
   \   0000DA   7404         MOV     A,#0x4
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
    760                    break;
   \   0000DF   02....       LJMP    ??SAPI_ProcessEvent_12 & 0xFFFF
    761          
    762                  case ZDO_STATE_CHANGE:
    763                    // If the device has started up, notify the application
    764                    if (pMsg->status == DEV_END_DEVICE ||
    765                        pMsg->status == DEV_ROUTER ||
    766                        pMsg->status == DEV_ZB_COORD )
   \                     ??SAPI_ProcessEvent_5:
   \   0000E2   8E82         MOV     DPL,R6
   \   0000E4   8F83         MOV     DPH,R7
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   6406         XRL     A,#0x6
   \   0000EA   6014         JZ      ??SAPI_ProcessEvent_13
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   6407         XRL     A,#0x7
   \   0000F4   600A         JZ      ??SAPI_ProcessEvent_13
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   6409         XRL     A,#0x9
   \   0000FE   7007         JNZ     ??SAPI_ProcessEvent_14
    767                    {
    768                      SAPI_StartConfirm( ZB_SUCCESS );
   \                     ??SAPI_ProcessEvent_13:
   \   000100                ; Setup parameters for call to function SAPI_StartConfirm
   \   000100   7900         MOV     R1,#0x0
   \   000102   12....       LCALL   `??SAPI_StartConfirm::?relay`; Banked call to: SAPI_StartConfirm
   \   000105   8079         SJMP    ??SAPI_ProcessEvent_12
    769                    }
    770                    else  if (pMsg->status == DEV_HOLD ||
    771                            pMsg->status == DEV_INIT)
   \                     ??SAPI_ProcessEvent_14:
   \   000107   8E82         MOV     DPL,R6
   \   000109   8F83         MOV     DPH,R7
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   600A         JZ      ??SAPI_ProcessEvent_15
   \   00010F   8E82         MOV     DPL,R6
   \   000111   8F83         MOV     DPH,R7
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   6401         XRL     A,#0x1
   \   000117   7067         JNZ     ??SAPI_ProcessEvent_12
    772                    {
    773                      SAPI_StartConfirm( ZB_INIT );
   \                     ??SAPI_ProcessEvent_15:
   \   000119                ; Setup parameters for call to function SAPI_StartConfirm
   \   000119   7922         MOV     R1,#0x22
   \   00011B   12....       LCALL   `??SAPI_StartConfirm::?relay`; Banked call to: SAPI_StartConfirm
    774                    }
    775                    break;
   \   00011E   8060         SJMP    ??SAPI_ProcessEvent_12
    776          
    777                  case ZDO_MATCH_DESC_RSP_SENT:
    778                    SAPI_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)pMsg)->nwkAddr );
   \                     ??SAPI_ProcessEvent_6:
   \   000120                ; Setup parameters for call to function SAPI_AllowBindConfirm
   \   000120   8E82         MOV     DPL,R6
   \   000122   8F83         MOV     DPH,R7
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   FA           MOV     R2,A
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   FB           MOV     R3,A
   \   00012B   12....       LCALL   `??SAPI_AllowBindConfirm::?relay`; Banked call to: SAPI_AllowBindConfirm
    779                    break;
   \   00012E   8050         SJMP    ??SAPI_ProcessEvent_12
    780          
    781                  case KEY_CHANGE:
    782          #if ( SAPI_CB_FUNC )
    783                    zb_HandleKeys( ((keyChange_t *)pMsg)->state, ((keyChange_t *)pMsg)->keys );
   \                     ??SAPI_ProcessEvent_4:
   \   000130                ; Setup parameters for call to function zb_HandleKeys
   \   000130   8E82         MOV     DPL,R6
   \   000132   8F83         MOV     DPH,R7
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   FA           MOV     R2,A
   \   000139   8E82         MOV     DPL,R6
   \   00013B   8F83         MOV     DPH,R7
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F9           MOV     R1,A
   \   000141   12....       LCALL   `??zb_HandleKeys::?relay`; Banked call to: zb_HandleKeys
    784          #endif
    785                    break;
   \   000144   803A         SJMP    ??SAPI_ProcessEvent_12
    786          
    787                  case SAPICB_DATA_CNF:
    788                    SAPI_SendDataConfirm( (uint8)((sapi_CbackEvent_t *)pMsg)->data,
    789                                                 ((sapi_CbackEvent_t *)pMsg)->hdr.status );
   \                     ??SAPI_ProcessEvent_8:
   \   000146                ; Setup parameters for call to function SAPI_SendDataConfirm
   \   000146   8E82         MOV     DPL,R6
   \   000148   8F83         MOV     DPH,R7
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FA           MOV     R2,A
   \   00014D   8E82         MOV     DPL,R6
   \   00014F   8F83         MOV     DPH,R7
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F8           MOV     R0,A
   \   000155   A3           INC     DPTR
   \   000156   E0           MOVX    A,@DPTR
   \   000157   F9           MOV     R1,A
   \   000158   E8           MOV     A,R0
   \   000159   F9           MOV     R1,A
   \   00015A   12....       LCALL   `??SAPI_SendDataConfirm::?relay`; Banked call to: SAPI_SendDataConfirm
    790                    break;
   \   00015D   8021         SJMP    ??SAPI_ProcessEvent_12
    791          
    792                  case SAPICB_BIND_CNF:
    793                    SAPI_BindConfirm( ((sapi_CbackEvent_t *)pMsg)->data,
    794                                      ((sapi_CbackEvent_t *)pMsg)->hdr.status );
   \                     ??SAPI_ProcessEvent_9:
   \   00015F                ; Setup parameters for call to function SAPI_BindConfirm
   \   00015F   8E82         MOV     DPL,R6
   \   000161   8F83         MOV     DPH,R7
   \   000163   A3           INC     DPTR
   \   000164   E0           MOVX    A,@DPTR
   \   000165   F9           MOV     R1,A
   \   000166   8E82         MOV     DPL,R6
   \   000168   8F83         MOV     DPH,R7
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   FA           MOV     R2,A
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   FB           MOV     R3,A
   \   000171   12....       LCALL   `??SAPI_BindConfirm::?relay`; Banked call to: SAPI_BindConfirm
    795                    break;
   \   000174   800A         SJMP    ??SAPI_ProcessEvent_12
    796          
    797                  case SAPICB_START_CNF:
    798                    SAPI_StartConfirm( ((sapi_CbackEvent_t *)pMsg)->hdr.status );
   \                     ??SAPI_ProcessEvent_10:
   \   000176                ; Setup parameters for call to function SAPI_StartConfirm
   \   000176   8E82         MOV     DPL,R6
   \   000178   8F83         MOV     DPH,R7
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F9           MOV     R1,A
   \   00017D   12....       LCALL   `??SAPI_StartConfirm::?relay`; Banked call to: SAPI_StartConfirm
    799                    break;
    800          
    801                  default:
    802                    // User messages should be handled by user or passed to the application
    803                    if ( pMsg->event >= ZB_USER_MSG )
    804                    {
    805          
    806                    }
    807                    break;
    808                }
    809          
    810                // Release the memory
    811                osal_msg_deallocate( (uint8 *) pMsg );
   \                     ??SAPI_ProcessEvent_12:
   \   000180                ; Setup parameters for call to function osal_msg_deallocate
   \   000180   EE           MOV     A,R6
   \   000181   FA           MOV     R2,A
   \   000182   EF           MOV     A,R7
   \   000183   FB           MOV     R3,A
   \   000184   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   000187   E9           MOV     A,R1
    812          
    813                // Next
    814                pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
   \   000188                ; Setup parameters for call to function osal_msg_receive
   \   000188   A9..         MOV     R1,?V2
   \   00018A   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00018D   8A..         MOV     ?V8,R2
   \   00018F   8B..         MOV     ?V9,R3
   \   000191   AE..         MOV     R6,?V8
   \   000193   AF..         MOV     R7,?V9
   \   000195   02....       LJMP    ??SAPI_ProcessEvent_1 & 0xFFFF
    815              }
    816          
    817              // Return unprocessed events
    818              return (events ^ SYS_EVENT_MSG);
   \                     ??SAPI_ProcessEvent_2:
   \   000198   E5..         MOV     A,?V0
   \   00019A   6400         XRL     A,#0x0
   \   00019C   FA           MOV     R2,A
   \   00019D   E5..         MOV     A,?V1
   \   00019F   6480         XRL     A,#0x80
   \   0001A1   FB           MOV     R3,A
   \   0001A2   02....       LJMP    ??SAPI_ProcessEvent_16 & 0xFFFF
    819            }
    820          
    821            if ( events & ZB_ALLOW_BIND_TIMER )
   \                     ??SAPI_ProcessEvent_0:
   \   0001A5   E5..         MOV     A,?V0
   \   0001A7   5400         ANL     A,#0x0
   \   0001A9   F8           MOV     R0,A
   \   0001AA   E5..         MOV     A,?V1
   \   0001AC   5440         ANL     A,#0x40
   \   0001AE   F9           MOV     R1,A
   \   0001AF   E8           MOV     A,R0
   \   0001B0   49           ORL     A,R1
   \   0001B1   6020         JZ      ??SAPI_ProcessEvent_17
    822            {
    823              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   0001B3                ; Setup parameters for call to function afSetMatch
   \   0001B3   7A00         MOV     R2,#0x0
   \   0001B5   90....       MOV     DPTR,#sapi_epDesc + 3
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   F8           MOV     R0,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   F583         MOV     DPH,A
   \   0001BE   8882         MOV     DPL,R0
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F9           MOV     R1,A
   \   0001C2   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   0001C5   E9           MOV     A,R1
    824              return (events ^ ZB_ALLOW_BIND_TIMER);
   \   0001C6   E5..         MOV     A,?V0
   \   0001C8   6400         XRL     A,#0x0
   \   0001CA   FA           MOV     R2,A
   \   0001CB   E5..         MOV     A,?V1
   \   0001CD   6440         XRL     A,#0x40
   \   0001CF   FB           MOV     R3,A
   \   0001D0   02....       LJMP    ??SAPI_ProcessEvent_16 & 0xFFFF
    825            }
    826          
    827            if ( events & ZB_BIND_TIMER )
   \                     ??SAPI_ProcessEvent_17:
   \   0001D3   E5..         MOV     A,?V0
   \   0001D5   5400         ANL     A,#0x0
   \   0001D7   F8           MOV     R0,A
   \   0001D8   E5..         MOV     A,?V1
   \   0001DA   5420         ANL     A,#0x20
   \   0001DC   F9           MOV     R1,A
   \   0001DD   E8           MOV     A,R0
   \   0001DE   49           ORL     A,R1
   \   0001DF   6023         JZ      ??SAPI_ProcessEvent_18
    828            {
    829              // Send bind confirm callback to application
    830              SAPI_BindConfirm( sapi_bindInProgress, ZB_TIMEOUT );
   \   0001E1                ; Setup parameters for call to function SAPI_BindConfirm
   \   0001E1   7921         MOV     R1,#0x21
   \   0001E3   90....       MOV     DPTR,#sapi_bindInProgress
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   FA           MOV     R2,A
   \   0001E8   A3           INC     DPTR
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   FB           MOV     R3,A
   \   0001EB   12....       LCALL   `??SAPI_BindConfirm::?relay`; Banked call to: SAPI_BindConfirm
    831              sapi_bindInProgress = 0xffff;
   \   0001EE   90....       MOV     DPTR,#sapi_bindInProgress
   \   0001F1   74FF         MOV     A,#-0x1
   \   0001F3   F0           MOVX    @DPTR,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   74FF         MOV     A,#-0x1
   \   0001F7   F0           MOVX    @DPTR,A
    832          
    833              return (events ^ ZB_BIND_TIMER);
   \   0001F8   E5..         MOV     A,?V0
   \   0001FA   6400         XRL     A,#0x0
   \   0001FC   FA           MOV     R2,A
   \   0001FD   E5..         MOV     A,?V1
   \   0001FF   6420         XRL     A,#0x20
   \   000201   FB           MOV     R3,A
   \   000202   8063         SJMP    ??SAPI_ProcessEvent_16
    834            }
    835          
    836            if ( events & ZB_ENTRY_EVENT )
   \                     ??SAPI_ProcessEvent_18:
   \   000204   E5..         MOV     A,?V0
   \   000206   5400         ANL     A,#0x0
   \   000208   F8           MOV     R0,A
   \   000209   E5..         MOV     A,?V1
   \   00020B   5410         ANL     A,#0x10
   \   00020D   F9           MOV     R1,A
   \   00020E   E8           MOV     A,R0
   \   00020F   49           ORL     A,R1
   \   000210   6044         JZ      ??SAPI_ProcessEvent_19
    837            {
    838              uint8 startOptions;
    839          
    840              // Give indication to application of device startup
    841          #if ( SAPI_CB_FUNC )
    842              zb_HandleOsalEvent( ZB_ENTRY_EVENT );
   \   000212                ; Setup parameters for call to function zb_HandleOsalEvent
   \   000212   7A00         MOV     R2,#0x0
   \   000214   7B10         MOV     R3,#0x10
   \   000216   12....       LCALL   `??zb_HandleOsalEvent::?relay`; Banked call to: zb_HandleOsalEvent
    843          #endif
    844          
    845              // LED off cancels HOLD_AUTO_START blink set in the stack
    846              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000219                ; Setup parameters for call to function HalLedSet
   \   000219   7A00         MOV     R2,#0x0
   \   00021B   7908         MOV     R1,#0x8
   \   00021D   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000220   E9           MOV     A,R1
    847          
    848              zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   000221                ; Setup parameters for call to function zb_ReadConfiguration
   \   000221   AC..         MOV     R4,?XSP + 0
   \   000223   AD..         MOV     R5,?XSP + 1
   \   000225   7A01         MOV     R2,#0x1
   \   000227   7903         MOV     R1,#0x3
   \   000229   12....       LCALL   `??zb_ReadConfiguration::?relay`; Banked call to: zb_ReadConfiguration
   \   00022C   E9           MOV     A,R1
    849              if ( startOptions & ZCD_STARTOPT_AUTO_START )
   \   00022D   85..82       MOV     DPL,?XSP + 0
   \   000230   85..83       MOV     DPH,?XSP + 1
   \   000233   E0           MOVX    A,@DPTR
   \   000234   A2E2         MOV     C,0xE0 /* A   */.2
   \   000236   5005         JNC     ??SAPI_ProcessEvent_20
    850              {
    851                zb_StartRequest();
   \   000238                ; Setup parameters for call to function zb_StartRequest
   \   000238   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
   \   00023B   800D         SJMP    ??SAPI_ProcessEvent_21
    852              }
    853              else
    854              {
    855                // blink leds and wait for external input to config and restart
    856                HalLedBlink(HAL_LED_2, 0, 50, 500);
   \                     ??SAPI_ProcessEvent_20:
   \   00023D                ; Setup parameters for call to function HalLedBlink
   \   00023D   7CF4         MOV     R4,#-0xc
   \   00023F   7D01         MOV     R5,#0x1
   \   000241   7B32         MOV     R3,#0x32
   \   000243   7A00         MOV     R2,#0x0
   \   000245   7902         MOV     R1,#0x2
   \   000247   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    857              }
    858          
    859              return (events ^ ZB_ENTRY_EVENT );
   \                     ??SAPI_ProcessEvent_21:
   \   00024A   E5..         MOV     A,?V0
   \   00024C   6400         XRL     A,#0x0
   \   00024E   FA           MOV     R2,A
   \   00024F   E5..         MOV     A,?V1
   \   000251   6410         XRL     A,#0x10
   \   000253   FB           MOV     R3,A
   \   000254   8011         SJMP    ??SAPI_ProcessEvent_16
    860            }
    861          
    862            // This must be the last event to be processed
    863            if ( events & ( ZB_USER_EVENTS ) )
   \                     ??SAPI_ProcessEvent_19:
   \   000256   E5..         MOV     A,?V0
   \   000258   54FF         ANL     A,#0xff
   \   00025A   6007         JZ      ??SAPI_ProcessEvent_22
    864            {
    865              // User events are passed to the application
    866          #if ( SAPI_CB_FUNC )
    867              zb_HandleOsalEvent( events );
   \   00025C                ; Setup parameters for call to function zb_HandleOsalEvent
   \   00025C   AA..         MOV     R2,?V0
   \   00025E   AB..         MOV     R3,?V1
   \   000260   12....       LCALL   `??zb_HandleOsalEvent::?relay`; Banked call to: zb_HandleOsalEvent
    868          #endif
    869          
    870              // Do not return here, return 0 later
    871            }
    872          
    873            // Discard unknown events
    874            return 0;
   \                     ??SAPI_ProcessEvent_22:
   \   000263   7A00         MOV     R2,#0x0
   \   000265   7B00         MOV     R3,#0x0
   \                     ??SAPI_ProcessEvent_16:
   \   000267   7401         MOV     A,#0x1
   \   000269   12....       LCALL   ?DEALLOC_XSTACK8
   \   00026C   7F0A         MOV     R7,#0xa
   \   00026E   02....       LJMP    ?BANKED_LEAVE_XDATA
    875          }
    876          
    877          /*********************************************************************
    878           * @fn      SAPI_ProcessZDOMsgs()
    879           *
    880           * @brief   Process response messages
    881           *
    882           * @param   none
    883           *
    884           * @return  none
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     SAPI_ProcessZDOMsgs:
    887          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    888            switch ( inMsg->clusterID )
   \   00000E   E5..         MOV     A,?V0
   \   000010   240C         ADD     A,#0xc
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V2,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V2
   \   000022   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for SAPI_ProcessZDOMsgs>_0`:
   \   000025   0000         DW        0
   \   000027   0200         DW        2
   \   000029   0080         DW        32768
   \   00002B   ....         DW        ??SAPI_ProcessZDOMsgs_0
   \   00002D   0680         DW        32774
   \   00002F   ....         DW        ??SAPI_ProcessZDOMsgs_1
   \   000031   ....         DW        ??SAPI_ProcessZDOMsgs_2
    889            {
    890              case NWK_addr_rsp:
    891                {
    892                  // Send find device callback to application
    893                  ZDO_NwkIEEEAddrResp_t *pNwkAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??SAPI_ProcessZDOMsgs_0:
   \   000033                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000033   AA..         MOV     R2,?V0
   \   000035   AB..         MOV     R3,?V1
   \   000037   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00003A   8A..         MOV     ?V2,R2
   \   00003C   8B..         MOV     ?V3,R3
   \   00003E   AE..         MOV     R6,?V2
   \   000040   AF..         MOV     R7,?V3
    894                  SAPI_FindDeviceConfirm( ZB_IEEE_SEARCH, (uint8*)&pNwkAddrRsp->nwkAddr, pNwkAddrRsp->extAddr );
   \   000042                ; Setup parameters for call to function SAPI_FindDeviceConfirm
   \   000042   EE           MOV     A,R6
   \   000043   2403         ADD     A,#0x3
   \   000045   FC           MOV     R4,A
   \   000046   E4           CLR     A
   \   000047   3F           ADDC    A,R7
   \   000048   FD           MOV     R5,A
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   AA82         MOV     R2,DPL
   \   000050   AB83         MOV     R3,DPH
   \   000052   7901         MOV     R1,#0x1
   \   000054   12....       LCALL   `??SAPI_FindDeviceConfirm::?relay`; Banked call to: SAPI_FindDeviceConfirm
    895                }
    896                break;
   \   000057   02....       LJMP    ??SAPI_ProcessZDOMsgs_2 & 0xFFFF
    897          
    898              case Match_Desc_rsp:
    899                {
    900                  zAddrType_t dstAddr;
    901                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??SAPI_ProcessZDOMsgs_1:
   \   00005A                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00005A   AA..         MOV     R2,?V0
   \   00005C   AB..         MOV     R3,?V1
   \   00005E   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000061   8A..         MOV     ?V2,R2
   \   000063   8B..         MOV     ?V3,R3
   \   000065   AE..         MOV     R6,?V2
   \   000067   AF..         MOV     R7,?V3
    902          
    903                  if ( sapi_bindInProgress != 0xffff )
   \   000069   90....       MOV     DPTR,#sapi_bindInProgress
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   64FF         XRL     A,#0xff
   \   00006F   7004         JNZ     ??SAPI_ProcessZDOMsgs_3
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   64FF         XRL     A,#0xff
   \                     ??SAPI_ProcessZDOMsgs_3:
   \   000075   7003         JNZ     $+5
   \   000077   02....       LJMP    ??SAPI_ProcessZDOMsgs_2 & 0xFFFF
    904                  {
    905                    // Create a binding table entry
    906                    dstAddr.addrMode = Addr16Bit;
   \   00007A   7408         MOV     A,#0x8
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   7402         MOV     A,#0x2
   \   000081   F0           MOVX    @DPTR,A
    907                    dstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F8           MOV     R0,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   85..82       MOV     DPL,?XSP + 0
   \   00008F   85..83       MOV     DPH,?XSP + 1
   \   000092   E8           MOV     A,R0
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   E9           MOV     A,R1
   \   000096   F0           MOVX    @DPTR,A
    908          
    909                    if ( APSME_BindRequest( sapi_epDesc.simpleDesc->EndPoint,
    910                                            sapi_bindInProgress, &dstAddr,
    911                                            pRsp->epList[0] ) == ZSuccess )
   \   000097                ; Setup parameters for call to function APSME_BindRequest
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F5..         MOV     ?V2,A
   \   0000A2   78..         MOV     R0,#?V2
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   12....       LCALL   ?XSTACK_DISP102_8
   \   0000AC   90....       MOV     DPTR,#sapi_bindInProgress
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   FA           MOV     R2,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   FB           MOV     R3,A
   \   0000B4   90....       MOV     DPTR,#sapi_epDesc + 3
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F8           MOV     R0,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F583         MOV     DPH,A
   \   0000BD   8882         MOV     DPL,R0
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F9           MOV     R1,A
   \   0000C1   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C9   E9           MOV     A,R1
   \   0000CA   7050         JNZ     ??SAPI_ProcessZDOMsgs_2
    912                    {
    913                      osal_stop_timerEx(sapi_TaskID,  ZB_BIND_TIMER);
   \   0000CC                ; Setup parameters for call to function osal_stop_timerEx
   \   0000CC   7A00         MOV     R2,#0x0
   \   0000CE   7B20         MOV     R3,#0x20
   \   0000D0   90....       MOV     DPTR,#sapi_TaskID
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F9           MOV     R1,A
   \   0000D5   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000D8   E9           MOV     A,R1
    914                      osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   0000D9                ; Setup parameters for call to function osal_start_timerEx
   \   0000D9   90....       MOV     DPTR,#__Constant_fa
   \   0000DC   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000DF   7A00         MOV     R2,#0x0
   \   0000E1   7B01         MOV     R3,#0x1
   \   0000E3   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000EB   7404         MOV     A,#0x4
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F0   E9           MOV     A,R1
    915          
    916                      // Find IEEE addr
    917                      ZDP_IEEEAddrReq( pRsp->nwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0000F1                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000F1   7D00         MOV     R5,#0x0
   \   0000F3   7C00         MOV     R4,#0x0
   \   0000F5   7900         MOV     R1,#0x0
   \   0000F7   8E82         MOV     DPL,R6
   \   0000F9   8F83         MOV     DPH,R7
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   FA           MOV     R2,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   FB           MOV     R3,A
   \   000101   12....       LCALL   `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   000104   E9           MOV     A,R1
    918          #if defined ( MT_SAPI_CB_FUNC )
    919                      zb_MTCallbackBindConfirm( sapi_bindInProgress, ZB_SUCCESS );
    920          #endif
    921                      // Send bind confirm callback to application
    922          #if ( SAPI_CB_FUNC )
    923                      zb_BindConfirm( sapi_bindInProgress, ZB_SUCCESS );
   \   000105                ; Setup parameters for call to function zb_BindConfirm
   \   000105   7900         MOV     R1,#0x0
   \   000107   90....       MOV     DPTR,#sapi_bindInProgress
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   FA           MOV     R2,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FB           MOV     R3,A
   \   00010F   12....       LCALL   `??zb_BindConfirm::?relay`; Banked call to: zb_BindConfirm
    924          #endif
    925                      sapi_bindInProgress = 0xffff;
   \   000112   90....       MOV     DPTR,#sapi_bindInProgress
   \   000115   74FF         MOV     A,#-0x1
   \   000117   F0           MOVX    @DPTR,A
   \   000118   A3           INC     DPTR
   \   000119   74FF         MOV     A,#-0x1
   \   00011B   F0           MOVX    @DPTR,A
    926                    }
    927                  }
    928                }
    929                break;
    930            }
    931          }
   \                     ??SAPI_ProcessZDOMsgs_2:
   \   00011C   7409         MOV     A,#0x9
   \   00011E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000121   7F04         MOV     R7,#0x4
   \   000123   02....       LJMP    ?BANKED_LEAVE_XDATA
    932          
    933          /*********************************************************************
    934           * @fn      SAPI_Init
    935           *
    936           * @brief   Initialization function for the Simple API Task.
    937           *          This is called during initialization and should contain
    938           *          any application specific initialization (ie. hardware
    939           *          initialization/setup, table initialization, power up
    940           *          notification ... ).
    941           *
    942           * @param   task_id - the ID assigned by OSAL.  This ID should be
    943           *                    used to send messages and set timers.
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void SAPI_Init( byte task_id )
   \                     SAPI_Init:
    948          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    949            sapi_TaskID = task_id;
   \   00000C   EE           MOV     A,R6
   \   00000D   90....       MOV     DPTR,#sapi_TaskID
   \   000010   F0           MOVX    @DPTR,A
    950            sapi_bindInProgress = 0xffff;
   \   000011   90....       MOV     DPTR,#sapi_bindInProgress
   \   000014   74FF         MOV     A,#-0x1
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   74FF         MOV     A,#-0x1
   \   00001A   F0           MOVX    @DPTR,A
    951          
    952            sapi_epDesc.task_id = &sapi_TaskID;
   \   00001B   90....       MOV     DPTR,#sapi_epDesc + 1
   \   00001E   74..         MOV     A,#sapi_TaskID & 0xff
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   74..         MOV     A,#(sapi_TaskID >> 8) & 0xff
   \   000024   F0           MOVX    @DPTR,A
    953            sapi_epDesc.endPoint = 0;
   \   000025   90....       MOV     DPTR,#sapi_epDesc
   \   000028   7400         MOV     A,#0x0
   \   00002A   F0           MOVX    @DPTR,A
    954          
    955          #if ( SAPI_CB_FUNC )
    956            sapi_epDesc.endPoint = zb_SimpleDesc.EndPoint;
   \   00002B   90....       MOV     DPTR,#zb_SimpleDesc
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   90....       MOV     DPTR,#sapi_epDesc
   \   000032   F0           MOVX    @DPTR,A
    957            sapi_epDesc.task_id = &sapi_TaskID;
   \   000033   90....       MOV     DPTR,#sapi_epDesc + 1
   \   000036   74..         MOV     A,#sapi_TaskID & 0xff
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   74..         MOV     A,#(sapi_TaskID >> 8) & 0xff
   \   00003C   F0           MOVX    @DPTR,A
    958            sapi_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&zb_SimpleDesc;
   \   00003D   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000040   74..         MOV     A,#zb_SimpleDesc & 0xff
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   74..         MOV     A,#(zb_SimpleDesc >> 8) & 0xff
   \   000046   F0           MOVX    @DPTR,A
    959            sapi_epDesc.latencyReq = noLatencyReqs;
   \   000047   90....       MOV     DPTR,#sapi_epDesc + 5
   \   00004A   7400         MOV     A,#0x0
   \   00004C   F0           MOVX    @DPTR,A
    960          
    961            // Register the endpoint/interface description with the AF
    962            afRegister( &sapi_epDesc );
   \   00004D                ; Setup parameters for call to function afRegister
   \   00004D   7A..         MOV     R2,#sapi_epDesc & 0xff
   \   00004F   7B..         MOV     R3,#(sapi_epDesc >> 8) & 0xff
   \   000051   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
   \   000054   E9           MOV     A,R1
    963          #endif
    964          
    965            // Turn off match descriptor response by default
    966            afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   000055                ; Setup parameters for call to function afSetMatch
   \   000055   7A00         MOV     R2,#0x0
   \   000057   90....       MOV     DPTR,#sapi_epDesc + 3
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F583         MOV     DPH,A
   \   000060   8882         MOV     DPL,R0
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   000067   E9           MOV     A,R1
    967          
    968            // Register callback evetns from the ZDApp
    969            ZDO_RegisterForZDOMsg( sapi_TaskID, NWK_addr_rsp );
   \   000068                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000068   7A00         MOV     R2,#0x0
   \   00006A   7B80         MOV     R3,#-0x80
   \   00006C   90....       MOV     DPTR,#sapi_TaskID
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000074   E9           MOV     A,R1
    970            ZDO_RegisterForZDOMsg( sapi_TaskID, Match_Desc_rsp );
   \   000075                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000075   7A06         MOV     R2,#0x6
   \   000077   7B80         MOV     R3,#-0x80
   \   000079   90....       MOV     DPTR,#sapi_TaskID
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000081   E9           MOV     A,R1
    971          
    972          #if ( SAPI_CB_FUNC )
    973          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    974            // Register for HAL events
    975            RegisterForKeys( sapi_TaskID );
   \   000082                ; Setup parameters for call to function RegisterForKeys
   \   000082   90....       MOV     DPTR,#sapi_TaskID
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
   \   00008A   E9           MOV     A,R1
    976          
    977            if ( HalKeyRead () == HAL_KEY_SW_2)
   \   00008B                ; Setup parameters for call to function HalKeyRead
   \   00008B   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   00008E   E9           MOV     A,R1
   \   00008F   6402         XRL     A,#0x2
   \   000091   7018         JNZ     ??SAPI_Init_0
    978            {
    979              // If SW5 is pressed and held while powerup, force auto-start and nv-restore off and reset
    980              uint8 startOptions = ZCD_STARTOPT_CLEAR_STATE | ZCD_STARTOPT_CLEAR_CONFIG;
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   7403         MOV     A,#0x3
   \   00009B   F0           MOVX    @DPTR,A
    981              zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   00009C                ; Setup parameters for call to function zb_WriteConfiguration
   \   00009C   AC..         MOV     R4,?XSP + 0
   \   00009E   AD..         MOV     R5,?XSP + 1
   \   0000A0   7A01         MOV     R2,#0x1
   \   0000A2   7903         MOV     R1,#0x3
   \   0000A4   12....       LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
   \   0000A7   E9           MOV     A,R1
    982              zb_SystemReset();
   \   0000A8                ; Setup parameters for call to function zb_SystemReset
   \   0000A8   12....       LCALL   `??zb_SystemReset::?relay`; Banked call to: zb_SystemReset
    983            }
    984          #endif // HAL_KEY
    985          
    986            // Set an event to start the application
    987            osal_set_event(task_id, ZB_ENTRY_EVENT);
   \                     ??SAPI_Init_0:
   \   0000AB                ; Setup parameters for call to function osal_set_event
   \   0000AB   7A00         MOV     R2,#0x0
   \   0000AD   7B10         MOV     R3,#0x10
   \   0000AF   EE           MOV     A,R6
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000B4   E9           MOV     A,R1
    988          #endif
    989          }
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   7F01         MOV     R7,#0x1
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA
    990          
    991          /*********************************************************************
    992           * @fn      SAPI_SendCback
    993           *
    994           * @brief   Sends a message to the sapi task ( itself ) so that a
    995           *           callback can be generated later.
    996           *
    997           * @return  none
    998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    999          void SAPI_SendCback( uint8 event, uint8 status, uint16 data )
   \                     SAPI_SendCback:
   1000          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V3,R2
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   1001            sapi_CbackEvent_t *pMsg;
   1002          
   1003            pMsg = (sapi_CbackEvent_t *)osal_msg_allocate( sizeof(sapi_CbackEvent_t) );
   \   00000D                ; Setup parameters for call to function osal_msg_allocate
   \   00000D   7A04         MOV     R2,#0x4
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000014   8A..         MOV     ?V4,R2
   \   000016   8B..         MOV     ?V5,R3
   \   000018   AE..         MOV     R6,?V4
   \   00001A   AF..         MOV     R7,?V5
   1004            if( pMsg )
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   6031         JZ      ??SAPI_SendCback_0
   1005            {
   1006              pMsg->hdr.event = event;
   \   000020   E5..         MOV     A,?V2
   \   000022   C0E0         PUSH    A
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   D0E0         POP     A
   \   00002A   F0           MOVX    @DPTR,A
   1007              pMsg->hdr.status = status;
   \   00002B   E5..         MOV     A,?V3
   \   00002D   C0E0         PUSH    A
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   A3           INC     DPTR
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
   1008              pMsg->data = data;
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E5..         MOV     A,?V0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E5..         MOV     A,?V1
   \   000043   F0           MOVX    @DPTR,A
   1009          
   1010              osal_msg_send( sapi_TaskID, (uint8 *)pMsg );
   \   000044                ; Setup parameters for call to function osal_msg_send
   \   000044   EE           MOV     A,R6
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   FB           MOV     R3,A
   \   000048   90....       MOV     DPTR,#sapi_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000050   E9           MOV     A,R1
   1011            }
   1012          
   1013          }
   \                     ??SAPI_SendCback_0:
   \   000051   7F06         MOV     R7,#0x6
   \   000053   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fa:
   \   000000   FA000000     DD 250

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SystemReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SystemReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_PermitJoiningRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_PermitJoiningRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReadConfiguration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReadConfiguration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_WriteConfiguration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_WriteConfiguration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_GetDeviceInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_GetDeviceInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_SendCback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_SendCback
   1014          
   1015          /*********************************************************************
   1016          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     28   SAPI_AllowBindConfirm
        0      9   -> zb_AllowBindConfirm
      0     28   SAPI_BindConfirm
        0      9   -> zb_BindConfirm
      0     32   SAPI_FindDeviceConfirm
        0     11   -> zb_FindDeviceConfirm
      0     10   SAPI_Init
        0     10   -> HalKeyRead
        0     10   -> RegisterForKeys
        0     10   -> ZDO_RegisterForZDOMsg
        0     10   -> afRegister
        0     10   -> afSetMatch
        0     10   -> osal_set_event
        0     10   -> zb_SystemReset
        0     10   -> zb_WriteConfiguration
      0     23   SAPI_ProcessEvent
        0     19   -> HalLedBlink
        0     19   -> HalLedSet
        0     19   -> SAPI_AllowBindConfirm
        0     19   -> SAPI_BindConfirm
        0     19   -> SAPI_ProcessZDOMsgs
        0     23   -> SAPI_ReceiveDataIndication
        0     19   -> SAPI_SendDataConfirm
        0     19   -> SAPI_StartConfirm
        0     19   -> afSetMatch
        0     19   -> osal_msg_deallocate
        0     19   -> osal_msg_receive
        0     19   -> zb_HandleKeys
        0     19   -> zb_HandleOsalEvent
        0     19   -> zb_ReadConfiguration
        0     19   -> zb_StartRequest
      0     44   SAPI_ProcessZDOMsgs
        0     22   -> APSME_BindRequest
        0     21   -> SAPI_FindDeviceConfirm
        0     21   -> ZDO_ParseAddrRsp
        0     21   -> ZDO_ParseEPListRsp
        0     21   -> ZDP_IEEEAddrReq
        0     25   -> osal_start_timerEx
        0     21   -> osal_stop_timerEx
        0     21   -> zb_BindConfirm
      0     41   SAPI_ReceiveDataIndication
        0     18   -> zb_ReceiveDataIndication
      1     44   SAPI_SendCback
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     28   SAPI_SendDataConfirm
        0      9   -> zb_SendDataConfirm
      0     28   SAPI_StartConfirm
        0      9   -> zb_StartConfirm
      0     16   zb_AllowBind
        0     12   -> afSetMatch
        0     16   -> osal_start_timerEx
        0     12   -> osal_stop_timerEx
      0     35   zb_BindDevice
        0     28   -> APSME_BindRequest
        0     27   -> SAPI_SendCback
        0     29   -> ZDO_AnyClusterMatches
        0     35   -> ZDP_MatchDescReq
        0     27   -> ZDP_NwkAddrReq
        0     27   -> bindFind
        0     27   -> bindRemoveEntry
        0     31   -> osal_start_timerEx
        0     27   -> sAddrExtCpy
      0      9   zb_FindDeviceRequest
        0      9   -> ZDP_NwkAddrReq
      0     18   zb_GetDeviceInfo
        0     18   -> osal_memcpy
      0      0   zb_PermitJoiningRequest
      0     36   zb_ReadConfiguration
        0     13   -> osal_nv_item_len
        0     17   -> osal_nv_read
      1     44   zb_SendDataRequest
        0     39   -> AF_DataRequest
        0     30   -> NLME_IsAddressBroadcast
        0     30   -> SAPI_SendCback
      2     20   zb_StartRequest
        2      1   -> SAPI_SendCback
        2      1   -> ZDOInitDevice
        2      1   -> zb_ReadConfiguration
      0     10   zb_SystemReset
        0      0   -> Onboard_soft_reset
      0     26   zb_WriteConfiguration
        0     16   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      21  SAPI_AllowBindConfirm
       6  SAPI_AllowBindConfirm::?relay
      25  SAPI_BindConfirm
       6  SAPI_BindConfirm::?relay
      33  SAPI_FindDeviceConfirm
       6  SAPI_FindDeviceConfirm::?relay
     191  SAPI_Init
       6  SAPI_Init::?relay
     625  SAPI_ProcessEvent
       6  SAPI_ProcessEvent::?relay
     294  SAPI_ProcessZDOMsgs
       6  SAPI_ProcessZDOMsgs::?relay
      68  SAPI_ReceiveDataIndication
       6  SAPI_ReceiveDataIndication::?relay
      86  SAPI_SendCback
       6  SAPI_SendCback::?relay
      21  SAPI_SendDataConfirm
       6  SAPI_SendDataConfirm::?relay
      17  SAPI_StartConfirm
       6  SAPI_StartConfirm::?relay
       4  __Constant_fa
       1  sapi_TaskID
       2  sapi_bindInProgress
       6  sapi_epDesc
      12  tasksArr
       1  tasksCnt
       2  tasksEvents
     141  zb_AllowBind
       6  zb_AllowBind::?relay
     636  zb_BindDevice
       6  zb_BindDevice::?relay
      36  zb_FindDeviceRequest
       6  zb_FindDeviceRequest::?relay
     313  zb_GetDeviceInfo
       6  zb_GetDeviceInfo::?relay
       7  zb_PermitJoiningRequest
       6  zb_PermitJoiningRequest::?relay
      67  zb_ReadConfiguration
       6  zb_ReadConfiguration::?relay
     234  zb_SendDataRequest
       6  zb_SendDataRequest::?relay
      93  zb_StartRequest
       6  zb_StartRequest::?relay
       6  zb_SystemReset
       6  zb_SystemReset::?relay
      49  zb_WriteConfiguration
       6  zb_WriteConfiguration::?relay

 
 2 963 bytes in segment BANKED_CODE
   120 bytes in segment BANK_RELAYS
    17 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
 3 083 bytes of CODE  memory
    13 bytes of CONST memory (+ 4 bytes shared)
    11 bytes of XDATA memory

Errors: none
Warnings: none
