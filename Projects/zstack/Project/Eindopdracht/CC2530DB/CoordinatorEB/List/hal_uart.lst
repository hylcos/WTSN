###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                13/Mar/2016  22:06:48
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\hal\target\CC2530EB\hal_uart.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\hal\target\CC2530EB\hal_uart.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        xNV_RESTORE -D ZTOOL_P1 -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\hal_uart.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\hal_uart.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 1038
   \   00040E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL     0xff,#0x3f
   \   000007   85FFFF       MOV     0xff,0xff
   \   00000A   53F1FE       ANL     0xf1,#0xfe
   \   00000D   43F30C       ORL     0xf3,#0xc
   \   000010   53F2F3       ANL     0xf2,#0xf3
   \   000013   758680       MOV     0x86,#-0x80
   \   000016   75C480       MOV     0xc4,#-0x80
   \   000019   90....       MOV     DPTR,#dmaCh1234 + 26
   \   00001C   7470         MOV     A,#0x70
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74C1         MOV     A,#-0x3f
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   541F         ANL     A,#0x1f
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#dmaCh1234 + 30
   \   00002B   740F         MOV     A,#0xf
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   744A         MOV     A,#0x4a
   \   000031   F0           MOVX    @DPTR,A
   \   000032   90....       MOV     DPTR,#dmaCh1234 + 16
   \   000035   7470         MOV     A,#0x70
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74C1         MOV     A,#-0x3f
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   90....       MOV     DPTR,#dmaCh1234 + 20
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   541F         ANL     A,#0x1f
   \   000042   F0           MOVX    @DPTR,A
   \   000043   90....       MOV     DPTR,#dmaCh1234 + 22
   \   000046   74CE         MOV     A,#-0x32
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   540F         ANL     A,#0xf
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   4410         ORL     A,#0x10
   \   000050   F0           MOVX    @DPTR,A
   \   000051   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000053   90....       MOV     DPTR,#dmaCh1234 + 18
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   74..         MOV     A,#dmaCfg & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   90....       MOV     DPTR,#dmaCh1234 + 21
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   90....       MOV     DPTR,#dmaCh1234 + 20
   \   000063   04           INC     A
   \   000064   F0           MOVX    @DPTR,A
   \   000065   90....       MOV     DPTR,#dmaCh1234 + 23
   \   000068   7412         MOV     A,#0x12
   \   00006A   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00006D                REQUIRE P2DIR
   \   00006D                REQUIRE PERCFG
   \   00006D                REQUIRE P0SEL
   \   00006D                REQUIRE ADCCFG
   \   00006D                REQUIRE U0CSR
   \   00006D                REQUIRE U0UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine14_0
   \   000001                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   241B         ADD     A,#0x1b
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   90....       MOV     DPTR,#dmaCfg + 1036
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   E9           MOV     A,R1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   7403         MOV     A,#0x3
   \   000023   68           XRL     A,R0
   \   000024   6005         JZ      ??HalUARTOpenDMA_0
   \   000026   7404         MOV     A,#0x4
   \   000028   68           XRL     A,R0
   \   000029   7005         JNZ     ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002B   75C2D8       MOV     0xc2,#-0x28
   \   00002E   8003         SJMP    ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000030   75C23B       MOV     0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000033   E0           MOVX    A,@DPTR
   \   000034   600B         JZ      ??HalUARTOpenDMA_3
   \   000036   14           DEC     A
   \   000037   6012         JZ      ??HalUARTOpenDMA_4
   \   000039   14           DEC     A
   \   00003A   6019         JZ      ??HalUARTOpenDMA_5
   \   00003C   14           DEC     A
   \   00003D   6020         JZ      ??HalUARTOpenDMA_6
   \   00003F   8028         SJMP    ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   000041   75C508       MOV     0xc5,#0x8
   \   000044   90....       MOV     DPTR,#dmaCfg + 1032
   \   000047   7423         MOV     A,#0x23
   \   000049   8026         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   00004B   75C509       MOV     0xc5,#0x9
   \   00004E   90....       MOV     DPTR,#dmaCfg + 1032
   \   000051   7412         MOV     A,#0x12
   \   000053   801C         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   000055   75C50A       MOV     0xc5,#0xa
   \   000058   90....       MOV     DPTR,#dmaCfg + 1032
   \   00005B   7409         MOV     A,#0x9
   \   00005D   8012         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   00005F   75C50A       MOV     0xc5,#0xa
   \   000062   90....       MOV     DPTR,#dmaCfg + 1032
   \   000065   7406         MOV     A,#0x6
   \   000067   8008         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000069   75C50B       MOV     0xc5,#0xb
   \   00006C   90....       MOV     DPTR,#dmaCfg + 1032
   \   00006F   7403         MOV     A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000071   F0           MOVX    @DPTR,A
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   600D         JZ      ??HalUARTOpenDMA_9
   \   00007B   75C442       MOV     0xc4,#0x42
   \   00007E   43F310       ORL     0xf3,#0x10
   \   000081   C285         CLR     0x80.5
   \   000083   43FD20       ORL     0xfd,#0x20
   \   000086   8003         SJMP    ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000088   75C402       MOV     0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   00008B   9070C1       MOV     DPTR,#0x70c1
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   90....       MOV     DPTR,#dmaCfg
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   E4           CLR     A
   \   000095   F0           MOVX    @DPTR,A
   \   000096   75D1F7       MOV     0xd1,#-0x9
   \   000099   75D608       MOV     0xd6,#0x8
   \   00009C                ; Setup parameters for call to function osal_memset
   \   00009C   FC           MOV     R4,A
   \   00009D   7D02         MOV     R5,#0x2
   \   00009F   E5C2         MOV     A,0xc2
   \   0000A1   F4           CPL     A
   \   0000A2   F9           MOV     R1,A
   \   0000A3   7A..         MOV     R2,#dmaCfg & 0xff
   \   0000A5   7B..         MOV     R3,#(dmaCfg >> 8) & 0xff
   \   0000A7   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000AA   438640       ORL     0x86,#0x40
   \   0000AD   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000B0   E4           CLR     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000B5   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000B8                REQUIRE U0BAUD
   \   0000B8                REQUIRE U0GCR
   \   0000B8                REQUIRE U0UCR
   \   0000B8                REQUIRE P0SEL
   \   0000B8                REQUIRE _A_P0
   \   0000B8                REQUIRE P0DIR
   \   0000B8                REQUIRE DMAIRQ
   \   0000B8                REQUIRE DMAARM
   \   0000B8                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(unsigned char *, uint16)
   \                     HalUARTWriteDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00000C   F8           MOV     R0,A
   \   00000D   EC           MOV     A,R4
   \   00000E   28           ADD     A,R0
   \   00000F   F8           MOV     R0,A
   \   000010   E4           CLR     A
   \   000011   3D           ADDC    A,R5
   \   000012   F9           MOV     R1,A
   \   000013   C3           CLR     C
   \   000014   E8           MOV     A,R0
   \   000015   9401         SUBB    A,#0x1
   \   000017   E9           MOV     A,R1
   \   000018   9401         SUBB    A,#0x1
   \   00001A   4007         JC      ??HalUARTWriteDMA_0
   \   00001C   7A00         MOV     R2,#0x0
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   02....       LJMP    ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   000023   AAA8         MOV     R2,0xa8+0x0
   \   000025   C2AF         CLR     0xa8.7
   \   000027   90....       MOV     DPTR,#dmaCfg + 1030
   \   00002A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00002D   EA           MOV     A,R2
   \   00002E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000030   E4           CLR     A
   \   000031   33           RLC     A
   \   000032   F5..         MOV     ?V0,A
   \   000034   EA           MOV     A,R2
   \   000035   A2E7         MOV     C,0xE0 /* A   */.7
   \   000037   92AF         MOV     0xa8.7,C
   \   000039   7A00         MOV     R2,#0x0
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   EC           MOV     A,R4
   \   00003E   4D           ORL     A,R5
   \   00003F   6037         JZ      ??HalUARTWriteDMA_2
   \   000041   8E..         MOV     ?V0,R6
   \   000043   8F..         MOV     ?V1,R7
   \   000045   E8           MOV     A,R0
   \   000046   F9           MOV     R1,A
   \   000047   74..         MOV     A,#dmaCfg & 0xff
   \   000049   2A           ADD     A,R2
   \   00004A   F8           MOV     R0,A
   \   00004B   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   00004D   39           ADDC    A,R1
   \   00004E   F9           MOV     R1,A
   \                     ??HalUARTWriteDMA_3:
   \   00004F   85..82       MOV     DPL,?V0
   \   000052   85..83       MOV     DPH,?V1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   C0E0         PUSH    A
   \   000058   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00005B   D0E0         POP     A
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   05..         INC     ?V3
   \   000060   0A           INC     R2
   \   000061   EA           MOV     A,R2
   \   000062   7001         JNZ     ??HalUARTWriteDMA_4
   \   000064   0B           INC     R3
   \                     ??HalUARTWriteDMA_4:
   \   000065   85..82       MOV     DPL,?V0
   \   000068   85..83       MOV     DPH,?V1
   \   00006B   A3           INC     DPTR
   \   00006C   8582..       MOV     ?V0,DPL
   \   00006F   8583..       MOV     ?V1,DPH
   \   000072   C3           CLR     C
   \   000073   9C           SUBB    A,R4
   \   000074   EB           MOV     A,R3
   \   000075   9D           SUBB    A,R5
   \   000076   40D7         JC      ??HalUARTWriteDMA_3
   \                     ??HalUARTWriteDMA_2:
   \   000078   A2AF         MOV     C,0xa8.7
   \   00007A   E4           CLR     A
   \   00007B   33           RLC     A
   \   00007C   F5..         MOV     ?V1,A
   \   00007E   C2AF         CLR     0xa8.7
   \   000080   90....       MOV     DPTR,#dmaCfg + 1030
   \   000083   E0           MOVX    A,@DPTR
   \   000084   65..         XRL     A,?V2
   \   000086   6046         JZ      ??HalUARTWriteDMA_5
   \   000088   E5..         MOV     A,?V1
   \   00008A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00008C   92AF         MOV     0xa8.7,C
   \   00008E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000091   7A00         MOV     R2,#0x0
   \   000093   7B00         MOV     R3,#0x0
   \   000095   EC           MOV     A,R4
   \   000096   4D           ORL     A,R5
   \   000097   602D         JZ      ??HalUARTWriteDMA_6
   \   000099   E8           MOV     A,R0
   \   00009A   F9           MOV     R1,A
   \   00009B   74..         MOV     A,#dmaCfg & 0xff
   \   00009D   2A           ADD     A,R2
   \   00009E   F8           MOV     R0,A
   \   00009F   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   0000A1   39           ADDC    A,R1
   \   0000A2   F9           MOV     R1,A
   \                     ??HalUARTWriteDMA_7:
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   C0E0         PUSH    A
   \   0000AA   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000AD   D0E0         POP     A
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   05..         INC     ?V3
   \   0000B2   0A           INC     R2
   \   0000B3   EA           MOV     A,R2
   \   0000B4   7001         JNZ     ??HalUARTWriteDMA_8
   \   0000B6   0B           INC     R3
   \                     ??HalUARTWriteDMA_8:
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   A3           INC     DPTR
   \   0000BC   AE82         MOV     R6,DPL
   \   0000BE   AF83         MOV     R7,DPH
   \   0000C0   C3           CLR     C
   \   0000C1   9C           SUBB    A,R4
   \   0000C2   EB           MOV     A,R3
   \   0000C3   9D           SUBB    A,R5
   \   0000C4   40DD         JC      ??HalUARTWriteDMA_7
   \                     ??HalUARTWriteDMA_6:
   \   0000C6   A2AF         MOV     C,0xa8.7
   \   0000C8   E4           CLR     A
   \   0000C9   33           RLC     A
   \   0000CA   F5..         MOV     ?V1,A
   \   0000CC   C2AF         CLR     0xa8.7
   \                     ??HalUARTWriteDMA_5:
   \   0000CE   A8..         MOV     R0,?V2
   \   0000D0   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000D3   E5..         MOV     A,?V3
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   7401         MOV     A,#0x1
   \   0000D8   65..         XRL     A,?V2
   \   0000DA   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000DD   7006         JNZ     ??HalUARTWriteDMA_9
   \   0000DF   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000E2   7401         MOV     A,#0x1
   \   0000E4   F0           MOVX    @DPTR,A
   \                     ??HalUARTWriteDMA_9:
   \   0000E5   E5..         MOV     A,?V1
   \   0000E7   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000E9   92AF         MOV     0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000EB   7F06         MOV     R7,#0x6
   \   0000ED   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000F0                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85....       MOV     ?V4,?V3
   \   000003   E8           MOV     A,R0
   \   000004   25..         ADD     A,?V4
   \   000006   F5..         MOV     ?V4,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   F5..         MOV     ?V5,A
   \   00000C   E5..         MOV     A,?V4
   \   00000E   2404         ADD     A,#0x4
   \   000010   F582         MOV     DPL,A
   \   000012   E5..         MOV     A,?V5
   \   000014   3402         ADDC    A,#0x2
   \   000016   F583         MOV     DPH,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000006   F5..         MOV     ?V3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#dmaCfg + 1030
   \   000003   E0           MOVX    A,@DPTR
   \   000004                REQUIRE ??Subroutine13_0
   \   000004                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#((dmaCfg + 1028) >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   7E00         MOV     R6,#0x0
   \   000007   90....       MOV     DPTR,#dmaCfg + 512
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FA           MOV     R2,A
   \   00000C   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00000F   705C         JNZ     ??HalUARTPollDMA_0
   \   000011   EA           MOV     A,R2
   \   000012   FF           MOV     R7,A
   \                     ??HalUARTPollDMA_1:
   \   000013   EF           MOV     A,R7
   \   000014   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000017   7005         JNZ     ??HalUARTPollDMA_2
   \   000019   0F           INC     R7
   \   00001A   EA           MOV     A,R2
   \   00001B   6F           XRL     A,R7
   \   00001C   70F5         JNZ     ??HalUARTPollDMA_1
   \                     ??HalUARTPollDMA_2:
   \   00001E   90....       MOV     DPTR,#dmaCfg + 513
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6F           XRL     A,R7
   \   000023   6011         JZ      ??HalUARTPollDMA_3
   \   000025   EF           MOV     A,R7
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7004         JNZ     ??HalUARTPollDMA_4
   \   00002B   E595         MOV     A,0x95
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_4:
   \   00002F   90....       MOV     DPTR,#dmaCfg + 514
   \   000032   7421         MOV     A,#0x21
   \   000034   801E         SJMP    ??HalUARTPollDMA_5
   \                     ??HalUARTPollDMA_3:
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   601A         JZ      ??HalUARTPollDMA_6
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   E595         MOV     A,0x95
   \   000040   C3           CLR     C
   \   000041   98           SUBB    A,R0
   \   000042   F8           MOV     R0,A
   \   000043   C3           CLR     C
   \   000044   99           SUBB    A,R1
   \   000045   90....       MOV     DPTR,#dmaCfg + 514
   \   000048   5009         JNC     ??HalUARTPollDMA_7
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C3           CLR     C
   \   00004C   98           SUBB    A,R0
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   E595         MOV     A,0x95
   \   000050   A3           INC     DPTR
   \   000051   8001         SJMP    ??HalUARTPollDMA_5
   \                     ??HalUARTPollDMA_7:
   \   000053   E4           CLR     A
   \                     ??HalUARTPollDMA_5:
   \   000054   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_6:
   \   000055                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000055   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   000058   8A..         MOV     ?V0,R2
   \   00005A   8B..         MOV     ?V1,R3
   \   00005C   A8..         MOV     R0,?V0
   \   00005E   A9..         MOV     R1,?V1
   \   000060   C3           CLR     C
   \   000061   E8           MOV     A,R0
   \   000062   94F0         SUBB    A,#-0x10
   \   000064   E9           MOV     A,R1
   \   000065   9400         SUBB    A,#0x0
   \   000067   400B         JC      ??HalUARTPollDMA_8
   \   000069   7E01         MOV     R6,#0x1
   \   00006B   8022         SJMP    ??HalUARTPollDMA_9
   \                     ??HalUARTPollDMA_0:
   \   00006D   90....       MOV     DPTR,#dmaCfg + 514
   \   000070   E4           CLR     A
   \   000071   F0           MOVX    @DPTR,A
   \   000072   801B         SJMP    ??HalUARTPollDMA_9
   \                     ??HalUARTPollDMA_8:
   \   000074   C3           CLR     C
   \   000075   E8           MOV     A,R0
   \   000076   9470         SUBB    A,#0x70
   \   000078   E9           MOV     A,R1
   \   000079   9400         SUBB    A,#0x0
   \   00007B   4006         JC      ??HalUARTPollDMA_10
   \   00007D   7E02         MOV     R6,#0x2
   \   00007F   D285         SETB    0x80.5
   \   000081   800C         SJMP    ??HalUARTPollDMA_9
   \                     ??HalUARTPollDMA_10:
   \   000083   E8           MOV     A,R0
   \   000084   49           ORL     A,R1
   \   000085   6008         JZ      ??HalUARTPollDMA_9
   \   000087   90....       MOV     DPTR,#dmaCfg + 514
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   7002         JNZ     ??HalUARTPollDMA_9
   \   00008D   7E04         MOV     R6,#0x4
   \                     ??HalUARTPollDMA_9:
   \   00008F   90....       MOV     DPTR,#dmaCfg + 1031
   \   000092   E0           MOVX    A,@DPTR
   \   000093   6006         JZ      ??HalUARTPollDMA_11
   \   000095   E4           CLR     A
   \   000096   F0           MOVX    @DPTR,A
   \   000097   EE           MOV     A,R6
   \   000098   D2E4         SETB    0xE0 /* A   */.4
   \   00009A   FE           MOV     R6,A
   \                     ??HalUARTPollDMA_11:
   \   00009B   90....       MOV     DPTR,#dmaCfg + 1034
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   6018         JZ      ??HalUARTPollDMA_12
   \   0000A1   A895         MOV     R0,0x95+0x0
   \   0000A3   90....       MOV     DPTR,#dmaCfg + 1033
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F9           MOV     R1,A
   \   0000A8   E8           MOV     A,R0
   \   0000A9   C3           CLR     C
   \   0000AA   99           SUBB    A,R1
   \   0000AB   F8           MOV     R0,A
   \   0000AC   90....       MOV     DPTR,#dmaCfg + 1032
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   C3           CLR     C
   \   0000B1   98           SUBB    A,R0
   \   0000B2   5005         JNC     ??HalUARTPollDMA_12
   \   0000B4   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000B7   E4           CLR     A
   \   0000B8   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_12:
   \   0000B9   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   604E         JZ      ??HalUARTPollDMA_13
   \   0000BF   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   7048         JNZ     ??HalUARTPollDMA_13
   \   0000C5   A3           INC     DPTR
   \   0000C6   E4           CLR     A
   \   0000C7   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000CA   F8           MOV     R0,A
   \   0000CB   E4           CLR     A
   \   0000CC   C8           XCH     A,R0
   \   0000CD   F9           MOV     R1,A
   \   0000CE   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000D0   28           ADD     A,R0
   \   0000D1   74..         MOV     A,#((dmaCfg + 516) >> 8) & 0xff
   \   0000D3   39           ADDC    A,R1
   \   0000D4   90....       MOV     DPTR,#dmaCh1234 + 24
   \   0000D7   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000DA   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000DC   90....       MOV     DPTR,#dmaCh1234 + 25
   \   0000DF   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000E2   90....       MOV     DPTR,#dmaCh1234 + 29
   \   0000E5   F0           MOVX    @DPTR,A
   \   0000E6   90....       MOV     DPTR,#dmaCh1234 + 28
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   54E0         ANL     A,#0xe0
   \   0000EC   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   6401         XRL     A,#0x1
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A2AF         MOV     C,0xa8.7
   \   0000F5   E4           CLR     A
   \   0000F6   33           RLC     A
   \   0000F7   F8           MOV     R0,A
   \   0000F8   C2AF         CLR     0xa8.7
   \   0000FA   75D610       MOV     0xd6,#0x10
   \                     ??HalUARTPollDMA_14:
   \   0000FD   00           NOP
   \   0000FE   E5D6         MOV     A,0xd6
   \   000100   A2E4         MOV     C,0xE0 /* A   */.4
   \   000102   50F9         JNC     ??HalUARTPollDMA_14
   \   000104   75D1EF       MOV     0xd1,#-0x11
   \   000107   75D710       MOV     0xd7,#0x10
   \   00010A   E8           MOV     A,R0
   \   00010B   8023         SJMP    ??HalUARTPollDMA_15
   \                     ??HalUARTPollDMA_13:
   \   00010D   A2AF         MOV     C,0xa8.7
   \   00010F   E4           CLR     A
   \   000110   33           RLC     A
   \   000111   FA           MOV     R2,A
   \   000112   C2AF         CLR     0xa8.7
   \   000114   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000117   6016         JZ      ??HalUARTPollDMA_16
   \   000119   E5D6         MOV     A,0xd6
   \   00011B   A2E4         MOV     C,0xE0 /* A   */.4
   \   00011D   4010         JC      ??HalUARTPollDMA_16
   \   00011F   E5D1         MOV     A,0xd1
   \   000121   A2E4         MOV     C,0xE0 /* A   */.4
   \   000123   400A         JC      ??HalUARTPollDMA_16
   \   000125   EA           MOV     A,R2
   \   000126   A2E0         MOV     C,0xE0 /* A   */.0
   \   000128   92AF         MOV     0xa8.7,C
   \   00012A                ; Setup parameters for call to function HalUARTIsrDMA
   \   00012A   12....       LCALL   `??HalUARTIsrDMA::?relay`; Banked call to: HalUARTIsrDMA
   \   00012D   8005         SJMP    ??HalUARTPollDMA_17
   \                     ??HalUARTPollDMA_16:
   \   00012F   EA           MOV     A,R2
   \                     ??HalUARTPollDMA_15:
   \   000130   A2E0         MOV     C,0xE0 /* A   */.0
   \   000132   92AF         MOV     0xa8.7,C
   \                     ??HalUARTPollDMA_17:
   \   000134   EE           MOV     A,R6
   \   000135   6019         JZ      ??HalUARTPollDMA_18
   \   000137   90....       MOV     DPTR,#dmaCfg + 1036
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F8           MOV     R0,A
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F9           MOV     R1,A
   \   00013F   8882         MOV     DPL,R0
   \   000141   8983         MOV     DPH,R1
   \   000143   E582         MOV     A,DPL
   \   000145   4583         ORL     A,DPH
   \   000147   6007         JZ      ??HalUARTPollDMA_18
   \   000149                ; Setup parameters for indirect call
   \   000149   EE           MOV     A,R6
   \   00014A   FA           MOV     R2,A
   \   00014B   7900         MOV     R1,#0x0
   \   00014D   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollDMA_18:
   \   000150                REQUIRE ?Subroutine1
   \   000150                REQUIRE U0BAUD
   \   000150                REQUIRE ST0
   \   000150                REQUIRE _A_P0
   \   000150                REQUIRE _A_IEN0
   \   000150                REQUIRE DMAARM
   \   000150                REQUIRE DMAIRQ
   \   000150                REQUIRE DMAREQ
   \   000150                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#dmaCfg & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   65C2         XRL     A,0xc2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#dmaCfg + 1030
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#dmaCfg + 512
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00000F   7023         JNZ     ??HalUARTRxAvailDMA_0
   \   000011   78..         MOV     R0,#dmaCfg & 0xff
   \   000013   79..         MOV     R1,#(dmaCfg >> 8) & 0xff
   \                     ??HalUARTRxAvailDMA_1:
   \   000015   8882         MOV     DPL,R0
   \   000017   8983         MOV     DPH,R1
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   65C2         XRL     A,0xc2
   \   00001D   7005         JNZ     ??HalUARTRxAvailDMA_2
   \   00001F   0A           INC     R2
   \   000020   EA           MOV     A,R2
   \   000021   7001         JNZ     ??HalUARTRxAvailDMA_2
   \   000023   0B           INC     R3
   \                     ??HalUARTRxAvailDMA_2:
   \   000024   E8           MOV     A,R0
   \   000025   2402         ADD     A,#0x2
   \   000027   F8           MOV     R0,A
   \   000028   5001         JNC     ??HalUARTRxAvailDMA_3
   \   00002A   09           INC     R1
   \                     ??HalUARTRxAvailDMA_3:
   \   00002B   64..         XRL     A,#dmaCfg & 0xff
   \   00002D   7003         JNZ     ??HalUARTRxAvailDMA_4
   \   00002F   E9           MOV     A,R1
   \   000030   64..         XRL     A,#((dmaCfg + 512) >> 8) & 0xff
   \                     ??HalUARTRxAvailDMA_4:
   \   000032   70E1         JNZ     ??HalUARTRxAvailDMA_1
   \                     ??HalUARTRxAvailDMA_0:
   \   000034   80..         SJMP    ??Subroutine14_0
   \   000036                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV     0xd1,#-0x11
   \   000007   90....       MOV     DPTR,#dmaCfg + 1030
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6401         XRL     A,#0x1
   \   00000D   F8           MOV     R0,A
   \   00000E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
   \   000013   90....       MOV     DPTR,#dmaCfg + 1031
   \   000016   04           INC     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   E595         MOV     A,0x95
   \   00001A   90....       MOV     DPTR,#dmaCfg + 1033
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000024   6006         JZ      ??HalUARTIsrDMA_0
   \   000026   90....       MOV     DPTR,#dmaCfg + 1035
   \   000029   7401         MOV     A,#0x1
   \   00002B   F0           MOVX    @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   00002C   80..         SJMP    ??Subroutine14_0
   \   00002E                REQUIRE DMAIRQ
   \   00002E                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     98          #if HAL_UART_DMA
     99            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL   `??HalUARTInitDMA::?relay`; Banked call to: HalUARTInitDMA
    100          #endif
    101          #if HAL_UART_ISR
    102            HalUARTInitISR();
    103          #endif
    104          #if HAL_UART_USB
    105            HalUARTInitUSB();
    106          #endif
    107          }
   \   000007   80..         SJMP    ??Subroutine14_0
    108          
    109          /******************************************************************************
    110           * @fn      HalUARTOpen
    111           *
    112           * @brief   Open a port according tp the configuration specified by parameter.
    113           *
    114           * @param   port   - UART port
    115           *          config - contains configuration information
    116           *
    117           * @return  Status of the function call
    118           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    120          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    121            (void)port;
    122            (void)config;
    123          
    124          #if (HAL_UART_DMA == 1)
    125            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ     ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL   `??HalUARTOpenDMA::?relay`; Banked call to: HalUARTOpenDMA
    126          #endif
    127          #if (HAL_UART_DMA == 2)
    128            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    129          #endif
    130          #if (HAL_UART_ISR == 1)
    131            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    132          #endif
    133          #if (HAL_UART_ISR == 2)
    134            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    135          #endif
    136          #if (HAL_UART_USB)
    137            HalUARTOpenUSB(config);
    138          #endif
    139            
    140            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV     R1,#0x0
   \   00000D                REQUIRE ?Subroutine2
   \   00000D                ; // Fall through to label ?Subroutine2
    141          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    142          
    143          /*****************************************************************************
    144           * @fn      HalUARTRead
    145           *
    146           * @brief   Read a buffer from the UART
    147           *
    148           * @param   port - USART module designation
    149           *          buf  - valid data buffer at least 'len' bytes in size
    150           *          len  - max length number of bytes to copy to 'buf'
    151           *
    152           * @return  length of buffer that was read
    153           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    155          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   F9           MOV     R1,A
    156            (void)port;
    157            (void)buf;
    158            (void)len;
    159          
    160          #if (HAL_UART_DMA == 1)
    161            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   00000B   E5..         MOV     A,?V2
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   703C         JNZ     ??HalUARTRead_0
   \   000013   8025         SJMP    ??HalUARTRead_1
   \                     ??HalUARTRead_2:
   \   000015   8882         MOV     DPL,R0
   \   000017   8983         MOV     DPH,R1
   \   000019   E5..         MOV     A,?V0
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   A882         MOV     R0,DPL
   \   00001F   A983         MOV     R1,DPH
   \   000021   E5C2         MOV     A,0xc2
   \   000023   F4           CPL     A
   \   000024   F5..         MOV     ?V1,A
   \   000026   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000029   E4           CLR     A
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E5..         MOV     A,?V1
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   90....       MOV     DPTR,#dmaCfg + 512
   \   000032   E0           MOVX    A,@DPTR
   \   000033   04           INC     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   0A           INC     R2
   \   000036   EA           MOV     A,R2
   \   000037   7001         JNZ     ??HalUARTRead_1
   \   000039   0B           INC     R3
   \                     ??HalUARTRead_1:
   \   00003A   C3           CLR     C
   \   00003B   EA           MOV     A,R2
   \   00003C   9C           SUBB    A,R4
   \   00003D   EB           MOV     A,R3
   \   00003E   9D           SUBB    A,R5
   \   00003F   500C         JNC     ??HalUARTRead_3
   \   000041   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65C2         XRL     A,0xc2
   \   00004B   60C8         JZ      ??HalUARTRead_2
   \                     ??HalUARTRead_3:
   \   00004D   C285         CLR     0x80.5
    162          #endif
    163          #if (HAL_UART_DMA == 2)
    164            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    165          #endif
    166          #if (HAL_UART_ISR == 1)
    167            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    168          #endif
    169          #if (HAL_UART_ISR == 2)
    170            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    171          #endif
    172          
    173          #if HAL_UART_USB
    174            return HalUARTRx(buf, len);
    175          #else
    176            return 0;
   \                     ??HalUARTRead_0:
   \   00004F   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000052                REQUIRE U0BAUD
   \   000052                REQUIRE _A_P0
    177          #endif
    178          }
    179          
    180          /******************************************************************************
    181           * @fn      HalUARTWrite
    182           *
    183           * @brief   Write a buffer to the UART.
    184           *
    185           * @param   port - UART port
    186           *          buf  - pointer to the buffer that will be written, not freed
    187           *          len  - length of
    188           *
    189           * @return  length of the buffer that was sent
    190           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    192          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    193            (void)port;
    194            (void)buf;
    195            (void)len;
    196          
    197          #if (HAL_UART_DMA == 1)
    198            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL   `??HalUARTWriteDMA::?relay`; Banked call to: HalUARTWriteDMA
   \   00000B   8004         SJMP    ??HalUARTWrite_1
    199          #endif
    200          #if (HAL_UART_DMA == 2)
    201            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    202          #endif
    203          #if (HAL_UART_ISR == 1)
    204            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    205          #endif
    206          #if (HAL_UART_ISR == 2)
    207            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    208          #endif
    209          
    210          #if HAL_UART_USB
    211            HalUARTTx(buf, len);
    212            return len;
    213          #else
    214            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011   80..         SJMP    ?Subroutine2
    215          #endif
    216          }
    217          
    218          /******************************************************************************
    219           * @fn      HalUARTSuspend
    220           *
    221           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    222           *
    223           * @param   None
    224           *
    225           * @return  None
    226           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    228          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    229          #if HAL_UART_DMA
    230            HalUARTSuspendDMA();
   \   000000   D285         SETB    0x80.5
   \   000002   5386BF       ANL     0x86,#0xbf
   \   000005   43AB10       ORL     0xab,#0x10
    231          #endif
    232          #if HAL_UART_ISR
    233            HalUARTSuspendISR();
    234          #endif
    235          }
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE _A_P0
   \   00000B                REQUIRE U0CSR
   \   00000B                REQUIRE P0IEN
    236          
    237          /******************************************************************************
    238           * @fn      HalUARTResume
    239           *
    240           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    241           *
    242           * @param   None
    243           *
    244           * @return  None
    245           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void HalUARTResume( void )
   \                     HalUARTResume:
    247          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    248          #if HAL_UART_DMA
    249            HalUARTResumeDMA();
   \   000000   53ABEF       ANL     0xab,#0xef
   \   000003   43C480       ORL     0xc4,#0x80
   \   000006   438640       ORL     0x86,#0x40
   \   000009   C285         CLR     0x80.5
    250          #endif
    251          #if HAL_UART_ISR
    252            HalUARTResumeISR();
    253          #endif
    254          }
   \   00000B   02....       LJMP    ?BRET
   \   00000E                REQUIRE P0IEN
   \   00000E                REQUIRE U0UCR
   \   00000E                REQUIRE U0CSR
   \   00000E                REQUIRE _A_P0
    255          
    256          /***************************************************************************************************
    257           * @fn      HalUARTPoll
    258           *
    259           * @brief   Poll the UART.
    260           *
    261           * @param   none
    262           *
    263           * @return  none
    264           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void HalUARTPoll(void)
   \                     HalUARTPoll:
    266          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267          #if HAL_UART_DMA
    268            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL   `??HalUARTPollDMA::?relay`; Banked call to: HalUARTPollDMA
    269          #endif
    270          #if HAL_UART_ISR
    271            HalUARTPollISR();
    272          #endif
    273          #if HAL_UART_USB
    274            HalUARTPollUSB();
    275          #endif
    276          }
   \   000007   02....       LJMP    ??Subroutine14_0 & 0xFFFF
    277          
    278          /**************************************************************************************************
    279           * @fn      Hal_UART_RxBufLen()
    280           *
    281           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    282           *
    283           * @param   port - UART port
    284           *
    285           * @return  length of current Rx Buffer
    286           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    288          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    289            (void)port;
    290          
    291          #if (HAL_UART_DMA == 1)
    292            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000005   E9           MOV     A,R1
   \   000006   7A00         MOV     R2,#0x0
   \   000008   7B00         MOV     R3,#0x0
   \   00000A   703D         JNZ     ??Hal_UART_RxBufLen_0
   \   00000C   90....       MOV     DPTR,#dmaCfg + 512
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   25E0         ADD     A,0xE0 /* A   */
   \   000012   FC           MOV     R4,A
   \   000013   E4           CLR     A
   \   000014   33           RLC     A
   \   000015   FD           MOV     R5,A
   \   000016   74..         MOV     A,#dmaCfg & 0xff
   \   000018   2C           ADD     A,R4
   \   000019   F582         MOV     DPL,A
   \   00001B   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   00001D   3D           ADDC    A,R5
   \   00001E   F583         MOV     DPH,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   65C2         XRL     A,0xc2
   \   000024   7023         JNZ     ??Hal_UART_RxBufLen_0
   \   000026   7C..         MOV     R4,#dmaCfg & 0xff
   \   000028   7D..         MOV     R5,#(dmaCfg >> 8) & 0xff
   \                     ??Hal_UART_RxBufLen_1:
   \   00002A   8C82         MOV     DPL,R4
   \   00002C   8D83         MOV     DPH,R5
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   65C2         XRL     A,0xc2
   \   000032   7005         JNZ     ??Hal_UART_RxBufLen_2
   \   000034   0A           INC     R2
   \   000035   EA           MOV     A,R2
   \   000036   7001         JNZ     ??Hal_UART_RxBufLen_2
   \   000038   0B           INC     R3
   \                     ??Hal_UART_RxBufLen_2:
   \   000039   EC           MOV     A,R4
   \   00003A   2402         ADD     A,#0x2
   \   00003C   FC           MOV     R4,A
   \   00003D   5001         JNC     ??Hal_UART_RxBufLen_3
   \   00003F   0D           INC     R5
   \                     ??Hal_UART_RxBufLen_3:
   \   000040   64..         XRL     A,#dmaCfg & 0xff
   \   000042   7003         JNZ     ??Hal_UART_RxBufLen_4
   \   000044   ED           MOV     A,R5
   \   000045   64..         XRL     A,#((dmaCfg + 512) >> 8) & 0xff
   \                     ??Hal_UART_RxBufLen_4:
   \   000047   70E1         JNZ     ??Hal_UART_RxBufLen_1
    293          #endif
    294          #if (HAL_UART_DMA == 2)
    295            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    296          #endif
    297          #if (HAL_UART_ISR == 1)
    298            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    299          #endif
    300          #if (HAL_UART_ISR == 2)
    301            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    302          #endif
    303          #if HAL_UART_USB
    304            return HalUARTRxAvailUSB();
    305          #else
    306            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   000049   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   00004C                REQUIRE U0BAUD
    307          #endif
    308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#dmaCfg + 512
   \   000003   E0           MOVX    A,@DPTR
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   FE           MOV     R6,A
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FF           MOV     R7,A
   \   00000A   74..         MOV     A,#dmaCfg & 0xff
   \   00000C   2E           ADD     A,R6
   \   00000D   F582         MOV     DPL,A
   \   00000F   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000011   3F           ADDC    A,R7
   \   000012   F583         MOV     DPH,A
   \   000014   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInitDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpenDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRxAvailDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTIsrDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    309          
    310          /******************************************************************************
    311          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
        2      0   -> HalUARTInitDMA
      2      0   HalUARTInitDMA
      2     11   HalUARTIsrDMA
      0      9   HalUARTOpen
        0      9   -> HalUARTOpenDMA
      2      9   HalUARTOpenDMA
        2      0   -> osal_memset
      2      0   HalUARTPoll
        2      0   -> HalUARTPollDMA
      0     11   HalUARTPollDMA
        0     11   -> HalUARTIsrDMA
        0     11   -> HalUARTRxAvailDMA
      1     11   HalUARTRead
      0      0   HalUARTResume
      2     11   HalUARTRxAvailDMA
      0      0   HalUARTSuspend
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteDMA
      1     23   HalUARTWriteDMA
      0      9   Hal_UART_RxBufLen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??Subroutine13_0
       7  ??Subroutine14_0
       1  ?Subroutine0
       5  ?Subroutine1
       6  ?Subroutine10
       6  ?Subroutine11
      11  ?Subroutine12
       5  ?Subroutine2
       7  ?Subroutine3
      21  ?Subroutine4
       9  ?Subroutine5
      21  ?Subroutine6
       4  ?Subroutine7
       4  ?Subroutine8
      25  ?Subroutine9
       1  ADCCFG
       1  DMAARM
       1  DMAIRQ
       1  DMAREQ
       9  HalUARTInit
       6  HalUARTInit::?relay
     109  HalUARTInitDMA
       6  HalUARTInitDMA::?relay
      46  HalUARTIsrDMA
       6  HalUARTIsrDMA::?relay
      13  HalUARTOpen
       6  HalUARTOpen::?relay
     184  HalUARTOpenDMA
       6  HalUARTOpenDMA::?relay
      10  HalUARTPoll
       6  HalUARTPoll::?relay
     336  HalUARTPollDMA
       6  HalUARTPollDMA::?relay
      82  HalUARTRead
       6  HalUARTRead::?relay
      14  HalUARTResume
       6  HalUARTResume::?relay
      54  HalUARTRxAvailDMA
       6  HalUARTRxAvailDMA::?relay
      11  HalUARTSuspend
       6  HalUARTSuspend::?relay
      19  HalUARTWrite
       6  HalUARTWrite::?relay
     240  HalUARTWriteDMA
       6  HalUARTWriteDMA::?relay
      76  Hal_UART_RxBufLen
       6  Hal_UART_RxBufLen::?relay
       1  P0DIR
       1  P0IEN
       1  P0SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0GCR
       1  U0UCR
       1  _A_IEN0
       1  _A_P0
    1038  dmaCfg

 
 1 339 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
    16 bytes in segment SFR_AN
 1 038 bytes in segment XDATA_Z
 
 1 423 bytes of CODE  memory
     0 bytes of DATA  memory (+ 16 bytes shared)
 1 038 bytes of XDATA memory

Errors: none
Warnings: none
