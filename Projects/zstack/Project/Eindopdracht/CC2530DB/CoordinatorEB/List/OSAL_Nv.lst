###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                16/Mar/2016  14:36:08
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00008000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x42, 0x61, 0x72, 0x74,
#        0x20, 0x65, 0x61, 0x20, 0x48, 0x79, 0x6C, 0x63, 0x6F, 0x20, 0x20,
#        0x20}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\osal\mcu\cc2530\OSAL_Nv.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        xNV_RESTORE -D ZTOOL_P1 -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\OSAL_Nv.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\OSAL_Nv.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /******************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2013-08-07 10:27:19 -0700 (Wed, 07 Aug 2013) $
      4            Revision:       $Revision: 34901 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /******************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id
     43                is to be reserved for use by this module.
     44          ******************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          // In case pages 0-1 are ever used, define a null page value.
     73          #define OSAL_NV_PAGE_NULL       0
     74          
     75          // In case item Id 0 is ever used, define a null item value.
     76          #define OSAL_NV_ITEM_NULL       0
     77          
     78          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     79          
     80          #define OSAL_NV_PAGE_HDR_OFFSET 0
     81          
     82          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     83          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     84            ZCD_NV_NWKKEY,
     85            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     86            ZCD_NV_NWK_ALTERN_KEY_INFO,
     87          };
     88          
     89          /*********************************************************************
     90           * MACROS
     91           */
     92          
     93          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     94          
     95          #define OSAL_NV_DATA_SIZE( LEN )                      \
     96            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
     97                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
     98                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
     99          
    100          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    101            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    102                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    103            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    104          
    105          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    106            /* In order to recover from a page compaction that is interrupted,\
    107             * the logic in osal_nv_init() depends upon the following order:\
    108             * 1. State of the target of compaction is changed to ePgInUse.\
    109             * 2. Compacted page is erased.\
    110             */\
    111            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    112            erasePage( (COM_PG) ); \
    113            \
    114            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    115          )
    116          
    117          /*********************************************************************
    118           * TYPEDEFS
    119           */
    120          
    121          typedef struct
    122          {
    123            uint16 id;
    124            uint16 len;   // Enforce Flash-WORD size on len.
    125            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    126            uint16 stat;  // Item status.
    127          } osalNvHdr_t;
    128          // Struct member offsets.
    129          #define OSAL_NV_HDR_ID    0
    130          #define OSAL_NV_HDR_LEN   2
    131          #define OSAL_NV_HDR_CHK   4
    132          #define OSAL_NV_HDR_STAT  6
    133          
    134          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    135          #define OSAL_NV_HDR_SIZE  8
    136          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    137          
    138          typedef struct
    139          {
    140            uint16 active;
    141            uint16 inUse;
    142            uint16 xfer;
    143            uint16 spare;
    144          } osalNvPgHdr_t;
    145          // Struct member offsets.
    146          #define OSAL_NV_PG_ACTIVE 0
    147          #define OSAL_NV_PG_INUSE  2
    148          #define OSAL_NV_PG_XFER   4
    149          #define OSAL_NV_PG_SPARE  6
    150          
    151          #define OSAL_NV_PAGE_HDR_SIZE  8
    152          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    153          
    154          typedef enum
    155          {
    156            eNvXfer,
    157            eNvZero
    158          } eNvHdrEnum;
    159          
    160          typedef enum
    161          {
    162            ePgActive,
    163            ePgInUse,
    164            ePgXfer,
    165            ePgSpare
    166          } ePgHdrEnum;
    167          
    168          /*********************************************************************
    169           * GLOBAL VARIABLES
    170           */
    171          
    172          #ifndef OAD_KEEP_NV_PAGES
    173          // When NV pages are to remain intact during OAD download,
    174          // the image itself should not include NV pages.
    175          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    176          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    177          #pragma required=_nvBuf
    178          #endif // OAD_KEEP_NV_PAGES
    179          
    180          /*********************************************************************
    181           * LOCAL VARIABLES
    182           */
    183          
    184          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    186          
    187          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    191          
    192          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          
    195          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    198          
    199          /*********************************************************************
    200           * LOCAL FUNCTIONS
    201           */
    202          
    203          static uint8  initNV( void );
    204          
    205          static void   setPageUse( uint8 pg, uint8 inUse );
    206          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    207          static void   erasePage( uint8 pg );
    208          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    209          
    210          static uint16 findItem( uint16 id );
    211          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    212          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    213          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    214          
    215          static uint16 calcChkB( uint16 len, uint8 *buf );
    216          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    217          
    218          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    219          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    220          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    221          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    222          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    223          
    224          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    225          static uint8  hotItem(uint16 id);
    226          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    227          
    228          /*********************************************************************
    229           * @fn      initNV
    230           *
    231           * @brief   Initialize the NV flash pages.
    232           *
    233           * @param   none
    234           *
    235           * @return  TRUE
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          static uint8 initNV( void )
   \                     initNV:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    239            osalNvPgHdr_t pgHdr;
    240            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   75..00       MOV     ?V0,#0x0
    241            uint8 findDups = FALSE;
   \   00000D   7F00         MOV     R7,#0x0
    242            uint8 pg;
    243          
    244            pgRes = OSAL_NV_PAGE_NULL;
   \   00000F   90....       MOV     DPTR,#pgRes
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
    245          
    246            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000014   7E79         MOV     R6,#0x79
    247            {
    248              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000016                ; Setup parameters for call to function HalFlashRead
   \   000016   75..08       MOV     ?V2,#0x8
   \   000019   8F..         MOV     ?V3,R7
   \   00001B   78..         MOV     R0,#?V2
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   740A         MOV     A,#0xa
   \   000022   12....       LCALL   ?XSTACK_DISP102_8
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7B00         MOV     R3,#0x0
   \   000029   EE           MOV     A,R6
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
    249          
    250              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000033   7408         MOV     A,#0x8
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F4           CPL     A
   \   00003A   7003         JNZ     ??initNV_1
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F4           CPL     A
   \                     ??initNV_1:
   \   00003F   7040         JNZ     ??initNV_2
    251              {
    252                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000041   90....       MOV     DPTR,#pgRes
   \   000044   E0           MOVX    A,@DPTR
   \   000045   7004         JNZ     ??initNV_3
    253                {
    254                  pgRes = pg;
   \   000047   EE           MOV     A,R6
   \   000048   F0           MOVX    @DPTR,A
   \   000049   8046         SJMP    ??initNV_4
    255                }
    256                else
    257                {
    258                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   F0           MOVX    @DPTR,A
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E4           CLR     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E                ; Setup parameters for call to function HalFlashWrite
   \   00005E   75..01       MOV     ?V2,#0x1
   \   000061   78..         MOV     R0,#?V2
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   7402         MOV     A,#0x2
   \   000068   12....       LCALL   ?XSTACK_DISP102_8
   \   00006B   8E..         MOV     ?V2,R6
   \   00006D   7409         MOV     A,#0x9
   \   00006F   78..         MOV     R0,#?V2
   \   000071   12....       LCALL   ?S_SHL
   \   000074   FA           MOV     R2,A
   \   000075   AB..         MOV     R3,?V3
   \   000077   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
    259                }
    260              }
   \   00007F   8010         SJMP    ??initNV_4
    261              // An Xfer from this page was in progress.
    262              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000081   740C         MOV     A,#0xc
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F4           CPL     A
   \   000088   7003         JNZ     ??initNV_5
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F4           CPL     A
   \                     ??initNV_5:
   \   00008D   6002         JZ      ??initNV_4
    263              {
    264                oldPg = pg;
   \   00008F   8E..         MOV     ?V0,R6
    265              }
    266            }
   \                     ??initNV_4:
   \   000091   0E           INC     R6
   \   000092   EE           MOV     A,R6
   \   000093   C3           CLR     C
   \   000094   947F         SUBB    A,#0x7f
   \   000096   5003         JNC     $+5
   \   000098   02....       LJMP    ??initNV_0 & 0xFFFF
    267          
    268            // If a page compaction was interrupted before the old page was erased.
    269            if ( oldPg != OSAL_NV_PAGE_NULL )
   \   00009B   E5..         MOV     A,?V0
   \   00009D   90....       MOV     DPTR,#pgRes
   \   0000A0   601F         JZ      ??initNV_6
    270            {
    271              /* Interrupted compaction before the target of compaction was put in use;
    272               * so erase the target of compaction and start again.
    273               */
    274              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   600F         JZ      ??initNV_7
    275              {
    276                erasePage( pgRes );
   \   0000A5                ; Setup parameters for call to function erasePage
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    277                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   0000A9                ; Setup parameters for call to function compactPage
   \   0000A9   7A00         MOV     R2,#0x0
   \   0000AB   7B00         MOV     R3,#0x0
   \   0000AD   A9..         MOV     R1,?V0
   \   0000AF   12....       LCALL   `??compactPage::?relay`; Banked call to: compactPage
   \   0000B2   8014         SJMP    ??initNV_8
    278              }
    279              /* Interrupted compaction after the target of compaction was put in use,
    280               * but before the old page was erased; so erase it now and create a new reserve page.
    281               */
    282              else
    283              {
    284                erasePage( oldPg );
   \                     ??initNV_7:
   \   0000B4                ; Setup parameters for call to function erasePage
   \   0000B4   A9..         MOV     R1,?V0
   \   0000B6   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    285                pgRes = oldPg;
   \   0000B9   E5..         MOV     A,?V0
   \   0000BB   90....       MOV     DPTR,#pgRes
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   8007         SJMP    ??initNV_8
    286              }
    287            }
    288            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_6:
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   6004         JZ      ??initNV_8
    289            {
    290              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   0000C4                ; Setup parameters for call to function erasePage
   \   0000C4   F9           MOV     R1,A
   \   0000C5   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    291            }
    292            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    293             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    294             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    295             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    296             * size less the page header.
    297             */
    298          
    299            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   0000C8   7E79         MOV     R6,#0x79
    300            {
    301              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    302              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_9:
   \   0000CA                ; Setup parameters for call to function initPage
   \   0000CA   EF           MOV     A,R7
   \   0000CB   FC           MOV     R4,A
   \   0000CC   7A00         MOV     R2,#0x0
   \   0000CE   7B00         MOV     R3,#0x0
   \   0000D0   EE           MOV     A,R6
   \   0000D1   F9           MOV     R1,A
   \   0000D2   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
   \   0000D5   8B..         MOV     ?V3,R3
   \   0000D7   EA           MOV     A,R2
   \   0000D8   45..         ORL     A,?V3
   \   0000DA   6004         JZ      ??initNV_10
    303              {
    304                findDups = TRUE;
   \   0000DC   7F01         MOV     R7,#0x1
    305                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000DE   7E78         MOV     R6,#0x78
    306                continue;
    307              }
    308            }
   \                     ??initNV_10:
   \   0000E0   0E           INC     R6
   \   0000E1   EE           MOV     A,R6
   \   0000E2   C3           CLR     C
   \   0000E3   947F         SUBB    A,#0x7f
   \   0000E5   40E3         JC      ??initNV_9
    309          
    310            if (findDups)
   \   0000E7   EF           MOV     A,R7
   \   0000E8   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000EA   5014         JNC     ??initNV_11
    311            {
    312              // Final pass to calculate page lost after invalidating duplicate items.
    313              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000EC   7E79         MOV     R6,#0x79
    314              {
    315                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \                     ??initNV_12:
   \   0000EE                ; Setup parameters for call to function initPage
   \   0000EE   7C00         MOV     R4,#0x0
   \   0000F0   7A00         MOV     R2,#0x0
   \   0000F2   7B00         MOV     R3,#0x0
   \   0000F4   EE           MOV     A,R6
   \   0000F5   F9           MOV     R1,A
   \   0000F6   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
    316              }
   \   0000F9   0E           INC     R6
   \   0000FA   EE           MOV     A,R6
   \   0000FB   C3           CLR     C
   \   0000FC   947F         SUBB    A,#0x7f
   \   0000FE   40EE         JC      ??initNV_12
    317            }
    318          
    319            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_11:
   \   000100   90....       MOV     DPTR,#pgRes
   \   000103   E0           MOVX    A,@DPTR
   \   000104   7048         JNZ     ??initNV_13
    320            {
    321              uint8 idx, mostLost = 0;
   \   000106   7F00         MOV     R7,#0x0
    322          
    323              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   000108   7E00         MOV     R6,#0x0
   \   00010A   7A..         MOV     R2,#pgLost & 0xff
   \   00010C   7B..         MOV     R3,#(pgLost >> 8) & 0xff
    324              {
    325                // Is this the page that was compacted?
    326                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \                     ??initNV_14:
   \   00010E   8A82         MOV     DPL,R2
   \   000110   8B83         MOV     DPH,R3
   \   000112   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000115   74F8         MOV     A,#-0x8
   \   000117   6C           XRL     A,R4
   \   000118   7003         JNZ     ??initNV_15
   \   00011A   7407         MOV     A,#0x7
   \   00011C   6D           XRL     A,R5
   \                     ??initNV_15:
   \   00011D   7004         JNZ     ??initNV_16
    327                {
    328                  mostLost = idx;
   \   00011F   EE           MOV     A,R6
   \   000120   FF           MOV     R7,A
    329                  break;
   \   000121   8020         SJMP    ??initNV_17
    330                }
    331                /* This check is not expected to be necessary because the above test should always succeed
    332                 * with an early loop exit.
    333                 */
    334                else if (pgLost[idx] > pgLost[mostLost])
   \                     ??initNV_16:
   \   000123   EF           MOV     A,R7
   \   000124   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000127   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00012A   C3           CLR     C
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   9C           SUBB    A,R4
   \   00012D   A3           INC     DPTR
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   9D           SUBB    A,R5
   \   000130   5002         JNC     ??initNV_18
    335                {
    336                  mostLost = idx;
   \   000132   EE           MOV     A,R6
   \   000133   FF           MOV     R7,A
    337                }
    338              }
   \                     ??initNV_18:
   \   000134   0E           INC     R6
   \   000135   EA           MOV     A,R2
   \   000136   2402         ADD     A,#0x2
   \   000138   E4           CLR     A
   \   000139   3B           ADDC    A,R3
   \   00013A   0A           INC     R2
   \   00013B   0A           INC     R2
   \   00013C   FB           MOV     R3,A
   \   00013D   EE           MOV     A,R6
   \   00013E   C3           CLR     C
   \   00013F   9406         SUBB    A,#0x6
   \   000141   40CB         JC      ??initNV_14
    339          
    340              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_17:
   \   000143   7479         MOV     A,#0x79
   \   000145   2F           ADD     A,R7
   \   000146   90....       MOV     DPTR,#pgRes
   \   000149   F0           MOVX    @DPTR,A
    341              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   00014A                ; Setup parameters for call to function erasePage
   \   00014A   F9           MOV     R1,A
   \   00014B   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    342            }
    343          
    344            return TRUE;
   \                     ??initNV_13:
   \   00014E   7901         MOV     R1,#0x1
   \   000150   7410         MOV     A,#0x10
   \   000152   02....       LJMP    ?Subroutine0 & 0xFFFF
    345          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   74..         MOV     A,#pgLost & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET
    346          
    347          /*********************************************************************
    348           * @fn      setPageUse
    349           *
    350           * @brief   Set page header active/inUse state according to 'inUse'.
    351           *
    352           * @param   pg - Valid NV page to verify and init.
    353           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    354           *
    355           * @return  none
    356           */
    357          static void setPageUse( uint8 pg, uint8 inUse )
    358          {
    359            osalNvPgHdr_t pgHdr;
    360          
    361            pgHdr.active = OSAL_NV_ZEROED_ID;
    362          
    363            if ( inUse )
    364            {
    365              pgHdr.inUse = OSAL_NV_ZEROED_ID;
    366            }
    367            else
    368            {
    369              pgHdr.inUse = OSAL_NV_ERASED_ID;
    370            }
    371          
    372            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
    373          }
    374          
    375          /*********************************************************************
    376           * @fn      initPage
    377           *
    378           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    379           *
    380           * @param   pg - Valid NV page to verify and init.
    381           * @param   id - Valid NV item Id to use function as a "findItem".
    382           *               If set to NULL then just perform the page initialization.
    383           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    384           *                     left from a write that is interrupted by a reset/power-cycle.
    385           *                     FALSE otherwise.
    386           *
    387           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    388           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EA           MOV     A,R2
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   EB           MOV     A,R3
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   EC           MOV     A,R4
   \   000022   F0           MOVX    @DPTR,A
    392            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000023   75..08       MOV     ?V10,#0x8
   \   000026   75..00       MOV     ?V11,#0x0
    393            uint16 sz, lost = 0;
   \   000029   75..00       MOV     ?V14,#0x0
   \   00002C   75..00       MOV     ?V15,#0x0
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   E0           MOVX    A,@DPTR
   \   000036   25E0         ADD     A,0xE0 /* A   */
   \   000038   FE           MOV     R6,A
   \   000039   E4           CLR     A
   \   00003A   33           RLC     A
   \   00003B   FF           MOV     R7,A
   \   00003C   74..         MOV     A,#(pgLost + 14) & 0xff
   \   00003E   2E           ADD     A,R6
   \   00003F   F8           MOV     R0,A
   \   000040   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000042   3F           ADDC    A,R7
   \   000043   F9           MOV     R1,A
   \   000044   7417         MOV     A,#0x17
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000050   F5..         MOV     ?V0,A
   \   000052   75..00       MOV     ?V1,#0x0
   \   000055   7409         MOV     A,#0x9
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?S_SHL
   \   00005C   7415         MOV     A,#0x15
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   E5..         MOV     A,?V1
   \   000066   F0           MOVX    @DPTR,A
   \   000067   7403         MOV     A,#0x3
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   5480         ANL     A,#0x80
   \   000070   F5..         MOV     ?V9,A
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F5..         MOV     ?V4,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   547F         ANL     A,#0x7f
   \   00007E   F5..         MOV     ?V5,A
    394            osalNvHdr_t hdr;
    395          
    396            do
    397            {
    398              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   000080                ; Setup parameters for call to function HalFlashRead
   \   000080   75..08       MOV     ?V0,#0x8
   \   000083   75..00       MOV     ?V1,#0x0
   \   000086   78..         MOV     R0,#?V0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   740F         MOV     A,#0xf
   \   00008D   12....       LCALL   ?XSTACK_DISP102_8
   \   000090   AA..         MOV     R2,?V10
   \   000092   AB..         MOV     R3,?V11
   \   000094   7402         MOV     A,#0x2
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009E   7402         MOV     A,#0x2
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
    399          
    400              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   0000A3   740D         MOV     A,#0xd
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F4           CPL     A
   \   0000AA   7003         JNZ     ??initPage_1
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F4           CPL     A
   \                     ??initPage_1:
   \   0000AF   7003         JNZ     $+5
   \   0000B1   02....       LJMP    ??initPage_2 & 0xFFFF
    401              {
    402                break;
    403              }
    404          
    405              // Get the actual size in bytes which is the ceiling(hdr.len)
    406              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   0000B4   740F         MOV     A,#0xf
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000BC   4008         JC      ??initPage_3
   \   0000BE   75..FC       MOV     ?V0,#-0x4
   \   0000C1   75..FF       MOV     ?V1,#-0x1
   \   0000C4   8008         SJMP    ??initPage_4
   \                     ??initPage_3:
   \   0000C6   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000C9   F5..         MOV     ?V0,A
   \   0000CB   E9           MOV     A,R1
   \   0000CC   F5..         MOV     ?V1,A
    407          
    408              // A bad 'len' write has blown away the rest of the page.
    409              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??initPage_4:
   \   0000CE   74F8         MOV     A,#-0x8
   \   0000D0   C3           CLR     C
   \   0000D1   95..         SUBB    A,?V10
   \   0000D3   F8           MOV     R0,A
   \   0000D4   7407         MOV     A,#0x7
   \   0000D6   95..         SUBB    A,?V11
   \   0000D8   F9           MOV     R1,A
   \   0000D9   C3           CLR     C
   \   0000DA   E8           MOV     A,R0
   \   0000DB   95..         SUBB    A,?V0
   \   0000DD   E9           MOV     A,R1
   \   0000DE   95..         SUBB    A,?V1
   \   0000E0   5020         JNC     ??initPage_5
    410              {
    411                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   0000E2   E5..         MOV     A,?V14
   \   0000E4   2400         ADD     A,#0x0
   \   0000E6   E5..         MOV     A,?V15
   \   0000E8   3408         ADDC    A,#0x8
   \   0000EA   F5..         MOV     ?V15,A
   \   0000EC   C3           CLR     C
   \   0000ED   E5..         MOV     A,?V14
   \   0000EF   95..         SUBB    A,?V10
   \   0000F1   F5..         MOV     ?V14,A
   \   0000F3   E5..         MOV     A,?V15
   \   0000F5   95..         SUBB    A,?V11
   \   0000F7   F5..         MOV     ?V15,A
    412                offset = OSAL_NV_PAGE_SIZE;
   \   0000F9   75..00       MOV     ?V10,#0x0
   \   0000FC   75..08       MOV     ?V11,#0x8
    413                break;
   \   0000FF   02....       LJMP    ??initPage_2 & 0xFFFF
    414              }
    415          
    416              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_5:
   \   000102   E5..         MOV     A,?V10
   \   000104   2408         ADD     A,#0x8
   \   000106   F5..         MOV     ?V10,A
   \   000108   E4           CLR     A
   \   000109   35..         ADDC    A,?V11
   \   00010B   F5..         MOV     ?V11,A
    417          
    418              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   00010D   740D         MOV     A,#0xd
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000115   7003         JNZ     $+5
   \   000117   02....       LJMP    ??CrossCallReturnLabel_46 & 0xFFFF
    419              {
    420                /* This trick allows function to do double duty for findItem() without
    421                 * compromising its essential functionality at powerup initialization.
    422                 */
    423                if ( id != OSAL_NV_ITEM_NULL )
   \   00011A   7403         MOV     A,#0x3
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000122   6042         JZ      ??initPage_6
    424                {
    425                  /* This trick allows asking to find the old/transferred item in case
    426                   * of a successful new item write that gets interrupted before the
    427                   * old item can be zeroed out.
    428                   */
    429                  if ( (id & 0x7fff) == hdr.id )
   \   000124   740D         MOV     A,#0xd
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   65..         XRL     A,?V4
   \   00012C   7004         JNZ     ??initPage_7
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   65..         XRL     A,?V5
   \                     ??initPage_7:
   \   000132   6003         JZ      $+5
   \   000134   02....       LJMP    ??initPage_8 & 0xFFFF
    430                  {
    431                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    432                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   000137   7413         MOV     A,#0x13
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00013F   E5..         MOV     A,?V9
   \   000141   700F         JNZ     ??initPage_9
   \   000143   74FF         MOV     A,#-0x1
   \   000145   68           XRL     A,R0
   \   000146   7003         JNZ     ??initPage_10
   \   000148   74FF         MOV     A,#-0x1
   \   00014A   69           XRL     A,R1
   \                     ??initPage_10:
   \   00014B   6003         JZ      $+5
   \   00014D   02....       LJMP    ??initPage_8 & 0xFFFF
   \   000150   800D         SJMP    ??initPage_11
   \                     ??initPage_9:
   \   000152   74FF         MOV     A,#-0x1
   \   000154   68           XRL     A,R0
   \   000155   7003         JNZ     ??initPage_12
   \   000157   74FF         MOV     A,#-0x1
   \   000159   69           XRL     A,R1
   \                     ??initPage_12:
   \   00015A   7003         JNZ     $+5
   \   00015C   02....       LJMP    ??initPage_8 & 0xFFFF
    433                    {
    434                      return offset;
   \                     ??initPage_11:
   \   00015F   AA..         MOV     R2,?V10
   \   000161   AB..         MOV     R3,?V11
   \   000163   02....       LJMP    ??initPage_13 & 0xFFFF
    435                    }
    436                  }
    437                }
    438                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    439                else
    440                {
    441                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_6:
   \   000166                ; Setup parameters for call to function calcChkF
   \   000166   AA..         MOV     R2,?V10
   \   000168   AB..         MOV     R3,?V11
   \   00016A   85..82       MOV     DPL,?XSP + 0
   \   00016D   85..83       MOV     DPH,?XSP + 1
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F9           MOV     R1,A
   \   000172   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000175   8A..         MOV     ?V2,R2
   \   000177   8B..         MOV     ?V3,R3
   \   000179   A8..         MOV     R0,?V2
   \   00017B   A9..         MOV     R1,?V3
   \   00017D   7411         MOV     A,#0x11
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   E0           MOVX    A,@DPTR
   \   000183   68           XRL     A,R0
   \   000184   7003         JNZ     ??initPage_14
   \   000186   A3           INC     DPTR
   \   000187   E0           MOVX    A,@DPTR
   \   000188   69           XRL     A,R1
   \                     ??initPage_14:
   \   000189   6003         JZ      $+5
   \   00018B   02....       LJMP    ??initPage_15 & 0xFFFF
    442                  {
    443                    if ( findDups )
   \   00018E   7413         MOV     A,#0x13
   \   000190   12....       LCALL   ?XSTACK_DISP0_8
   \   000193   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000196   7402         MOV     A,#0x2
   \   000198   12....       LCALL   ?XSTACK_DISP0_8
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   7003         JNZ     $+5
   \   00019E   02....       LJMP    ??initPage_16 & 0xFFFF
    444                    {
    445                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   0001A1   74FF         MOV     A,#-0x1
   \   0001A3   68           XRL     A,R0
   \   0001A4   7003         JNZ     ??initPage_17
   \   0001A6   74FF         MOV     A,#-0x1
   \   0001A8   69           XRL     A,R1
   \                     ??initPage_17:
   \   0001A9   6003         JZ      $+5
   \   0001AB   02....       LJMP    ??initPage_8 & 0xFFFF
    446                      {
    447                        /* The trick of setting the MSB of the item Id causes the logic
    448                         * immediately above to return a valid page only if the header 'stat'
    449                         * indicates that it was the older item being transferred.
    450                         */
    451                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   0001AE                ; Setup parameters for call to function findItem
   \   0001AE   740D         MOV     A,#0xd
   \   0001B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   FA           MOV     R2,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   4480         ORL     A,#0x80
   \   0001B9   FB           MOV     R3,A
   \   0001BA   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   0001BD   8A..         MOV     ?V2,R2
   \   0001BF   8B..         MOV     ?V3,R3
   \   0001C1   A8..         MOV     R0,?V2
   \   0001C3   A9..         MOV     R1,?V3
    452          
    453                        if ( off != OSAL_NV_ITEM_NULL )
   \   0001C5   E8           MOV     A,R0
   \   0001C6   49           ORL     A,R1
   \   0001C7   7003         JNZ     $+5
   \   0001C9   02....       LJMP    ??initPage_8 & 0xFFFF
    454                        {
    455                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   0001CC   90....       MOV     DPTR,#findPg
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   C0E0         PUSH    A
   \   0001D2   7401         MOV     A,#0x1
   \   0001D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D7   D0E0         POP     A
   \   0001D9   F0           MOVX    @DPTR,A
   \   0001DA   E8           MOV     A,R0
   \   0001DB   24F8         ADD     A,#-0x8
   \   0001DD   F5..         MOV     ?V6,A
   \   0001DF   E9           MOV     A,R1
   \   0001E0   12....       LCALL   ?Subroutine39 & 0xFFFF
    456                        }
    457                      }
    458                    }
   \                     ??CrossCallReturnLabel_77:
   \   0001E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E6   7407         MOV     A,#0x7
   \   0001E8   12....       LCALL   ?XSTACK_DISP102_8
   \   0001EB   AA..         MOV     R2,?V6
   \   0001ED   AB..         MOV     R3,?V7
   \   0001EF   7403         MOV     A,#0x3
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   F9           MOV     R1,A
   \   0001F6   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0001F9   7402         MOV     A,#0x2
   \   0001FB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FE   7407         MOV     A,#0x7
   \   000200   12....       LCALL   ?XSTACK_DISP0_8
   \   000203   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000206   12....       LCALL   ?XSTACK_DISP0_8
   \   000209   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00020C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020F   7407         MOV     A,#0x7
   \   000211   12....       LCALL   ?XSTACK_DISP102_8
   \   000214   7402         MOV     A,#0x2
   \   000216   78..         MOV     R0,#?V6
   \   000218   12....       LCALL   ?US_SHR
   \   00021B   7403         MOV     A,#0x3
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   E0           MOVX    A,@DPTR
   \   000221   F5..         MOV     ?V12,A
   \   000223   7409         MOV     A,#0x9
   \   000225   78..         MOV     R0,#?V12
   \   000227   12....       LCALL   ?S_SHL
   \   00022A   E5..         MOV     A,?V6
   \   00022C   2400         ADD     A,#0x0
   \   00022E   FA           MOV     R2,A
   \   00022F   E5..         MOV     A,?V7
   \   000231   35..         ADDC    A,?V13
   \   000233   FB           MOV     R3,A
   \   000234   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000237   7402         MOV     A,#0x2
   \   000239   12....       LCALL   ?DEALLOC_XSTACK8
   \   00023C   7401         MOV     A,#0x1
   \   00023E   12....       LCALL   ?XSTACK_DISP0_8
   \   000241   E0           MOVX    A,@DPTR
   \   000242   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000245   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000248   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00024B   02....       LJMP    ??initPage_8 & 0xFFFF
    459                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    460                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_16:
   \   00024E   74FF         MOV     A,#-0x1
   \   000250   68           XRL     A,R0
   \   000251   7003         JNZ     ??initPage_18
   \   000253   74FF         MOV     A,#-0x1
   \   000255   69           XRL     A,R1
   \                     ??initPage_18:
   \   000256   7003         JNZ     $+5
   \   000258   02....       LJMP    ??initPage_8 & 0xFFFF
    461                    {
    462                      return OSAL_NV_ERASED_ID;
   \   00025B   7AFF         MOV     R2,#-0x1
   \   00025D   7BFF         MOV     R3,#-0x1
   \   00025F   02....       LJMP    ??initPage_13 & 0xFFFF
    463                    }
    464                  }
    465                  else
    466                  {
    467                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_15:
   \   000262   E5..         MOV     A,?V10
   \   000264   24F8         ADD     A,#-0x8
   \   000266   F5..         MOV     ?V6,A
   \   000268   E5..         MOV     A,?V11
   \   00026A   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00026D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000270   7407         MOV     A,#0x7
   \   000272   12....       LCALL   ?XSTACK_DISP102_8
   \   000275   AA..         MOV     R2,?V6
   \   000277   AB..         MOV     R3,?V7
   \   000279   7402         MOV     A,#0x2
   \   00027B   12....       LCALL   ?XSTACK_DISP0_8
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   F9           MOV     R1,A
   \   000280   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000283   7402         MOV     A,#0x2
   \   000285   12....       LCALL   ?DEALLOC_XSTACK8
   \   000288   7407         MOV     A,#0x7
   \   00028A   12....       LCALL   ?XSTACK_DISP0_8
   \   00028D   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000290   12....       LCALL   ?XSTACK_DISP0_8
   \   000293   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000296   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000299   7407         MOV     A,#0x7
   \   00029B   12....       LCALL   ?XSTACK_DISP102_8
   \   00029E   7402         MOV     A,#0x2
   \   0002A0   78..         MOV     R0,#?V6
   \   0002A2   12....       LCALL   ?US_SHR
   \   0002A5   7417         MOV     A,#0x17
   \   0002A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AA   E0           MOVX    A,@DPTR
   \   0002AB   25..         ADD     A,?V6
   \   0002AD   FA           MOV     R2,A
   \   0002AE   A3           INC     DPTR
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   35..         ADDC    A,?V7
   \   0002B2   FB           MOV     R3,A
   \   0002B3   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0002B6   7402         MOV     A,#0x2
   \   0002B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002BB   7417         MOV     A,#0x17
   \   0002BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C0   E0           MOVX    A,@DPTR
   \   0002C1   F8           MOV     R0,A
   \   0002C2   A3           INC     DPTR
   \   0002C3   E0           MOVX    A,@DPTR
   \   0002C4   F583         MOV     DPH,A
   \   0002C6   8882         MOV     DPL,R0
   \   0002C8   12....       LCALL   ?Subroutine27 & 0xFFFF
    468                    lost += (OSAL_NV_HDR_SIZE + sz);
    469                  }
    470                }
    471              }
    472              else
    473              {
    474                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??CrossCallReturnLabel_46:
   \   0002CB   E5..         MOV     A,?V0
   \   0002CD   2408         ADD     A,#0x8
   \   0002CF   F8           MOV     R0,A
   \   0002D0   E4           CLR     A
   \   0002D1   35..         ADDC    A,?V1
   \   0002D3   F9           MOV     R1,A
   \   0002D4   E5..         MOV     A,?V14
   \   0002D6   28           ADD     A,R0
   \   0002D7   F5..         MOV     ?V14,A
   \   0002D9   E5..         MOV     A,?V15
   \   0002DB   39           ADDC    A,R1
   \   0002DC   F5..         MOV     ?V15,A
    475              }
    476              offset += sz;
   \                     ??initPage_8:
   \   0002DE   E5..         MOV     A,?V10
   \   0002E0   25..         ADD     A,?V0
   \   0002E2   F5..         MOV     ?V10,A
   \   0002E4   E5..         MOV     A,?V11
   \   0002E6   35..         ADDC    A,?V1
   \   0002E8   F5..         MOV     ?V11,A
    477          
    478            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   0002EA   C3           CLR     C
   \   0002EB   E5..         MOV     A,?V10
   \   0002ED   94F8         SUBB    A,#-0x8
   \   0002EF   E5..         MOV     A,?V11
   \   0002F1   9407         SUBB    A,#0x7
   \   0002F3   5003         JNC     $+5
   \   0002F5   02....       LJMP    ??initPage_0 & 0xFFFF
    479          
    480            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   0002F8   74..         MOV     A,#(pgOff + 14) & 0xff
   \   0002FA   2E           ADD     A,R6
   \   0002FB   F582         MOV     DPL,A
   \   0002FD   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   0002FF   3F           ADDC    A,R7
   \   000300   F583         MOV     DPH,A
   \   000302   E5..         MOV     A,?V10
   \   000304   F0           MOVX    @DPTR,A
   \   000305   A3           INC     DPTR
   \   000306   E5..         MOV     A,?V11
   \   000308   F0           MOVX    @DPTR,A
    481            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \   000309   74..         MOV     A,#(pgLost + 14) & 0xff
   \   00030B   2E           ADD     A,R6
   \   00030C   F582         MOV     DPL,A
   \   00030E   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000310   3F           ADDC    A,R7
   \   000311   F583         MOV     DPH,A
   \   000313   E5..         MOV     A,?V14
   \   000315   F0           MOVX    @DPTR,A
   \   000316   A3           INC     DPTR
   \   000317   E5..         MOV     A,?V15
   \   000319   F0           MOVX    @DPTR,A
    482          
    483            return OSAL_NV_ITEM_NULL;
   \   00031A   7A00         MOV     R2,#0x0
   \   00031C   7B00         MOV     R3,#0x0
   \                     ??initPage_13:
   \   00031E   7419         MOV     A,#0x19
   \   000320                REQUIRE ?Subroutine1
   \   000320                ; // Fall through to label ?Subroutine1
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   34FF         ADDC    A,#-0x1
   \   000002   F5..         MOV     ?V7,A
   \   000004                ; Setup parameters for call to function HalFlashRead
   \   000004                ; Setup parameters for call to function HalFlashRead
   \   000004   75..08       MOV     ?V2,#0x8
   \   000007   75..00       MOV     ?V3,#0x0
   \   00000A   78..         MOV     R0,#?V2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V2
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V3
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   54FC         ANL     A,#0xfc
   \   000005   2408         ADD     A,#0x8
   \   000007   F5..         MOV     ?V2,A
   \   000009   E4           CLR     A
   \   00000A   39           ADDC    A,R1
   \   00000B   F5..         MOV     ?V3,A
   \   00000D   7405         MOV     A,#0x5
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function HalFlashWrite
   \   000004                ; Setup parameters for call to function HalFlashWrite
   \   000004   75..01       MOV     ?V12,#0x1
   \   000007   F5..         MOV     ?V13,A
   \   000009   78..         MOV     R0,#?V12
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EC           MOV     A,R4
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3D           ADDC    A,R5
   \   000006   F9           MOV     R1,A
   \   000007   E8           MOV     A,R0
   \   000008   54FC         ANL     A,#0xfc
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   C3           CLR     C
   \   000004   EC           MOV     A,R4
   \   000005   94FC         SUBB    A,#-0x4
   \   000007   ED           MOV     A,R5
   \   000008   94FF         SUBB    A,#-0x1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    485          
    486          /*********************************************************************
    487           * @fn      erasePage
    488           *
    489           * @brief   Erases a page in Flash.
    490           *
    491           * @param   pg - Valid NV page to erase.
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void erasePage( uint8 pg )
   \                     erasePage:
    496          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    497            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   12....       LCALL   `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    498          
    499            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000A   EE           MOV     A,R6
   \   00000B   2E           ADD     A,R6
   \   00000C   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00000F   7408         MOV     A,#0x8
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    500            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \   000015   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    501          }
   \   00001C                REQUIRE ?Subroutine2
   \   00001C                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
    502          
    503          /*********************************************************************
    504           * @fn      compactPage
    505           *
    506           * @brief   Compacts the page specified.
    507           *
    508           * @param   srcPg - Valid NV page to erase.
    509           * @param   skipId - Item Id to not compact.
    510           *
    511           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    512           *          FALSE otherwise.
    513           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    514           *          the risk of infinitely looping on HAL flash failure.
    515           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    516           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    517           *          NV_OPER_FAILED.
    518           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    519           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    520           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    521           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    522           *          or written, the last value written with a return value of SUCCESS can continue to be
    523           *          read successfully.
    524           *          If eventually HAL flash starts working again, all of the pages marked as
    525           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    526           *          deterministically clean-up one page pending compaction per power-cycle
    527           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    528           *          through such a scenario.
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V7,R1
   \   00000C   8A..         MOV     ?V8,R2
   \   00000E   8B..         MOV     ?V9,R3
    532            uint16 srcOff;
    533            uint8 rtrn;
    534          
    535            // To minimize code size, only check for a clean page here where it's absolutely required.
    536            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000010   75..00       MOV     ?V0,#0x0
   \   000013   75..00       MOV     ?V1,#0x0
    537            {
    538              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \                     ??compactPage_0:
   \   000016                ; Setup parameters for call to function HalFlashRead
   \   000016   75..01       MOV     ?V2,#0x1
   \   000019   75..00       MOV     ?V3,#0x0
   \   00001C   78..         MOV     R0,#?V2
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP102_8
   \   000026   AA..         MOV     R2,?V0
   \   000028   AB..         MOV     R3,?V1
   \   00002A   90....       MOV     DPTR,#pgRes
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
    539              if (rtrn != OSAL_NV_ERASED)
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F4           CPL     A
   \   00003F   600D         JZ      ??compactPage_1
    540              {
    541                erasePage(pgRes);
   \   000041                ; Setup parameters for call to function erasePage
   \   000041   90....       MOV     DPTR,#pgRes
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    542                return FALSE;
   \   000049   7900         MOV     R1,#0x0
   \   00004B   02....       LJMP    ??compactPage_2 & 0xFFFF
    543              }
    544            }
   \                     ??compactPage_1:
   \   00004E   05..         INC     ?V0
   \   000050   E5..         MOV     A,?V0
   \   000052   7002         JNZ     ??compactPage_3
   \   000054   05..         INC     ?V1
   \                     ??compactPage_3:
   \   000056   C3           CLR     C
   \   000057   E5..         MOV     A,?V1
   \   000059   9408         SUBB    A,#0x8
   \   00005B   40B9         JC      ??compactPage_0
    545          
    546            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   00005D   75..08       MOV     ?V0,#0x8
   \   000060   75..00       MOV     ?V1,#0x0
    547            rtrn = TRUE;
   \   000063   7401         MOV     A,#0x1
   \   000065   F0           MOVX    @DPTR,A
   \   000066   85....       MOV     ?V2,?V7
   \   000069   7409         MOV     A,#0x9
   \   00006B   78..         MOV     R0,#?V2
   \   00006D   12....       LCALL   ?S_SHL
   \   000070   85....       MOV     ?V13,?V3
    548          
    549            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
    550            {
    551              osalNvHdr_t hdr;
    552              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \                     ??compactPage_4:
   \   000073   90....       MOV     DPTR,#pgRes
   \   000076   E0           MOVX    A,@DPTR
   \   000077   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F5..         MOV     ?V2,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F5..         MOV     ?V3,A
    553          
    554              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000081                ; Setup parameters for call to function HalFlashRead
   \   000081   75..08       MOV     ?V4,#0x8
   \   000084   75..00       MOV     ?V5,#0x0
   \   000087   78..         MOV     R0,#?V4
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   7403         MOV     A,#0x3
   \   00008E   12....       LCALL   ?XSTACK_DISP102_8
   \   000091   AA..         MOV     R2,?V0
   \   000093   AB..         MOV     R3,?V1
   \   000095   A9..         MOV     R1,?V7
   \   000097   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009A   7402         MOV     A,#0x2
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
    555          
    556              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00009F   7401         MOV     A,#0x1
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F4           CPL     A
   \   0000A6   7003         JNZ     ??compactPage_5
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F4           CPL     A
   \                     ??compactPage_5:
   \   0000AB   7003         JNZ     $+5
   \   0000AD   02....       LJMP    ??compactPage_6 & 0xFFFF
    557              {
    558                break;
    559              }
    560          
    561              // Get the actual size in bytes which is the ceiling(hdr.len)
    562              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   0000B0   7403         MOV     A,#0x3
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000B8   4006         JC      ??compactPage_7
   \   0000BA   7EFC         MOV     R6,#-0x4
   \   0000BC   7FFF         MOV     R7,#-0x1
   \   0000BE   8006         SJMP    ??compactPage_8
   \                     ??compactPage_7:
   \   0000C0   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000C3   FE           MOV     R6,A
   \   0000C4   E9           MOV     A,R1
   \   0000C5   FF           MOV     R7,A
    563          
    564              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??compactPage_8:
   \   0000C6   74F8         MOV     A,#-0x8
   \   0000C8   C3           CLR     C
   \   0000C9   95..         SUBB    A,?V0
   \   0000CB   F8           MOV     R0,A
   \   0000CC   7407         MOV     A,#0x7
   \   0000CE   95..         SUBB    A,?V1
   \   0000D0   F9           MOV     R1,A
   \   0000D1   C3           CLR     C
   \   0000D2   E8           MOV     A,R0
   \   0000D3   9E           SUBB    A,R6
   \   0000D4   E9           MOV     A,R1
   \   0000D5   9F           SUBB    A,R7
   \   0000D6   5003         JNC     $+5
   \   0000D8   02....       LJMP    ??compactPage_6 & 0xFFFF
    565              {
    566                break;
    567              }
    568          
    569              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   0000DB   74F8         MOV     A,#-0x8
   \   0000DD   C3           CLR     C
   \   0000DE   95..         SUBB    A,?V2
   \   0000E0   F8           MOV     R0,A
   \   0000E1   7407         MOV     A,#0x7
   \   0000E3   95..         SUBB    A,?V3
   \   0000E5   F9           MOV     R1,A
   \   0000E6   C3           CLR     C
   \   0000E7   E8           MOV     A,R0
   \   0000E8   9E           SUBB    A,R6
   \   0000E9   E9           MOV     A,R1
   \   0000EA   9F           SUBB    A,R7
   \   0000EB   5003         JNC     $+5
   \   0000ED   02....       LJMP    ??compactPage_9 & 0xFFFF
    570              {
    571                rtrn = FALSE;
    572                break;
    573              }
    574          
    575              srcOff += OSAL_NV_HDR_SIZE;
   \   0000F0   E5..         MOV     A,?V0
   \   0000F2   2408         ADD     A,#0x8
   \   0000F4   F5..         MOV     ?V0,A
   \   0000F6   E4           CLR     A
   \   0000F7   35..         ADDC    A,?V1
   \   0000F9   F5..         MOV     ?V1,A
    576          
    577              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \   0000FB   7401         MOV     A,#0x1
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000103   7003         JNZ     $+5
   \   000105   02....       LJMP    ??compactPage_10 & 0xFFFF
   \   000108   7401         MOV     A,#0x1
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   65..         XRL     A,?V8
   \   000110   7004         JNZ     ??compactPage_11
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   65..         XRL     A,?V9
   \                     ??compactPage_11:
   \   000116   7003         JNZ     $+5
   \   000118   02....       LJMP    ??compactPage_10 & 0xFFFF
    578              {
    579                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   00011B                ; Setup parameters for call to function calcChkF
   \   00011B   AA..         MOV     R2,?V0
   \   00011D   AB..         MOV     R3,?V1
   \   00011F   A9..         MOV     R1,?V7
   \   000121   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000124   8A..         MOV     ?V4,R2
   \   000126   8B..         MOV     ?V5,R3
   \   000128   A8..         MOV     R0,?V4
   \   00012A   A9..         MOV     R1,?V5
   \   00012C   7405         MOV     A,#0x5
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   E0           MOVX    A,@DPTR
   \   000132   68           XRL     A,R0
   \   000133   7003         JNZ     ??compactPage_12
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   69           XRL     A,R1
   \                     ??compactPage_12:
   \   000138   6003         JZ      $+5
   \   00013A   02....       LJMP    ??compactPage_10 & 0xFFFF
    580                {
    581                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    582                   * OSAL_Nv interruptions caused by resets.
    583                   */
    584                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   00013D   7407         MOV     A,#0x7
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F4           CPL     A
   \   000144   7003         JNZ     ??compactPage_13
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   F4           CPL     A
   \                     ??compactPage_13:
   \   000149   7067         JNZ     ??compactPage_14
    585                  {
    586                    setItem( srcPg, srcOff, eNvXfer );
   \   00014B   E5..         MOV     A,?V0
   \   00014D   24F8         ADD     A,#-0x8
   \   00014F   F5..         MOV     ?V4,A
   \   000151   E5..         MOV     A,?V1
   \   000153   34FF         ADDC    A,#-0x1
   \   000155   F5..         MOV     ?V5,A
   \   000157                ; Setup parameters for call to function HalFlashRead
   \   000157   75..08       MOV     ?V10,#0x8
   \   00015A   75..00       MOV     ?V11,#0x0
   \   00015D   78..         MOV     R0,#?V10
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000162   740D         MOV     A,#0xd
   \   000164   12....       LCALL   ?XSTACK_DISP102_8
   \   000167   AA..         MOV     R2,?V4
   \   000169   AB..         MOV     R3,?V5
   \   00016B   A9..         MOV     R1,?V7
   \   00016D   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000170   7402         MOV     A,#0x2
   \   000172   12....       LCALL   ?DEALLOC_XSTACK8
   \   000175   7411         MOV     A,#0x11
   \   000177   12....       LCALL   ?XSTACK_DISP0_8
   \   00017A   E4           CLR     A
   \   00017B   F0           MOVX    @DPTR,A
   \   00017C   A3           INC     DPTR
   \   00017D   F0           MOVX    @DPTR,A
   \   00017E                ; Setup parameters for call to function HalFlashWrite
   \   00017E   75..01       MOV     ?V10,#0x1
   \   000181   78..         MOV     R0,#?V10
   \   000183   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000186   7411         MOV     A,#0x11
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   AC82         MOV     R4,DPL
   \   00018D   AD83         MOV     R5,DPH
   \   00018F   E5..         MOV     A,?V4
   \   000191   2404         ADD     A,#0x4
   \   000193   F5..         MOV     ?V4,A
   \   000195   5002         JNC     ??compactPage_15
   \   000197   05..         INC     ?V5
   \                     ??compactPage_15:
   \   000199   7402         MOV     A,#0x2
   \   00019B   78..         MOV     R0,#?V4
   \   00019D   12....       LCALL   ?US_SHR
   \   0001A0   E5..         MOV     A,?V4
   \   0001A2   2400         ADD     A,#0x0
   \   0001A4   FA           MOV     R2,A
   \   0001A5   E5..         MOV     A,?V5
   \   0001A7   35..         ADDC    A,?V13
   \   0001A9   FB           MOV     R3,A
   \   0001AA   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0001AD   7402         MOV     A,#0x2
   \   0001AF   12....       LCALL   ?DEALLOC_XSTACK8
    587                  }
    588          
    589                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_14:
   \   0001B2                ; Setup parameters for call to function writeItem
   \   0001B2   75..00       MOV     ?V4,#0x0
   \   0001B5   78..         MOV     R0,#?V4
   \   0001B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001BA   E4           CLR     A
   \   0001BB   F5..         MOV     ?V5,A
   \   0001BD   78..         MOV     R0,#?V4
   \   0001BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C2   7406         MOV     A,#0x6
   \   0001C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C7   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0001CA   7404         MOV     A,#0x4
   \   0001CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CF   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0001D2   90....       MOV     DPTR,#pgRes
   \   0001D5   E0           MOVX    A,@DPTR
   \   0001D6   F9           MOV     R1,A
   \   0001D7   12....       LCALL   `??writeItem::?relay`; Banked call to: writeItem
   \   0001DA   7403         MOV     A,#0x3
   \   0001DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001DF   E9           MOV     A,R1
   \   0001E0   7003         JNZ     $+5
   \   0001E2   02....       LJMP    ??compactPage_9 & 0xFFFF
    590                  {
    591                    dstOff += OSAL_NV_HDR_SIZE;
   \   0001E5   12....       LCALL   ?Subroutine37 & 0xFFFF
    592                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \                     ??CrossCallReturnLabel_72:
   \   0001E8                ; Setup parameters for call to function xferBuf
   \   0001E8   8E..         MOV     ?V4,R6
   \   0001EA   8F..         MOV     ?V5,R7
   \   0001EC   78..         MOV     R0,#?V4
   \   0001EE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F1   78..         MOV     R0,#?V2
   \   0001F3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F6   90....       MOV     DPTR,#pgRes
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   FC           MOV     R4,A
   \   0001FB   AA..         MOV     R2,?V0
   \   0001FD   AB..         MOV     R3,?V1
   \   0001FF   A9..         MOV     R1,?V7
   \   000201   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   000204   7404         MOV     A,#0x4
   \   000206   12....       LCALL   ?DEALLOC_XSTACK8
    593                    // Calculate and write the new checksum.
    594                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   000209                ; Setup parameters for call to function calcChkF
   \   000209   7403         MOV     A,#0x3
   \   00020B   12....       LCALL   ?XSTACK_DISP0_8
   \   00020E   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000211   90....       MOV     DPTR,#pgRes
   \   000214   E0           MOVX    A,@DPTR
   \   000215   F9           MOV     R1,A
   \   000216   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000219   7405         MOV     A,#0x5
   \   00021B   12....       LCALL   ?XSTACK_DISP0_8
   \   00021E   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000221   EA           MOV     A,R2
   \   000222   68           XRL     A,R0
   \   000223   7002         JNZ     ??compactPage_16
   \   000225   EB           MOV     A,R3
   \   000226   69           XRL     A,R1
   \                     ??compactPage_16:
   \   000227   6003         JZ      $+5
   \   000229   02....       LJMP    ??compactPage_9 & 0xFFFF
    595                    {
    596                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   00022C   7409         MOV     A,#0x9
   \   00022E   12....       LCALL   ?XSTACK_DISP0_8
   \   000231   E8           MOV     A,R0
   \   000232   F0           MOVX    @DPTR,A
   \   000233   A3           INC     DPTR
   \   000234   E9           MOV     A,R1
   \   000235   F0           MOVX    @DPTR,A
   \   000236   90....       MOV     DPTR,#pgRes
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   F5..         MOV     ?V6,A
   \   00023C   E5..         MOV     A,?V2
   \   00023E   24FC         ADD     A,#-0x4
   \   000240   F5..         MOV     ?V4,A
   \   000242   E5..         MOV     A,?V3
   \   000244   34FF         ADDC    A,#-0x1
   \   000246   F5..         MOV     ?V5,A
   \   000248                ; Setup parameters for call to function writeWordH
   \   000248   7409         MOV     A,#0x9
   \   00024A   12....       LCALL   ?XSTACK_DISP102_8
   \   00024D   AA..         MOV     R2,?V4
   \   00024F   AB..         MOV     R3,?V5
   \   000251   A9..         MOV     R1,?V6
   \   000253   12....       LCALL   `??writeWordH::?relay`; Banked call to: writeWordH
   \   000256                ; Setup parameters for call to function HalFlashRead
   \   000256   75..02       MOV     ?V10,#0x2
   \   000259   75..00       MOV     ?V11,#0x0
   \   00025C   78..         MOV     R0,#?V10
   \   00025E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000261   740B         MOV     A,#0xb
   \   000263   12....       LCALL   ?XSTACK_DISP102_8
   \   000266   AA..         MOV     R2,?V4
   \   000268   AB..         MOV     R3,?V5
   \   00026A   A9..         MOV     R1,?V6
   \   00026C   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00026F   7402         MOV     A,#0x2
   \   000271   12....       LCALL   ?DEALLOC_XSTACK8
   \   000274   7405         MOV     A,#0x5
   \   000276   12....       LCALL   ?XSTACK_DISP0_8
   \   000279   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00027C   7409         MOV     A,#0x9
   \   00027E   12....       LCALL   ?XSTACK_DISP0_8
   \   000281   E0           MOVX    A,@DPTR
   \   000282   68           XRL     A,R0
   \   000283   7003         JNZ     ??compactPage_17
   \   000285   A3           INC     DPTR
   \   000286   E0           MOVX    A,@DPTR
   \   000287   69           XRL     A,R1
   \                     ??compactPage_17:
   \   000288   706E         JNZ     ??compactPage_9
    597                      {
    598                        rtrn = FALSE;
    599                        break;
    600                      }
    601                      else
    602                      {
    603                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \   00028A   7401         MOV     A,#0x1
   \   00028C   12....       LCALL   ?XSTACK_DISP0_8
   \   00028F   12....       LCALL   ?Subroutine26 & 0xFFFF
    604                      }
    605                    }
    606                    else
    607                    {
    608                      rtrn = FALSE;
    609                      break;
    610                    }
    611                  }
   \                     ??CrossCallReturnLabel_41:
   \   000292   90....       MOV     DPTR,#pgRes
   \   000295   E0           MOVX    A,@DPTR
   \   000296   FB           MOV     R3,A
   \   000297   7A00         MOV     R2,#0x0
   \   000299   78..         MOV     R0,#hotIds & 0xff
   \   00029B   79..         MOV     R1,#(hotIds >> 8) & 0xff
   \                     ??compactPage_18:
   \   00029D   8882         MOV     DPL,R0
   \   00029F   8983         MOV     DPH,R1
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   6C           XRL     A,R4
   \   0002A3   7003         JNZ     ??compactPage_19
   \   0002A5   A3           INC     DPTR
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   6D           XRL     A,R5
   \                     ??compactPage_19:
   \   0002A8   600E         JZ      ??compactPage_20
   \   0002AA   0A           INC     R2
   \   0002AB   E8           MOV     A,R0
   \   0002AC   2402         ADD     A,#0x2
   \   0002AE   F8           MOV     R0,A
   \   0002AF   5001         JNC     ??compactPage_21
   \   0002B1   09           INC     R1
   \                     ??compactPage_21:
   \   0002B2   EA           MOV     A,R2
   \   0002B3   C3           CLR     C
   \   0002B4   9403         SUBB    A,#0x3
   \   0002B6   40E5         JC      ??compactPage_18
   \                     ??compactPage_20:
   \   0002B8   EA           MOV     A,R2
   \   0002B9   C3           CLR     C
   \   0002BA   9403         SUBB    A,#0x3
   \   0002BC   500F         JNC     ??compactPage_10
   \   0002BE   EA           MOV     A,R2
   \   0002BF   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0002C2   EB           MOV     A,R3
   \   0002C3   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0002C6   E5..         MOV     A,?V2
   \   0002C8   F0           MOVX    @DPTR,A
   \   0002C9   A3           INC     DPTR
   \   0002CA   E5..         MOV     A,?V3
   \   0002CC   F0           MOVX    @DPTR,A
    612                  else
    613                  {
    614                    rtrn = FALSE;
    615                    break;
    616                  }
    617                }
    618              }
    619          
    620              srcOff += sz;
   \                     ??compactPage_10:
   \   0002CD   E5..         MOV     A,?V0
   \   0002CF   2E           ADD     A,R6
   \   0002D0   F5..         MOV     ?V0,A
   \   0002D2   E5..         MOV     A,?V1
   \   0002D4   3F           ADDC    A,R7
   \   0002D5   F5..         MOV     ?V1,A
   \   0002D7   C3           CLR     C
   \   0002D8   E5..         MOV     A,?V0
   \   0002DA   94F8         SUBB    A,#-0x8
   \   0002DC   E5..         MOV     A,?V1
   \   0002DE   9407         SUBB    A,#0x7
   \   0002E0   5003         JNC     $+5
   \   0002E2   02....       LJMP    ??compactPage_4 & 0xFFFF
    621            }
    622          
    623            if (rtrn == FALSE)
   \                     ??compactPage_6:
   \   0002E5   85..82       MOV     DPL,?XSP + 0
   \   0002E8   85..83       MOV     DPH,?XSP + 1
   \   0002EB   E0           MOVX    A,@DPTR
   \   0002EC   7014         JNZ     ??compactPage_22
    624            {
    625              erasePage(pgRes);
   \                     ??compactPage_23:
   \   0002EE                ; Setup parameters for call to function erasePage
   \   0002EE   90....       MOV     DPTR,#pgRes
   \   0002F1   E0           MOVX    A,@DPTR
   \   0002F2   F9           MOV     R1,A
   \   0002F3   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   0002F6   8045         SJMP    ??compactPage_24
    626            }
   \                     ??compactPage_9:
   \   0002F8   85..82       MOV     DPL,?XSP + 0
   \   0002FB   85..83       MOV     DPH,?XSP + 1
   \   0002FE   E4           CLR     A
   \   0002FF   F0           MOVX    @DPTR,A
   \   000300   80EC         SJMP    ??compactPage_23
    627            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_22:
   \   000302   E5..         MOV     A,?V8
   \   000304   45..         ORL     A,?V9
   \   000306   7035         JNZ     ??compactPage_24
    628            {
    629              COMPACT_PAGE_CLEANUP(srcPg);
   \   000308   7401         MOV     A,#0x1
   \   00030A   12....       LCALL   ?XSTACK_DISP0_8
   \   00030D   E4           CLR     A
   \   00030E   F0           MOVX    @DPTR,A
   \   00030F   A3           INC     DPTR
   \   000310   F0           MOVX    @DPTR,A
   \   000311   7403         MOV     A,#0x3
   \   000313   12....       LCALL   ?XSTACK_DISP0_8
   \   000316   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000319   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00031C   7403         MOV     A,#0x3
   \   00031E   12....       LCALL   ?XSTACK_DISP102_8
   \   000321   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000324   12....       LCALL   ?S_SHL
   \   000327   FA           MOV     R2,A
   \   000328   AB..         MOV     R3,?V1
   \   00032A   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   00032D   7402         MOV     A,#0x2
   \   00032F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000332                ; Setup parameters for call to function erasePage
   \   000332   A9..         MOV     R1,?V7
   \   000334   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   000337   E5..         MOV     A,?V7
   \   000339   90....       MOV     DPTR,#pgRes
   \   00033C   F0           MOVX    @DPTR,A
    630            }
    631            // else invoking function must cleanup.
    632          
    633            return rtrn;
   \                     ??compactPage_24:
   \   00033D   85..82       MOV     DPL,?XSP + 0
   \   000340   85..83       MOV     DPH,?XSP + 1
   \   000343   E0           MOVX    A,@DPTR
   \   000344   F9           MOV     R1,A
   \                     ??compactPage_2:
   \   000345   7413         MOV     A,#0x13
   \   000347                REQUIRE ?Subroutine3
   \   000347                ; // Fall through to label ?Subroutine3
    634          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV     R7,#0xe
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E5..         MOV     A,?V2
   \   000002   2408         ADD     A,#0x8
   \   000004   F5..         MOV     ?V2,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V3
   \   000009   F5..         MOV     ?V3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   AA..         MOV     R2,?V2
   \   000005   AB..         MOV     R3,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F8           MOV     R0,A
   \   000001   74..         MOV     A,#hotPg & 0xff
   \   000003   28           ADD     A,R0
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   34..         ADDC    A,#(hotPg >> 8) & 0xff
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   28           ADD     A,R0
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   F9           MOV     R1,A
   \   000007   74..         MOV     A,#hotOff & 0xff
   \   000009   28           ADD     A,R0
   \   00000A   F582         MOV     DPL,A
   \   00000C   74..         MOV     A,#(hotOff >> 8) & 0xff
   \   00000E   39           ADDC    A,R1
   \   00000F   F583         MOV     DPH,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    635          
    636          /*********************************************************************
    637           * @fn      findItem
    638           *
    639           * @brief   Find an item Id in NV and return the page and offset to its data.
    640           *
    641           * @param   id - Valid NV item Id.
    642           *
    643           * @return  Offset of data corresponding to item Id, if found;
    644           *          otherwise OSAL_NV_ITEM_NULL.
    645           *
    646           *          The page containing the item, if found;
    647           *          otherwise no valid assignment made - left equal to item Id.
    648           *
    649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          static uint16 findItem( uint16 id )
   \                     findItem:
    651          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   8003         SJMP    ??findItem_0
    652            uint16 off;
    653            uint8 pg;
    654          
    655            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    656            {
    657              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    658              {
    659                findPg = pg;
    660                return off;
    661              }
    662            }
    663          
    664            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    665            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    666            {
    667              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV     A,#-0x80
   \   00000C   4F           ORL     A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV     R7,A
    668            }
   \   00000E   75..79       MOV     ?V0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV     R4,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   A9..         MOV     R1,?V0
   \   000019   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   6008         JZ      ??findItem_3
   \   000020   E5..         MOV     A,?V0
   \   000022   90....       MOV     DPTR,#findPg
   \   000025   F0           MOVX    @DPTR,A
   \   000026   8015         SJMP    ??findItem_4
   \                     ??findItem_3:
   \   000028   05..         INC     ?V0
   \   00002A   E5..         MOV     A,?V0
   \   00002C   C3           CLR     C
   \   00002D   947F         SUBB    A,#0x7f
   \   00002F   40E0         JC      ??findItem_2
   \   000031   EF           MOV     A,R7
   \   000032   5480         ANL     A,#0x80
   \   000034   60D4         JZ      ??findItem_1
    669            else
    670            {
    671              findPg = OSAL_NV_PAGE_NULL;
   \   000036   90....       MOV     DPTR,#findPg
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
    672              return OSAL_NV_ITEM_NULL;
   \   00003B   FA           MOV     R2,A
   \   00003C   FB           MOV     R3,A
    673            }
   \                     ??findItem_4:
   \   00003D   02....       LJMP    ??Subroutine48_0 & 0xFFFF
    674          }
    675          
    676          /*********************************************************************
    677           * @fn      initItem
    678           *
    679           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    680           *
    681           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    682           *                 (i.e. if invoked from osal_nv_item_init() ).
    683           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    684           *                 is ok to use as a return value of the page number to be cleaned with
    685           *                 COMPACT_PAGE_CLEANUP().
    686           *                 (i.e. if invoked from osal_nv_write() ).
    687           * @param   id  - Valid NV item Id.
    688           * @param   len - Item data length.
    689           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    690           *
    691           * @return  The OSAL Nv page number if item write and read back checksums ok;
    692           *          OSAL_NV_PAGE_NULL otherwise.
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    695          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V4,R1
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   8C..         MOV     ?V0,R4
   \   000012   8D..         MOV     ?V1,R5
    696            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000014   C3           CLR     C
   \   000015   EC           MOV     A,R4
   \   000016   94F4         SUBB    A,#-0xc
   \   000018   ED           MOV     A,R5
   \   000019   94FF         SUBB    A,#-0x1
   \   00001B   400E         JC      ??initItem_0
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   74FC         MOV     A,#-0x4
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   74FF         MOV     A,#-0x1
   \   000029   8019         SJMP    ??initItem_1
   \                     ??initItem_0:
   \   00002B   EC           MOV     A,R4
   \   00002C   2403         ADD     A,#0x3
   \   00002E   F8           MOV     R0,A
   \   00002F   E4           CLR     A
   \   000030   35..         ADDC    A,?V1
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   54FC         ANL     A,#0xfc
   \   000036   2408         ADD     A,#0x8
   \   000038   5001         JNC     ??initItem_2
   \   00003A   09           INC     R1
   \                     ??initItem_2:
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   E9           MOV     A,R1
   \                     ??initItem_1:
   \   000044   F0           MOVX    @DPTR,A
    697            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \   000045   7F00         MOV     R7,#0x0
    698            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000047   7C06         MOV     R4,#0x6
    699            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000049   90....       MOV     DPTR,#pgRes
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   04           INC     A
   \   00004E   FE           MOV     R6,A
    700          
    701            do {
    702              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_3:
   \   00004F   EE           MOV     A,R6
   \   000050   C3           CLR     C
   \   000051   947F         SUBB    A,#0x7f
   \   000053   4002         JC      ??initItem_4
    703              {
    704                pg = OSAL_NV_PAGE_BEG;
   \   000055   7E79         MOV     R6,#0x79
    705              }
    706              if ( pg != pgRes )
   \                     ??initItem_4:
   \   000057   90....       MOV     DPTR,#pgRes
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6E           XRL     A,R6
   \   00005C   6027         JZ      ??initItem_5
    707              {
    708                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   00005E   7487         MOV     A,#-0x79
   \   000060   2E           ADD     A,R6
   \   000061   F8           MOV     R0,A
    709                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   000062   12....       LCALL   ?Subroutine31 & 0xFFFF
    710                {
    711                  break;
    712                }
    713              }
   \                     ??CrossCallReturnLabel_60:
   \   000065   74..         MOV     A,#pgOff & 0xff
   \   000067   28           ADD     A,R0
   \   000068   F582         MOV     DPL,A
   \   00006A   74..         MOV     A,#(pgOff >> 8) & 0xff
   \   00006C   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00006F   E4           CLR     A
   \   000070   C3           CLR     C
   \   000071   9A           SUBB    A,R2
   \   000072   FA           MOV     R2,A
   \   000073   7408         MOV     A,#0x8
   \   000075   9B           SUBB    A,R3
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   2A           ADD     A,R2
   \   00007C   FA           MOV     R2,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   3B           ADDC    A,R3
   \   000080   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000083   5008         JNC     ??initItem_6
    714              pg++;
   \                     ??initItem_5:
   \   000085   0E           INC     R6
    715            } while (--cnt);
   \   000086   1C           DEC     R4
   \   000087   EC           MOV     A,R4
   \   000088   70C5         JNZ     ??initItem_3
   \   00008A   02....       LJMP    ??initItem_7 & 0xFFFF
    716          
    717            if (cnt)
   \                     ??initItem_6:
   \   00008D   EC           MOV     A,R4
   \   00008E   7003         JNZ     $+5
   \   000090   02....       LJMP    ??initItem_7 & 0xFFFF
   \   000093   7428         MOV     A,#0x28
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F5..         MOV     ?V6,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F5..         MOV     ?V7,A
    718            {
    719              // Item fits if an old page is compacted.
    720              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   00009F   EE           MOV     A,R6
   \   0000A0   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000A3   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000A6   FA           MOV     R2,A
   \   0000A7   7408         MOV     A,#0x8
   \   0000A9   99           SUBB    A,R1
   \   0000AA   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000AD   4003         JC      $+5
   \   0000AF   02....       LJMP    ??initItem_8 & 0xFFFF
    721              {
    722                osalNvPgHdr_t pgHdr;
    723          
    724                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    725                 * OSAL_Nv interruptions caused by resets.
    726                 */
    727                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   0000B2                ; Setup parameters for call to function HalFlashRead
   \   0000B2   75..08       MOV     ?V8,#0x8
   \   0000B5   8F..         MOV     ?V9,R7
   \   0000B7   78..         MOV     R0,#?V8
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   7410         MOV     A,#0x10
   \   0000BE   12....       LCALL   ?XSTACK_DISP102_8
   \   0000C1   7A00         MOV     R2,#0x0
   \   0000C3   7B00         MOV     R3,#0x0
   \   0000C5   EE           MOV     A,R6
   \   0000C6   F9           MOV     R1,A
   \   0000C7   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000CA   7402         MOV     A,#0x2
   \   0000CC   12....       LCALL   ?DEALLOC_XSTACK8
    728                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   0000CF   7412         MOV     A,#0x12
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F4           CPL     A
   \   0000D6   7003         JNZ     ??initItem_9
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F4           CPL     A
   \                     ??initItem_9:
   \   0000DB   705B         JNZ     ??initItem_10
    729                {
    730                  // Mark the old page as being in process of compaction.
    731                  sz = OSAL_NV_ZEROED_ID;
   \   0000DD   85..82       MOV     DPL,?XSP + 0
   \   0000E0   85..83       MOV     DPH,?XSP + 1
   \   0000E3   E4           CLR     A
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000E9   C0E0         PUSH    A
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F0   D0E0         POP     A
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   7401         MOV     A,#0x1
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   C0E0         PUSH    A
   \   0000FB   7403         MOV     A,#0x3
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   D0E0         POP     A
   \   000102   F0           MOVX    @DPTR,A
   \   000103   7404         MOV     A,#0x4
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   74FF         MOV     A,#-0x1
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   7405         MOV     A,#0x5
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   74FF         MOV     A,#-0x1
   \   000112   F0           MOVX    @DPTR,A
   \   000113                ; Setup parameters for call to function HalFlashWrite
   \   000113   75..01       MOV     ?V8,#0x1
   \   000116   78..         MOV     R0,#?V8
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   7404         MOV     A,#0x4
   \   00011D   12....       LCALL   ?XSTACK_DISP102_8
   \   000120   8E..         MOV     ?V8,R6
   \   000122   7409         MOV     A,#0x9
   \   000124   78..         MOV     R0,#?V8
   \   000126   12....       LCALL   ?S_SHL
   \   000129   2401         ADD     A,#0x1
   \   00012B   FA           MOV     R2,A
   \   00012C   E4           CLR     A
   \   00012D   35..         ADDC    A,?V9
   \   00012F   FB           MOV     R3,A
   \   000130   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000133   7402         MOV     A,#0x2
   \   000135   12....       LCALL   ?DEALLOC_XSTACK8
    732                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
    733                }
    734          
    735                /* First the old page is compacted, then the new item will be the last one written to what
    736                 * had been the reserved page.
    737                 */
    738                if (compactPage( pg, id ))
   \                     ??initItem_10:
   \   000138                ; Setup parameters for call to function compactPage
   \   000138   AA..         MOV     R2,?V2
   \   00013A   AB..         MOV     R3,?V3
   \   00013C   EE           MOV     A,R6
   \   00013D   F9           MOV     R1,A
   \   00013E   12....       LCALL   `??compactPage::?relay`; Banked call to: compactPage
   \   000141   E9           MOV     A,R1
   \   000142   7003         JNZ     $+5
   \   000144   02....       LJMP    ??initItem_7 & 0xFFFF
    739                {
    740                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   000147                ; Setup parameters for call to function writeItem
   \   000147   E5..         MOV     A,?V4
   \   000149   F5..         MOV     ?V5,A
   \   00014B   78..         MOV     R0,#?V5
   \   00014D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000150   78..         MOV     R0,#?V6
   \   000152   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000155   AC..         MOV     R4,?V0
   \   000157   AD..         MOV     R5,?V1
   \   000159   AA..         MOV     R2,?V2
   \   00015B   AB..         MOV     R3,?V3
   \   00015D   90....       MOV     DPTR,#pgRes
   \   000160   E0           MOVX    A,@DPTR
   \   000161   F9           MOV     R1,A
   \   000162   12....       LCALL   `??writeItem::?relay`; Banked call to: writeItem
   \   000165   7403         MOV     A,#0x3
   \   000167   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016A   E9           MOV     A,R1
   \   00016B   6005         JZ      ??initItem_11
    741                  {
    742                    rtrn = pgRes;
   \   00016D   90....       MOV     DPTR,#pgRes
   \   000170   E0           MOVX    A,@DPTR
   \   000171   FF           MOV     R7,A
    743                  }
    744          
    745                  if ( flag == FALSE )
   \                     ??initItem_11:
   \   000172   E5..         MOV     A,?V4
   \   000174   7009         JNZ     ??initItem_12
    746                  {
    747                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    748                     * the old page to be cleaned up.
    749                     */
    750                    *(uint8 *)buf = pg;
   \   000176   EE           MOV     A,R6
   \   000177   85..82       MOV     DPL,?V6
   \   00017A   85..83       MOV     DPH,?V7
   \   00017D   8033         SJMP    ??initItem_13
    751                  }
    752                  else
    753                  {
    754                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    755                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    756                     */
    757                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_12:
   \   00017F   7406         MOV     A,#0x6
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   E4           CLR     A
   \   000185   F0           MOVX    @DPTR,A
   \   000186   A3           INC     DPTR
   \   000187   F0           MOVX    @DPTR,A
   \   000188   7408         MOV     A,#0x8
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000190   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000193   7408         MOV     A,#0x8
   \   000195   12....       LCALL   ?XSTACK_DISP102_8
   \   000198   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00019B   12....       LCALL   ?S_SHL
   \   00019E   FA           MOV     R2,A
   \   00019F   AB..         MOV     R3,?V1
   \   0001A1   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0001A4   7402         MOV     A,#0x2
   \   0001A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A9                ; Setup parameters for call to function erasePage
   \   0001A9   EE           MOV     A,R6
   \   0001AA   F9           MOV     R1,A
   \   0001AB   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   0001AE   EE           MOV     A,R6
   \   0001AF   90....       MOV     DPTR,#pgRes
   \                     ??initItem_13:
   \   0001B2   F0           MOVX    @DPTR,A
   \   0001B3   8023         SJMP    ??initItem_7
    758                  }
    759                }
    760              }
    761              else
    762              {
    763                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_8:
   \   0001B5                ; Setup parameters for call to function writeItem
   \   0001B5   E5..         MOV     A,?V4
   \   0001B7   F5..         MOV     ?V5,A
   \   0001B9   78..         MOV     R0,#?V5
   \   0001BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001BE   78..         MOV     R0,#?V6
   \   0001C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C3   AC..         MOV     R4,?V0
   \   0001C5   AA..         MOV     R2,?V2
   \   0001C7   AB..         MOV     R3,?V3
   \   0001C9   EE           MOV     A,R6
   \   0001CA   F9           MOV     R1,A
   \   0001CB   12....       LCALL   `??writeItem::?relay`; Banked call to: writeItem
   \   0001CE   7403         MOV     A,#0x3
   \   0001D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D3   E9           MOV     A,R1
   \   0001D4   6002         JZ      ??initItem_7
    764                {
    765                  rtrn = pg;
   \   0001D6   EE           MOV     A,R6
   \   0001D7   FF           MOV     R7,A
    766                }
    767              }
    768            }
    769          
    770            return rtrn;
   \                     ??initItem_7:
   \   0001D8   EF           MOV     A,R7
   \   0001D9   F9           MOV     R1,A
   \   0001DA   7416         MOV     A,#0x16
   \   0001DC                REQUIRE ?Subroutine4
   \   0001DC                ; // Fall through to label ?Subroutine4
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0A         MOV     R7,#0xa
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   FB           MOV     R3,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00000A   C3           CLR     C
   \   00000B   EA           MOV     A,R2
   \   00000C   98           SUBB    A,R0
   \   00000D   EB           MOV     A,R3
   \   00000E   99           SUBB    A,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   E4           CLR     A
   \   000004   C3           CLR     C
   \   000005   98           SUBB    A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0
    772          
    773          /*********************************************************************
    774           * @fn      setItem
    775           *
    776           * @brief   Set an item Id or status to mark its state.
    777           *
    778           * @param   pg - Valid NV page.
    779           * @param   offset - Valid offset into the page of the item data - the header
    780           *                   offset is calculated from this.
    781           * @param   stat - Valid enum value for the item status.
    782           *
    783           * @return  none
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8C..         MOV     ?V0,R4
    787            osalNvHdr_t hdr;
    788          
    789            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV     A,R2
   \   00000F   24F8         ADD     A,#-0x8
   \   000011   F5..         MOV     ?V2,A
   \   000013   EB           MOV     A,R3
   \   000014   34FF         ADDC    A,#-0x1
   \   000016   F5..         MOV     ?V3,A
    790            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV     ?V4,#0x8
   \   00001B   75..00       MOV     ?V5,#0x0
   \   00001E   78..         MOV     R0,#?V4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP102_8
   \   000028   AA..         MOV     R2,?V2
   \   00002A   AB..         MOV     R3,?V3
   \   00002C   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
    791          
    792            if ( stat == eNvXfer )
   \   000034   85....       MOV     ?V4,?V1
   \   000037   7409         MOV     A,#0x9
   \   000039   78..         MOV     R0,#?V4
   \   00003B   12....       LCALL   ?S_SHL
   \   00003E   AB..         MOV     R3,?V5
   \   000040   E5..         MOV     A,?V0
   \   000042   7038         JNZ     ??setItem_0
    793            {
    794              hdr.stat = OSAL_NV_ACTIVE;
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7406         MOV     A,#0x6
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   AC82         MOV     R4,DPL
   \   000056   AD83         MOV     R5,DPH
   \   000058   E5..         MOV     A,?V2
   \   00005A   2404         ADD     A,#0x4
   \   00005C   F5..         MOV     ?V2,A
   \   00005E   5002         JNC     ??setItem_1
   \   000060   05..         INC     ?V3
   \                     ??setItem_1:
   \   000062   7402         MOV     A,#0x2
   \   000064   78..         MOV     R0,#?V2
   \   000066   12....       LCALL   ?US_SHR
   \   000069   E5..         MOV     A,?V2
   \   00006B   2400         ADD     A,#0x0
   \   00006D   FA           MOV     R2,A
   \   00006E   E5..         MOV     A,?V3
   \   000070   3B           ADDC    A,R3
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
    795              /* Write status to flash. Total of 4 bytes written to Flash 
    796               * ( 2 bytes of checksum and 2 bytes of status) 
    797               */
    798              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
    799            }
   \   00007A   8047         SJMP    ??CrossCallReturnLabel_97
    800            else // if ( stat == eNvZero )
    801            {
    802              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    803                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000084   12....       LCALL   ?Subroutine35 & 0xFFFF
    804              hdr.id = 0;
   \                     ??CrossCallReturnLabel_67:
   \   000087   85..82       MOV     DPL,?XSP + 0
   \   00008A   85..83       MOV     DPH,?XSP + 1
   \   00008D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   7402         MOV     A,#0x2
   \   000095   12....       LCALL   ?XSTACK_DISP102_8
   \   000098   7402         MOV     A,#0x2
   \   00009A   78..         MOV     R0,#?V2
   \   00009C   12....       LCALL   ?US_SHR
   \   00009F   E5..         MOV     A,?V2
   \   0000A1   2400         ADD     A,#0x0
   \   0000A3   FA           MOV     R2,A
   \   0000A4   E5..         MOV     A,?V3
   \   0000A6   3B           ADDC    A,R3
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0000AB   7402         MOV     A,#0x2
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
    805              writeWord( pg, offset, (uint8 *)(&hdr) );
    806              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   0000B0   A8..         MOV     R0,?V1
   \   0000B2   E8           MOV     A,R0
   \   0000B3   28           ADD     A,R0
   \   0000B4   F8           MOV     R0,A
   \   0000B5   E4           CLR     A
   \   0000B6   33           RLC     A
   \   0000B7   F9           MOV     R1,A
   \   0000B8   74..         MOV     A,#(pgLost + 14) & 0xff
   \   0000BA   28           ADD     A,R0
   \   0000BB   F582         MOV     DPL,A
   \   0000BD   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   0000BF   39           ADDC    A,R1
   \   0000C0   12....       LCALL   ?Subroutine22 & 0xFFFF
    807            }
    808          }
   \                     ??CrossCallReturnLabel_97:
   \   0000C3   7408         MOV     A,#0x8
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C8                REQUIRE ?Subroutine5
   \   0000C8                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2E           ADD     A,R6
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3F           ADDC    A,R7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function HalFlashWrite
   \   000004                ; Setup parameters for call to function HalFlashWrite
   \   000004   75..01       MOV     ?V4,#0x1
   \   000007   F5..         MOV     ?V5,A
   \   000009   78..         MOV     R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   54FC         ANL     A,#0xfc
   \   000002   2408         ADD     A,#0x8
   \   000004   FE           MOV     R6,A
   \   000005   E4           CLR     A
   \   000006   39           ADDC    A,R1
   \   000007   FF           MOV     R7,A
   \   000008   22           RET
    809          
    810          /*********************************************************************
    811           * @fn      setChk
    812           *
    813           * @brief   Set the item header checksum given the data buffer offset.
    814           *
    815           * @param   pg - Valid NV page.
    816           * @param   offset - Valid offset into the page of the item data - the header
    817           *                   offset is calculated from this.
    818           * @param   chk - The checksum to set.
    819           *
    820           * @return  The checksum read back.
    821           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    822          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    823          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0,R1
   \   000017   EA           MOV     A,R2
   \   000018   FE           MOV     R6,A
   \   000019   EB           MOV     A,R3
   \   00001A   FF           MOV     R7,A
    824            offset -= OSAL_NV_WORD_SIZE;
   \   00001B   EE           MOV     A,R6
   \   00001C   24FC         ADD     A,#-0x4
   \   00001E   FE           MOV     R6,A
   \   00001F   EF           MOV     A,R7
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   FF           MOV     R7,A
    825            writeWordH( pg, offset, (uint8 *)&chk );
   \   000023                ; Setup parameters for call to function writeWordH
   \   000023   AC..         MOV     R4,?XSP + 0
   \   000025   AD..         MOV     R5,?XSP + 1
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??writeWordH::?relay`; Banked call to: writeWordH
    826            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   75..02       MOV     ?V2,#0x2
   \   000031   75..00       MOV     ?V3,#0x0
   \   000034   78..         MOV     R0,#?V2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP102_8
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   A9..         MOV     R1,?V0
   \   000044   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
    827          
    828            return chk;
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000055   7402         MOV     A,#0x2
   \   000057   02....       LJMP    ?Subroutine0 & 0xFFFF
    829          }
    830          
    831          /*********************************************************************
    832           * @fn      calcChkB
    833           *
    834           * @brief   Calculates the data checksum over the 'buf' parameter.
    835           *
    836           * @param   len - Byte count of the data to be checksummed.
    837           * @param   buf - Data buffer to be checksummed.
    838           *
    839           * @return  Calculated checksum of the data bytes.
    840           */
    841          static uint16 calcChkB( uint16 len, uint8 *buf )
    842          {
    843            uint8 fill = len % OSAL_NV_WORD_SIZE;
    844            uint16 chk;
    845          
    846            if ( !buf )
    847            {
    848              chk = len * OSAL_NV_ERASED;
    849            }
    850            else
    851            {
    852              chk = 0;
    853              while ( len-- )
    854              {
    855                chk += *buf++;
    856              }
    857            }
    858          
    859            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    860            if ( fill )
    861            {
    862              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    863            }
    864          
    865            return chk;
    866          }
    867          
    868          /*********************************************************************
    869           * @fn      calcChkF
    870           *
    871           * @brief   Calculates the data checksum by reading the data bytes from NV.
    872           *
    873           * @param   pg - A valid NV Flash page.
    874           * @param   offset - A valid offset into the page.
    875           * @param   len - Byte count of the data to be checksummed.
    876           *
    877           * @return  Calculated checksum of the data bytes.
    878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    879          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    880          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V4,R1
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    881            uint16 chk = 0;
   \   000014   75..00       MOV     ?V0,#0x0
   \   000017   75..00       MOV     ?V1,#0x0
    882          
    883            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   EE           MOV     A,R6
   \   00001B   2403         ADD     A,#0x3
   \   00001D   F5..         MOV     ?V6,A
   \   00001F   E4           CLR     A
   \   000020   3F           ADDC    A,R7
   \   000021   F5..         MOV     ?V7,A
   \   000023   7402         MOV     A,#0x2
   \   000025   78..         MOV     R0,#?V6
   \   000027   12....       LCALL   ?US_SHR
   \   00002A   AE..         MOV     R6,?V6
   \   00002C   AF..         MOV     R7,?V7
    884          
    885            while ( len-- )
   \                     ??calcChkF_0:
   \   00002E   EE           MOV     A,R6
   \   00002F   4F           ORL     A,R7
   \   000030   6053         JZ      ??calcChkF_1
   \   000032   EE           MOV     A,R6
   \   000033   24FF         ADD     A,#-0x1
   \   000035   1E           DEC     R6
   \   000036   EF           MOV     A,R7
   \   000037   34FF         ADDC    A,#-0x1
   \   000039   FF           MOV     R7,A
    886            {
    887              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    888          
    889              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   00003A                ; Setup parameters for call to function HalFlashRead
   \   00003A   75..04       MOV     ?V6,#0x4
   \   00003D   75..00       MOV     ?V7,#0x0
   \   000040   78..         MOV     R0,#?V6
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP102_8
   \   00004A   AA..         MOV     R2,?V2
   \   00004C   AB..         MOV     R3,?V3
   \   00004E   A9..         MOV     R1,?V4
   \   000050   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000053   7402         MOV     A,#0x2
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
    890              offset += OSAL_NV_WORD_SIZE;
   \   000058   12....       LCALL   ?Subroutine42 & 0xFFFF
    891          
    892              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \                     ??CrossCallReturnLabel_82:
   \   00005B   A8..         MOV     R0,?XSP + 0
   \   00005D   A9..         MOV     R1,?XSP + 1
    893              {
    894                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   FA           MOV     R2,A
   \   000065   E5..         MOV     A,?V0
   \   000067   2A           ADD     A,R2
   \   000068   F5..         MOV     ?V0,A
   \   00006A   E4           CLR     A
   \   00006B   35..         ADDC    A,?V1
   \   00006D   F5..         MOV     ?V1,A
    895              }
   \   00006F   A3           INC     DPTR
   \   000070   A882         MOV     R0,DPL
   \   000072   A983         MOV     R1,DPH
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E582         MOV     A,DPL
   \   00007B   68           XRL     A,R0
   \   00007C   7003         JNZ     ??calcChkF_3
   \   00007E   E583         MOV     A,DPH
   \   000080   69           XRL     A,R1
   \                     ??calcChkF_3:
   \   000081   60AB         JZ      ??calcChkF_0
   \   000083   80DA         SJMP    ??calcChkF_2
    896            }
    897          
    898            return chk;
   \                     ??calcChkF_1:
   \   000085   AA..         MOV     R2,?V0
   \   000087   AB..         MOV     R3,?V1
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E                REQUIRE ?Subroutine6
   \   00008E                ; // Fall through to label ?Subroutine6
    899          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E5..         MOV     A,?V2
   \   000002   2404         ADD     A,#0x4
   \   000004   F5..         MOV     ?V2,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V3
   \   000009   F5..         MOV     ?V3,A
   \   00000B   22           RET
    900          
    901          /*********************************************************************
    902           * @fn      writeWord
    903           *
    904           * @brief   Writes a Flash-WORD to NV.
    905           *
    906           * @param   pg - A valid NV Flash page.
    907           * @param   offset - A valid offset into the page.
    908           * @param   buf - Pointer to source buffer.
    909           *
    910           * @return  none
    911           */
    912          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
    913          {
    914            offset = (offset / HAL_FLASH_WORD_SIZE) +
    915                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    916          
    917            HalFlashWrite(offset, buf, 1);
    918          }
    919          
    920          /*********************************************************************
    921           * @fn      writeWordM
    922           *
    923           * @brief   Writes multiple Flash-WORDs to NV.
    924           *
    925           * @param   pg - A valid NV Flash page.
    926           * @param   offset - A valid offset into the page.
    927           * @param   buf - Pointer to source buffer.
    928           * @param   cnt - Number of 4-byte blocks to write.
    929           *
    930           * @return  none
    931           */
    932          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    933          {
    934            offset = (offset / HAL_FLASH_WORD_SIZE) +
    935                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    936            HalFlashWrite(offset, buf, cnt);
    937          }
    938          
    939          /*********************************************************************
    940           * @fn      writeWordH
    941           *
    942           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    943           *
    944           * @param   pg - A valid NV Flash page.
    945           * @param   offset - A valid offset into the page.
    946           * @param   buf - Pointer to source buffer.
    947           *
    948           * @return  none
    949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    950          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    951          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    952            uint8 tmp[4];
    953          
    954            tmp[0] = buf[0];
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   E0           MOVX    A,@DPTR
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   F0           MOVX    @DPTR,A
    955            tmp[1] = buf[1];
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   C0E0         PUSH    A
   \   000020   7401         MOV     A,#0x1
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   D0E0         POP     A
   \   000027   F0           MOVX    @DPTR,A
    956            tmp[2] = OSAL_NV_ERASED;
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   74FF         MOV     A,#-0x1
   \   00002F   F0           MOVX    @DPTR,A
    957            tmp[3] = OSAL_NV_ERASED;
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   74FF         MOV     A,#-0x1
   \   000037   F0           MOVX    @DPTR,A
    958          
    959            writeWord( pg, offset, tmp );
   \   000038                ; Setup parameters for call to function HalFlashWrite
   \   000038   75..01       MOV     ?V0,#0x1
   \   00003B   75..00       MOV     ?V1,#0x0
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP102_8
   \   000048   8A..         MOV     ?V0,R2
   \   00004A   8B..         MOV     ?V1,R3
   \   00004C   7402         MOV     A,#0x2
   \   00004E   78..         MOV     R0,#?V0
   \   000050   12....       LCALL   ?US_SHR
   \   000053   8E..         MOV     ?V2,R6
   \   000055   F5..         MOV     ?V3,A
   \   000057   7409         MOV     A,#0x9
   \   000059   78..         MOV     R0,#?V2
   \   00005B   12....       LCALL   ?S_SHL
   \   00005E   E5..         MOV     A,?V0
   \   000060   2400         ADD     A,#0x0
   \   000062   FA           MOV     R2,A
   \   000063   E5..         MOV     A,?V1
   \   000065   35..         ADDC    A,?V3
   \   000067   FB           MOV     R3,A
   \   000068   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   00006B   7402         MOV     A,#0x2
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
    960          }
   \   000070   7404         MOV     A,#0x4
   \   000072                REQUIRE ?Subroutine0
   \   000072                ; // Fall through to label ?Subroutine0
    961          
    962          /*********************************************************************
    963           * @fn      writeBuf
    964           *
    965           * @brief   Writes a data buffer to NV.
    966           *
    967           * @param   dstPg - A valid NV Flash page.
    968           * @param   offset - A valid offset into the page.
    969           * @param   len  - Byte count of the data to write.
    970           * @param   buf  - The data to write.
    971           *
    972           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    973           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    974          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    975          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   8C..         MOV     ?V4,R4
   \   000012   8D..         MOV     ?V5,R5
    976            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EA           MOV     A,R2
   \   000015   5403         ANL     A,#0x3
   \   000017   F5..         MOV     ?V0,A
   \   000019   7416         MOV     A,#0x16
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FE           MOV     R6,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FF           MOV     R7,A
    977            uint8 tmp[OSAL_NV_WORD_SIZE];
    978          
    979            if ( rem )
   \   000023   E5..         MOV     A,?V0
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??CrossCallReturnLabel_83 & 0xFFFF
    980            {
    981              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   00002A   74FC         MOV     A,#-0x4
   \   00002C   55..         ANL     A,?V2
   \   00002E   F5..         MOV     ?V2,A
    982              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000030                ; Setup parameters for call to function HalFlashRead
   \   000030   75..04       MOV     ?V6,#0x4
   \   000033   75..00       MOV     ?V7,#0x0
   \   000036   78..         MOV     R0,#?V6
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP102_8
   \   000040   AA..         MOV     R2,?V2
   \   000042   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   A8..         MOV     R0,?V0
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   E582         MOV     A,DPL
   \   000054   28           ADD     A,R0
   \   000055   F8           MOV     R0,A
   \   000056   E4           CLR     A
   \   000057   3583         ADDC    A,DPH
   \   000059   F9           MOV     R1,A
   \                     ??writeBuf_0:
   \   00005A   E5..         MOV     A,?V4
   \   00005C   45..         ORL     A,?V5
   \   00005E   602A         JZ      ??writeBuf_1
    983          
    984              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    985              {
    986                tmp[rem++] = *buf++;
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   E0           MOVX    A,@DPTR
   \   000065   8882         MOV     DPL,R0
   \   000067   8983         MOV     DPH,R1
   \   000069   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00006C   05..         INC     ?V0
    987                len--;
   \   00006E   E5..         MOV     A,?V4
   \   000070   24FF         ADD     A,#-0x1
   \   000072   F5..         MOV     ?V4,A
   \   000074   E5..         MOV     A,?V5
   \   000076   34FF         ADDC    A,#-0x1
   \   000078   F5..         MOV     ?V5,A
   \   00007A   8882         MOV     DPL,R0
   \   00007C   8983         MOV     DPH,R1
   \   00007E   A3           INC     DPTR
   \   00007F   A882         MOV     R0,DPL
   \   000081   A983         MOV     R1,DPH
    988              }
   \   000083   E5..         MOV     A,?V0
   \   000085   C3           CLR     C
   \   000086   9404         SUBB    A,#0x4
   \   000088   40D0         JC      ??writeBuf_0
    989          
    990              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_1:
   \   00008A                ; Setup parameters for call to function HalFlashWrite
   \   00008A   75..01       MOV     ?V6,#0x1
   \   00008D   78..         MOV     R0,#?V6
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   7402         MOV     A,#0x2
   \   000094   12....       LCALL   ?XSTACK_DISP102_8
   \   000097   85....       MOV     ?V8,?V2
   \   00009A   85....       MOV     ?V9,?V3
   \   00009D   7402         MOV     A,#0x2
   \   00009F   78..         MOV     R0,#?V8
   \   0000A1   12....       LCALL   ?US_SHR
   \   0000A4   85....       MOV     ?V0,?V1
   \   0000A7   85....       MOV     ?V6,?V0
   \   0000AA   7409         MOV     A,#0x9
   \   0000AC   78..         MOV     R0,#?V6
   \   0000AE   12....       LCALL   ?S_SHL
   \   0000B1   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000B4   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0000B7   7402         MOV     A,#0x2
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
    991              dstOff += OSAL_NV_WORD_SIZE;
   \   0000BC   12....       LCALL   ?Subroutine42 & 0xFFFF
    992            }
    993          
    994            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_83:
   \   0000BF   E5..         MOV     A,?V4
   \   0000C1   5403         ANL     A,#0x3
   \   0000C3   F5..         MOV     ?V0,A
    995            len /= OSAL_NV_WORD_SIZE;
   \   0000C5   85....       MOV     ?V6,?V4
   \   0000C8   85....       MOV     ?V7,?V5
   \   0000CB   7402         MOV     A,#0x2
   \   0000CD   78..         MOV     R0,#?V6
   \   0000CF   12....       LCALL   ?US_SHR
   \   0000D2   85....       MOV     ?V4,?V6
   \   0000D5   85....       MOV     ?V5,?V7
    996          
    997            if ( len )
   \   0000D8   E5..         MOV     A,?V4
   \   0000DA   45..         ORL     A,?V5
   \   0000DC   6048         JZ      ??writeBuf_2
    998            {
    999              writeWordM( dstPg, dstOff, buf, len );
   \   0000DE                ; Setup parameters for call to function HalFlashWrite
   \   0000DE   78..         MOV     R0,#?V4
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   EE           MOV     A,R6
   \   0000E4   FC           MOV     R4,A
   \   0000E5   EF           MOV     A,R7
   \   0000E6   FD           MOV     R5,A
   \   0000E7   85....       MOV     ?V8,?V2
   \   0000EA   85....       MOV     ?V9,?V3
   \   0000ED   7402         MOV     A,#0x2
   \   0000EF   78..         MOV     R0,#?V8
   \   0000F1   12....       LCALL   ?US_SHR
   \   0000F4   85....       MOV     ?V6,?V1
   \   0000F7   F5..         MOV     ?V7,A
   \   0000F9   7409         MOV     A,#0x9
   \   0000FB   78..         MOV     R0,#?V6
   \   0000FD   12....       LCALL   ?S_SHL
   \   000100   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000103   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000106   7402         MOV     A,#0x2
   \   000108   12....       LCALL   ?DEALLOC_XSTACK8
   1000              dstOff += OSAL_NV_WORD_SIZE * len;
   \   00010B   7402         MOV     A,#0x2
   \   00010D   78..         MOV     R0,#?V4
   \   00010F   12....       LCALL   ?S_SHL
   \   000112   A8..         MOV     R0,?V4
   \   000114   A9..         MOV     R1,?V5
   \   000116   E5..         MOV     A,?V2
   \   000118   28           ADD     A,R0
   \   000119   F5..         MOV     ?V2,A
   \   00011B   E5..         MOV     A,?V3
   \   00011D   39           ADDC    A,R1
   \   00011E   F5..         MOV     ?V3,A
   1001              buf += OSAL_NV_WORD_SIZE * len;
   \   000120   EE           MOV     A,R6
   \   000121   28           ADD     A,R0
   \   000122   FE           MOV     R6,A
   \   000123   EF           MOV     A,R7
   \   000124   39           ADDC    A,R1
   \   000125   FF           MOV     R7,A
   1002            }
   1003          
   1004            if ( rem )
   \                     ??writeBuf_2:
   \   000126   E5..         MOV     A,?V0
   \   000128   7003         JNZ     $+5
   \   00012A   02....       LJMP    ??writeBuf_3 & 0xFFFF
   1005            {
   1006              uint8 idx = 0;
   \   00012D   75..00       MOV     ?V4,#0x0
   1007              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000130                ; Setup parameters for call to function HalFlashRead
   \   000130   75..04       MOV     ?V6,#0x4
   \   000133   75..00       MOV     ?V7,#0x0
   \   000136   78..         MOV     R0,#?V6
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013B   7402         MOV     A,#0x2
   \   00013D   12....       LCALL   ?XSTACK_DISP102_8
   \   000140   AA..         MOV     R2,?V2
   \   000142   AB..         MOV     R3,?V3
   \   000144   A9..         MOV     R1,?V1
   \   000146   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000149   7402         MOV     A,#0x2
   \   00014B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014E   85....       MOV     ?V6,?V0
   1008              while ( rem-- )
   1009              {
   1010                tmp[idx++] = *buf++;
   \                     ??writeBuf_4:
   \   000151   8E82         MOV     DPL,R6
   \   000153   8F83         MOV     DPH,R7
   \   000155   E0           MOVX    A,@DPTR
   \   000156   C0E0         PUSH    A
   \   000158   A8..         MOV     R0,?V4
   \   00015A   85..82       MOV     DPL,?XSP + 0
   \   00015D   85..83       MOV     DPH,?XSP + 1
   \   000160   E582         MOV     A,DPL
   \   000162   28           ADD     A,R0
   \   000163   F582         MOV     DPL,A
   \   000165   E4           CLR     A
   \   000166   3583         ADDC    A,DPH
   \   000168   F583         MOV     DPH,A
   \   00016A   D0E0         POP     A
   \   00016C   12....       LCALL   ?Subroutine12 & 0xFFFF
   1011              }
   \                     ??CrossCallReturnLabel_10:
   \   00016F   05..         INC     ?V4
   \   000171   15..         DEC     ?V6
   \   000173   E5..         MOV     A,?V6
   \   000175   70DA         JNZ     ??writeBuf_4
   1012              writeWord( dstPg, dstOff, tmp );
   \   000177                ; Setup parameters for call to function HalFlashWrite
   \   000177   75..01       MOV     ?V4,#0x1
   \   00017A   75..00       MOV     ?V5,#0x0
   \   00017D   78..         MOV     R0,#?V4
   \   00017F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000182   7402         MOV     A,#0x2
   \   000184   12....       LCALL   ?XSTACK_DISP102_8
   \   000187   7402         MOV     A,#0x2
   \   000189   78..         MOV     R0,#?V2
   \   00018B   12....       LCALL   ?US_SHR
   \   00018E   85....       MOV     ?V0,?V1
   \   000191   85....       MOV     ?V4,?V0
   \   000194   7409         MOV     A,#0x9
   \   000196   78..         MOV     R0,#?V4
   \   000198   12....       LCALL   ?S_SHL
   \   00019B   E5..         MOV     A,?V2
   \   00019D   2400         ADD     A,#0x0
   \   00019F   FA           MOV     R2,A
   \   0001A0   E5..         MOV     A,?V3
   \   0001A2   35..         ADDC    A,?V5
   \   0001A4   FB           MOV     R3,A
   \   0001A5   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0001A8   7402         MOV     A,#0x2
   \   0001AA   12....       LCALL   ?DEALLOC_XSTACK8
   1013            }
   1014          }
   \                     ??writeBuf_3:
   \   0001AD   7404         MOV     A,#0x4
   \   0001AF   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   AE82         MOV     R6,DPL
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET
   1015          
   1016          /*********************************************************************
   1017           * @fn      xferBuf
   1018           *
   1019           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1020           *
   1021           * @return  none
   1022           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1023          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1024          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V8,R1
   \   00000C   8A..         MOV     ?V4,R2
   \   00000E   8B..         MOV     ?V5,R3
   \   000010   8C..         MOV     ?V3,R4
   \   000012   7418         MOV     A,#0x18
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
   1025            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   00001C   EE           MOV     A,R6
   \   00001D   5403         ANL     A,#0x3
   \   00001F   F5..         MOV     ?V2,A
   \   000021   741A         MOV     A,#0x1a
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine16 & 0xFFFF
   1026            uint8 tmp[OSAL_NV_WORD_SIZE];
   1027          
   1028            if ( rem )
   \                     ??CrossCallReturnLabel_19:
   \   000029   E5..         MOV     A,?V2
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??xferBuf_0 & 0xFFFF
   1029            {
   1030              dstOff -= rem;
   \   000030   F8           MOV     R0,A
   \   000031   C3           CLR     C
   \   000032   EE           MOV     A,R6
   \   000033   98           SUBB    A,R0
   \   000034   FE           MOV     R6,A
   \   000035   EF           MOV     A,R7
   \   000036   9400         SUBB    A,#0x0
   \   000038   FF           MOV     R7,A
   1031              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000039                ; Setup parameters for call to function HalFlashRead
   \   000039   75..04       MOV     ?V6,#0x4
   \   00003C   75..00       MOV     ?V7,#0x0
   \   00003F   78..         MOV     R0,#?V6
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP102_8
   \   000049   EE           MOV     A,R6
   \   00004A   FA           MOV     R2,A
   \   00004B   EF           MOV     A,R7
   \   00004C   FB           MOV     R3,A
   \   00004D   A9..         MOV     R1,?V3
   \   00004F   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   A8..         MOV     R0,?V2
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   E582         MOV     A,DPL
   \   000061   28           ADD     A,R0
   \   000062   F5..         MOV     ?V6,A
   \   000064   E4           CLR     A
   \   000065   3583         ADDC    A,DPH
   \   000067   F5..         MOV     ?V7,A
   \                     ??xferBuf_1:
   \   000069   E5..         MOV     A,?V0
   \   00006B   45..         ORL     A,?V1
   \   00006D   6047         JZ      ??xferBuf_2
   1032          
   1033              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   1034              {
   1035                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   00006F                ; Setup parameters for call to function HalFlashRead
   \   00006F   75..01       MOV     ?V10,#0x1
   \   000072   75..00       MOV     ?V11,#0x0
   \   000075   78..         MOV     R0,#?V10
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   AC..         MOV     R4,?V6
   \   00007C   AD..         MOV     R5,?V7
   \   00007E   AA..         MOV     R2,?V4
   \   000080   AB..         MOV     R3,?V5
   \   000082   A9..         MOV     R1,?V8
   \   000084   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000087   7402         MOV     A,#0x2
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   1036                srcOff++;
   \   00008C   05..         INC     ?V4
   \   00008E   E5..         MOV     A,?V4
   \   000090   7002         JNZ     ??xferBuf_3
   \   000092   05..         INC     ?V5
   1037                rem++;
   \                     ??xferBuf_3:
   \   000094   05..         INC     ?V2
   1038                len--;
   \   000096   E5..         MOV     A,?V0
   \   000098   24FF         ADD     A,#-0x1
   \   00009A   F5..         MOV     ?V0,A
   \   00009C   E5..         MOV     A,?V1
   \   00009E   34FF         ADDC    A,#-0x1
   \   0000A0   F5..         MOV     ?V1,A
   \   0000A2   85..82       MOV     DPL,?V6
   \   0000A5   85..83       MOV     DPH,?V7
   \   0000A8   A3           INC     DPTR
   \   0000A9   8582..       MOV     ?V6,DPL
   \   0000AC   8583..       MOV     ?V7,DPH
   1039              }
   \   0000AF   E5..         MOV     A,?V2
   \   0000B1   C3           CLR     C
   \   0000B2   9404         SUBB    A,#0x4
   \   0000B4   40B3         JC      ??xferBuf_1
   1040          
   1041              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_2:
   \   0000B6                ; Setup parameters for call to function HalFlashWrite
   \   0000B6   75..01       MOV     ?V6,#0x1
   \   0000B9   75..00       MOV     ?V7,#0x0
   \   0000BC   78..         MOV     R0,#?V6
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   7402         MOV     A,#0x2
   \   0000C3   12....       LCALL   ?XSTACK_DISP102_8
   \   0000C6   8E..         MOV     ?V10,R6
   \   0000C8   8F..         MOV     ?V11,R7
   \   0000CA   7402         MOV     A,#0x2
   \   0000CC   78..         MOV     R0,#?V10
   \   0000CE   12....       LCALL   ?US_SHR
   \   0000D1   85....       MOV     ?V2,?V3
   \   0000D4   85....       MOV     ?V6,?V2
   \   0000D7   7409         MOV     A,#0x9
   \   0000D9   78..         MOV     R0,#?V6
   \   0000DB   12....       LCALL   ?S_SHL
   \   0000DE   E5..         MOV     A,?V10
   \   0000E0   2400         ADD     A,#0x0
   \   0000E2   FA           MOV     R2,A
   \   0000E3   E5..         MOV     A,?V11
   \   0000E5   35..         ADDC    A,?V7
   \   0000E7   FB           MOV     R3,A
   \   0000E8   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
   1042              dstOff += OSAL_NV_WORD_SIZE;
   \   0000F0   EE           MOV     A,R6
   \   0000F1   2404         ADD     A,#0x4
   \   0000F3   FE           MOV     R6,A
   \   0000F4   E4           CLR     A
   \   0000F5   3F           ADDC    A,R7
   \   0000F6   FF           MOV     R7,A
   1043            }
   1044          
   1045            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??xferBuf_0:
   \   0000F7   E5..         MOV     A,?V0
   \   0000F9   5403         ANL     A,#0x3
   \   0000FB   F5..         MOV     ?V2,A
   1046            len /= OSAL_NV_WORD_SIZE;
   \   0000FD   85....       MOV     ?V6,?V0
   \   000100   85....       MOV     ?V7,?V1
   \   000103   7402         MOV     A,#0x2
   \   000105   78..         MOV     R0,#?V6
   \   000107   12....       LCALL   ?US_SHR
   \   00010A   85....       MOV     ?V0,?V6
   \   00010D   85....       MOV     ?V1,?V7
   \   000110   E5..         MOV     A,?V0
   \   000112   45..         ORL     A,?V1
   \   000114   6072         JZ      ??xferBuf_4
   \   000116   85....       MOV     ?V0,?V3
   \   000119   85....       MOV     ?V10,?V0
   \   00011C   75..00       MOV     ?V11,#0x0
   \   00011F   7409         MOV     A,#0x9
   \   000121   78..         MOV     R0,#?V10
   \   000123   12....       LCALL   ?S_SHL
   \   000126   85....       MOV     ?V1,?V11
   1047          
   1048            while ( len-- )
   1049            {
   1050              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_5:
   \   000129                ; Setup parameters for call to function HalFlashRead
   \   000129   75..04       MOV     ?V10,#0x4
   \   00012C   75..00       MOV     ?V11,#0x0
   \   00012F   78..         MOV     R0,#?V10
   \   000131   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000134   7402         MOV     A,#0x2
   \   000136   12....       LCALL   ?XSTACK_DISP102_8
   \   000139   AA..         MOV     R2,?V4
   \   00013B   AB..         MOV     R3,?V5
   \   00013D   A9..         MOV     R1,?V8
   \   00013F   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000142   7402         MOV     A,#0x2
   \   000144   12....       LCALL   ?DEALLOC_XSTACK8
   1051              srcOff += OSAL_NV_WORD_SIZE;
   \   000147   E5..         MOV     A,?V4
   \   000149   2404         ADD     A,#0x4
   \   00014B   F5..         MOV     ?V4,A
   \   00014D   E4           CLR     A
   \   00014E   35..         ADDC    A,?V5
   \   000150   F5..         MOV     ?V5,A
   1052              writeWord( dstPg, dstOff, tmp );
   \   000152                ; Setup parameters for call to function HalFlashWrite
   \   000152   75..01       MOV     ?V10,#0x1
   \   000155   78..         MOV     R0,#?V10
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015A   7402         MOV     A,#0x2
   \   00015C   12....       LCALL   ?XSTACK_DISP102_8
   \   00015F   8E..         MOV     ?V10,R6
   \   000161   8F..         MOV     ?V11,R7
   \   000163   7402         MOV     A,#0x2
   \   000165   78..         MOV     R0,#?V10
   \   000167   12....       LCALL   ?US_SHR
   \   00016A   E5..         MOV     A,?V10
   \   00016C   2400         ADD     A,#0x0
   \   00016E   FA           MOV     R2,A
   \   00016F   E5..         MOV     A,?V11
   \   000171   35..         ADDC    A,?V1
   \   000173   FB           MOV     R3,A
   \   000174   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000177   7402         MOV     A,#0x2
   \   000179   12....       LCALL   ?DEALLOC_XSTACK8
   1053              dstOff += OSAL_NV_WORD_SIZE;
   \   00017C   EE           MOV     A,R6
   \   00017D   2404         ADD     A,#0x4
   \   00017F   FE           MOV     R6,A
   \   000180   E4           CLR     A
   \   000181   3F           ADDC    A,R7
   \   000182   FF           MOV     R7,A
   1054            }
   \   000183   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000186   70A1         JNZ     ??xferBuf_5
   1055          
   1056            if ( rem )
   \                     ??xferBuf_4:
   \   000188   E5..         MOV     A,?V2
   \   00018A   7003         JNZ     $+5
   \   00018C   02....       LJMP    ??xferBuf_6 & 0xFFFF
   1057            {
   1058              uint8 idx = 0;
   \   00018F   75..00       MOV     ?V0,#0x0
   1059              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000192                ; Setup parameters for call to function HalFlashRead
   \   000192   75..04       MOV     ?V6,#0x4
   \   000195   75..00       MOV     ?V7,#0x0
   \   000198   78..         MOV     R0,#?V6
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019D   7402         MOV     A,#0x2
   \   00019F   12....       LCALL   ?XSTACK_DISP102_8
   \   0001A2   EE           MOV     A,R6
   \   0001A3   FA           MOV     R2,A
   \   0001A4   EF           MOV     A,R7
   \   0001A5   FB           MOV     R3,A
   \   0001A6   A9..         MOV     R1,?V3
   \   0001A8   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0001AB   7402         MOV     A,#0x2
   \   0001AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B0   85....       MOV     ?V1,?V2
   1060              while ( rem-- )
   1061              {
   1062                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_7:
   \   0001B3                ; Setup parameters for call to function HalFlashRead
   \   0001B3   75..01       MOV     ?V6,#0x1
   \   0001B6   78..         MOV     R0,#?V6
   \   0001B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BB   A8..         MOV     R0,?V0
   \   0001BD   7402         MOV     A,#0x2
   \   0001BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C2   E582         MOV     A,DPL
   \   0001C4   28           ADD     A,R0
   \   0001C5   FC           MOV     R4,A
   \   0001C6   E4           CLR     A
   \   0001C7   3583         ADDC    A,DPH
   \   0001C9   FD           MOV     R5,A
   \   0001CA   AA..         MOV     R2,?V4
   \   0001CC   AB..         MOV     R3,?V5
   \   0001CE   A9..         MOV     R1,?V8
   \   0001D0   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0001D3   7402         MOV     A,#0x2
   \   0001D5   12....       LCALL   ?DEALLOC_XSTACK8
   1063                srcOff++;
   \   0001D8   05..         INC     ?V4
   \   0001DA   E5..         MOV     A,?V4
   \   0001DC   7002         JNZ     ??xferBuf_8
   \   0001DE   05..         INC     ?V5
   1064                idx++;
   \                     ??xferBuf_8:
   \   0001E0   05..         INC     ?V0
   1065              }
   \   0001E2   15..         DEC     ?V1
   \   0001E4   E5..         MOV     A,?V1
   \   0001E6   70CB         JNZ     ??xferBuf_7
   1066              writeWord( dstPg, dstOff, tmp );
   \   0001E8                ; Setup parameters for call to function HalFlashWrite
   \   0001E8   75..01       MOV     ?V4,#0x1
   \   0001EB   75..00       MOV     ?V5,#0x0
   \   0001EE   78..         MOV     R0,#?V4
   \   0001F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F3   7402         MOV     A,#0x2
   \   0001F5   12....       LCALL   ?XSTACK_DISP102_8
   \   0001F8   8E..         MOV     ?V6,R6
   \   0001FA   8F..         MOV     ?V7,R7
   \   0001FC   7402         MOV     A,#0x2
   \   0001FE   78..         MOV     R0,#?V6
   \   000200   12....       LCALL   ?US_SHR
   \   000203   85....       MOV     ?V0,?V3
   \   000206   85....       MOV     ?V4,?V0
   \   000209   7409         MOV     A,#0x9
   \   00020B   78..         MOV     R0,#?V4
   \   00020D   12....       LCALL   ?S_SHL
   \   000210   E5..         MOV     A,?V6
   \   000212   2400         ADD     A,#0x0
   \   000214   FA           MOV     R2,A
   \   000215   E5..         MOV     A,?V7
   \   000217   35..         ADDC    A,?V5
   \   000219   FB           MOV     R3,A
   \   00021A   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   00021D   7402         MOV     A,#0x2
   \   00021F   12....       LCALL   ?DEALLOC_XSTACK8
   1067            }
   1068          }
   \                     ??xferBuf_6:
   \   000222   7404         MOV     A,#0x4
   \   000224   12....       LCALL   ?DEALLOC_XSTACK8
   \   000227   7F0C         MOV     R7,#0xc
   \   000229   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E5..         MOV     A,?V6
   \   000002   24FF         ADD     A,#-0x1
   \   000004   F5..         MOV     ?V6,A
   \   000006   E5..         MOV     A,?V7
   \   000008   34FF         ADDC    A,#-0x1
   \   00000A   F5..         MOV     ?V7,A
   \   00000C   E5..         MOV     A,?V6
   \   00000E   45..         ORL     A,?V7
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET
   1069          
   1070          /*********************************************************************
   1071           * @fn      writeItem
   1072           *
   1073           * @brief   Writes an item header/data combo to the specified NV page.
   1074           *
   1075           * @param   pg - Valid NV Flash page.
   1076           * @param   id - Valid NV item Id.
   1077           * @param   len  - Byte count of the data to write.
   1078           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1079           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1080           *
   1081           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1082           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1083          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1084          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V4,R1
   \   00000C   8A..         MOV     ?V6,R2
   \   00000E   8B..         MOV     ?V7,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   1085            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000014   E9           MOV     A,R1
   \   000015   29           ADD     A,R1
   \   000016   F5..         MOV     ?V0,A
   \   000018   E4           CLR     A
   \   000019   33           RLC     A
   \   00001A   F5..         MOV     ?V1,A
   \   00001C   74..         MOV     A,#(pgOff + 14) & 0xff
   \   00001E   25..         ADD     A,?V0
   \   000020   F5..         MOV     ?V12,A
   \   000022   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000024   35..         ADDC    A,?V1
   \   000026   F5..         MOV     ?V13,A
   \   000028   85..82       MOV     DPL,?V12
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   1086            uint8 rtrn = FALSE;
   \   000034   75..00       MOV     ?V5,#0x0
   1087            osalNvHdr_t hdr;
   1088          
   1089            hdr.id = id;
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   EA           MOV     A,R2
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   EB           MOV     A,R3
   \   000041   F0           MOVX    @DPTR,A
   1090            hdr.len = len;
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   EE           MOV     A,R6
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   EF           MOV     A,R7
   \   00004B   F0           MOVX    @DPTR,A
   1091          
   1092            writeWord( pg, offset, (uint8 *)&hdr );
   \   00004C                ; Setup parameters for call to function HalFlashWrite
   \   00004C   75..01       MOV     ?V8,#0x1
   \   00004F   75..00       MOV     ?V9,#0x0
   \   000052   78..         MOV     R0,#?V8
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP102_8
   \   00005C   85....       MOV     ?V8,?V2
   \   00005F   85....       MOV     ?V9,?V3
   \   000062   7402         MOV     A,#0x2
   \   000064   78..         MOV     R0,#?V8
   \   000066   12....       LCALL   ?US_SHR
   \   000069   89..         MOV     ?V10,R1
   \   00006B   F5..         MOV     ?V11,A
   \   00006D   7409         MOV     A,#0x9
   \   00006F   78..         MOV     R0,#?V10
   \   000071   12....       LCALL   ?S_SHL
   \   000074   E5..         MOV     A,?V8
   \   000076   2400         ADD     A,#0x0
   \   000078   FA           MOV     R2,A
   \   000079   E5..         MOV     A,?V9
   \   00007B   35..         ADDC    A,?V11
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000081   7402         MOV     A,#0x2
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
   1093            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000086                ; Setup parameters for call to function HalFlashRead
   \   000086   75..08       MOV     ?V8,#0x8
   \   000089   75..00       MOV     ?V9,#0x0
   \   00008C   78..         MOV     R0,#?V8
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?XSTACK_DISP102_8
   \   000096   AA..         MOV     R2,?V2
   \   000098   AB..         MOV     R3,?V3
   \   00009A   A9..         MOV     R1,?V4
   \   00009C   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   1094          
   1095            if ( (hdr.id == id) && (hdr.len == len) )
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000AC   85..82       MOV     DPL,?XSP + 0
   \   0000AF   85..83       MOV     DPH,?XSP + 1
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   65..         XRL     A,?V6
   \   0000B5   7004         JNZ     ??writeItem_0
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   65..         XRL     A,?V7
   \                     ??writeItem_0:
   \   0000BB   6003         JZ      $+5
   \   0000BD   02....       LJMP    ??writeItem_1 & 0xFFFF
   \   0000C0   EE           MOV     A,R6
   \   0000C1   68           XRL     A,R0
   \   0000C2   7002         JNZ     ??writeItem_2
   \   0000C4   EF           MOV     A,R7
   \   0000C5   69           XRL     A,R1
   \                     ??writeItem_2:
   \   0000C6   6003         JZ      $+5
   \   0000C8   02....       LJMP    ??writeItem_1 & 0xFFFF
   1096            {
   1097              if ( flag )
   \   0000CB   7420         MOV     A,#0x20
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   7003         JNZ     $+5
   \   0000D3   02....       LJMP    ??writeItem_3 & 0xFFFF
   \   0000D6   741E         MOV     A,#0x1e
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   12....       LCALL   ?Subroutine16 & 0xFFFF
   1098              {
   1099                hdr.chk = calcChkB( len, buf );
   \                     ??CrossCallReturnLabel_20:
   \   0000DE   85..82       MOV     DPL,?V0
   \   0000E1   F583         MOV     DPH,A
   \   0000E3   EE           MOV     A,R6
   \   0000E4   5403         ANL     A,#0x3
   \   0000E6   FA           MOV     R2,A
   \   0000E7   E582         MOV     A,DPL
   \   0000E9   4583         ORL     A,DPH
   \   0000EB   7015         JNZ     ??writeItem_4
   \   0000ED   EE           MOV     A,R6
   \   0000EE   F8           MOV     R0,A
   \   0000EF   EF           MOV     A,R7
   \   0000F0   F9           MOV     R1,A
   \   0000F1   E8           MOV     A,R0
   \   0000F2   75F0FF       MOV     B,#-0x1
   \   0000F5   A4           MUL     AB
   \   0000F6   F8           MOV     R0,A
   \   0000F7   ABF0         MOV     R3,B
   \   0000F9   75F0FF       MOV     B,#-0x1
   \   0000FC   E9           MOV     A,R1
   \   0000FD   A4           MUL     AB
   \   0000FE   2B           ADD     A,R3
   \   0000FF   F9           MOV     R1,A
   \   000100   801A         SJMP    ??writeItem_5
   \                     ??writeItem_4:
   \   000102   7800         MOV     R0,#0x0
   \   000104   7900         MOV     R1,#0x0
   \   000106   EE           MOV     A,R6
   \   000107   4F           ORL     A,R7
   \   000108   6012         JZ      ??writeItem_5
   \   00010A   8E..         MOV     ?V6,R6
   \   00010C   8F..         MOV     ?V7,R7
   \                     ??writeItem_6:
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   FC           MOV     R4,A
   \   000110   E8           MOV     A,R0
   \   000111   2C           ADD     A,R4
   \   000112   F8           MOV     R0,A
   \   000113   E4           CLR     A
   \   000114   39           ADDC    A,R1
   \   000115   F9           MOV     R1,A
   \   000116   A3           INC     DPTR
   \   000117   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00011A   70F2         JNZ     ??writeItem_6
   \                     ??writeItem_5:
   \   00011C   EA           MOV     A,R2
   \   00011D   601D         JZ      ??writeItem_7
   \   00011F   7404         MOV     A,#0x4
   \   000121   C3           CLR     C
   \   000122   9A           SUBB    A,R2
   \   000123   FA           MOV     R2,A
   \   000124   95E0         SUBB    A,0xE0 /* A   */
   \   000126   FB           MOV     R3,A
   \   000127   EA           MOV     A,R2
   \   000128   75F0FF       MOV     B,#-0x1
   \   00012B   A4           MUL     AB
   \   00012C   FA           MOV     R2,A
   \   00012D   ACF0         MOV     R4,B
   \   00012F   75F0FF       MOV     B,#-0x1
   \   000132   EB           MOV     A,R3
   \   000133   A4           MUL     AB
   \   000134   2C           ADD     A,R4
   \   000135   FB           MOV     R3,A
   \   000136   E8           MOV     A,R0
   \   000137   2A           ADD     A,R2
   \   000138   F8           MOV     R0,A
   \   000139   E9           MOV     A,R1
   \   00013A   3B           ADDC    A,R3
   \   00013B   F9           MOV     R1,A
   \                     ??writeItem_7:
   \   00013C   7404         MOV     A,#0x4
   \   00013E   12....       LCALL   ?XSTACK_DISP0_8
   \   000141   E8           MOV     A,R0
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   E9           MOV     A,R1
   \   000145   F0           MOVX    @DPTR,A
   1100          
   1101                offset += OSAL_NV_HDR_SIZE;
   \   000146   12....       LCALL   ?Subroutine37 & 0xFFFF
   1102                if ( buf != NULL )
   \                     ??CrossCallReturnLabel_73:
   \   000149   E5..         MOV     A,?V0
   \   00014B   45..         ORL     A,?V1
   \   00014D   6017         JZ      ??writeItem_8
   1103                {
   1104                  writeBuf( pg, offset, len, buf );
   \   00014F                ; Setup parameters for call to function writeBuf
   \   00014F   78..         MOV     R0,#?V0
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000154   EE           MOV     A,R6
   \   000155   FC           MOV     R4,A
   \   000156   EF           MOV     A,R7
   \   000157   FD           MOV     R5,A
   \   000158   AA..         MOV     R2,?V2
   \   00015A   AB..         MOV     R3,?V3
   \   00015C   A9..         MOV     R1,?V4
   \   00015E   12....       LCALL   `??writeBuf::?relay` ; Banked call to: writeBuf
   \   000161   7402         MOV     A,#0x2
   \   000163   12....       LCALL   ?DEALLOC_XSTACK8
   1105                }
   1106          
   1107                if ( hdr.chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_8:
   \   000166                ; Setup parameters for call to function calcChkF
   \   000166   EE           MOV     A,R6
   \   000167   FC           MOV     R4,A
   \   000168   EF           MOV     A,R7
   \   000169   FD           MOV     R5,A
   \   00016A   AA..         MOV     R2,?V2
   \   00016C   AB..         MOV     R3,?V3
   \   00016E   A9..         MOV     R1,?V4
   \   000170   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000173   7404         MOV     A,#0x4
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00017B   EA           MOV     A,R2
   \   00017C   6C           XRL     A,R4
   \   00017D   7002         JNZ     ??writeItem_9
   \   00017F   EB           MOV     A,R3
   \   000180   6D           XRL     A,R5
   \                     ??writeItem_9:
   \   000181   7030         JNZ     ??writeItem_10
   1108                {
   1109                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   \   000183                ; Setup parameters for call to function setChk
   \   000183   AA..         MOV     R2,?V2
   \   000185   AB..         MOV     R3,?V3
   \   000187   A9..         MOV     R1,?V4
   \   000189   12....       LCALL   `??setChk::?relay`   ; Banked call to: setChk
   \   00018C   8A..         MOV     ?V0,R2
   \   00018E   8B..         MOV     ?V1,R3
   \   000190   A8..         MOV     R0,?V0
   \   000192   A9..         MOV     R1,?V1
   \   000194   7404         MOV     A,#0x4
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   68           XRL     A,R0
   \   00019B   7003         JNZ     ??writeItem_11
   \   00019D   A3           INC     DPTR
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   69           XRL     A,R1
   \                     ??writeItem_11:
   \   0001A0   7011         JNZ     ??writeItem_10
   1110                  {
   1111                    hotItemUpdate(pg, offset, hdr.id);
   \   0001A2                ; Setup parameters for call to function hotItemUpdate
   \   0001A2   85..82       MOV     DPL,?XSP + 0
   \   0001A5   85..83       MOV     DPH,?XSP + 1
   \   0001A8   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0001AB   A9..         MOV     R1,?V4
   \   0001AD   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1112                    rtrn = TRUE;
   1113                  }
   1114                }
   1115              }
   1116              else
   1117              {
   1118                rtrn = TRUE;
   \                     ??writeItem_3:
   \   0001B0   75..01       MOV     ?V5,#0x1
   1119              }
   1120          
   1121              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_10:
   \   0001B3   7402         MOV     A,#0x2
   \   0001B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B8   12....       LCALL   ?Subroutine29 & 0xFFFF
   1122            }
   \                     ??CrossCallReturnLabel_54:
   \   0001BB   C3           CLR     C
   \   0001BC   E8           MOV     A,R0
   \   0001BD   94F4         SUBB    A,#-0xc
   \   0001BF   E9           MOV     A,R1
   \   0001C0   94FF         SUBB    A,#-0x1
   \   0001C2   4006         JC      ??writeItem_12
   \   0001C4   7EFC         MOV     R6,#-0x4
   \   0001C6   7FFF         MOV     R7,#-0x1
   \   0001C8   8049         SJMP    ??CrossCallReturnLabel_98
   \                     ??writeItem_12:
   \   0001CA   E8           MOV     A,R0
   \   0001CB   2403         ADD     A,#0x3
   \   0001CD   5001         JNC     ??writeItem_13
   \   0001CF   09           INC     R1
   \                     ??writeItem_13:
   \   0001D0   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0001D3   803E         SJMP    ??CrossCallReturnLabel_98
   1123            else
   1124            {
   1125              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   0001D5   C3           CLR     C
   \   0001D6   E8           MOV     A,R0
   \   0001D7   94F4         SUBB    A,#-0xc
   \   0001D9   E9           MOV     A,R1
   \   0001DA   94FF         SUBB    A,#-0x1
   \   0001DC   4006         JC      ??writeItem_14
   \   0001DE   7EFC         MOV     R6,#-0x4
   \   0001E0   7FFF         MOV     R7,#-0x1
   \   0001E2   8009         SJMP    ??CrossCallReturnLabel_69
   \                     ??writeItem_14:
   \   0001E4   E8           MOV     A,R0
   \   0001E5   2403         ADD     A,#0x3
   \   0001E7   5001         JNC     ??writeItem_15
   \   0001E9   09           INC     R1
   \                     ??writeItem_15:
   \   0001EA   12....       LCALL   ?Subroutine35 & 0xFFFF
   1126          
   1127              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??CrossCallReturnLabel_69:
   \   0001ED   85..82       MOV     DPL,?V12
   \   0001F0   85..83       MOV     DPH,?V13
   \   0001F3   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0001F6   F8           MOV     R0,A
   \   0001F7   7408         MOV     A,#0x8
   \   0001F9   99           SUBB    A,R1
   \   0001FA   F9           MOV     R1,A
   \   0001FB   C3           CLR     C
   \   0001FC   E8           MOV     A,R0
   \   0001FD   9E           SUBB    A,R6
   \   0001FE   E9           MOV     A,R1
   \   0001FF   9F           SUBB    A,R7
   \   000200   5004         JNC     ??writeItem_16
   1128              {
   1129                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   000202   E8           MOV     A,R0
   \   000203   FE           MOV     R6,A
   \   000204   E9           MOV     A,R1
   \   000205   FF           MOV     R7,A
   1130              }
   1131          
   1132              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_16:
   \   000206   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000208   25..         ADD     A,?V0
   \   00020A   F582         MOV     DPL,A
   \   00020C   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   00020E   35..         ADDC    A,?V1
   \   000210   12....       LCALL   ?Subroutine22 & 0xFFFF
   1133            }
   1134            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??CrossCallReturnLabel_98:
   \   000213   85..82       MOV     DPL,?V12
   \   000216   85..83       MOV     DPH,?V13
   \   000219   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   1135          
   1136            return rtrn;
   \                     ??CrossCallReturnLabel_96:
   \   00021C   A9..         MOV     R1,?V5
   \   00021E   7408         MOV     A,#0x8
   \   000220   02....       LJMP    ?Subroutine3 & 0xFFFF
   1137          }
   1138          
   1139          /*********************************************************************
   1140           * @fn      hotItem
   1141           *
   1142           * @brief   Look for the parameter 'id' in the hot items array.
   1143           *
   1144           * @param   id - A valid NV item Id.
   1145           *
   1146           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1147           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1148          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1149          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1150            uint8 hotIdx;
   1151          
   1152            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV     R1,#0x0
   \   000006   7C..         MOV     R4,#hotIds & 0xff
   \   000008   7D..         MOV     R5,#(hotIds >> 8) & 0xff
   1153            {
   1154              if (hotIds[hotIdx] == id)
   \                     ??hotItem_0:
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6A           XRL     A,R2
   \   000010   7003         JNZ     ??hotItem_1
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   6B           XRL     A,R3
   \                     ??hotItem_1:
   \   000015   600E         JZ      ??hotItem_2
   1155              {
   1156                break;
   1157              }
   1158            }
   \   000017   09           INC     R1
   \   000018   EC           MOV     A,R4
   \   000019   2402         ADD     A,#0x2
   \   00001B   FC           MOV     R4,A
   \   00001C   5001         JNC     ??hotItem_3
   \   00001E   0D           INC     R5
   \                     ??hotItem_3:
   \   00001F   E9           MOV     A,R1
   \   000020   C3           CLR     C
   \   000021   9403         SUBB    A,#0x3
   \   000023   40E5         JC      ??hotItem_0
   1159          
   1160            return hotIdx;
   \                     ??hotItem_2:
   \   000025                REQUIRE ?Subroutine7
   \   000025                ; // Fall through to label ?Subroutine7
   1161          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1162          
   1163          /*********************************************************************
   1164           * @fn      hotItemUpdate
   1165           *
   1166           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1167           *
   1168           * @param   pg - The new NV page corresponding to the hot item.
   1169           * @param   off - The new NV page offset corresponding to the hot item.
   1170           * @param   id - A valid NV item Id.
   1171           *
   1172           * @return  none
   1173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1174          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1175          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   1176            uint8 hotIdx = hotItem(id);
   \   000007   7E00         MOV     R6,#0x0
   \   000009   78..         MOV     R0,#hotIds & 0xff
   \   00000B   79..         MOV     R1,#(hotIds >> 8) & 0xff
   \                     ??hotItemUpdate_0:
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6C           XRL     A,R4
   \   000013   7003         JNZ     ??hotItemUpdate_1
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6D           XRL     A,R5
   \                     ??hotItemUpdate_1:
   \   000018   600E         JZ      ??hotItemUpdate_2
   \   00001A   0E           INC     R6
   \   00001B   E8           MOV     A,R0
   \   00001C   2402         ADD     A,#0x2
   \   00001E   F8           MOV     R0,A
   \   00001F   5001         JNC     ??hotItemUpdate_3
   \   000021   09           INC     R1
   \                     ??hotItemUpdate_3:
   \   000022   EE           MOV     A,R6
   \   000023   C3           CLR     C
   \   000024   9403         SUBB    A,#0x3
   \   000026   40E5         JC      ??hotItemUpdate_0
   1177          
   1178            if (hotIdx < OSAL_NV_MAX_HOT)
   \                     ??hotItemUpdate_2:
   \   000028   EE           MOV     A,R6
   \   000029   C3           CLR     C
   \   00002A   9403         SUBB    A,#0x3
   \   00002C   500D         JNC     ??hotItemUpdate_4
   1179            {
   1180              {
   1181                hotPg[hotIdx] = pg;
   \   00002E   EE           MOV     A,R6
   \   00002F   12....       LCALL   ?Subroutine34 & 0xFFFF
   1182                hotOff[hotIdx] = off;
   1183              }
   1184            }
   \                     ??CrossCallReturnLabel_66:
   \   000032   EF           MOV     A,R7
   \   000033   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000036   EA           MOV     A,R2
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   EB           MOV     A,R3
   \   00003A   F0           MOVX    @DPTR,A
   1185          }
   \                     ??hotItemUpdate_4:
   \   00003B   02....       LJMP    ?Subroutine2 & 0xFFFF
   1186          
   1187          /*********************************************************************
   1188           * @fn      osal_nv_init
   1189           *
   1190           * @brief   Initialize NV service.
   1191           *
   1192           * @param   p - Not used.
   1193           *
   1194           * @return  none
   1195           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1196          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1197          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1198            (void)p;  // Suppress Lint warning.
   1199            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL   `??initNV::?relay`   ; Banked call to: initNV
   1200          }
   \   000007   80..         SJMP    ?Subroutine7
   1201          
   1202          /*********************************************************************
   1203           * @fn      osal_nv_item_init
   1204           *
   1205           * @brief   If the NV item does not already exist, it is created and
   1206           *          initialized with the data passed to the function, if any.
   1207           *          This function must be called before calling osal_nv_read() or
   1208           *          osal_nv_write().
   1209           *
   1210           * @param   id  - Valid NV item Id.
   1211           * @param   len - Item length.
   1212           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1213           *
   1214           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1215           *          SUCCESS        - Id already existed, no action taken.
   1216           *          NV_OPER_FAILED - Failure to find or create Id.
   1217           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1218          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1219          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   1220            uint16 offset;
   1221          
   1222            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000D   794E         MOV     R1,#0x4e
   \   00000F   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000012   E9           MOV     A,R1
   \   000013   603C         JZ      ??osal_nv_item_init_0
   1223            {
   1224              return NV_OPER_FAILED;
   1225            }
   1226            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \   000015                ; Setup parameters for call to function findItem
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   6010         JZ      ??osal_nv_item_init_1
   1227            {
   1228              // Re-populate the NV hot item data if the corresponding items are already established.
   1229              hotItemUpdate(findPg, offset, id);
   \   000020                ; Setup parameters for call to function hotItemUpdate
   \   000020   EE           MOV     A,R6
   \   000021   FC           MOV     R4,A
   \   000022   EF           MOV     A,R7
   \   000023   FD           MOV     R5,A
   \   000024   90....       MOV     DPTR,#findPg
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1230          
   1231              return SUCCESS;
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   8023         SJMP    ??osal_nv_item_init_2
   1232            }
   1233            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_1:
   \   000030                ; Setup parameters for call to function initItem
   \   000030   740C         MOV     A,#0xc
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000038   AC..         MOV     R4,?V0
   \   00003A   AD..         MOV     R5,?V1
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   7901         MOV     R1,#0x1
   \   000042   12....       LCALL   `??initItem::?relay` ; Banked call to: initItem
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   E9           MOV     A,R1
   \   00004B   6004         JZ      ??osal_nv_item_init_0
   1234            {
   1235              return NV_ITEM_UNINIT;
   \   00004D   7909         MOV     R1,#0x9
   \   00004F   8002         SJMP    ??osal_nv_item_init_2
   1236            }
   1237            else
   1238            {
   1239              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_0:
   \   000051   790A         MOV     R1,#0xa
   1240            }
   \                     ??osal_nv_item_init_2:
   \   000053   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   1241          }
   1242          
   1243          /*********************************************************************
   1244           * @fn      osal_nv_item_len
   1245           *
   1246           * @brief   Get the data length of the item stored in NV memory.
   1247           *
   1248           * @param   id  - Valid NV item Id.
   1249           *
   1250           * @return  Item length, if found; zero otherwise.
   1251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1252          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1253          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1254            osalNvHdr_t hdr;
   1255            uint16 offset;
   1256            uint8 hotIdx;
   1257          
   1258            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   12....       LCALL   `??hotItem::?relay`  ; Banked call to: hotItem
   \   000011   E9           MOV     A,R1
   \   000012   F8           MOV     R0,A
   \   000013   C3           CLR     C
   \   000014   9403         SUBB    A,#0x3
   \   000016   504D         JNC     ??osal_nv_item_len_0
   1259            {
   1260              findPg = hotPg[hotIdx];
   \   000018   74..         MOV     A,#hotPg & 0xff
   \   00001A   29           ADD     A,R1
   \   00001B   F582         MOV     DPL,A
   \   00001D   E4           CLR     A
   \   00001E   34..         ADDC    A,#(hotPg >> 8) & 0xff
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   90....       MOV     DPTR,#findPg
   \   000026   F0           MOVX    @DPTR,A
   1261              offset = hotOff[hotIdx];
   \   000027   E8           MOV     A,R0
   \   000028   12....       LCALL   ?Subroutine41 & 0xFFFF
   1262            }
   \                     ??CrossCallReturnLabel_80:
   \   00002B   12....       LCALL   ?Subroutine20 & 0xFFFF
   1263            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   1264            {
   1265              return 0;
   1266            }
   1267          
   1268            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_105:
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   75..08       MOV     ?V0,#0x8
   \   000031   75..00       MOV     ?V1,#0x0
   \   000034   78..         MOV     R0,#?V0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP102_8
   \   00003E   EA           MOV     A,R2
   \   00003F   24F8         ADD     A,#-0x8
   \   000041   FA           MOV     R2,A
   \   000042   EB           MOV     A,R3
   \   000043   34FF         ADDC    A,#-0x1
   \   000045   FB           MOV     R3,A
   \   000046   90....       MOV     DPTR,#findPg
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   1269            return hdr.len;
   \   000053   7402         MOV     A,#0x2
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00005B   7408         MOV     A,#0x8
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   7F02         MOV     R7,#0x2
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??osal_nv_item_len_0:
   \   000065                ; Setup parameters for call to function findItem
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00006C   8B..         MOV     ?V1,R3
   \   00006E   A9..         MOV     R1,?V1
   \   000070   EA           MOV     A,R2
   \   000071   49           ORL     A,R1
   \   000072   70BA         JNZ     ??CrossCallReturnLabel_105
   \   000074   7A00         MOV     R2,#0x0
   \   000076   7B00         MOV     R3,#0x0
   \   000078   80E1         SJMP    ??CrossCallReturnLabel_101
   1270          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   29           ADD     A,R1
   \   000001   F8           MOV     R0,A
   \   000002   E4           CLR     A
   \   000003   33           RLC     A
   \   000004   F9           MOV     R1,A
   \   000005   74..         MOV     A,#hotOff & 0xff
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   74..         MOV     A,#(hotOff >> 8) & 0xff
   \   00000C   22           RET
   1271          
   1272          /*********************************************************************
   1273           * @fn      osal_nv_write
   1274           *
   1275           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1276           *          an element of an item by indexing into the item with an offset.
   1277           *
   1278           * @param   id  - Valid NV item Id.
   1279           * @param   ndx - Index offset into item
   1280           * @param   len - Length of data to write.
   1281           * @param  *buf - Data to write.
   1282           *
   1283           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1284           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1286          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1287          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   740B         MOV     A,#0xb
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8C..         MOV     ?V6,R4
   \   000016   8D..         MOV     ?V7,R5
   1288            uint8 rtrn = SUCCESS;
   \   000018   75..00       MOV     ?V9,#0x0
   1289          
   1290            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00001B                ; Setup parameters for call to function HalAdcCheckVdd
   \   00001B   794E         MOV     R1,#0x4e
   \   00001D   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000020   E9           MOV     A,R1
   \   000021   607E         JZ      ??osal_nv_write_0
   \   000023   742D         MOV     A,#0x2d
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V14,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V15,A
   1291            {
   1292              return NV_OPER_FAILED;
   1293            }
   1294            else if ( len != 0 )
   \   00002F   E5..         MOV     A,?V14
   \   000031   45..         ORL     A,?V15
   \   000033   7003         JNZ     $+5
   \   000035   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1295            {
   1296              osalNvHdr_t hdr;
   1297              uint16 origOff, srcOff;
   1298              uint16 cnt, chk;
   1299              uint8 *ptr, srcPg;
   1300          
   1301              origOff = srcOff = findItem( id );
   \   000038                ; Setup parameters for call to function findItem
   \   000038   740B         MOV     A,#0xb
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000040   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000043   7401         MOV     A,#0x1
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   EA           MOV     A,R2
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   EB           MOV     A,R3
   \   00004C   F0           MOVX    @DPTR,A
   1302              srcPg = findPg;
   \   00004D   90....       MOV     DPTR,#findPg
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V8,A
   1303              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00005B   7005         JNZ     ??osal_nv_write_2
   1304              {
   1305                return NV_ITEM_UNINIT;
   \   00005D   7909         MOV     R1,#0x9
   \   00005F   02....       LJMP    ??osal_nv_write_3 & 0xFFFF
   1306              }
   1307          
   1308              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_2:
   \   000062                ; Setup parameters for call to function HalFlashRead
   \   000062   75..08       MOV     ?V0,#0x8
   \   000065   75..00       MOV     ?V1,#0x0
   \   000068   78..         MOV     R0,#?V0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   7405         MOV     A,#0x5
   \   00006F   12....       LCALL   ?XSTACK_DISP102_8
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   24F8         ADD     A,#-0x8
   \   00007A   FA           MOV     R2,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   34FF         ADDC    A,#-0x1
   \   00007F   FB           MOV     R3,A
   \   000080   A9..         MOV     R1,?V8
   \   000082   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   1309              if ( hdr.len < (ndx + len) )
   \   00008A   7405         MOV     A,#0x5
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E5..         MOV     A,?V6
   \   000091   25..         ADD     A,?V14
   \   000093   F8           MOV     R0,A
   \   000094   E5..         MOV     A,?V7
   \   000096   35..         ADDC    A,?V15
   \   000098   F9           MOV     R1,A
   \   000099   C3           CLR     C
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   98           SUBB    A,R0
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   99           SUBB    A,R1
   \   00009F   5005         JNC     ??osal_nv_write_4
   1310              {
   1311                return NV_OPER_FAILED;
   \                     ??osal_nv_write_0:
   \   0000A1   790A         MOV     R1,#0xa
   \   0000A3   02....       LJMP    ??osal_nv_write_3 & 0xFFFF
   1312              }
   1313          
   1314              srcOff += ndx;
   \                     ??osal_nv_write_4:
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   25..         ADD     A,?V6
   \   0000AE   F5..         MOV     ?V2,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   35..         ADDC    A,?V7
   \   0000B4   F5..         MOV     ?V3,A
   \   0000B6   85....       MOV     ?V4,?V2
   \   0000B9   F5..         MOV     ?V5,A
   1315              ptr = buf;
   \   0000BB   742F         MOV     A,#0x2f
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ?Subroutine16 & 0xFFFF
   1316              cnt = len;
   1317              chk = 0;
   \                     ??CrossCallReturnLabel_21:
   \   0000C3   7E00         MOV     R6,#0x0
   \   0000C5   85....       MOV     ?V10,?V14
   \   0000C8   85....       MOV     ?V11,?V15
   1318              while ( cnt-- )
   1319              {
   1320                uint8 tmp;
   1321                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \                     ??osal_nv_write_5:
   \   0000CB                ; Setup parameters for call to function HalFlashRead
   \   0000CB   75..01       MOV     ?V12,#0x1
   \   0000CE   75..00       MOV     ?V13,#0x0
   \   0000D1   78..         MOV     R0,#?V12
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?XSTACK_DISP102_8
   \   0000DB   AA..         MOV     R2,?V4
   \   0000DD   AB..         MOV     R3,?V5
   \   0000DF   A9..         MOV     R1,?V8
   \   0000E1   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000E4   7402         MOV     A,#0x2
   \   0000E6   12....       LCALL   ?DEALLOC_XSTACK8
   1322                if ( tmp != *ptr )
   \   0000E9   E5..         MOV     A,?V10
   \   0000EB   24FF         ADD     A,#-0x1
   \   0000ED   F5..         MOV     ?V10,A
   \   0000EF   E5..         MOV     A,?V11
   \   0000F1   34FF         ADDC    A,#-0x1
   \   0000F3   F5..         MOV     ?V11,A
   \   0000F5   85..82       MOV     DPL,?XSP + 0
   \   0000F8   85..83       MOV     DPH,?XSP + 1
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   85..82       MOV     DPL,?V0
   \   000100   85..83       MOV     DPH,?V1
   \   000103   E0           MOVX    A,@DPTR
   \   000104   68           XRL     A,R0
   \   000105   6025         JZ      ??osal_nv_write_6
   1323                {
   1324                  chk = 1;  // Mark that at least one byte is different.
   \   000107   7E01         MOV     R6,#0x1
   1325                  // Calculate expected checksum after transferring old data and writing new data.
   1326                  hdr.chk -= tmp;
   \   000109   7407         MOV     A,#0x7
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   C3           CLR     C
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   98           SUBB    A,R0
   \   000111   F0           MOVX    @DPTR,A
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   9400         SUBB    A,#0x0
   \   000116   F0           MOVX    @DPTR,A
   1327                  hdr.chk += *ptr;
   \   000117   85..82       MOV     DPL,?V0
   \   00011A   85..83       MOV     DPH,?V1
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   F8           MOV     R0,A
   \   00011F   7407         MOV     A,#0x7
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E0           MOVX    A,@DPTR
   \   000125   28           ADD     A,R0
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   3400         ADDC    A,#0x0
   \   00012B   F0           MOVX    @DPTR,A
   1328                }
   1329                srcOff++;
   \                     ??osal_nv_write_6:
   \   00012C   05..         INC     ?V4
   \   00012E   E5..         MOV     A,?V4
   \   000130   7002         JNZ     ??osal_nv_write_7
   \   000132   05..         INC     ?V5
   1330                ptr++;
   \                     ??osal_nv_write_7:
   \   000134   85..82       MOV     DPL,?V0
   \   000137   85..83       MOV     DPH,?V1
   \   00013A   A3           INC     DPTR
   \   00013B   8582..       MOV     ?V0,DPL
   \   00013E   8583..       MOV     ?V1,DPH
   1331              }
   \   000141   E5..         MOV     A,?V10
   \   000143   45..         ORL     A,?V11
   \   000145   7084         JNZ     ??osal_nv_write_5
   1332          
   1333              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \   000147   EE           MOV     A,R6
   \   000148   A2E0         MOV     C,0xE0 /* A   */.0
   \   00014A   4003         JC      $+5
   \   00014C   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1334              {
   1335                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   00014F   85..82       MOV     DPL,?XSP + 0
   \   000152   85..83       MOV     DPH,?XSP + 1
   \   000155   E4           CLR     A
   \   000156   F0           MOVX    @DPTR,A
   1336                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   000157                ; Setup parameters for call to function initItem
   \   000157   A8..         MOV     R0,?XSP + 0
   \   000159   A9..         MOV     R1,?XSP + 1
   \   00015B   88..         MOV     ?V0,R0
   \   00015D   89..         MOV     ?V1,R1
   \   00015F   78..         MOV     R0,#?V0
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   7407         MOV     A,#0x7
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00016C   740D         MOV     A,#0xd
   \   00016E   12....       LCALL   ?XSTACK_DISP0_8
   \   000171   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000174   7900         MOV     R1,#0x0
   \   000176   12....       LCALL   `??initItem::?relay` ; Banked call to: initItem
   \   000179   7402         MOV     A,#0x2
   \   00017B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017E   E9           MOV     A,R1
   \   00017F   F5..         MOV     ?V4,A
   1337          
   1338                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   000181   7003         JNZ     $+5
   \   000183   02....       LJMP    ??osal_nv_write_8 & 0xFFFF
   1339                {
   1340                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   000186   7405         MOV     A,#0x5
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00018E   C3           CLR     C
   \   00018F   E8           MOV     A,R0
   \   000190   94FC         SUBB    A,#-0x4
   \   000192   E9           MOV     A,R1
   \   000193   94FF         SUBB    A,#-0x1
   \   000195   4008         JC      ??osal_nv_write_9
   \   000197   75..FC       MOV     ?V0,#-0x4
   \   00019A   75..FF       MOV     ?V1,#-0x1
   \   00019D   800D         SJMP    ??osal_nv_write_10
   \                     ??osal_nv_write_9:
   \   00019F   E8           MOV     A,R0
   \   0001A0   2403         ADD     A,#0x3
   \   0001A2   5001         JNC     ??osal_nv_write_11
   \   0001A4   09           INC     R1
   \                     ??osal_nv_write_11:
   \   0001A5   54FC         ANL     A,#0xfc
   \   0001A7   F5..         MOV     ?V0,A
   \   0001A9   E9           MOV     A,R1
   \   0001AA   F5..         MOV     ?V1,A
   1341                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_10:
   \   0001AC   A8..         MOV     R0,?V4
   \   0001AE   E8           MOV     A,R0
   \   0001AF   28           ADD     A,R0
   \   0001B0   F8           MOV     R0,A
   \   0001B1   E4           CLR     A
   \   0001B2   33           RLC     A
   \   0001B3   F9           MOV     R1,A
   \   0001B4   74..         MOV     A,#(pgOff + 14) & 0xff
   \   0001B6   28           ADD     A,R0
   \   0001B7   F5..         MOV     ?V12,A
   \   0001B9   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   0001BB   39           ADDC    A,R1
   \   0001BC   F5..         MOV     ?V13,A
   \   0001BE   85..82       MOV     DPL,?V12
   \   0001C1   F583         MOV     DPH,A
   \   0001C3   12....       LCALL   ?Subroutine24 & 0xFFFF
   1342                  srcOff = origOff;
   1343          
   1344                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1345                   * OSAL_Nv interruptions caused by resets.
   1346                   */
   1347                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \                     ??CrossCallReturnLabel_35:
   \   0001C6   7409         MOV     A,#0x9
   \   0001C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   F4           CPL     A
   \   0001CD   7003         JNZ     ??osal_nv_write_12
   \   0001CF   A3           INC     DPTR
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   F4           CPL     A
   \                     ??osal_nv_write_12:
   \   0001D2   700D         JNZ     ??osal_nv_write_13
   1348                  {
   1349                    setItem( srcPg, srcOff, eNvXfer );
   \   0001D4                ; Setup parameters for call to function setItem
   \   0001D4   7C00         MOV     R4,#0x0
   \   0001D6   7401         MOV     A,#0x1
   \   0001D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DB   12....       LCALL   ?Subroutine19 & 0xFFFF
   1350                  }
   \                     ??CrossCallReturnLabel_27:
   \   0001DE   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   1351          
   1352                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??osal_nv_write_13:
   \   0001E1                ; Setup parameters for call to function xferBuf
   \   0001E1   78..         MOV     R0,#?V6
   \   0001E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E6   8E..         MOV     ?V10,R6
   \   0001E8   8F..         MOV     ?V11,R7
   \   0001EA   78..         MOV     R0,#?V10
   \   0001EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EF   AC..         MOV     R4,?V4
   \   0001F1   7405         MOV     A,#0x5
   \   0001F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F6   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001F9   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   0001FC   7404         MOV     A,#0x4
   \   0001FE   12....       LCALL   ?DEALLOC_XSTACK8
   1353                  srcOff += ndx;
   1354                  dstOff += ndx;
   \   000201   EE           MOV     A,R6
   \   000202   25..         ADD     A,?V6
   \   000204   FE           MOV     R6,A
   \   000205   EF           MOV     A,R7
   \   000206   35..         ADDC    A,?V7
   \   000208   FF           MOV     R7,A
   1355          
   1356                  writeBuf( dstPg, dstOff, len, buf );
   \   000209                ; Setup parameters for call to function writeBuf
   \   000209   742F         MOV     A,#0x2f
   \   00020B   12....       LCALL   ?XSTACK_DISP0_8
   \   00020E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000211   AC..         MOV     R4,?V14
   \   000213   AD..         MOV     R5,?V15
   \   000215   EE           MOV     A,R6
   \   000216   FA           MOV     R2,A
   \   000217   EF           MOV     A,R7
   \   000218   FB           MOV     R3,A
   \   000219   A9..         MOV     R1,?V4
   \   00021B   12....       LCALL   `??writeBuf::?relay` ; Banked call to: writeBuf
   \   00021E   7402         MOV     A,#0x2
   \   000220   12....       LCALL   ?DEALLOC_XSTACK8
   1357                  srcOff += len;
   1358                  dstOff += len;
   1359          
   1360                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   000223                ; Setup parameters for call to function xferBuf
   \   000223   7405         MOV     A,#0x5
   \   000225   12....       LCALL   ?XSTACK_DISP0_8
   \   000228   E0           MOVX    A,@DPTR
   \   000229   C3           CLR     C
   \   00022A   95..         SUBB    A,?V6
   \   00022C   F8           MOV     R0,A
   \   00022D   A3           INC     DPTR
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   95..         SUBB    A,?V7
   \   000231   F9           MOV     R1,A
   \   000232   E8           MOV     A,R0
   \   000233   C3           CLR     C
   \   000234   95..         SUBB    A,?V14
   \   000236   F5..         MOV     ?V6,A
   \   000238   E9           MOV     A,R1
   \   000239   95..         SUBB    A,?V15
   \   00023B   F5..         MOV     ?V7,A
   \   00023D   78..         MOV     R0,#?V6
   \   00023F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000242   EE           MOV     A,R6
   \   000243   25..         ADD     A,?V14
   \   000245   F5..         MOV     ?V6,A
   \   000247   EF           MOV     A,R7
   \   000248   35..         ADDC    A,?V15
   \   00024A   F5..         MOV     ?V7,A
   \   00024C   78..         MOV     R0,#?V6
   \   00024E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000251   AC..         MOV     R4,?V4
   \   000253   E5..         MOV     A,?V2
   \   000255   25..         ADD     A,?V14
   \   000257   FA           MOV     R2,A
   \   000258   E5..         MOV     A,?V3
   \   00025A   35..         ADDC    A,?V15
   \   00025C   FB           MOV     R3,A
   \   00025D   A9..         MOV     R1,?V8
   \   00025F   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   000262   7404         MOV     A,#0x4
   \   000264   12....       LCALL   ?DEALLOC_XSTACK8
   1361          
   1362                  // Calculate and write the new checksum.
   1363                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   000267   85..82       MOV     DPL,?V12
   \   00026A   85..83       MOV     DPH,?V13
   \   00026D   12....       LCALL   ?Subroutine24 & 0xFFFF
   1364          
   1365                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \                     ??CrossCallReturnLabel_36:
   \   000270                ; Setup parameters for call to function calcChkF
   \   000270   7405         MOV     A,#0x5
   \   000272   12....       LCALL   ?XSTACK_DISP0_8
   \   000275   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000278   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   00027B   7407         MOV     A,#0x7
   \   00027D   12....       LCALL   ?XSTACK_DISP0_8
   \   000280   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000283   EA           MOV     A,R2
   \   000284   6C           XRL     A,R4
   \   000285   7002         JNZ     ??osal_nv_write_14
   \   000287   EB           MOV     A,R3
   \   000288   6D           XRL     A,R5
   \                     ??osal_nv_write_14:
   \   000289   702C         JNZ     ??osal_nv_write_8
   1366                  {
   1367                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   00028B                ; Setup parameters for call to function setChk
   \   00028B   EE           MOV     A,R6
   \   00028C   FA           MOV     R2,A
   \   00028D   EF           MOV     A,R7
   \   00028E   FB           MOV     R3,A
   \   00028F   A9..         MOV     R1,?V4
   \   000291   12....       LCALL   `??setChk::?relay`   ; Banked call to: setChk
   \   000294   8A..         MOV     ?V0,R2
   \   000296   8B..         MOV     ?V1,R3
   \   000298   A8..         MOV     R0,?V0
   \   00029A   A9..         MOV     R1,?V1
   \   00029C   7407         MOV     A,#0x7
   \   00029E   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   68           XRL     A,R0
   \   0002A3   7003         JNZ     ??osal_nv_write_15
   \   0002A5   A3           INC     DPTR
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   69           XRL     A,R1
   \                     ??osal_nv_write_15:
   \   0002A8   700D         JNZ     ??osal_nv_write_8
   1368                    {
   1369                      rtrn = NV_OPER_FAILED;
   1370                    }
   1371                    else
   1372                    {
   1373                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \   0002AA                ; Setup parameters for call to function hotItemUpdate
   \   0002AA   7403         MOV     A,#0x3
   \   0002AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AF   12....       LCALL   ?Subroutine18 & 0xFFFF
   1374                    }
   1375                  }
   1376                  else
   1377                  {
   1378                    rtrn = NV_OPER_FAILED;
   1379                  }
   1380                }
   \                     ??CrossCallReturnLabel_26:
   \   0002B2   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \   0002B5   8003         SJMP    ??osal_nv_write_16
   1381                else
   1382                {
   1383                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_8:
   \   0002B7   75..0A       MOV     ?V9,#0xa
   1384                }
   1385          
   1386                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_16:
   \   0002BA   85..82       MOV     DPL,?XSP + 0
   \   0002BD   85..83       MOV     DPH,?XSP + 1
   \   0002C0   E0           MOVX    A,@DPTR
   \   0002C1   6054         JZ      ??osal_nv_write_17
   1387                {
   1388                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1389                   * page and writing the new value failed, then the compaction must be aborted.
   1390                   */
   1391                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   0002C3   65..         XRL     A,?V8
   \   0002C5   7010         JNZ     ??osal_nv_write_18
   \   0002C7   740A         MOV     A,#0xa
   \   0002C9   65..         XRL     A,?V9
   \   0002CB   700A         JNZ     ??osal_nv_write_18
   1392                  {
   1393                    erasePage( pgRes );
   \   0002CD                ; Setup parameters for call to function erasePage
   \   0002CD   90....       MOV     DPTR,#pgRes
   \   0002D0   E0           MOVX    A,@DPTR
   \   0002D1   F9           MOV     R1,A
   \   0002D2   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   0002D5   805D         SJMP    ??osal_nv_write_1
   1394                  }
   1395                  else
   1396                  {
   1397                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_18:
   \   0002D7   740D         MOV     A,#0xd
   \   0002D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DC   E4           CLR     A
   \   0002DD   F0           MOVX    @DPTR,A
   \   0002DE   A3           INC     DPTR
   \   0002DF   F0           MOVX    @DPTR,A
   \   0002E0   740F         MOV     A,#0xf
   \   0002E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E5   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0002E8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002EB   740F         MOV     A,#0xf
   \   0002ED   12....       LCALL   ?XSTACK_DISP102_8
   \   0002F0   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0002F3   12....       LCALL   ?S_SHL
   \   0002F6   FA           MOV     R2,A
   \   0002F7   AB..         MOV     R3,?V1
   \   0002F9   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0002FC   7402         MOV     A,#0x2
   \   0002FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000301                ; Setup parameters for call to function erasePage
   \   000301   85..82       MOV     DPL,?XSP + 0
   \   000304   85..83       MOV     DPH,?XSP + 1
   \   000307   E0           MOVX    A,@DPTR
   \   000308   F9           MOV     R1,A
   \   000309   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   00030C   85..82       MOV     DPL,?XSP + 0
   \   00030F   85..83       MOV     DPH,?XSP + 1
   \   000312   E0           MOVX    A,@DPTR
   \   000313   90....       MOV     DPTR,#pgRes
   \   000316   F0           MOVX    @DPTR,A
   1398                  }
   1399                }
   1400          
   1401                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1402                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1403                 */
   1404                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_17:
   \   000317   85..82       MOV     DPL,?XSP + 0
   \   00031A   85..83       MOV     DPH,?XSP + 1
   \   00031D   E0           MOVX    A,@DPTR
   \   00031E   65..         XRL     A,?V8
   \   000320   6012         JZ      ??osal_nv_write_1
   \   000322   740A         MOV     A,#0xa
   \   000324   65..         XRL     A,?V9
   \   000326   600C         JZ      ??osal_nv_write_1
   1405                {
   1406                  setItem( srcPg, origOff, eNvZero );
   \   000328                ; Setup parameters for call to function setItem
   \   000328   7C01         MOV     R4,#0x1
   \   00032A   EC           MOV     A,R4
   \   00032B   12....       LCALL   ?XSTACK_DISP0_8
   \   00032E   12....       LCALL   ?Subroutine19 & 0xFFFF
   1407                }
   1408              }
   1409            }
   \                     ??CrossCallReturnLabel_29:
   \   000331   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   1410          
   1411            return rtrn;
   \                     ??osal_nv_write_1:
   \   000334   A9..         MOV     R1,?V9
   \                     ??osal_nv_write_3:
   \   000336   7415         MOV     A,#0x15
   \   000338   02....       LJMP    ?Subroutine1 & 0xFFFF
   1412          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   95..         SUBB    A,?V0
   \   000004   FE           MOV     R6,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   95..         SUBB    A,?V1
   \   000009   FF           MOV     R7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   A9..         MOV     R1,?V8
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   EE           MOV     A,R6
   \   000004   FA           MOV     R2,A
   \   000005   EF           MOV     A,R7
   \   000006   FB           MOV     R3,A
   \   000007   A9..         MOV     R1,?V4
   \   000009   22           RET
   1413          
   1414          /*********************************************************************
   1415           * @fn      osal_nv_read
   1416           *
   1417           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1418           *          an element of an item by indexing into the item with an offset.
   1419           *          Read data is copied into *buf.
   1420           *
   1421           * @param   id  - Valid NV item Id.
   1422           * @param   ndx - Index offset into item
   1423           * @param   len - Length of data to read.
   1424           * @param  *buf - Data is read into this buffer.
   1425           *
   1426           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1427           *          Otherwise, NV_OPER_FAILED for failure.
   1428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1429          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1430          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   1431            uint16 offset;
   1432            uint8 hotIdx;
   1433          
   1434            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000D                ; Setup parameters for call to function hotItem
   \   00000D   12....       LCALL   `??hotItem::?relay`  ; Banked call to: hotItem
   \   000010   E9           MOV     A,R1
   \   000011   F8           MOV     R0,A
   \   000012   7410         MOV     A,#0x10
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V4,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V5,A
   \   00001E   7412         MOV     A,#0x12
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000026   E8           MOV     A,R0
   \   000027   C3           CLR     C
   \   000028   9403         SUBB    A,#0x3
   \   00002A   5027         JNC     ??osal_nv_read_0
   1435            {
   1436              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   00002C   E8           MOV     A,R0
   \   00002D   FE           MOV     R6,A
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   78..         MOV     R0,#?V4
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   AC..         MOV     R4,?V0
   \   000035   AD..         MOV     R5,?V1
   \   000037   EE           MOV     A,R6
   \   000038   12....       LCALL   ?Subroutine41 & 0xFFFF
   1437              return SUCCESS;
   1438            }
   \                     ??CrossCallReturnLabel_81:
   \   00003B   39           ADDC    A,R1
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   25..         ADD     A,?V2
   \   000041   FA           MOV     R2,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   35..         ADDC    A,?V3
   \   000046   FB           MOV     R3,A
   \   000047   74..         MOV     A,#hotPg & 0xff
   \   000049   2E           ADD     A,R6
   \   00004A   F582         MOV     DPL,A
   \   00004C   E4           CLR     A
   \   00004D   34..         ADDC    A,#(hotPg >> 8) & 0xff
   \   00004F   F583         MOV     DPH,A
   \   000051   8023         SJMP    ??osal_nv_read_1
   1439          
   1440            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   000053                ; Setup parameters for call to function findItem
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00005A   EA           MOV     A,R2
   \   00005B   4B           ORL     A,R3
   \   00005C   7004         JNZ     ??osal_nv_read_2
   1441            {
   1442              return NV_OPER_FAILED;
   \   00005E   790A         MOV     R1,#0xa
   \   000060   8020         SJMP    ??osal_nv_read_3
   1443            }
   1444            else
   1445            {
   1446              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   000062                ; Setup parameters for call to function HalFlashRead
   \   000062   78..         MOV     R0,#?V4
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   AC..         MOV     R4,?V0
   \   000069   AD..         MOV     R5,?V1
   \   00006B   EA           MOV     A,R2
   \   00006C   25..         ADD     A,?V2
   \   00006E   FA           MOV     R2,A
   \   00006F   EB           MOV     A,R3
   \   000070   35..         ADDC    A,?V3
   \   000072   FB           MOV     R3,A
   \   000073   90....       MOV     DPTR,#findPg
   \                     ??osal_nv_read_1:
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00007B   7402         MOV     A,#0x2
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
   1447              return SUCCESS;
   \   000080   7900         MOV     R1,#0x0
   1448            }
   \                     ??osal_nv_read_3:
   \   000082   02....       LJMP    ?Subroutine6 & 0xFFFF
   1449          }
   1450          
   1451          /*********************************************************************
   1452           * @fn      osal_nv_delete
   1453           *
   1454           * @brief   Delete item from NV. This function will fail if the length
   1455           *          parameter does not match the length of the item in NV.
   1456           *
   1457           * @param   id  - Valid NV item Id.
   1458           * @param   len - Length of item to delete.
   1459           *
   1460           * @return  SUCCESS if item was deleted,
   1461           *          NV_ITEM_UNINIT if item did not exist in NV,
   1462           *          NV_BAD_ITEM_LEN if length parameter not correct,
   1463           *          NV_OPER_FAILED if attempted deletion failed.
   1464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1465          uint8 osal_nv_delete( uint16 id, uint16 len )
   \                     osal_nv_delete:
   1466          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   1467            uint16 length;
   1468            uint16 offset;
   1469          
   1470            offset = findItem( id );
   \   00000D                ; Setup parameters for call to function findItem
   \   00000D   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000010   8A..         MOV     ?V0,R2
   \   000012   8B..         MOV     ?V1,R3
   1471            if ( offset == OSAL_NV_ITEM_NULL )
   \   000014   EA           MOV     A,R2
   \   000015   45..         ORL     A,?V1
   \   000017   7004         JNZ     ??osal_nv_delete_0
   1472            {
   1473              // NV item does not exist
   1474              return NV_ITEM_UNINIT;
   \   000019   7909         MOV     R1,#0x9
   \   00001B   803D         SJMP    ??osal_nv_delete_1
   1475            }
   1476          
   1477            length = osal_nv_item_len( id );
   1478            if ( length != len )
   \                     ??osal_nv_delete_0:
   \   00001D                ; Setup parameters for call to function osal_nv_item_len
   \   00001D   EE           MOV     A,R6
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000024   8A..         MOV     ?V4,R2
   \   000026   8B..         MOV     ?V5,R3
   \   000028   E5..         MOV     A,?V2
   \   00002A   65..         XRL     A,?V4
   \   00002C   7004         JNZ     ??osal_nv_delete_2
   \   00002E   E5..         MOV     A,?V3
   \   000030   65..         XRL     A,?V5
   \                     ??osal_nv_delete_2:
   \   000032   6004         JZ      ??osal_nv_delete_3
   1479            {
   1480              // NV item has different length
   1481              return NV_BAD_ITEM_LEN;
   \   000034   790C         MOV     R1,#0xc
   \   000036   8022         SJMP    ??osal_nv_delete_1
   1482            }
   1483          
   1484            // Set item header ID to zero to 'delete' the item
   1485            setItem( findPg, offset, eNvZero );
   \                     ??osal_nv_delete_3:
   \   000038                ; Setup parameters for call to function setItem
   \   000038   7C01         MOV     R4,#0x1
   \   00003A   AA..         MOV     R2,?V0
   \   00003C   AB..         MOV     R3,?V1
   \   00003E   90....       MOV     DPTR,#findPg
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   1486          
   1487            // Verify that item has been removed
   1488            offset = findItem( id );
   1489            if ( offset != OSAL_NV_ITEM_NULL )
   \   000046                ; Setup parameters for call to function findItem
   \   000046   EE           MOV     A,R6
   \   000047   FA           MOV     R2,A
   \   000048   EF           MOV     A,R7
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00004D   8B..         MOV     ?V1,R3
   \   00004F   EA           MOV     A,R2
   \   000050   45..         ORL     A,?V1
   \   000052   6004         JZ      ??osal_nv_delete_4
   1490            {
   1491              // Still there
   1492              return NV_OPER_FAILED;
   \   000054   790A         MOV     R1,#0xa
   \   000056   8002         SJMP    ??osal_nv_delete_1
   1493            }
   1494            else
   1495            {
   1496              // Yes, it's gone
   1497              return SUCCESS;
   \                     ??osal_nv_delete_4:
   \   000058   7900         MOV     R1,#0x0
   1498            }
   \                     ??osal_nv_delete_1:
   \   00005A   02....       LJMP    ?Subroutine5 & 0xFFFF
   1499          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   90....       MOV     DPTR,#pgRes
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0,A
   \   000006   7409         MOV     A,#0x9
   \   000008   78..         MOV     R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function HalFlashWrite
   \   000004                ; Setup parameters for call to function HalFlashWrite
   \   000004                ; Setup parameters for call to function HalFlashWrite
   \   000004   75..01       MOV     ?V0,#0x1
   \   000007   F5..         MOV     ?V1,A
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E5..         MOV     A,?V8
   \   000002   2400         ADD     A,#0x0
   \   000004   FA           MOV     R2,A
   \   000005   E5..         MOV     A,?V9
   \   000007   35..         ADDC    A,?V7
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??erasePage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??compactPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??findItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setChk::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setChk

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcChkF::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWordH::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??xferBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItemUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItemUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_len::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_write::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_delete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_delete
   1500          
   1501          /*********************************************************************
   1502           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     71   calcChkF
        0     22   -> HalFlashRead
      1     85   compactPage
        0     43   -> HalFlashRead
        0     43   -> HalFlashWrite
        0     41   -> calcChkF
        0     41   -> erasePage
        0     44   -> writeItem
        0     41   -> writeWordH
        0     45   -> xferBuf
      0     54   erasePage
        0      9   -> HalFlashErase
      0     61   findItem
        0     12   -> initPage
      2     18   hotItem
      1     54   hotItemUpdate
      1     90   initItem
        0     42   -> HalFlashRead
        0     42   -> HalFlashWrite
        0     40   -> compactPage
        0     40   -> erasePage
        0     43   -> writeItem
      0     30   initNV
        0     30   -> HalFlashRead
        0     30   -> HalFlashWrite
        0     28   -> compactPage
        0     28   -> erasePage
        0     28   -> initPage
      1     79   initPage
        0     51   -> HalFlashRead
        0     51   -> HalFlashWrite
        0     49   -> calcChkF
        0     49   -> findItem
      0     14   osal_nv_delete
        0     14   -> findItem
        0     14   -> osal_nv_item_len
        0     14   -> setItem
      2      0   osal_nv_init
        2      0   -> initNV
      0     16   osal_nv_item_init
        0     12   -> HalAdcCheckVdd
        0     12   -> findItem
        0     12   -> hotItemUpdate
        0     14   -> initItem
      0     34   osal_nv_item_len
        0     20   -> HalFlashRead
        0     18   -> findItem
        0     18   -> hotItem
      0     22   osal_nv_read
        0     18   -> HalFlashRead
        0     16   -> findItem
        0     16   -> hotItem
      0     53   osal_nv_write
        0     45   -> HalAdcCheckVdd
        0     47   -> HalFlashRead
        0     47   -> HalFlashWrite
        0     45   -> calcChkF
        0     45   -> erasePage
        0     45   -> findItem
        0     45   -> hotItemUpdate
        0     47   -> initItem
        0     45   -> setChk
        0     45   -> setItem
        0     47   -> writeBuf
        0     49   -> xferBuf
      0     61   setChk
        0     16   -> HalFlashRead
        0     14   -> writeWordH
      0     69   setItem
        0     24   -> HalFlashRead
        0     24   -> HalFlashWrite
      1     71   writeBuf
        0     24   -> HalFlashRead
        0     24   -> HalFlashWrite
      0     76   writeItem
        0     32   -> HalFlashRead
        0     32   -> HalFlashWrite
        0     30   -> calcChkF
        0     30   -> hotItemUpdate
        0     30   -> setChk
        0     32   -> writeBuf
      1     59   writeWordH
        0     18   -> HalFlashWrite
      0     75   xferBuf
        0     26   -> HalFlashRead
        0     26   -> HalFlashWrite


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ??Subroutine47_0
       5  ??Subroutine48_0
       6  ??Subroutine49_0
       3  ?Subroutine0
       8  ?Subroutine1
      12  ?Subroutine10
      12  ?Subroutine11
      11  ?Subroutine12
       9  ?Subroutine13
      16  ?Subroutine14
       6  ?Subroutine15
       8  ?Subroutine16
      11  ?Subroutine17
      10  ?Subroutine18
       8  ?Subroutine19
       5  ?Subroutine2
       3  ?Subroutine20
      11  ?Subroutine21
       2  ?Subroutine22
      16  ?Subroutine23
      11  ?Subroutine24
       8  ?Subroutine25
       4  ?Subroutine26
      10  ?Subroutine27
       7  ?Subroutine28
       4  ?Subroutine29
       8  ?Subroutine3
       6  ?Subroutine30
       7  ?Subroutine31
      11  ?Subroutine32
      11  ?Subroutine33
      12  ?Subroutine34
       9  ?Subroutine35
      11  ?Subroutine36
      12  ?Subroutine37
      11  ?Subroutine38
      13  ?Subroutine39
       8  ?Subroutine4
      17  ?Subroutine40
      13  ?Subroutine41
      12  ?Subroutine42
      11  ?Subroutine43
       6  ?Subroutine44
       6  ?Subroutine45
      15  ?Subroutine46
       5  ?Subroutine5
       5  ?Subroutine6
       7  ?Subroutine7
      12  ?Subroutine8
      18  ?Subroutine9
   12288  _nvBuf
     142  calcChkF
       6  calcChkF::?relay
     839  compactPage
       6  compactPage::?relay
      28  erasePage
       6  erasePage::?relay
      64  findItem
       6  findItem::?relay
       1  findPg
       6  hotIds
      37  hotItem
       6  hotItem::?relay
      62  hotItemUpdate
       6  hotItemUpdate::?relay
       6  hotOff
       3  hotPg
     476  initItem
       6  initItem::?relay
     341  initNV
       6  initNV::?relay
     800  initPage
       6  initPage::?relay
      93  osal_nv_delete
       6  osal_nv_delete::?relay
       9  osal_nv_init
       6  osal_nv_init::?relay
      86  osal_nv_item_init
       6  osal_nv_item_init::?relay
     122  osal_nv_item_len
       6  osal_nv_item_len::?relay
     133  osal_nv_read
       6  osal_nv_read::?relay
     827  osal_nv_write
       6  osal_nv_write::?relay
      12  pgLost
      12  pgOff
       1  pgRes
      90  setChk
       6  setChk::?relay
     200  setItem
       6  setItem::?relay
     434  writeBuf
       6  writeBuf::?relay
     547  writeItem
       6  writeItem::?relay
     114  writeWordH
       6  writeWordH::?relay
     556  xferBuf
       6  xferBuf::?relay

 
  6 460 bytes in segment BANKED_CODE
    126 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
  6 586 bytes of CODE  memory
      6 bytes of CONST memory
 12 323 bytes of XDATA memory

Errors: none
Warnings: none
