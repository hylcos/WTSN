###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                10/Mar/2016  12:35:26
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoCoordinator.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoCoordinator.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        xNV_RESTORE -D ZTOOL_P1 -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\DemoCoordinator.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\DemoCoordinator.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoCoordinator.c
      1          /**************************************************************************************************
      2            Filename:       DemoCoordinator.c
      3          
      4            Description:    Coordinator application for the sensor demo utilizing Simple API.
      5          
      6                            The collector node can be set in a state where it accepts
      7                            incoming reports from the sensor nodes, and can send the reports
      8                            via the UART to a PC tool. The collector node in this state
      9                            functions as a gateway. The collector nodes that are not in the
     10                            gateway node function as routers in the network.
     11          
     12          
     13            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     14          
     15            IMPORTANT: Your use of this Software is limited to those specific rights
     16            granted under the terms of a software license agreement between the user
     17            who downloaded the software, his/her employer (which must be your employer)
     18            and Texas Instruments Incorporated (the "License").  You may not use this
     19            Software unless you agree to abide by the terms of the License. The License
     20            limits your use, and you acknowledge, that the Software may not be modified,
     21            copied or distributed unless embedded on a Texas Instruments microcontroller
     22            or used solely and exclusively in conjunction with a Texas Instruments radio
     23            frequency transceiver, which is integrated into your product.  Other than for
     24            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     25            works of, modify, distribute, perform, display or sell this Software and/or
     26            its documentation for any purpose.
     27          
     28            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     29            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     30            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     31            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     32            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     33            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     34            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     35            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     36            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     37            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     38            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     39          
     40            Should you have any questions regarding your right to use this Software,
     41            contact Texas Instruments Incorporated at www.TI.com.
     42          **************************************************************************************************/
     43          
     44          /******************************************************************************
     45           * INCLUDES
     46           */
     47          
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "sapi.h"
     52          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr P2INP
   \                     P2INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     53          #include "hal_led.h"
     54          #include "hal_lcd.h"
     55          #include "hal_uart.h"
     56          #include "DemoApp.h"
     57          
     58          /******************************************************************************
     59           * CONSTANTS
     60           */
     61          
     62          // General UART frame offsets
     63          #define FRAME_SOF_OFFSET                    0
     64          #define FRAME_LENGTH_OFFSET                 1
     65          #define FRAME_CMD0_OFFSET                   2
     66          #define FRAME_CMD1_OFFSET                   3
     67          #define FRAME_DATA_OFFSET                   4
     68          
     69          // ZB_RECEIVE_DATA_INDICATION offsets
     70          #define ZB_RECV_SRC_OFFSET                  0
     71          #define ZB_RECV_CMD_OFFSET                  2
     72          #define ZB_RECV_LEN_OFFSET                  4
     73          #define ZB_RECV_DATA_OFFSET                 6
     74          #define ZB_RECV_FCS_OFFSET                  8
     75          
     76          // ZB_RECEIVE_DATA_INDICATION frame length
     77          #define ZB_RECV_LENGTH                      15
     78          
     79          // PING response frame length and offset
     80          #define SYS_PING_RSP_LENGTH                 7
     81          #define SYS_PING_CMD_OFFSET                 1
     82          
     83          // Stack Profile
     84          #define ZIGBEE_2007                         0x0040
     85          #define ZIGBEE_PRO_2007                     0x0041
     86          
     87          #ifdef ZIGBEEPRO
     88          #define STACK_PROFILE                       ZIGBEE_PRO_2007
     89          #else
     90          #define STACK_PROFILE                       ZIGBEE_2007
     91          #endif
     92          
     93          #define CPT_SOP                             0xFE
     94          #define SYS_PING_REQUEST                    0x0021
     95          #define SYS_PING_RESPONSE                   0x0161
     96          #define ZB_RECEIVE_DATA_INDICATION          0x8746
     97          
     98          // Application States
     99          #define APP_INIT                            0
    100          #define APP_START                           2
    101          
    102          // Application osal event identifiers
    103          #define MY_START_EVT                        0x0001
    104          #define MY_REPORT_EVT                       0x0002
    105          
    106          /******************************************************************************
    107           * TYPEDEFS
    108           */
    109          typedef struct
    110          {
    111            uint16              source;
    112            uint16              parent;
    113            uint8               temp;
    114            uint8               voltage;
    115          } gtwData_t;
    116          
    117          /******************************************************************************
    118           * LOCAL VARIABLES
    119           */
    120          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          static uint8 appState =             APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    122          static uint8 myStartRetryDelay =    10;          // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    123          static gtwData_t gtwData;

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          static uint8 doorState         =        DOOR_OPEN;
   \                     doorState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for doorState>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          static uint8 buttonState       =        0;
   \                     buttonState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    126          /******************************************************************************
    127           * LOCAL FUNCTIONS
    128           */
    129          
    130          static uint8 calcFCS(uint8 *pBuf, uint8 len);
    131          static void sysPingReqRcvd(void);
    132          static void sysPingRsp(void);
    133          static void sendGtwReport(gtwData_t *gtwData);
    134          
    135          /******************************************************************************
    136           * GLOBAL VARIABLES
    137           */
    138          
    139          // Inputs and Outputs for Collector device
    140          #define NUM_OUT_CMD_COLLECTOR           1
    141          #define NUM_IN_CMD_COLLECTOR            1
    142          
    143          // List of output and input commands for Collector device

   \                                 In  segment XDATA_ROM_C, align 1
    144          const cId_t zb_InCmdList[NUM_IN_CMD_COLLECTOR] =
   \                     zb_InCmdList:
   \   000000   0100         DW 1
    145          {
    146            LOCK_CONTROL_CMD_ID,
    147          };

   \                                 In  segment XDATA_ROM_C, align 1
    148          const cId_t zb_OutCmdList[NUM_OUT_CMD_COLLECTOR] =
   \                     zb_OutCmdList:
   \   000000   0300         DW 3
    149          {
    150            LOCK_STATUS_CMD_ID,
    151          };
    152          // Define SimpleDescriptor for Collector device

   \                                 In  segment XDATA_ROM_C, align 1
    153          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0200         DW 2
   \   000005   01           DB 1
   \   000006   01           DB 1
   \   000007   ....         DW zb_InCmdList
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    154          {
    155            MY_ENDPOINT_ID,             //  Endpoint
    156            MY_PROFILE_ID,              //  Profile ID
    157            DEV_ID_COLLECTOR,           //  Device ID
    158            DEVICE_VERSION_COLLECTOR,   //  Device Version
    159            0,                          //  Reserved
    160            NUM_IN_CMD_COLLECTOR,       //  Number of Input Commands
    161            (cId_t *) zb_InCmdList,     //  Input Command List
    162            NUM_OUT_CMD_COLLECTOR,      //  Number of Output Commands
    163            (cId_t *) zb_OutCmdList             //  Output Command List
    164          };
    165          
    166          /******************************************************************************
    167           * FUNCTIONS
    168           */
    169          
    170          /******************************************************************************
    171           * @fn          zb_HandleOsalEvent
    172           *
    173           * @brief       The zb_HandleOsalEvent function is called by the operating
    174           *              system when a task event is set
    175           *
    176           * @param       event - Bitmask containing the events that have been set
    177           *
    178           * @return      none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    181          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
    182            if( event & SYS_EVENT_MSG )
    183            {
    184            }
    185          
    186            if( event & ZB_ENTRY_EVENT )
   \   00000D   5410         ANL     A,#0x10
   \   00000F   6035         JZ      ??zb_HandleOsalEvent_0
    187            {
    188              // Initialise UART
    189              initUart(uartRxCB);
   \   000011                ; Setup parameters for call to function initUart
   \   000011   7A..         MOV     R2,#`??uartRxCB::?relay` & 0xff
   \   000013   7B..         MOV     R3,#(`??uartRxCB::?relay` >> 8) & 0xff
   \   000015   12....       LCALL   `??initUart::?relay` ; Banked call to: initUart
    190              osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, 100 );
   \   000018                ; Setup parameters for call to function osal_start_timerEx
   \   000018   90....       MOV     DPTR,#__Constant_64
   \   00001B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   7B00         MOV     R3,#0x0
   \   000022   90....       MOV     DPTR,#sapi_TaskID
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00002A   7404         MOV     A,#0x4
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
    191              // blind LED 1 to indicate starting/joining a network
    192              HalLedBlink ( HAL_LED_1, 0, 50, 500 );
   \   00002F                ; Setup parameters for call to function HalLedBlink
   \   00002F   7CF4         MOV     R4,#-0xc
   \   000031   7D01         MOV     R5,#0x1
   \   000033   7B32         MOV     R3,#0x32
   \   000035   7A00         MOV     R2,#0x0
   \   000037   7901         MOV     R1,#0x1
   \   000039   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    193              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   00003C                ; Setup parameters for call to function HalLedSet
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7902         MOV     R1,#0x2
   \   000040   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    194          
    195              // Start the device
    196              zb_StartRequest();
   \   000043                ; Setup parameters for call to function zb_StartRequest
   \   000043   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    197            }
    198          
    199            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   000046   EE           MOV     A,R6
   \   000047   A2E0         MOV     C,0xE0 /* A   */.0
   \   000049   5003         JNC     ??zb_HandleOsalEvent_1
    200            {
    201              zb_StartRequest();
   \   00004B                ; Setup parameters for call to function zb_StartRequest
   \   00004B   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    202            }
    203            if (event & MY_REPORT_EVT ){
   \                     ??zb_HandleOsalEvent_1:
   \   00004E   EE           MOV     A,R6
   \   00004F   5402         ANL     A,#0x2
   \   000051   6070         JZ      ??zb_HandleOsalEvent_2
    204                  int buttonStateNew =  MCU_IO_GET(0,2);
   \   000053   E580         MOV     A,0x80
   \   000055   5404         ANL     A,#0x4
   \   000057   FE           MOV     R6,A
    205                  if (buttonState != buttonStateNew){
   \   000058   90....       MOV     DPTR,#buttonState
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   C0E0         PUSH    A
   \   00005E   EE           MOV     A,R6
   \   00005F   F8           MOV     R0,A
   \   000060   D0E0         POP     A
   \   000062   68           XRL     A,R0
   \   000063   6047         JZ      ??zb_HandleOsalEvent_3
    206                    uint8 pData[LOCK_CMD_LENGTH];
    207                    pData[LOCK_CMD_OFFSET] = buttonStateNew % 3;
   \   000065   EE           MOV     A,R6
   \   000066   75F003       MOV     B,#0x3
   \   000069   12....       LCALL   ?SC_DIV_MOD
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   E5F0         MOV     A,B
   \   000074   F0           MOVX    @DPTR,A
    208                    uint8 txOptions;
    209                    zb_SendDataRequest( 0xFFFE, LOCK_STATUS_CMD_ID, LOCK_CMD_LENGTH , pData, 0, txOptions, 0 );
                                                                                                       ^
Warning[Pe549]: variable "txOptions" is used before its value is set
   \   000075                ; Setup parameters for call to function zb_SendDataRequest
   \   000075   75..00       MOV     ?V0,#0x0
   \   000078   78..         MOV     R0,#?V0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007D   78..         MOV     R0,#?V0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?XSTACK_DISP100_8
   \   00008C   88..         MOV     ?V0,R0
   \   00008E   89..         MOV     ?V1,R1
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   7901         MOV     R1,#0x1
   \   000097   7C03         MOV     R4,#0x3
   \   000099   7D00         MOV     R5,#0x0
   \   00009B   7AFE         MOV     R2,#-0x2
   \   00009D   7BFF         MOV     R3,#-0x1
   \   00009F   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   0000A2   7405         MOV     A,#0x5
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
    210                    buttonState = buttonStateNew;
   \   0000A7   EE           MOV     A,R6
   \   0000A8   90....       MOV     DPTR,#buttonState
   \   0000AB   F0           MOVX    @DPTR,A
    211                  }
    212                  osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, 100 );
   \                     ??zb_HandleOsalEvent_3:
   \   0000AC                ; Setup parameters for call to function osal_start_timerEx
   \   0000AC   90....       MOV     DPTR,#__Constant_64
   \   0000AF   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000B2   7A02         MOV     R2,#0x2
   \   0000B4   7B00         MOV     R3,#0x0
   \   0000B6   90....       MOV     DPTR,#sapi_TaskID
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F9           MOV     R1,A
   \   0000BB   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000BE   7404         MOV     A,#0x4
   \   0000C0   12....       LCALL   ?DEALLOC_XSTACK8
    213            }
    214          }
   \                     ??zb_HandleOsalEvent_2:
   \   0000C3   7401         MOV     A,#0x1
   \   0000C5                REQUIRE ?Subroutine0
   \   0000C5                REQUIRE _A_P0
   \   0000C5                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    215          
    216          /******************************************************************************
    217           * @fn      zb_HandleKeys
    218           *
    219           * @brief   Handles all key events for this device.
    220           *
    221           * @param   shift - true if in shift/alt.
    222           * @param   keys - bit field for key events. Valid entries:
    223           *                 EVAL_SW4
    224           *                 EVAL_SW3
    225           *                 EVAL_SW2
    226           *                 EVAL_SW1
    227           *
    228           * @return  none
    229           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    231          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    232            static uint8 allowBind = FALSE;
    233          
    234            // Shift is used to make each button/switch dual purpose.
    235            if ( shift )
   \   000009   EE           MOV     A,R6
   \   00000A   702B         JNZ     ??zb_HandleKeys_0
    236            {
    237              if ( keys & HAL_KEY_SW_1 )
    238              {
    239              }
    240              if ( keys & HAL_KEY_SW_2 )
    241              {
    242              }
    243              if ( keys & HAL_KEY_SW_3 )
    244              {
    245              }
    246              if ( keys & HAL_KEY_SW_4 )
    247              {
    248              }
    249            }
    250            else
    251            {
    252              if ( keys & HAL_KEY_SW_1 )
   \   00000C   EF           MOV     A,R7
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5026         JNC     ??zb_HandleKeys_0
    253              {
    254                if ( appState == APP_START )
   \   000011   90....       MOV     DPTR,#appState
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6402         XRL     A,#0x2
   \   000017   701E         JNZ     ??zb_HandleKeys_0
    255                {
    256                  allowBind ^= 1;
   \   000019   90....       MOV     DPTR,#??allowBind
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   F0           MOVX    @DPTR,A
    257                  if ( allowBind )
   \   000020   6009         JZ      ??zb_HandleKeys_1
    258                  {
    259                    // Turn ON Allow Bind mode infinitly
    260                    zb_AllowBind( 0xFF );
   \   000022                ; Setup parameters for call to function zb_AllowBind
   \   000022   79FF         MOV     R1,#-0x1
   \   000024   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    261                    HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   000027                ; Setup parameters for call to function HalLedSet
   \   000027   7A01         MOV     R2,#0x1
   \   000029   8007         SJMP    ??zb_HandleKeys_2
    262                  }
    263                  else
    264                  {
    265                    // Turn OFF Allow Bind mode infinitly
    266                    zb_AllowBind( 0x00 );
   \                     ??zb_HandleKeys_1:
   \   00002B                ; Setup parameters for call to function zb_AllowBind
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    267                    HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000030                ; Setup parameters for call to function HalLedSet
   \   000030   7A00         MOV     R2,#0x0
   \                     ??zb_HandleKeys_2:
   \   000032   7902         MOV     R1,#0x2
   \   000034   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    268                  }
    269                }
    270              }
    271              if ( keys & HAL_KEY_SW_2 )
    272              {
    273              }
    274              if ( keys & HAL_KEY_SW_3 )
    275              {
    276              }
    277              if ( keys & HAL_KEY_SW_4 )
    278              {
    279              }
    280            }
    281          }
   \                     ??zb_HandleKeys_0:
   \   000037                REQUIRE ?Subroutine1
   \   000037                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??allowBind:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    282          
    283          /******************************************************************************
    284           * @fn          zb_StartConfirm
    285           *
    286           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    287           *              after a start request operation completes
    288           *
    289           * @param       status - The status of the start operation.  Status of
    290           *                       ZB_SUCCESS indicates the start operation completed
    291           *                       successfully.  Else the status is an error code.
    292           *
    293           * @return      none
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    296          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    297            MCU_IO_DIR_OUTPUT_PREP(0, 4);
   \   000006   43FD10       ORL     0xfd,#0x10
    298            MCU_IO_DIR_OUTPUT_PREP(0, 7);
   \   000009   43FD80       ORL     0xfd,#0x80
    299            MCU_IO_DIR_INPUT_PREP(0, 2);
   \   00000C   53FDFB       ANL     0xfd,#0xfb
    300            MCU_IO_INPUT_PREP(0,2,MCU_IO_PULLDOWN); 
   \   00000F   53F3FB       ANL     0xf3,#0xfb
   \   000012   53FDFB       ANL     0xfd,#0xfb
   \   000015   538FFB       ANL     0x8f,#0xfb
   \   000018   43F720       ORL     0xf7,#0x20
    301            MCU_IO_OUTPUT_PREP(0, 4, 0);
   \   00001B   53F3EF       ANL     0xf3,#0xef
   \   00001E   12....       LCALL   ?Subroutine3 & 0xFFFF
    302            MCU_IO_OUTPUT_PREP(0, 7, DOOR_OPEN);
    303            
    304            // If the device sucessfully started, change state to running
    305            if ( status == ZB_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000021   700F         JNZ     ??zb_StartConfirm_0
    306            {
    307              // Set LED 1 to indicate that node is operational on the network
    308              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   000023                ; Setup parameters for call to function HalLedSet
   \   000023   7A01         MOV     R2,#0x1
   \   000025   7901         MOV     R1,#0x1
   \   000027   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    309          
    310              // Change application state
    311              appState = APP_START;
   \   00002A   90....       MOV     DPTR,#appState
   \   00002D   7402         MOV     A,#0x2
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   8023         SJMP    ??zb_StartConfirm_1
    312            }
    313            else
    314            {
    315              // Try again later with a delay
    316              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   000032                ; Setup parameters for call to function osal_start_timerEx
   \   000032   90....       MOV     DPTR,#myStartRetryDelay
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0,A
   \   000038   E4           CLR     A
   \   000039   F5..         MOV     ?V1,A
   \   00003B   F5..         MOV     ?V2,A
   \   00003D   F5..         MOV     ?V3,A
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7B00         MOV     R3,#0x0
   \   000048   90....       MOV     DPTR,#sapi_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
    317            }
    318          }
   \                     ??zb_StartConfirm_1:
   \   000055   7F04         MOV     R7,#0x4
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005A                REQUIRE P0DIR
   \   00005A                REQUIRE P0SEL
   \   00005A                REQUIRE P0INP
   \   00005A                REQUIRE P2INP
   \   00005A                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   C284         CLR     0x80.4
   \   000002   43FD10       ORL     0xfd,#0x10
   \   000005   53F37F       ANL     0xf3,#0x7f
   \   000008   D287         SETB    0x80.7
   \   00000A   43FD80       ORL     0xfd,#0x80
   \   00000D   22           RET
    319          
    320          /******************************************************************************
    321           * @fn          zb_SendDataConfirm
    322           *
    323           * @brief       The zb_SendDataConfirm callback function is called by the
    324           *              ZigBee stack after a send data operation completes
    325           *
    326           * @param       handle - The handle identifying the data transmission.
    327           *              status - The status of the operation.
    328           *
    329           * @return      none
    330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    331          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    332          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    333            if (status == ZB_SUCCESS){
   \   000006   7007         JNZ     ??zb_SendDataConfirm_0
    334              
    335            //(void)handle;
    336            //(void)status;
    337            HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000008                ; Setup parameters for call to function HalLedSet
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   7901         MOV     R1,#0x1
   \   00000C   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    338            }
    339          }
   \                     ??zb_SendDataConfirm_0:
   \   00000F   80..         SJMP    ?Subroutine1
    340          
    341          /******************************************************************************
    342           * @fn          zb_BindConfirm
    343           *
    344           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    345           *              after a bind operation completes.
    346           *
    347           * @param       commandId - The command ID of the binding being confirmed.
    348           *              status - The status of the bind operation.
    349           *
    350           * @return      none
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    353          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    354            HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF);
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7901         MOV     R1,#0x1
   \   00000B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    355            MCU_IO_OUTPUT_PREP(0, 4, 0);
   \   00000E   53F3EF       ANL     0xf3,#0xef
   \   000011   C284         CLR     0x80.4
   \   000013   43FD10       ORL     0xfd,#0x10
    356            if (status == ZB_SUCCESS){
   \   000016   EE           MOV     A,R6
   \   000017   7008         JNZ     ??zb_BindConfirm_0
    357              MCU_IO_OUTPUT_PREP(0, 4, 1);
   \   000019   53F3EF       ANL     0xf3,#0xef
   \   00001C   D284         SETB    0x80.4
   \   00001E   43FD10       ORL     0xfd,#0x10
    358              int i = 0;
    359              i + status;
                     ^
Warning[Pe174]: expression has no effect

  static gtwData_t gtwData;
                   ^
"C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoCoordinator.c",123  Warning[Pe177]: 
          variable "gtwData" was declared but never referenced
    360              //do something
    361            }
    362          }
   \                     ??zb_BindConfirm_0:
   \   000021   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000024                REQUIRE P0SEL
   \   000024                REQUIRE _A_P0
   \   000024                REQUIRE P0DIR
    363          
    364          /******************************************************************************
    365           * @fn          zb_AllowBindConfirm
    366           *
    367           * @brief       Indicates when another device attempted to bind to this device
    368           *
    369           * @param
    370           *
    371           * @return      none
    372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    374          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    375            zb_AllowBind( 0x00 );
   \   000004                ; Setup parameters for call to function zb_AllowBind
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    376            zb_BindDevice( TRUE, LOCK_STATUS_CMD_ID, (uint8 *)NULL) ;
   \   000009                ; Setup parameters for call to function zb_BindDevice
   \   000009   7C00         MOV     R4,#0x0
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7A03         MOV     R2,#0x3
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   7901         MOV     R1,#0x1
   \   000013   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    377            HalLedSet ( HAL_LED_1, HAL_LED_MODE_FLASH );
   \   000016                ; Setup parameters for call to function HalLedSet
   \   000016   7A04         MOV     R2,#0x4
   \   000018   7901         MOV     R1,#0x1
   \   00001A   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    378            
    379          }
   \   00001D                REQUIRE ?Subroutine2
   \   00001D                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    380          
    381          /******************************************************************************
    382           * @fn          zb_FindDeviceConfirm
    383           *
    384           * @brief       The zb_FindDeviceConfirm callback function is called by the
    385           *              ZigBee stack when a find device operation completes.
    386           *
    387           * @param       searchType - The type of search that was performed.
    388           *              searchKey - Value that the search was executed on.
    389           *              result - The result of the search.
    390           *
    391           * @return      none
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    394          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    395            (void)searchType;
    396            (void)searchKey;
    397            (void)result;
    398          }
   \   000000   02....       LJMP    ?BRET
    399          
    400          /******************************************************************************
    401           * @fn          zb_ReceiveDataIndication
    402           *
    403           * @brief       The zb_ReceiveDataIndication callback function is called
    404           *              asynchronously by the ZigBee stack to notify the application
    405           *              when data is received from a peer device.
    406           *
    407           * @param       source - The short address of the peer device that sent the data
    408           *              command - The commandId associated with the data
    409           *              len - The number of bytes in the pData parameter
    410           *              pData - The data sent by the peer device
    411           *
    412           * @return      none
    413           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    414          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    415          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    416            (void)command;
    417            (void)len;
    418            
    419            if( doorState == DOOR_OPEN){
   \   000004   90....       MOV     DPTR,#doorState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   53F3EF       ANL     0xf3,#0xef
   \   00000D   7010         JNZ     ??zb_ReceiveDataIndication_0
    420               MCU_IO_OUTPUT_PREP(0, 4, 1);
   \   00000F   D284         SETB    0x80.4
   \   000011   43FD10       ORL     0xfd,#0x10
    421               MCU_IO_OUTPUT_PREP(0, 7, 0);
   \   000014   53F37F       ANL     0xf3,#0x7f
   \   000017   C287         CLR     0x80.7
   \   000019   43FD80       ORL     0xfd,#0x80
    422               doorState = DOOR_CLOSE;
   \   00001C   E4           CLR     A
   \   00001D   8005         SJMP    ??zb_ReceiveDataIndication_1
    423            } else {
    424               MCU_IO_OUTPUT_PREP(0, 4, 0);
   \                     ??zb_ReceiveDataIndication_0:
   \   00001F   12....       LCALL   ?Subroutine3 & 0xFFFF
    425               MCU_IO_OUTPUT_PREP(0, 7, 1);
    426               doorState = DOOR_OPEN;
   \                     ??CrossCallReturnLabel_1:
   \   000022   7401         MOV     A,#0x1
   \                     ??zb_ReceiveDataIndication_1:
   \   000024   F0           MOVX    @DPTR,A
    427            }
    428           
    429            //gtwData.parent = BUILD_UINT16(pData[SENSOR_PARENT_OFFSET+ 1], pData[SENSOR_PARENT_OFFSET]);
    430            /*gtwData.source = source;
    431            gtwData.temp = *pData;
    432            gtwData.voltage = *(pData+1);
    433          
    434            // Flash LED 2 once to indicate data reception
    435            HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );
    436          
    437            // Send gateway report
    438            sendGtwReport(&gtwData);*/
    439            
    440          }
   \   000025   80..         SJMP    ?Subroutine2
   \   000027                REQUIRE P0SEL
   \   000027                REQUIRE _A_P0
   \   000027                REQUIRE P0DIR
    441          
    442          /******************************************************************************
    443           * @fn          uartRxCB
    444           *
    445           * @brief       Callback function for UART
    446           *
    447           * @param       port - UART port
    448           *              event - UART event that caused callback
    449           *
    450           * @return      none
    451           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    452          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    453          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 135
   \   000005   7479         MOV     A,#0x79
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    454            (void)port;
    455          
    456            uint8 pBuf[RX_BUF_LEN];
    457            uint16 cmd;
    458            uint16 len;
    459          
    460            if ( event != HAL_UART_TX_EMPTY )
   \   00000C   7410         MOV     A,#0x10
   \   00000E   6E           XRL     A,R6
   \   00000F   7003         JNZ     $+5
   \   000011   02....       LJMP    ??uartRxCB_0 & 0xFFFF
    461            {
    462              // Read from UART
    463              len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
    464          
    465              if ( len > 0 )
   \   000014                ; Setup parameters for call to function HalUARTRead
   \   000014   7C80         MOV     R4,#-0x80
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7407         MOV     A,#0x7
   \   00001A   12....       LCALL   ?XSTACK_DISP101_8
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000022   8B..         MOV     ?V1,R3
   \   000024   EA           MOV     A,R2
   \   000025   45..         ORL     A,?V1
   \   000027   6071         JZ      ??uartRxCB_0
    466              {
    467                cmd = BUILD_UINT16(pBuf[SYS_PING_CMD_OFFSET + 1], pBuf[SYS_PING_CMD_OFFSET]);
    468          
    469                if( (pBuf[FRAME_SOF_OFFSET] == CPT_SOP) && (cmd == SYS_PING_REQUEST) )
   \   000029   7407         MOV     A,#0x7
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   64FE         XRL     A,#0xfe
   \   000031   7067         JNZ     ??uartRxCB_0
   \   000033   7409         MOV     A,#0x9
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   7408         MOV     A,#0x8
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   EA           MOV     A,R2
   \   000042   F8           MOV     R0,A
   \   000043   7421         MOV     A,#0x21
   \   000045   68           XRL     A,R0
   \   000046   49           ORL     A,R1
   \   000047   7051         JNZ     ??uartRxCB_0
    470                {
    471                  sysPingReqRcvd();
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   74FE         MOV     A,#-0x2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   7402         MOV     A,#0x2
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   7461         MOV     A,#0x61
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
   \   000068   7404         MOV     A,#0x4
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   7441         MOV     A,#0x41
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   7405         MOV     A,#0x5
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E4           CLR     A
   \   000076   F0           MOVX    @DPTR,A
   \   000077   04           INC     A
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   7800         MOV     R0,#0x0
   \   00007D   7905         MOV     R1,#0x5
   \                     ??uartRxCB_1:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C8           XCH     A,R0
   \   000081   68           XRL     A,R0
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   D9F9         DJNZ    R1,??uartRxCB_1
   \   000086   7406         MOV     A,#0x6
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E8           MOV     A,R0
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D                ; Setup parameters for call to function HalUARTWrite
   \   00008D   7C07         MOV     R4,#0x7
   \   00008F   7D00         MOV     R5,#0x0
   \   000091   AA..         MOV     R2,?XSP + 0
   \   000093   AB..         MOV     R3,?XSP + 1
   \   000095   7900         MOV     R1,#0x0
   \   000097   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    472                }
    473              }
    474            }
    475          }
   \                     ??uartRxCB_0:
   \   00009A   7487         MOV     A,#-0x79
   \   00009C   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for doorState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB
    476          
    477          /******************************************************************************
    478           * @fn          sysPingReqRcvd
    479           *
    480           * @brief       Ping request received
    481           *
    482           * @param       none
    483           *
    484           * @return      none
    485           */
    486          static void sysPingReqRcvd(void)
    487          {
    488             sysPingRsp();
    489          }
    490          
    491          /******************************************************************************
    492           * @fn          sysPingRsp
    493           *
    494           * @brief       Build and send Ping response
    495           *
    496           * @param       none
    497           *
    498           * @return      none
    499           */
    500          static void sysPingRsp(void)
    501          {
    502            uint8 pBuf[SYS_PING_RSP_LENGTH];
    503          
    504            // Start of Frame Delimiter
    505            pBuf[FRAME_SOF_OFFSET] = CPT_SOP;
    506          
    507            // Length
    508            pBuf[FRAME_LENGTH_OFFSET] = 2;
    509          
    510            // Command type
    511            pBuf[FRAME_CMD0_OFFSET] = LO_UINT16(SYS_PING_RESPONSE);
    512            pBuf[FRAME_CMD1_OFFSET] = HI_UINT16(SYS_PING_RESPONSE);
    513          
    514            // Stack profile
    515            pBuf[FRAME_DATA_OFFSET] = LO_UINT16(STACK_PROFILE);
    516            pBuf[FRAME_DATA_OFFSET + 1] = HI_UINT16(STACK_PROFILE);
    517          
    518            // Frame Check Sequence
    519            pBuf[SYS_PING_RSP_LENGTH - 1] = calcFCS(&pBuf[FRAME_LENGTH_OFFSET], (SYS_PING_RSP_LENGTH - 2));
    520          
    521            // Write frame to UART
    522            HalUARTWrite(HAL_UART_PORT_0,pBuf, SYS_PING_RSP_LENGTH);
    523          }
    524          
    525          /******************************************************************************
    526           * @fn          sendGtwReport
    527           *
    528           * @brief       Build and send gateway report
    529           *
    530           * @param       none
    531           *
    532           * @return      none
    533           */
    534          static void sendGtwReport(gtwData_t *gtwData)
                             ^
Warning[Pe177]: function "sendGtwReport" was declared but never referenced
    535          {
    536            uint8 pFrame[ZB_RECV_LENGTH];
    537          
    538            // Start of Frame Delimiter
    539            pFrame[FRAME_SOF_OFFSET] = CPT_SOP; // Start of Frame Delimiter
    540          
    541            // Length
    542            pFrame[FRAME_LENGTH_OFFSET] = 10;
    543          
    544            // Command type
    545            pFrame[FRAME_CMD0_OFFSET] = LO_UINT16(ZB_RECEIVE_DATA_INDICATION);
    546            pFrame[FRAME_CMD1_OFFSET] = HI_UINT16(ZB_RECEIVE_DATA_INDICATION);
    547          
    548            // Source address
    549            pFrame[FRAME_DATA_OFFSET + ZB_RECV_SRC_OFFSET] = LO_UINT16(gtwData->source);
    550            pFrame[FRAME_DATA_OFFSET + ZB_RECV_SRC_OFFSET+ 1] = HI_UINT16(gtwData->source);
    551          
    552            // Command ID
    553           // pFrame[FRAME_DATA_OFFSET + ZB_RECV_CMD_OFFSET] = LO_UINT16(SENSOR_REPORT_CMD_ID);
    554           // pFrame[FRAME_DATA_OFFSET + ZB_RECV_CMD_OFFSET+ 1] = HI_UINT16(SENSOR_REPORT_CMD_ID);
    555          
    556            // Length
    557            pFrame[FRAME_DATA_OFFSET + ZB_RECV_LEN_OFFSET] = LO_UINT16(4);
    558            pFrame[FRAME_DATA_OFFSET + ZB_RECV_LEN_OFFSET+ 1] = HI_UINT16(4);
    559          
    560            // Data
    561            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET] = gtwData->temp;
    562            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET+ 1] = gtwData->voltage;
    563            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET+ 2] = LO_UINT16(gtwData->parent);
    564            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET+ 3] = HI_UINT16(gtwData->parent);
    565          
    566            // Frame Check Sequence
    567            pFrame[ZB_RECV_LENGTH - 1] = calcFCS(&pFrame[FRAME_LENGTH_OFFSET], (ZB_RECV_LENGTH - 2) );
    568          
    569            // Write report to UART
    570            HalUARTWrite(HAL_UART_PORT_0,pFrame, ZB_RECV_LENGTH);
    571          }
    572          
    573          /******************************************************************************
    574           * @fn          calcFCS
    575           *
    576           * @brief       This function calculates the FCS checksum for the serial message
    577           *
    578           * @param       pBuf - Pointer to the end of a buffer to calculate the FCS.
    579           *              len - Length of the pBuf.
    580           *
    581           * @return      The calculated FCS.
    582           ******************************************************************************
    583           */
    584          static uint8 calcFCS(uint8 *pBuf, uint8 len)
    585          {
    586            uint8 rtrn = 0;
    587          
    588            while ( len-- )
    589            {
    590              rtrn ^= *pBuf++;
    591            }
    592          
    593            return rtrn;
    594          }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1    145   uartRxCB
        0    145   -> HalUARTRead
        0    145   -> HalUARTWrite
      2      0   zb_AllowBindConfirm
        2      0   -> HalLedSet
        2      0   -> zb_AllowBind
        2      0   -> zb_BindDevice
      0      9   zb_BindConfirm
        0      9   -> HalLedSet
      0      0   zb_FindDeviceConfirm
      0      9   zb_HandleKeys
        0      9   -> HalLedSet
        0      9   -> zb_AllowBind
      1     16   zb_HandleOsalEvent
        0     11   -> HalLedBlink
        0     11   -> HalLedSet
        0     11   -> initUart
        0     15   -> osal_start_timerEx
        0     16   -> zb_SendDataRequest
        0     11   -> zb_StartRequest
      2      4   zb_ReceiveDataIndication
      0      9   zb_SendDataConfirm
        0      9   -> HalLedSet
      0     16   zb_StartConfirm
        0     12   -> HalLedSet
        0     16   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for doorState>
       1  ?<Initializer for myStartRetryDelay>
       8  ?Subroutine0
       5  ?Subroutine1
       7  ?Subroutine2
      14  ?Subroutine3
       1  P0DIR
       1  P0INP
       1  P0SEL
       1  P2INP
       1  _A_P0
       4  __Constant_64
       1  allowBind
       1  appState
       1  buttonState
       1  doorState
       1  myStartRetryDelay
     159  uartRxCB
       6  uartRxCB::?relay
      29  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
      36  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
      55  zb_HandleKeys
       6  zb_HandleKeys::?relay
     197  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       2  zb_InCmdList
       2  zb_OutCmdList
      39  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
      17  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
      90  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 659 bytes in segment BANKED_CODE
  54 bytes in segment BANK_RELAYS
   5 bytes in segment SFR_AN
   2 bytes in segment XDATA_I
   2 bytes in segment XDATA_ID
  20 bytes in segment XDATA_ROM_C
   3 bytes in segment XDATA_Z
 
 715 bytes of CODE  memory
  16 bytes of CONST memory (+ 4 bytes shared)
   0 bytes of DATA  memory (+ 5 bytes shared)
   5 bytes of XDATA memory

Errors: none
Warnings: 4
