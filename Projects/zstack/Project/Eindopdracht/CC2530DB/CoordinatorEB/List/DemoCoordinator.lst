###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                13/Mar/2016  23:19:58
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoCoordinator.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoCoordinator.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        xNV_RESTORE -D ZTOOL_P1 -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\DemoCoordinator.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\DemoCoordinator.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoCoordinator.c
      1          /**************************************************************************************************
      2            Filename:       DemoCoordinator.c
      3          
      4            Description:    Coordinator application for the sensor demo utilizing Simple API.
      5          
      6                            The collector node can be set in a state where it accepts
      7                            incoming reports from the sensor nodes, and can send the reports
      8                            via the UART to a PC tool. The collector node in this state
      9                            functions as a gateway. The collector nodes that are not in the
     10                            gateway node function as routers in the network.
     11          
     12          
     13            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     14          
     15            IMPORTANT: Your use of this Software is limited to those specific rights
     16            granted under the terms of a software license agreement between the user
     17            who downloaded the software, his/her employer (which must be your employer)
     18            and Texas Instruments Incorporated (the "License").  You may not use this
     19            Software unless you agree to abide by the terms of the License. The License
     20            limits your use, and you acknowledge, that the Software may not be modified,
     21            copied or distributed unless embedded on a Texas Instruments microcontroller
     22            or used solely and exclusively in conjunction with a Texas Instruments radio
     23            frequency transceiver, which is integrated into your product.  Other than for
     24            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     25            works of, modify, distribute, perform, display or sell this Software and/or
     26            its documentation for any purpose.
     27          
     28            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     29            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     30            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     31            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     32            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     33            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     34            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     35            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     36            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     37            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     38            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     39          
     40            Should you have any questions regarding your right to use this Software,
     41            contact Texas Instruments Incorporated at www.TI.com.
     42          **************************************************************************************************/
     43          
     44          /******************************************************************************
     45           * INCLUDES
     46           */
     47          
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "sapi.h"
     52          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr P2INP
   \                     P2INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     53          #include "hal_led.h"
     54          #include "hal_lcd.h"
     55          #include "hal_uart.h"
     56          #include "DemoApp.h"
     57          
     58          /******************************************************************************
     59           * CONSTANTS
     60           */
     61          
     62          // General UART frame offsets
     63          #define FRAME_SOF_OFFSET                    0
     64          #define FRAME_LENGTH_OFFSET                 1
     65          #define FRAME_CMD0_OFFSET                   2
     66          #define FRAME_CMD1_OFFSET                   3
     67          #define FRAME_DATA_OFFSET                   4
     68          
     69          // ZB_RECEIVE_DATA_INDICATION offsets
     70          #define ZB_RECV_SRC_OFFSET                  0
     71          #define ZB_RECV_CMD_OFFSET                  2
     72          #define ZB_RECV_LEN_OFFSET                  4
     73          #define ZB_RECV_DATA_OFFSET                 6
     74          #define ZB_RECV_FCS_OFFSET                  8
     75          
     76          // ZB_RECEIVE_DATA_INDICATION frame length
     77          #define ZB_RECV_LENGTH                      15
     78          
     79          // PING response frame length and offset
     80          #define SYS_PING_RSP_LENGTH                 7
     81          #define SYS_PING_CMD_OFFSET                 1
     82          
     83          // Stack Profile
     84          #define ZIGBEE_2007                         0x0040
     85          #define ZIGBEE_PRO_2007                     0x0041
     86          
     87          #ifdef ZIGBEEPRO
     88          #define STACK_PROFILE                       ZIGBEE_PRO_2007
     89          #else
     90          #define STACK_PROFILE                       ZIGBEE_2007
     91          #endif
     92          
     93          #define CPT_SOP                             0xFE
     94          #define SYS_PING_REQUEST                    0x0021
     95          #define SYS_PING_RESPONSE                   0x0161
     96          #define ZB_RECEIVE_DATA_INDICATION          0x8746
     97          
     98          // Application States
     99          #define APP_INIT                            0
    100          #define APP_START                           2
    101          
    102          // Application osal event identifiers
    103          #define MY_START_EVT                        0x0001
    104          #define LOCK_CHECK_EVT                       0x0002
    105          
    106          /******************************************************************************
    107           * TYPEDEFS
    108           */
    109          typedef struct
    110          {
    111            uint16              source;
    112            uint16              parent;
    113            uint8               temp;
    114            uint8               voltage;
    115          } gtwData_t;
    116          
    117          /******************************************************************************
    118           * LOCAL VARIABLES
    119           */
    120          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          static uint8 appState =             APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    122          static uint8 myStartRetryDelay =    10;          // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    123          static gtwData_t gtwData;

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          static uint8 doorState         =        DOOR_OPEN;
   \                     doorState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for doorState>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          static uint8 buttonState       =        0;
   \                     buttonState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    126          /******************************************************************************
    127           * LOCAL FUNCTIONS
    128           */
    129          
    130          static uint8 calcFCS(uint8 *pBuf, uint8 len);
    131          static void sysPingReqRcvd(void);
    132          static void sysPingRsp(void);
    133          static void sendGtwReport(gtwData_t *gtwData);
    134          
    135          /******************************************************************************
    136           * GLOBAL VARIABLES
    137           */
    138          
    139          // Inputs and Outputs for Collector device
    140          #define NUM_OUT_CMD_COLLECTOR           1
    141          #define NUM_IN_CMD_COLLECTOR            1
    142          
    143          // List of output and input commands for Collector device

   \                                 In  segment XDATA_ROM_C, align 1
    144          const cId_t zb_InCmdList[NUM_IN_CMD_COLLECTOR] =
   \                     zb_InCmdList:
   \   000000   0100         DW 1
    145          {
    146            LOCK_CONTROL_CMD_ID,
    147          };

   \                                 In  segment XDATA_ROM_C, align 1
    148          const cId_t zb_OutCmdList[NUM_OUT_CMD_COLLECTOR] =
   \                     zb_OutCmdList:
   \   000000   0300         DW 3
    149          {
    150            LOCK_STATUS_CMD_ID,
    151          };
    152          // Define SimpleDescriptor for Collector device

   \                                 In  segment XDATA_ROM_C, align 1
    153          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0200         DW 2
   \   000005   01           DB 1
   \   000006   01           DB 1
   \   000007   ....         DW zb_InCmdList
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    154          {
    155            MY_ENDPOINT_ID,             //  Endpoint
    156            MY_PROFILE_ID,              //  Profile ID
    157            DEV_ID_COLLECTOR,           //  Device ID
    158            DEVICE_VERSION_COLLECTOR,   //  Device Version
    159            0,                          //  Reserved
    160            NUM_IN_CMD_COLLECTOR,       //  Number of Input Commands
    161            (cId_t *) zb_InCmdList,     //  Input Command List
    162            NUM_OUT_CMD_COLLECTOR,      //  Number of Output Commands
    163            (cId_t *) zb_OutCmdList             //  Output Command List
    164          };
    165          
    166          /******************************************************************************
    167           * FUNCTIONS
    168           */
    169          
    170          /******************************************************************************
    171           * @fn          zb_HandleOsalEvent
    172           *
    173           * @brief       The zb_HandleOsalEvent function is called by the operating
    174           *              system when a task event is set
    175           *
    176           * @param       event - Bitmask containing the events that have been set
    177           *
    178           * @return      none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    181          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
    182            if( event & SYS_EVENT_MSG )
    183            {
    184            }
    185          
    186            if( event & ZB_ENTRY_EVENT )
   \   00000D   5410         ANL     A,#0x10
   \   00000F   6021         JZ      ??zb_HandleOsalEvent_0
    187            {
    188              // Initialise UART
    189              initUart(uartRxCB);
   \   000011                ; Setup parameters for call to function initUart
   \   000011   7A..         MOV     R2,#`??uartRxCB::?relay` & 0xff
   \   000013   7B..         MOV     R3,#(`??uartRxCB::?relay` >> 8) & 0xff
   \   000015   12....       LCALL   `??initUart::?relay` ; Banked call to: initUart
    190              osal_start_timerEx( sapi_TaskID, LOCK_CHECK_EVT , 100 );
   \   000018                ; Setup parameters for call to function osal_start_timerEx
   \   000018   90....       MOV     DPTR,#__Constant_64
   \   00001B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00001E   7A02         MOV     R2,#0x2
   \   000020   7B00         MOV     R3,#0x0
   \   000022   90....       MOV     DPTR,#sapi_TaskID
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00002A   7404         MOV     A,#0x4
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
    191          
    192              
    193              // Start the device
    194              zb_StartRequest();
   \   00002F                ; Setup parameters for call to function zb_StartRequest
   \   00002F   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    195            }
    196          
    197            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   000032   EE           MOV     A,R6
   \   000033   A2E0         MOV     C,0xE0 /* A   */.0
   \   000035   5003         JNC     ??zb_HandleOsalEvent_1
    198            {
    199              zb_StartRequest();
   \   000037                ; Setup parameters for call to function zb_StartRequest
   \   000037   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    200            }
    201            if (event & LOCK_CHECK_EVT ){
   \                     ??zb_HandleOsalEvent_1:
   \   00003A   EE           MOV     A,R6
   \   00003B   5402         ANL     A,#0x2
   \   00003D   6072         JZ      ??zb_HandleOsalEvent_2
    202                  int buttonStateNew = (MCU_IO_GET(0,2) == 0);
   \   00003F   A282         MOV     C,0x80.2
   \   000041   4004         JC      ??zb_HandleOsalEvent_3
   \   000043   D2F0         SETB    B.0
   \   000045   8002         SJMP    ??zb_HandleOsalEvent_4
   \                     ??zb_HandleOsalEvent_3:
   \   000047   C2F0         CLR     B.0
   \                     ??zb_HandleOsalEvent_4:
   \   000049   A2F0         MOV     C,B.0
   \   00004B   E4           CLR     A
   \   00004C   33           RLC     A
   \   00004D   FE           MOV     R6,A
    203                  if (buttonState != buttonStateNew){
   \   00004E   90....       MOV     DPTR,#buttonState
   \   000051   E0           MOVX    A,@DPTR
   \   000052   C0E0         PUSH    A
   \   000054   EE           MOV     A,R6
   \   000055   F8           MOV     R0,A
   \   000056   D0E0         POP     A
   \   000058   68           XRL     A,R0
   \   000059   603F         JZ      ??zb_HandleOsalEvent_5
    204                    uint8 pData[LOCK_CMD_LENGTH];
    205                    pData[LOCK_CMD_OFFSET] = buttonStateNew;
   \   00005B   EE           MOV     A,R6
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   F0           MOVX    @DPTR,A
    206                    uint8 txOptions;
    207                    zb_SendDataRequest( 0xFFFE, LOCK_STATUS_CMD_ID, LOCK_CMD_LENGTH , pData, 0, txOptions, 0 );
                                                                                                       ^
Warning[Pe549]: variable "txOptions" is used before its value is set

  static gtwData_t gtwData;
                   ^
"C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoCoordinator.c",123  Warning[Pe177]: 
          variable "gtwData" was declared but never referenced
   \   000063                ; Setup parameters for call to function zb_SendDataRequest
   \   000063   75..00       MOV     ?V0,#0x0
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006B   78..         MOV     R0,#?V0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000070   78..         MOV     R0,#?V0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   7403         MOV     A,#0x3
   \   000077   12....       LCALL   ?XSTACK_DISP100_8
   \   00007A   88..         MOV     ?V0,R0
   \   00007C   89..         MOV     ?V1,R1
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   7901         MOV     R1,#0x1
   \   000085   7C03         MOV     R4,#0x3
   \   000087   7D00         MOV     R5,#0x0
   \   000089   7AFE         MOV     R2,#-0x2
   \   00008B   7BFF         MOV     R3,#-0x1
   \   00008D   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   000090   7405         MOV     A,#0x5
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
    208                    buttonState = buttonStateNew;
   \   000095   EE           MOV     A,R6
   \   000096   90....       MOV     DPTR,#buttonState
   \   000099   F0           MOVX    @DPTR,A
    209                  }
    210                  osal_start_timerEx( sapi_TaskID, LOCK_CHECK_EVT , 100 );
   \                     ??zb_HandleOsalEvent_5:
   \   00009A                ; Setup parameters for call to function osal_start_timerEx
   \   00009A   90....       MOV     DPTR,#__Constant_64
   \   00009D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000A0   7A02         MOV     R2,#0x2
   \   0000A2   7B00         MOV     R3,#0x0
   \   0000A4   90....       MOV     DPTR,#sapi_TaskID
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000AC   7404         MOV     A,#0x4
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
    211            }
    212          }
   \                     ??zb_HandleOsalEvent_2:
   \   0000B1   7401         MOV     A,#0x1
   \   0000B3                REQUIRE ?Subroutine0
   \   0000B3                REQUIRE _A_P0
   \   0000B3                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    213          
    214          /******************************************************************************
    215           * @fn      zb_HandleKeys
    216           *
    217           * @brief   Handles all key events for this device.
    218           *
    219           * @param   shift - true if in shift/alt.
    220           * @param   keys - bit field for key events. Valid entries:
    221           *                 EVAL_SW4
    222           *                 EVAL_SW3
    223           *                 EVAL_SW2
    224           *                 EVAL_SW1
    225           *
    226           * @return  none
    227           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    228          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    229          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    230            static uint8 allowBind = FALSE;
    231          
    232            // Shift is used to make each button/switch dual purpose.
    233            if ( shift )
   \   000009   EE           MOV     A,R6
   \   00000A   701F         JNZ     ??zb_HandleKeys_0
    234            {
    235              if ( keys & HAL_KEY_SW_1 )
    236              {
    237              }
    238              if ( keys & HAL_KEY_SW_2 )
    239              {
    240              }
    241              if ( keys & HAL_KEY_SW_3 )
    242              {
    243              }
    244              if ( keys & HAL_KEY_SW_4 )
    245              {
    246              }
    247            }
    248            else
    249            {
    250              if ( keys & HAL_KEY_SW_1 )
   \   00000C   EF           MOV     A,R7
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   501A         JNC     ??zb_HandleKeys_0
    251              {
    252                if ( appState == APP_START )
   \   000011   90....       MOV     DPTR,#appState
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6402         XRL     A,#0x2
   \   000017   7012         JNZ     ??zb_HandleKeys_0
    253                {
    254                  allowBind ^= 1;
   \   000019   90....       MOV     DPTR,#??allowBind
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   F0           MOVX    @DPTR,A
    255                  if ( allowBind )
   \   000020   6004         JZ      ??zb_HandleKeys_1
    256                  {
    257                    // Turn ON Allow Bind mode infinitly
    258                    zb_AllowBind( 0xFF );
   \   000022                ; Setup parameters for call to function zb_AllowBind
   \   000022   79FF         MOV     R1,#-0x1
   \   000024   8002         SJMP    ??zb_HandleKeys_2
    259                  }
    260                  else
    261                  {
    262                    // Turn OFF Allow Bind mode infinitly
    263                    zb_AllowBind( 0x00 );
   \                     ??zb_HandleKeys_1:
   \   000026                ; Setup parameters for call to function zb_AllowBind
   \   000026   7900         MOV     R1,#0x0
   \                     ??zb_HandleKeys_2:
   \   000028   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    264                  }
    265                }
    266              }
    267              if ( keys & HAL_KEY_SW_2 )
    268              {
    269              }
    270              if ( keys & HAL_KEY_SW_3 )
    271              {
    272              }
    273              if ( keys & HAL_KEY_SW_4 )
    274              {
    275              }
    276            }
    277          }
   \                     ??zb_HandleKeys_0:
   \   00002B                REQUIRE ?Subroutine1
   \   00002B                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??allowBind:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    278          
    279          /******************************************************************************
    280           * @fn          zb_StartConfirm
    281           *
    282           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    283           *              after a start request operation completes
    284           *
    285           * @param       status - The status of the start operation.  Status of
    286           *                       ZB_SUCCESS indicates the start operation completed
    287           *                       successfully.  Else the status is an error code.
    288           *
    289           * @return      none
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    292          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    293            MCU_IO_DIR_OUTPUT_PREP(0, 4);
   \   000006   43FD10       ORL     0xfd,#0x10
    294            MCU_IO_DIR_OUTPUT_PREP(0, 7);
   \   000009   43FD80       ORL     0xfd,#0x80
    295            MCU_IO_DIR_INPUT_PREP(0, 2);
   \   00000C   53FDFB       ANL     0xfd,#0xfb
    296            MCU_IO_INPUT_PREP(0,2,MCU_IO_PULLDOWN); 
   \   00000F   53F3FB       ANL     0xf3,#0xfb
   \   000012   53FDFB       ANL     0xfd,#0xfb
   \   000015   538FFB       ANL     0x8f,#0xfb
   \   000018   43F720       ORL     0xf7,#0x20
    297            MCU_IO_OUTPUT_PREP(0, 4, 0);
   \   00001B   12....       LCALL   ?Subroutine3 & 0xFFFF
    298            MCU_IO_OUTPUT_PREP(0, 7, DOOR_OPEN);
   \                     ??CrossCallReturnLabel_0:
   \   00001E   53F37F       ANL     0xf3,#0x7f
   \   000021   D287         SETB    0x80.7
   \   000023   43FD80       ORL     0xfd,#0x80
    299            
    300            // If the device sucessfully started, change state to running
    301            if ( status == ZB_SUCCESS )
   \   000026   7022         JNZ     ??zb_StartConfirm_0
    302            {
    303              // Change application state
    304              appState = APP_START;
   \   000028   90....       MOV     DPTR,#appState
   \   00002B   7402         MOV     A,#0x2
   \   00002D   F0           MOVX    @DPTR,A
    305              
    306              zb_AllowBind( 0xFF );
   \   00002E                ; Setup parameters for call to function zb_AllowBind
   \   00002E   79FF         MOV     R1,#-0x1
   \   000030   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    307              
    308              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   000033                ; Setup parameters for call to function HalLedSet
   \   000033   7A01         MOV     R2,#0x1
   \   000035   7901         MOV     R1,#0x1
   \   000037   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    309              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   00003A                ; Setup parameters for call to function HalLedSet
   \   00003A   7A00         MOV     R2,#0x0
   \   00003C   7902         MOV     R1,#0x2
   \   00003E   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    310              HalLedSet( HAL_LED_3, HAL_LED_MODE_OFF );
   \   000041                ; Setup parameters for call to function HalLedSet
   \   000041   7A00         MOV     R2,#0x0
   \   000043   7904         MOV     R1,#0x4
   \   000045   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000048   8023         SJMP    ??zb_StartConfirm_1
    311            }
    312            else
    313            {
    314              // Try again later with a delay
    315              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   00004A                ; Setup parameters for call to function osal_start_timerEx
   \   00004A   90....       MOV     DPTR,#myStartRetryDelay
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V0,A
   \   000050   E4           CLR     A
   \   000051   F5..         MOV     ?V1,A
   \   000053   F5..         MOV     ?V2,A
   \   000055   F5..         MOV     ?V3,A
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00005C   7A01         MOV     R2,#0x1
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   90....       MOV     DPTR,#sapi_TaskID
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000068   7404         MOV     A,#0x4
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
    316            }
    317          }
   \                     ??zb_StartConfirm_1:
   \   00006D   7F04         MOV     R7,#0x4
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000072                REQUIRE P0DIR
   \   000072                REQUIRE P0SEL
   \   000072                REQUIRE P0INP
   \   000072                REQUIRE P2INP
   \   000072                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   53F3EF       ANL     0xf3,#0xef
   \   000003   C284         CLR     0x80.4
   \   000005   43FD10       ORL     0xfd,#0x10
   \   000008   22           RET
    318          
    319          /******************************************************************************
    320           * @fn          zb_SendDataConfirm
    321           *
    322           * @brief       The zb_SendDataConfirm callback function is called by the
    323           *              ZigBee stack after a send data operation completes
    324           *
    325           * @param       handle - The handle identifying the data transmission.
    326           *              status - The status of the operation.
    327           *
    328           * @return      none
    329           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    330          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    331          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    332            if (status == ZB_SUCCESS){
    333              
    334            //(void)handle;
    335            //(void)status;
    336              //HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
    337            }
    338          }
   \   000000   02....       LJMP    ?BRET
    339          
    340          /******************************************************************************
    341           * @fn          zb_BindConfirm
    342           *
    343           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    344           *              after a bind operation completes.
    345           *
    346           * @param       commandId - The command ID of the binding being confirmed.
    347           *              status - The status of the bind operation.
    348           *
    349           * @return      none
    350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    352          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    353            
    354            MCU_IO_OUTPUT_PREP(0, 4, 0);
   \   000006   12....       LCALL   ?Subroutine3 & 0xFFFF
    355            if (status == ZB_SUCCESS){
   \                     ??CrossCallReturnLabel_1:
   \   000009   700F         JNZ     ??zb_BindConfirm_0
    356              MCU_IO_OUTPUT_PREP(0, 4, 1);
   \   00000B   53F3EF       ANL     0xf3,#0xef
   \   00000E   D284         SETB    0x80.4
   \   000010   43FD10       ORL     0xfd,#0x10
    357              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A01         MOV     R2,#0x1
   \   000015   7902         MOV     R1,#0x2
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    358            }
    359          }
   \                     ??zb_BindConfirm_0:
   \   00001A   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   00001D                REQUIRE P0SEL
   \   00001D                REQUIRE _A_P0
   \   00001D                REQUIRE P0DIR
    360          
    361          /******************************************************************************
    362           * @fn          zb_AllowBindConfirm
    363           *
    364           * @brief       Indicates when another device attempted to bind to this device
    365           *
    366           * @param
    367           *
    368           * @return      none
    369           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    370          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    371          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    372            zb_AllowBind( 0x00 );
   \   000004                ; Setup parameters for call to function zb_AllowBind
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    373            zb_BindDevice( TRUE, LOCK_STATUS_CMD_ID, (uint8 *)NULL) ;  
   \   000009                ; Setup parameters for call to function zb_BindDevice
   \   000009   7C00         MOV     R4,#0x0
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7A03         MOV     R2,#0x3
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   7901         MOV     R1,#0x1
   \   000013   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    374          }
   \   000016                REQUIRE ?Subroutine2
   \   000016                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    375          
    376          /******************************************************************************
    377           * @fn          zb_FindDeviceConfirm
    378           *
    379           * @brief       The zb_FindDeviceConfirm callback function is called by the
    380           *              ZigBee stack when a find device operation completes.
    381           *
    382           * @param       searchType - The type of search that was performed.
    383           *              searchKey - Value that the search was executed on.
    384           *              result - The result of the search.
    385           *
    386           * @return      none
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    389          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    390            (void)searchType;
    391            (void)searchKey;
    392            (void)result;
    393          }
   \   000000   02....       LJMP    ?BRET
    394          
    395          /******************************************************************************
    396           * @fn          zb_ReceiveDataIndication
    397           *
    398           * @brief       The zb_ReceiveDataIndication callback function is called
    399           *              asynchronously by the ZigBee stack to notify the application
    400           *              when data is received from a peer device.
    401           *
    402           * @param       source - The short address of the peer device that sent the data
    403           *              command - The commandId associated with the data
    404           *              len - The number of bytes in the pData parameter
    405           *              pData - The data sent by the peer device
    406           *
    407           * @return      none
    408           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    409          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    410          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    411            (void)command;
    412            (void)len;
    413            
    414            if( doorState == DOOR_OPEN){
   \   000004   90....       MOV     DPTR,#doorState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   53F37F       ANL     0xf3,#0x7f
   \   00000D   7008         JNZ     ??zb_ReceiveDataIndication_0
    415               //MCU_IO_OUTPUT_PREP(0, 4, 1);
    416               MCU_IO_OUTPUT_PREP(0, 7, 0);
   \   00000F   C287         CLR     0x80.7
   \   000011   43FD80       ORL     0xfd,#0x80
    417               doorState = DOOR_CLOSE;
   \   000014   E4           CLR     A
   \   000015   8007         SJMP    ??zb_ReceiveDataIndication_1
    418            } else {
    419               //MCU_IO_OUTPUT_PREP(0, 4, 0);
    420               MCU_IO_OUTPUT_PREP(0, 7, 1);
   \                     ??zb_ReceiveDataIndication_0:
   \   000017   D287         SETB    0x80.7
   \   000019   43FD80       ORL     0xfd,#0x80
    421               doorState = DOOR_OPEN;
   \   00001C   7401         MOV     A,#0x1
   \                     ??zb_ReceiveDataIndication_1:
   \   00001E   F0           MOVX    @DPTR,A
    422            }
    423           
    424            //gtwData.parent = BUILD_UINT16(pData[SENSOR_PARENT_OFFSET+ 1], pData[SENSOR_PARENT_OFFSET]);
    425            /*gtwData.source = source;
    426            gtwData.temp = *pData;
    427            gtwData.voltage = *(pData+1);
    428          
    429            // Flash LED 2 once to indicate data reception
    430            HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );
    431          
    432            // Send gateway report
    433            sendGtwReport(&gtwData);*/
    434            
    435          }
   \   00001F   80..         SJMP    ?Subroutine2
   \   000021                REQUIRE P0SEL
   \   000021                REQUIRE _A_P0
   \   000021                REQUIRE P0DIR
    436          
    437          /******************************************************************************
    438           * @fn          uartRxCB
    439           *
    440           * @brief       Callback function for UART
    441           *
    442           * @param       port - UART port
    443           *              event - UART event that caused callback
    444           *
    445           * @return      none
    446           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    447          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    448          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 135
   \   000005   7479         MOV     A,#0x79
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    449            (void)port;
    450          
    451            uint8 pBuf[RX_BUF_LEN];
    452            uint16 cmd;
    453            uint16 len;
    454          
    455            if ( event != HAL_UART_TX_EMPTY )
   \   00000C   7410         MOV     A,#0x10
   \   00000E   6E           XRL     A,R6
   \   00000F   7003         JNZ     $+5
   \   000011   02....       LJMP    ??uartRxCB_0 & 0xFFFF
    456            {
    457              // Read from UART
    458              len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
    459          
    460              if ( len > 0 )
   \   000014                ; Setup parameters for call to function HalUARTRead
   \   000014   7C80         MOV     R4,#-0x80
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7407         MOV     A,#0x7
   \   00001A   12....       LCALL   ?XSTACK_DISP101_8
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000022   8B..         MOV     ?V1,R3
   \   000024   EA           MOV     A,R2
   \   000025   45..         ORL     A,?V1
   \   000027   6071         JZ      ??uartRxCB_0
    461              {
    462                cmd = BUILD_UINT16(pBuf[SYS_PING_CMD_OFFSET + 1], pBuf[SYS_PING_CMD_OFFSET]);
    463          
    464                if( (pBuf[FRAME_SOF_OFFSET] == CPT_SOP) && (cmd == SYS_PING_REQUEST) )
   \   000029   7407         MOV     A,#0x7
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   64FE         XRL     A,#0xfe
   \   000031   7067         JNZ     ??uartRxCB_0
   \   000033   7409         MOV     A,#0x9
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   7408         MOV     A,#0x8
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   EA           MOV     A,R2
   \   000042   F8           MOV     R0,A
   \   000043   7421         MOV     A,#0x21
   \   000045   68           XRL     A,R0
   \   000046   49           ORL     A,R1
   \   000047   7051         JNZ     ??uartRxCB_0
    465                {
    466                  sysPingReqRcvd();
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   74FE         MOV     A,#-0x2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   7402         MOV     A,#0x2
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   7461         MOV     A,#0x61
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
   \   000068   7404         MOV     A,#0x4
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   7441         MOV     A,#0x41
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   7405         MOV     A,#0x5
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E4           CLR     A
   \   000076   F0           MOVX    @DPTR,A
   \   000077   04           INC     A
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   7800         MOV     R0,#0x0
   \   00007D   7905         MOV     R1,#0x5
   \                     ??uartRxCB_1:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C8           XCH     A,R0
   \   000081   68           XRL     A,R0
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   D9F9         DJNZ    R1,??uartRxCB_1
   \   000086   7406         MOV     A,#0x6
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E8           MOV     A,R0
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D                ; Setup parameters for call to function HalUARTWrite
   \   00008D   7C07         MOV     R4,#0x7
   \   00008F   7D00         MOV     R5,#0x0
   \   000091   AA..         MOV     R2,?XSP + 0
   \   000093   AB..         MOV     R3,?XSP + 1
   \   000095   7900         MOV     R1,#0x0
   \   000097   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    467                }
    468              }
    469            }
    470          }
   \                     ??uartRxCB_0:
   \   00009A   7487         MOV     A,#-0x79
   \   00009C   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for doorState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB
    471          
    472          /******************************************************************************
    473           * @fn          sysPingReqRcvd
    474           *
    475           * @brief       Ping request received
    476           *
    477           * @param       none
    478           *
    479           * @return      none
    480           */
    481          static void sysPingReqRcvd(void)
    482          {
    483             sysPingRsp();
    484          }
    485          
    486          /******************************************************************************
    487           * @fn          sysPingRsp
    488           *
    489           * @brief       Build and send Ping response
    490           *
    491           * @param       none
    492           *
    493           * @return      none
    494           */
    495          static void sysPingRsp(void)
    496          {
    497            uint8 pBuf[SYS_PING_RSP_LENGTH];
    498          
    499            // Start of Frame Delimiter
    500            pBuf[FRAME_SOF_OFFSET] = CPT_SOP;
    501          
    502            // Length
    503            pBuf[FRAME_LENGTH_OFFSET] = 2;
    504          
    505            // Command type
    506            pBuf[FRAME_CMD0_OFFSET] = LO_UINT16(SYS_PING_RESPONSE);
    507            pBuf[FRAME_CMD1_OFFSET] = HI_UINT16(SYS_PING_RESPONSE);
    508          
    509            // Stack profile
    510            pBuf[FRAME_DATA_OFFSET] = LO_UINT16(STACK_PROFILE);
    511            pBuf[FRAME_DATA_OFFSET + 1] = HI_UINT16(STACK_PROFILE);
    512          
    513            // Frame Check Sequence
    514            pBuf[SYS_PING_RSP_LENGTH - 1] = calcFCS(&pBuf[FRAME_LENGTH_OFFSET], (SYS_PING_RSP_LENGTH - 2));
    515          
    516            // Write frame to UART
    517            HalUARTWrite(HAL_UART_PORT_0,pBuf, SYS_PING_RSP_LENGTH);
    518          }
    519          
    520          /******************************************************************************
    521           * @fn          sendGtwReport
    522           *
    523           * @brief       Build and send gateway report
    524           *
    525           * @param       none
    526           *
    527           * @return      none
    528           */
    529          static void sendGtwReport(gtwData_t *gtwData)
                             ^
Warning[Pe177]: function "sendGtwReport" was declared but never referenced
    530          {
    531            uint8 pFrame[ZB_RECV_LENGTH];
    532          
    533            // Start of Frame Delimiter
    534            pFrame[FRAME_SOF_OFFSET] = CPT_SOP; // Start of Frame Delimiter
    535          
    536            // Length
    537            pFrame[FRAME_LENGTH_OFFSET] = 10;
    538          
    539            // Command type
    540            pFrame[FRAME_CMD0_OFFSET] = LO_UINT16(ZB_RECEIVE_DATA_INDICATION);
    541            pFrame[FRAME_CMD1_OFFSET] = HI_UINT16(ZB_RECEIVE_DATA_INDICATION);
    542          
    543            // Source address
    544            pFrame[FRAME_DATA_OFFSET + ZB_RECV_SRC_OFFSET] = LO_UINT16(gtwData->source);
    545            pFrame[FRAME_DATA_OFFSET + ZB_RECV_SRC_OFFSET+ 1] = HI_UINT16(gtwData->source);
    546          
    547            // Command ID
    548           // pFrame[FRAME_DATA_OFFSET + ZB_RECV_CMD_OFFSET] = LO_UINT16(SENSOR_REPORT_CMD_ID);
    549           // pFrame[FRAME_DATA_OFFSET + ZB_RECV_CMD_OFFSET+ 1] = HI_UINT16(SENSOR_REPORT_CMD_ID);
    550          
    551            // Length
    552            pFrame[FRAME_DATA_OFFSET + ZB_RECV_LEN_OFFSET] = LO_UINT16(4);
    553            pFrame[FRAME_DATA_OFFSET + ZB_RECV_LEN_OFFSET+ 1] = HI_UINT16(4);
    554          
    555            // Data
    556            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET] = gtwData->temp;
    557            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET+ 1] = gtwData->voltage;
    558            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET+ 2] = LO_UINT16(gtwData->parent);
    559            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET+ 3] = HI_UINT16(gtwData->parent);
    560          
    561            // Frame Check Sequence
    562            pFrame[ZB_RECV_LENGTH - 1] = calcFCS(&pFrame[FRAME_LENGTH_OFFSET], (ZB_RECV_LENGTH - 2) );
    563          
    564            // Write report to UART
    565            HalUARTWrite(HAL_UART_PORT_0,pFrame, ZB_RECV_LENGTH);
    566          }
    567          
    568          /******************************************************************************
    569           * @fn          calcFCS
    570           *
    571           * @brief       This function calculates the FCS checksum for the serial message
    572           *
    573           * @param       pBuf - Pointer to the end of a buffer to calculate the FCS.
    574           *              len - Length of the pBuf.
    575           *
    576           * @return      The calculated FCS.
    577           ******************************************************************************
    578           */
    579          static uint8 calcFCS(uint8 *pBuf, uint8 len)
    580          {
    581            uint8 rtrn = 0;
    582          
    583            while ( len-- )
    584            {
    585              rtrn ^= *pBuf++;
    586            }
    587          
    588            return rtrn;
    589          }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1    145   uartRxCB
        0    145   -> HalUARTRead
        0    145   -> HalUARTWrite
      2      0   zb_AllowBindConfirm
        2      0   -> zb_AllowBind
        2      0   -> zb_BindDevice
      0      9   zb_BindConfirm
        0      9   -> HalLedSet
      0      0   zb_FindDeviceConfirm
      0      9   zb_HandleKeys
        0      9   -> zb_AllowBind
      1     16   zb_HandleOsalEvent
        0     11   -> initUart
        0     15   -> osal_start_timerEx
        0     16   -> zb_SendDataRequest
        0     11   -> zb_StartRequest
      2      4   zb_ReceiveDataIndication
      0      0   zb_SendDataConfirm
      0     16   zb_StartConfirm
        0     12   -> HalLedSet
        0     16   -> osal_start_timerEx
        0     12   -> zb_AllowBind


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for doorState>
       1  ?<Initializer for myStartRetryDelay>
       8  ?Subroutine0
       5  ?Subroutine1
       7  ?Subroutine2
       9  ?Subroutine3
       1  P0DIR
       1  P0INP
       1  P0SEL
       1  P2INP
       1  _A_P0
       4  __Constant_64
       1  allowBind
       1  appState
       1  buttonState
       1  doorState
       1  myStartRetryDelay
     159  uartRxCB
       6  uartRxCB::?relay
      22  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
      29  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
      43  zb_HandleKeys
       6  zb_HandleKeys::?relay
     179  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       2  zb_InCmdList
       2  zb_OutCmdList
      33  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
       3  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
     114  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 614 bytes in segment BANKED_CODE
  54 bytes in segment BANK_RELAYS
   5 bytes in segment SFR_AN
   2 bytes in segment XDATA_I
   2 bytes in segment XDATA_ID
  20 bytes in segment XDATA_ROM_C
   3 bytes in segment XDATA_Z
 
 670 bytes of CODE  memory
  16 bytes of CONST memory (+ 4 bytes shared)
   0 bytes of DATA  memory (+ 5 bytes shared)
   5 bytes of XDATA memory

Errors: none
Warnings: 3
