###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                16/Mar/2016  12:51:41
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\osal\common\OSAL_Timers.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\osal\common\OSAL_Timers.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        xNV_RESTORE -D ZTOOL_P1 -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\OSAL_Timers.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\OSAL_Timers.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\osal\common\OSAL_Timers.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Timers.c
      3            Revised:        $Date: 2012-11-28 00:37:02 -0800 (Wed, 28 Nov 2012) $
      4            Revision:       $Revision: 32329 $
      5          
      6            Description:    OSAL Timer definition and manipulation functions.
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "comdef.h"
     45          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     46          #include "OSAL.h"
     47          #include "OSAL_Timers.h"
     48          #include "hal_timer.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          
     62          typedef union {
     63            uint32 time32;
     64            uint16 time16[2];
     65            uint8 time8[4];
     66          } osalTime_t;
     67          
     68          typedef struct
     69          {
     70            void   *next;
     71            osalTime_t timeout;
     72            uint16 event_flag;
     73            uint8  task_id;
     74            uint32 reloadTimeout;
     75          } osalTimerRec_t;
     76          
     77          /*********************************************************************
     78           * GLOBAL VARIABLES
     79           */
     80          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          osalTimerRec_t *timerHead;
   \                     timerHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          
     91          /*********************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          // Milliseconds since last reboot

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static uint32 osal_systemClock;
   \                     osal_systemClock:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTION PROTOTYPES
     99           */
    100          osalTimerRec_t  *osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout );
    101          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag );
    102          void osalDeleteTimer( osalTimerRec_t *rmTimer );
    103          
    104          /*********************************************************************
    105           * FUNCTIONS
    106           *********************************************************************/
    107          
    108          /*********************************************************************
    109           * @fn      osalTimerInit
    110           *
    111           * @brief   Initialization for the OSAL Timer System.
    112           *
    113           * @param   none
    114           *
    115           * @return
    116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          void osalTimerInit( void )
   \                     osalTimerInit:
    118          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    119            osal_systemClock = 0;
   \   000005   90....       MOV     DPTR,#osal_systemClock
   \   000008   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00000B   F0           MOVX    @DPTR,A
    120          }
   \   00000C                REQUIRE ?Subroutine0
   \   00000C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E4           CLR     A
   \   000001                REQUIRE ??Subroutine6_0
   \   000001                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    121          
    122          /*********************************************************************
    123           * @fn      osalAddTimer
    124           *
    125           * @brief   Add a timer to the timer list.
    126           *          Ints must be disabled.
    127           *
    128           * @param   task_id
    129           * @param   event_flag
    130           * @param   timeout
    131           *
    132           * @return  osalTimerRec_t * - pointer to newly created timer
    133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout )
   \                     osalAddTimer:
    135          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    136            osalTimerRec_t *newTimer;
    137            osalTimerRec_t *srchTimer;
    138          
    139            // Look for an existing timer first
    140            newTimer = osalFindTimer( task_id, event_flag );
   \   00000B   90....       MOV     DPTR,#timerHead
   \   00000E   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000011   7410         MOV     A,#0x10
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?L_MOV_X
   \   00001B   8007         SJMP    ??CrossCallReturnLabel_18
   \                     ??osalAddTimer_0:
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000024   EA           MOV     A,R2
   \   000025   4B           ORL     A,R3
   \   000026   6031         JZ      ??osalAddTimer_1
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6E           XRL     A,R6
   \   000034   7003         JNZ     ??osalAddTimer_2
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6F           XRL     A,R7
   \                     ??osalAddTimer_2:
   \   000039   70E2         JNZ     ??osalAddTimer_0
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   8B83         MOV     DPH,R3
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   65..         XRL     A,?V4
   \   00004A   70D1         JNZ     ??osalAddTimer_0
    141            if ( newTimer )
    142            {
    143              // Timer is found - update it.
    144              newTimer->timeout.time32 = timeout;
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?L_MOV_TO_X
    145          
    146              return ( newTimer );
   \   000057   806A         SJMP    ??osalAddTimer_3
    147            }
    148            else
    149            {
    150              // New Timer
    151              newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
   \                     ??osalAddTimer_1:
   \   000059                ; Setup parameters for call to function osal_mem_alloc
   \   000059   7A0D         MOV     R2,#0xd
   \   00005B   7B00         MOV     R3,#0x0
   \   00005D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    152          
    153              if ( newTimer )
   \   000060   EA           MOV     A,R2
   \   000061   4B           ORL     A,R3
   \   000062   605B         JZ      ??osalAddTimer_4
    154              {
    155                // Fill in new timer
    156                newTimer->task_id = task_id;
   \   000064   8A82         MOV     DPL,R2
   \   000066   8B83         MOV     DPH,R3
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E5..         MOV     A,?V4
   \   000072   12....       LCALL   ?Subroutine3 & 0xFFFF
    157                newTimer->event_flag = event_flag;
   \                     ??CrossCallReturnLabel_0:
   \   000075   EE           MOV     A,R6
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   EF           MOV     A,R7
   \   000079   F0           MOVX    @DPTR,A
    158                newTimer->timeout.time32 = timeout;
   \   00007A   8A82         MOV     DPL,R2
   \   00007C   8B83         MOV     DPH,R3
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?L_MOV_TO_X
    159                newTimer->next = (void *)NULL;
   \   000085   8A82         MOV     DPL,R2
   \   000087   8B83         MOV     DPH,R3
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   12....       LCALL   ?Subroutine3 & 0xFFFF
    160                newTimer->reloadTimeout = 0;
   \                     ??CrossCallReturnLabel_1:
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000095   F0           MOVX    @DPTR,A
    161          
    162                // Does the timer list already exist
    163                if ( timerHead == NULL )
   \   000096   90....       MOV     DPTR,#timerHead
   \   000099   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00009C   90....       MOV     DPTR,#timerHead
   \   00009F   6017         JZ      ??osalAddTimer_5
    164                {
    165                  // Start task list
    166                  timerHead = newTimer;
    167                }
    168                else
    169                {
    170                  // Add it to the end of the timer list
    171                  srchTimer = timerHead;
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FC           MOV     R4,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   8003         SJMP    ??osalAddTimer_6
    172          
    173                  // Stop at the last record
    174                  while ( srchTimer->next )
    175                    srchTimer = srchTimer->next;
   \                     ??osalAddTimer_7:
   \   0000A7   E8           MOV     A,R0
   \   0000A8   FC           MOV     R4,A
   \   0000A9   E9           MOV     A,R1
   \                     ??osalAddTimer_6:
   \   0000AA   FD           MOV     R5,A
   \   0000AB   8C82         MOV     DPL,R4
   \   0000AD   8D83         MOV     DPH,R5
   \   0000AF   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B2   70F3         JNZ     ??osalAddTimer_7
    176          
    177                  // Add to the list
    178                  srchTimer->next = newTimer;
   \   0000B4   8C82         MOV     DPL,R4
   \   0000B6   8D83         MOV     DPH,R5
   \                     ??osalAddTimer_5:
   \   0000B8   EA           MOV     A,R2
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   EB           MOV     A,R3
   \   0000BC   F0           MOVX    @DPTR,A
    179                }
    180          
    181                return ( newTimer );
   \   0000BD   8004         SJMP    ??osalAddTimer_3
    182              }
    183              else
    184              {
    185                return ( (osalTimerRec_t *)NULL );
   \                     ??osalAddTimer_4:
   \   0000BF   7A00         MOV     R2,#0x0
   \   0000C1   7B00         MOV     R3,#0x0
   \                     ??osalAddTimer_3:
   \   0000C3   7F08         MOV     R7,#0x8
   \   0000C5   02....       LJMP    ?BANKED_LEAVE_XDATA
    186              }
    187            }
    188          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    189          
    190          /*********************************************************************
    191           * @fn      osalFindTimer
    192           *
    193           * @brief   Find a timer in a timer list.
    194           *          Ints must be disabled.
    195           *
    196           * @param   task_id
    197           * @param   event_flag
    198           *
    199           * @return  osalTimerRec_t *
    200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    201          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
   \                     osalFindTimer:
    202          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    203            osalTimerRec_t *srchTimer;
    204          
    205            // Head of the timer list
    206            srchTimer = timerHead;
   \   000004   90....       MOV     DPTR,#timerHead
   \   000007   8004         SJMP    ??osalFindTimer_0
    207          
    208            // Stop when found or at the end
    209            while ( srchTimer )
    210            {
    211              if ( srchTimer->event_flag == event_flag &&
    212                   srchTimer->task_id == task_id )
    213              {
    214                break;
    215              }
    216          
    217              // Not this one, check another
    218              srchTimer = srchTimer->next;
   \                     ??osalFindTimer_1:
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \                     ??osalFindTimer_0:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FC           MOV     R4,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FD           MOV     R5,A
   \   000012   EC           MOV     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   6023         JZ      ??osalFindTimer_2
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6A           XRL     A,R2
   \   000022   7003         JNZ     ??osalFindTimer_3
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6B           XRL     A,R3
   \                     ??osalFindTimer_3:
   \   000027   70E0         JNZ     ??osalFindTimer_1
   \   000029   8C82         MOV     DPL,R4
   \   00002B   8D83         MOV     DPH,R5
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   69           XRL     A,R1
   \   000037   70D0         JNZ     ??osalFindTimer_1
    219            }
    220          
    221            return ( srchTimer );
   \                     ??osalFindTimer_2:
   \   000039   EC           MOV     A,R4
   \   00003A   FA           MOV     R2,A
   \   00003B   ED           MOV     A,R5
   \   00003C   FB           MOV     R3,A
   \   00003D   02....       LJMP    ?Subroutine1 & 0xFFFF
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    223          
    224          /*********************************************************************
    225           * @fn      osalDeleteTimer
    226           *
    227           * @brief   Delete a timer from a timer list.
    228           *
    229           * @param   table
    230           * @param   rmTimer
    231           *
    232           * @return  none
    233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          void osalDeleteTimer( osalTimerRec_t *rmTimer )
   \                     osalDeleteTimer:
    235          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    236            // Does the timer list really exist
    237            if ( rmTimer )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   600E         JZ      ??osalDeleteTimer_0
    238            {
    239              // Clear the event flag and osalTimerUpdate() will delete
    240              // the timer from the list.
    241              rmTimer->event_flag = 0;
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    242            }
    243          }
   \                     ??osalDeleteTimer_0:
   \   000016   02....       LJMP    ?Subroutine1 & 0xFFFF
    244          
    245          /*********************************************************************
    246           * @fn      osal_start_timerEx
    247           *
    248           * @brief
    249           *
    250           *   This function is called to start a timer to expire in n mSecs.
    251           *   When the timer expires, the calling task will get the specified event.
    252           *
    253           * @param   uint8 taskID - task id to set timer for
    254           * @param   uint16 event_id - event to be notified with
    255           * @param   uint32 timeout_value - in milliseconds.
    256           *
    257           * @return  SUCCESS, or NO_TIMER_AVAIL.
    258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint32 timeout_value )
   \                     osal_start_timerEx:
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    261            halIntState_t intState;
    262            osalTimerRec_t *newTimer;
    263          
    264            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   AEA8         MOV     R6,0xa8+0x0
   \   000007   C2AF         CLR     0xa8.7
    265          
    266            // Add timer
    267            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   000009                ; Setup parameters for call to function osalAddTimer
   \   000009   740A         MOV     A,#0xa
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000011   12....       LCALL   `??osalAddTimer::?relay`; Banked call to: osalAddTimer
   \   000014   7404         MOV     A,#0x4
   \   000016   12....       LCALL   ?DEALLOC_XSTACK8
    268          
    269            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000019   EE           MOV     A,R6
   \   00001A   A2E7         MOV     C,0xE0 /* A   */.7
   \   00001C   E4           CLR     A
   \   00001D   33           RLC     A
   \   00001E   F8           MOV     R0,A
   \   00001F   EE           MOV     A,R6
   \   000020   A2E7         MOV     C,0xE0 /* A   */.7
   \   000022   92AF         MOV     0xa8.7,C
    270          
    271            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   000024   EA           MOV     A,R2
   \   000025   4B           ORL     A,R3
   \   000026   6004         JZ      ??osal_start_timerEx_0
   \   000028   7900         MOV     R1,#0x0
   \   00002A   8002         SJMP    ??osal_start_timerEx_1
   \                     ??osal_start_timerEx_0:
   \   00002C   7908         MOV     R1,#0x8
   \                     ??osal_start_timerEx_1:
   \   00002E   7F02         MOV     R7,#0x2
   \   000030   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000033                REQUIRE _A_IEN0
    272          }
    273          
    274          /*********************************************************************
    275           * @fn      osal_start_reload_timer
    276           *
    277           * @brief
    278           *
    279           *   This function is called to start a timer to expire in n mSecs.
    280           *   When the timer expires, the calling task will get the specified event
    281           *   and the timer will be reloaded with the timeout value.
    282           *
    283           * @param   uint8 taskID - task id to set timer for
    284           * @param   uint16 event_id - event to be notified with
    285           * @param   UNINT16 timeout_value - in milliseconds.
    286           *
    287           * @return  SUCCESS, or NO_TIMER_AVAIL.
    288           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    289          uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint32 timeout_value )
   \                     osal_start_reload_timer:
    290          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    291            halIntState_t intState;
    292            osalTimerRec_t *newTimer;
    293          
    294            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FE           MOV     R6,A
   \   00000A   C2AF         CLR     0xa8.7
   \   00000C   740E         MOV     A,#0xe
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?L_MOV_X
    295          
    296            // Add timer
    297            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   000016                ; Setup parameters for call to function osalAddTimer
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00001B   12....       LCALL   `??osalAddTimer::?relay`; Banked call to: osalAddTimer
   \   00001E   7404         MOV     A,#0x4
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
    298            if ( newTimer )
   \   000023   EA           MOV     A,R2
   \   000024   4B           ORL     A,R3
   \   000025   6012         JZ      ??osal_start_reload_timer_0
    299            {
    300              // Load the reload timeout value
    301              newTimer->reloadTimeout = timeout_value;
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   78..         MOV     R0,#?V0
   \   000036   12....       LCALL   ?L_MOV_TO_X
    302            }
    303          
    304            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_start_reload_timer_0:
   \   000039   EE           MOV     A,R6
   \   00003A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003C   92AF         MOV     0xa8.7,C
    305          
    306            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   00003E   EA           MOV     A,R2
   \   00003F   4B           ORL     A,R3
   \   000040   6004         JZ      ??osal_start_reload_timer_1
   \   000042   7900         MOV     R1,#0x0
   \   000044   8002         SJMP    ??osal_start_reload_timer_2
   \                     ??osal_start_reload_timer_1:
   \   000046   7908         MOV     R1,#0x8
   \                     ??osal_start_reload_timer_2:
   \   000048   7F06         MOV     R7,#0x6
   \   00004A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00004D                REQUIRE _A_IEN0
    307          }
    308          
    309          /*********************************************************************
    310           * @fn      osal_stop_timerEx
    311           *
    312           * @brief
    313           *
    314           *   This function is called to stop a timer that has already been started.
    315           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    316           *   associated with the timer from being set for the calling task.
    317           *
    318           * @param   uint8 task_id - task id of timer to stop
    319           * @param   uint16 event_id - identifier of the timer that is to be stopped
    320           *
    321           * @return  SUCCESS or INVALID_EVENT_ID
    322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    323          uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
   \                     osal_stop_timerEx:
    324          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    325            halIntState_t intState;
    326            osalTimerRec_t *foundTimer;
    327          
    328            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   C2AF         CLR     0xa8.7
    329          
    330            // Find the timer to stop
    331            foundTimer = osalFindTimer( task_id, event_id );
   \   00000E   90....       MOV     DPTR,#timerHead
   \   000011   8004         SJMP    ??osal_stop_timerEx_0
   \                     ??osal_stop_timerEx_1:
   \   000013   8882         MOV     DPL,R0
   \   000015   8983         MOV     DPH,R1
   \                     ??osal_stop_timerEx_0:
   \   000017   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00001A   602C         JZ      ??osal_stop_timerEx_2
   \   00001C   E8           MOV     A,R0
   \   00001D   2406         ADD     A,#0x6
   \   00001F   FC           MOV     R4,A
   \   000020   E4           CLR     A
   \   000021   39           ADDC    A,R1
   \   000022   FD           MOV     R5,A
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6A           XRL     A,R2
   \   000029   7003         JNZ     ??osal_stop_timerEx_3
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6B           XRL     A,R3
   \                     ??osal_stop_timerEx_3:
   \   00002E   70E3         JNZ     ??osal_stop_timerEx_1
   \   000030   8882         MOV     DPL,R0
   \   000032   8983         MOV     DPH,R1
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6F           XRL     A,R7
   \   00003E   70D3         JNZ     ??osal_stop_timerEx_1
    332            if ( foundTimer )
    333            {
    334              osalDeleteTimer( foundTimer );
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   F0           MOVX    @DPTR,A
    335            }
    336          
    337            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_stop_timerEx_2:
   \   000048   EE           MOV     A,R6
   \   000049   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004B   92AF         MOV     0xa8.7,C
    338          
    339            return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
   \   00004D   E8           MOV     A,R0
   \   00004E   49           ORL     A,R1
   \   00004F   6004         JZ      ??osal_stop_timerEx_4
   \   000051   7900         MOV     R1,#0x0
   \   000053   8002         SJMP    ??osal_stop_timerEx_5
   \                     ??osal_stop_timerEx_4:
   \   000055   7906         MOV     R1,#0x6
   \                     ??osal_stop_timerEx_5:
   \   000057   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00005A                REQUIRE _A_IEN0
    340          }
    341          
    342          /*********************************************************************
    343           * @fn      osal_get_timeoutEx
    344           *
    345           * @brief
    346           *
    347           * @param   uint8 task_id - task id of timer to check
    348           * @param   uint16 event_id - identifier of timer to be checked
    349           *
    350           * @return  Return the timer's tick count if found, zero otherwise.
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          uint32 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
   \                     osal_get_timeoutEx:
    353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    354            halIntState_t intState;
    355            uint32 rtrn = 0;
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   75..00       MOV     ?V1,#0x0
   \   00000D   75..00       MOV     ?V2,#0x0
   \   000010   75..00       MOV     ?V3,#0x0
    356            osalTimerRec_t *tmr;
    357          
    358            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000013   A2AF         MOV     C,0xa8.7
   \   000015   E4           CLR     A
   \   000016   33           RLC     A
   \   000017   FC           MOV     R4,A
   \   000018   C2AF         CLR     0xa8.7
    359          
    360            tmr = osalFindTimer( task_id, event_id );
   \   00001A   90....       MOV     DPTR,#timerHead
   \   00001D   8004         SJMP    ??osal_get_timeoutEx_0
   \                     ??osal_get_timeoutEx_1:
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \                     ??osal_get_timeoutEx_0:
   \   000023   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000026   602E         JZ      ??osal_get_timeoutEx_2
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6A           XRL     A,R2
   \   000034   7003         JNZ     ??osal_get_timeoutEx_3
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6B           XRL     A,R3
   \                     ??osal_get_timeoutEx_3:
   \   000039   70E4         JNZ     ??osal_get_timeoutEx_1
   \   00003B   8882         MOV     DPL,R0
   \   00003D   8983         MOV     DPH,R1
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6E           XRL     A,R6
   \   000049   70D4         JNZ     ??osal_get_timeoutEx_1
    361          
    362            if ( tmr )
    363            {
    364              rtrn = tmr->timeout.time32;
   \   00004B   8882         MOV     DPL,R0
   \   00004D   8983         MOV     DPH,R1
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?L_MOV_X
    365            }
    366          
    367            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_get_timeoutEx_2:
   \   000056   EC           MOV     A,R4
   \   000057   A2E0         MOV     C,0xE0 /* A   */.0
   \   000059   92AF         MOV     0xa8.7,C
    368          
    369            return rtrn;
   \   00005B   AA..         MOV     R2,?V0
   \   00005D   AB..         MOV     R3,?V1
   \   00005F   AC..         MOV     R4,?V2
   \   000061   AD..         MOV     R5,?V3
   \   000063   7F04         MOV     R7,#0x4
   \   000065   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000068                REQUIRE _A_IEN0
    370          }
    371          
    372          /*********************************************************************
    373           * @fn      osal_timer_num_active
    374           *
    375           * @brief
    376           *
    377           *   This function counts the number of active timers.
    378           *
    379           * @return  uint8 - number of timers
    380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          uint8 osal_timer_num_active( void )
   \                     osal_timer_num_active:
    382          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    383            halIntState_t intState;
    384            uint8 num_timers = 0;
   \   000004   7900         MOV     R1,#0x0
    385            osalTimerRec_t *srchTimer;
    386          
    387            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000006   A2AF         MOV     C,0xa8.7
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F8           MOV     R0,A
   \   00000B   C2AF         CLR     0xa8.7
    388          
    389            // Head of the timer list
    390            srchTimer = timerHead;
   \   00000D   90....       MOV     DPTR,#timerHead
   \   000010   8001         SJMP    ??osal_timer_num_active_0
    391          
    392            // Count timers in the list
    393            while ( srchTimer != NULL )
    394            {
    395              num_timers++;
   \                     ??osal_timer_num_active_1:
   \   000012   09           INC     R1
    396              srchTimer = srchTimer->next;
    397            }
   \                     ??osal_timer_num_active_0:
   \   000013   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   E582         MOV     A,DPL
   \   00001C   4583         ORL     A,DPH
   \   00001E   70F2         JNZ     ??osal_timer_num_active_1
    398          
    399            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000020   E8           MOV     A,R0
   \   000021   A2E0         MOV     C,0xE0 /* A   */.0
   \   000023   92AF         MOV     0xa8.7,C
    400          
    401            return num_timers;
   \   000025                REQUIRE ?Subroutine1
   \   000025                REQUIRE _A_IEN0
   \   000025                ; // Fall through to label ?Subroutine1
    402          }
    403          
    404          /*********************************************************************
    405           * @fn      osalTimerUpdate
    406           *
    407           * @brief   Update the timer structures for a timer tick.
    408           *
    409           * @param   none
    410           *
    411           * @return  none
    412           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine7_0
   \   000004                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine8_0
   \   000002                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine9_0
   \   000002                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine10_0
   \   000006                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          void osalTimerUpdate( uint32 updateTime )
   \                     osalTimerUpdate:
    414          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
    415            halIntState_t intState;
    416            osalTimerRec_t *srchTimer;
    417            osalTimerRec_t *prevTimer;
    418          
    419            osalTime_t timeUnion;
    420            timeUnion.time32 = updateTime;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?L_MOV_TO_X
    421          
    422            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00001D   A9A8         MOV     R1,0xa8+0x0
   \   00001F   C2AF         CLR     0xa8.7
    423            // Update the system time
    424            osal_systemClock += updateTime;
   \   000021   90....       MOV     DPTR,#osal_systemClock
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?L_ADD_TO_X
    425            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000029   E9           MOV     A,R1
   \   00002A   A2E7         MOV     C,0xE0 /* A   */.7
   \   00002C   E4           CLR     A
   \   00002D   33           RLC     A
   \   00002E   FA           MOV     R2,A
   \   00002F   E9           MOV     A,R1
   \   000030   A2E7         MOV     C,0xE0 /* A   */.7
   \   000032   92AF         MOV     0xa8.7,C
    426          
    427            // Look for open timer slot
    428            if ( timerHead != NULL )
   \   000034   90....       MOV     DPTR,#timerHead
   \   000037   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00003A   7003         JNZ     $+5
   \   00003C   02....       LJMP    ??osalTimerUpdate_0 & 0xFFFF
    429            {
    430              // Add it to the end of the timer list
    431              srchTimer = timerHead;
   \   00003F   90....       MOV     DPTR,#timerHead
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FE           MOV     R6,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FF           MOV     R7,A
    432              prevTimer = (void *)NULL;
   \   000047   75..00       MOV     ?V8,#0x0
   \   00004A   75..00       MOV     ?V9,#0x0
   \   00004D   7401         MOV     A,#0x1
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V11,A
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V12,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V13,A
    433          
    434              // Look for open timer slot
    435              while ( srchTimer )
    436              {
    437                osalTimerRec_t *freeTimer = NULL;
   \                     ??osalTimerUpdate_1:
   \   000061   75..00       MOV     ?V2,#0x0
   \   000064   75..00       MOV     ?V3,#0x0
    438          
    439                HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000067   A2AF         MOV     C,0xa8.7
   \   000069   E4           CLR     A
   \   00006A   33           RLC     A
   \   00006B   F5..         MOV     ?V10,A
   \   00006D   C2AF         CLR     0xa8.7
    440          
    441                // To minimize time in this critical section, avoid 32-bit math
    442                if ((timeUnion.time16[1] == 0) && (timeUnion.time8[1] == 0))
   \   00006F   EE           MOV     A,R6
   \   000070   2402         ADD     A,#0x2
   \   000072   F5..         MOV     ?V0,A
   \   000074   E4           CLR     A
   \   000075   3F           ADDC    A,R7
   \   000076   F5..         MOV     ?V1,A
   \   000078   E5..         MOV     A,?V12
   \   00007A   45..         ORL     A,?V13
   \   00007C   701C         JNZ     ??osalTimerUpdate_2
   \   00007E   E5..         MOV     A,?V11
   \   000080   7018         JNZ     ??osalTimerUpdate_2
    443                {
    444                  // If upper 24 bits are zero, check lower 8 bits for roll over
    445                  if (srchTimer->timeout.time8[0] >= timeUnion.time8[0])
   \   000082   85..82       MOV     DPL,?XSP + 0
   \   000085   85..83       MOV     DPH,?XSP + 1
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F8           MOV     R0,A
   \   00008A   85..82       MOV     DPL,?V0
   \   00008D   85..83       MOV     DPH,?V1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C3           CLR     C
   \   000092   98           SUBB    A,R0
   \   000093   4005         JC      ??osalTimerUpdate_2
    446                  {
    447                    // 8-bit math
    448                    srchTimer->timeout.time8[0] -= timeUnion.time8[0];
   \   000095   E0           MOVX    A,@DPTR
   \   000096   C3           CLR     C
   \   000097   98           SUBB    A,R0
   \   000098   8039         SJMP    ??CrossCallReturnLabel_4
    449                  }
    450                  else
    451                  {
    452                    // 32-bit math
    453                    if (srchTimer->timeout.time32 > timeUnion.time32)
    454                    {
    455                      srchTimer->timeout.time32 -= timeUnion.time32;
    456                    }
    457                    else
    458                    {
    459                      srchTimer->timeout.time32 = 0;
    460                    }
    461                  }
    462                }
    463                else
    464                {
    465                    // 32-bit math
    466                  if (srchTimer->timeout.time32 > timeUnion.time32)
   \                     ??osalTimerUpdate_2:
   \   00009A   85..82       MOV     DPL,?V0
   \   00009D   85..83       MOV     DPH,?V1
   \   0000A0   78..         MOV     R0,#?V4
   \   0000A2   12....       LCALL   ?L_MOV_X
   \   0000A5   85..82       MOV     DPL,?XSP + 0
   \   0000A8   85..83       MOV     DPH,?XSP + 1
   \   0000AB   78..         MOV     R0,#?V4
   \   0000AD   12....       LCALL   ?UL_GT_X
   \   0000B0   5018         JNC     ??osalTimerUpdate_3
    467                  {
    468                    srchTimer->timeout.time32 -= timeUnion.time32;
   \   0000B2   85..82       MOV     DPL,?XSP + 0
   \   0000B5   85..83       MOV     DPH,?XSP + 1
   \   0000B8   78..         MOV     R0,#?V4
   \   0000BA   12....       LCALL   ?L_MOV_X
   \   0000BD   85..82       MOV     DPL,?V0
   \   0000C0   85..83       MOV     DPH,?V1
   \   0000C3   78..         MOV     R0,#?V4
   \   0000C5   12....       LCALL   ?L_SUB_FROM_X
   \   0000C8   800A         SJMP    ??osalTimerUpdate_4
    469                  }
    470                  else
    471                  {
    472                    srchTimer->timeout.time32 = 0;
   \                     ??osalTimerUpdate_3:
   \   0000CA   85..82       MOV     DPL,?V0
   \   0000CD   85..83       MOV     DPH,?V1
   \   0000D0   12....       LCALL   ?Subroutine5 & 0xFFFF
    473                  }
    474                }
   \                     ??CrossCallReturnLabel_4:
   \   0000D3   F0           MOVX    @DPTR,A
    475          
    476                // Check for reloading
    477                if ( (srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0) &&
    478                     (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
   \                     ??osalTimerUpdate_4:
   \   0000D4   85..82       MOV     DPL,?V0
   \   0000D7   85..83       MOV     DPH,?V1
   \   0000DA   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000DD   704A         JNZ     ??osalTimerUpdate_5
   \   0000DF   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000E2   7050         JNZ     ??osalTimerUpdate_6
   \   0000E4   EE           MOV     A,R6
   \   0000E5   2409         ADD     A,#0x9
   \   0000E7   F5..         MOV     ?V4,A
   \   0000E9   E4           CLR     A
   \   0000EA   3F           ADDC    A,R7
   \   0000EB   F5..         MOV     ?V5,A
   \   0000ED   85..82       MOV     DPL,?V4
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   12....       LCALL   ?XLOAD_R0123
   \   0000F5   E8           MOV     A,R0
   \   0000F6   49           ORL     A,R1
   \   0000F7   4A           ORL     A,R2
   \   0000F8   4B           ORL     A,R3
   \   0000F9   6049         JZ      ??osalTimerUpdate_7
   \   0000FB   8E82         MOV     DPL,R6
   \   0000FD   8F83         MOV     DPH,R7
   \   0000FF   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000102   EA           MOV     A,R2
   \   000103   4B           ORL     A,R3
   \   000104   603E         JZ      ??osalTimerUpdate_7
    479                {
    480                  // Notify the task of a timeout
    481                  osal_set_event( srchTimer->task_id, srchTimer->event_flag );
   \   000106                ; Setup parameters for call to function osal_set_event
   \   000106   8E82         MOV     DPL,R6
   \   000108   8F83         MOV     DPH,R7
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F9           MOV     R1,A
   \   000114   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    482          
    483                  // Reload the timer timeout value
    484                  srchTimer->timeout.time32 = srchTimer->reloadTimeout;
   \   000117   85..82       MOV     DPL,?V4
   \   00011A   85..83       MOV     DPH,?V5
   \   00011D   12....       LCALL   ?XLOAD_R0123
   \   000120   85..82       MOV     DPL,?V0
   \   000123   85..83       MOV     DPH,?V1
   \   000126   12....       LCALL   ?XSTORE_R0123
    485                }
    486          
    487                // When timeout or delete (event_flag == 0)
    488                if ( ((srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0)) ||
    489                      (srchTimer->event_flag == 0) )
   \                     ??osalTimerUpdate_5:
   \   000129   85..82       MOV     DPL,?V0
   \   00012C   85..83       MOV     DPH,?V1
   \   00012F   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000132   7005         JNZ     ??osalTimerUpdate_8
   \                     ??osalTimerUpdate_6:
   \   000134   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000137   600B         JZ      ??osalTimerUpdate_7
   \                     ??osalTimerUpdate_8:
   \   000139   8E82         MOV     DPL,R6
   \   00013B   8F83         MOV     DPH,R7
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000142   7025         JNZ     ??osalTimerUpdate_9
    490                {
    491                  // Take out of list
    492                  if ( prevTimer == NULL )
   \                     ??osalTimerUpdate_7:
   \   000144   8E82         MOV     DPL,R6
   \   000146   8F83         MOV     DPH,R7
   \   000148   E0           MOVX    A,@DPTR
   \   000149   F8           MOV     R0,A
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   F9           MOV     R1,A
   \   00014D   E5..         MOV     A,?V8
   \   00014F   45..         ORL     A,?V9
   \   000151   7005         JNZ     ??osalTimerUpdate_10
    493                  {
    494                    timerHead = srchTimer->next;
   \   000153   90....       MOV     DPTR,#timerHead
   \   000156   8006         SJMP    ??osalTimerUpdate_11
    495                  }
    496                  else
    497                  {
    498                    prevTimer->next = srchTimer->next;
   \                     ??osalTimerUpdate_10:
   \   000158   85..82       MOV     DPL,?V8
   \   00015B   85..83       MOV     DPH,?V9
   \                     ??osalTimerUpdate_11:
   \   00015E   E8           MOV     A,R0
   \   00015F   F0           MOVX    @DPTR,A
   \   000160   A3           INC     DPTR
   \   000161   E9           MOV     A,R1
   \   000162   F0           MOVX    @DPTR,A
    499                  }
    500          
    501                  // Setup to free memory
    502                  freeTimer = srchTimer;
   \   000163   8E..         MOV     ?V2,R6
   \   000165   8F..         MOV     ?V3,R7
    503          
    504                  // Next
    505                  srchTimer = srchTimer->next;
   \   000167   8004         SJMP    ??osalTimerUpdate_12
    506                }
    507                else
    508                {
    509                  // Get next
    510                  prevTimer = srchTimer;
   \                     ??osalTimerUpdate_9:
   \   000169   8E..         MOV     ?V8,R6
   \   00016B   8F..         MOV     ?V9,R7
    511                  srchTimer = srchTimer->next;
   \                     ??osalTimerUpdate_12:
   \   00016D   8E82         MOV     DPL,R6
   \   00016F   8F83         MOV     DPH,R7
   \   000171   E0           MOVX    A,@DPTR
   \   000172   FE           MOV     R6,A
   \   000173   A3           INC     DPTR
   \   000174   E0           MOVX    A,@DPTR
   \   000175   FF           MOV     R7,A
    512                }
    513          
    514                HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000176   E5..         MOV     A,?V10
   \   000178   A2E0         MOV     C,0xE0 /* A   */.0
   \   00017A   92AF         MOV     0xa8.7,C
    515          
    516                if ( freeTimer )
   \   00017C   E5..         MOV     A,?V2
   \   00017E   45..         ORL     A,?V3
   \   000180   6039         JZ      ??osalTimerUpdate_13
    517                {
    518                  if ( (freeTimer->timeout.time16[0] == 0) && (freeTimer->timeout.time16[1] == 0) )
   \   000182   85..82       MOV     DPL,?V2
   \   000185   85..83       MOV     DPH,?V3
   \   000188   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00018B   7027         JNZ     ??osalTimerUpdate_14
   \   00018D   85..82       MOV     DPL,?V2
   \   000190   85..83       MOV     DPH,?V3
   \   000193   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000196   701C         JNZ     ??osalTimerUpdate_14
    519                  {
    520                    osal_set_event( freeTimer->task_id, freeTimer->event_flag );
   \   000198                ; Setup parameters for call to function osal_set_event
   \   000198   85..82       MOV     DPL,?V2
   \   00019B   85..83       MOV     DPH,?V3
   \   00019E   12....       LCALL   ?Subroutine4 & 0xFFFF
    521                  }
   \                     ??CrossCallReturnLabel_21:
   \   0001A1   85..82       MOV     DPL,?V2
   \   0001A4   85..83       MOV     DPH,?V3
   \   0001A7   A3           INC     DPTR
   \   0001A8   A3           INC     DPTR
   \   0001A9   A3           INC     DPTR
   \   0001AA   A3           INC     DPTR
   \   0001AB   A3           INC     DPTR
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   F9           MOV     R1,A
   \   0001B1   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    522                  osal_mem_free( freeTimer );
   \                     ??osalTimerUpdate_14:
   \   0001B4                ; Setup parameters for call to function osal_mem_free
   \   0001B4   AA..         MOV     R2,?V2
   \   0001B6   AB..         MOV     R3,?V3
   \   0001B8   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    523                }
    524              }
   \                     ??osalTimerUpdate_13:
   \   0001BB   EE           MOV     A,R6
   \   0001BC   4F           ORL     A,R7
   \   0001BD   6003         JZ      $+5
   \   0001BF   02....       LJMP    ??osalTimerUpdate_1 & 0xFFFF
    525            }
    526          }
   \                     ??osalTimerUpdate_0:
   \   0001C2   7404         MOV     A,#0x4
   \   0001C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C7   7F0E         MOV     R7,#0xe
   \   0001C9   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001CC                REQUIRE _A_IEN0
    527          
    528          #ifdef POWER_SAVING
    529          /*********************************************************************
    530           * @fn      osal_adjust_timers
    531           *
    532           * @brief   Update the timer structures for elapsed ticks.
    533           *
    534           * @param   none
    535           *
    536           * @return  none
    537           *********************************************************************/
    538          void osal_adjust_timers( void )
    539          {
    540            uint32 eTime;
    541          
    542            if ( timerHead != NULL )
    543            {
    544              // Compute elapsed time (msec)
    545              eTime = TimerElapsed() / TICK_COUNT;
    546          
    547              if ( eTime )
    548              {
    549                osalTimerUpdate( eTime );
    550              }
    551            }
    552          }
    553          
    554          /*********************************************************************
    555           * @fn      osal_next_timeout
    556           *
    557           * @brief
    558           *
    559           *   Search timer table to return the lowest timeout value. If the
    560           *   timer list is empty, then the returned timeout will be zero.
    561           *
    562           * @param   none
    563           *
    564           * @return  none
    565           *********************************************************************/
    566          uint32 osal_next_timeout( void )
    567          {
    568            uint32 nextTimeout;
    569            osalTimerRec_t *srchTimer;
    570          
    571            if ( timerHead != NULL )
    572            {
    573              // Head of the timer list
    574              srchTimer = timerHead;
    575              nextTimeout = OSAL_TIMERS_MAX_TIMEOUT;
    576          
    577              // Look for the next timeout timer
    578              while ( srchTimer != NULL )
    579              {
    580                if (srchTimer->timeout.time32 < nextTimeout)
    581                {
    582                  nextTimeout = srchTimer->timeout.time32;
    583                }
    584                // Check next timer
    585                srchTimer = srchTimer->next;
    586              }
    587            }
    588            else
    589            {
    590              // No timers
    591              nextTimeout = 0;
    592            }
    593          
    594            return ( nextTimeout );
    595          }
    596          #endif // POWER_SAVING
    597          
    598          /*********************************************************************
    599           * @fn      osal_GetSystemClock()
    600           *
    601           * @brief   Read the local system clock.
    602           *
    603           * @param   none
    604           *
    605           * @return  local clock in milliseconds
    606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    607          uint32 osal_GetSystemClock( void )
   \                     osal_GetSystemClock:
    608          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    609            return ( osal_systemClock );
   \   000004   90....       MOV     DPTR,#osal_systemClock
   \   000007   12....       LCALL   ?XLOAD_R2345
   \   00000A   02....       LJMP    ?Subroutine1 & 0xFFFF
    610          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalTimerInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalAddTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalAddTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalFindTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalFindTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalDeleteTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalDeleteTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_start_timerEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_start_reload_timer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_reload_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_stop_timerEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_stop_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_get_timeoutEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_get_timeoutEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_timer_num_active::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_timer_num_active

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalTimerUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_GetSystemClock::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_GetSystemClock
    611          
    612          /*********************************************************************
    613          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     34   osalAddTimer
        0     16   -> osal_mem_alloc
      2      0   osalDeleteTimer
      2      0   osalFindTimer
      0      9   osalTimerInit
      0     26   osalTimerUpdate
        0     26   -> osal_mem_free
        0     26   -> osal_set_event
      2      0   osal_GetSystemClock
      0     12   osal_get_timeoutEx
      0     22   osal_start_reload_timer
        0     18   -> osalAddTimer
      0     18   osal_start_timerEx
        0     14   -> osalAddTimer
      0      9   osal_stop_timerEx
      2      0   osal_timer_num_active


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine10_0
       7  ??Subroutine6_0
       2  ??Subroutine7_0
       2  ??Subroutine8_0
       8  ??Subroutine9_0
       5  ?Subroutine0
       7  ?Subroutine1
       4  ?Subroutine2
      12  ?Subroutine3
       6  ?Subroutine4
       1  ?Subroutine5
       1  _A_IEN0
     200  osalAddTimer
       6  osalAddTimer::?relay
      25  osalDeleteTimer
       6  osalDeleteTimer::?relay
      64  osalFindTimer
       6  osalFindTimer::?relay
      12  osalTimerInit
       6  osalTimerInit::?relay
     460  osalTimerUpdate
       6  osalTimerUpdate::?relay
      13  osal_GetSystemClock
       6  osal_GetSystemClock::?relay
     104  osal_get_timeoutEx
       6  osal_get_timeoutEx::?relay
      77  osal_start_reload_timer
       6  osal_start_reload_timer::?relay
      51  osal_start_timerEx
       6  osal_start_timerEx::?relay
      90  osal_stop_timerEx
       6  osal_stop_timerEx::?relay
       4  osal_systemClock
      37  osal_timer_num_active
       6  osal_timer_num_active::?relay
       2  timerHead

 
 1 193 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     6 bytes in segment XDATA_Z
 
 1 259 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
     6 bytes of XDATA memory

Errors: none
Warnings: none
