###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                13/Mar/2016  22:07:02
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDProfile.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        xNV_RESTORE -D ZTOOL_P1 -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\ZDProfile.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\ZDProfile.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2013-10-02 15:57:50 -0700 (Wed, 02 Oct 2013) $
      4            Revision:       $Revision: 35529 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135          /*********************************************************************
    136           * EXTERNAL VARIABLES
    137           */
    138          
    139          extern endPointDesc_t ZDApp_epDesc;
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          
    149          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    150          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    151          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    152          
    153          /*********************************************************************
    154           * LOCAL VARIABLES
    155           */
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * ZDO Message Processing table
    165           */
    166          
    167          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    168          
    169          typedef struct
    170          {
    171            uint16                clusterID;
    172            pfnZDPMsgProcessor    pFn;
    173          } zdpMsgProcItem_t;
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   1300         DW 19
   \   000006   ....         DW `??ZDO_ProcessDeviceAnnce::?relay`
   \   000008   0100         DW 1
   \   00000A   ....         DW `??zdpProcessAddrReq::?relay`
   \   00000C   0200         DW 2
   \   00000E   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000010   0300         DW 3
   \   000012   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000014   0400         DW 4
   \   000016   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000018   0500         DW 5
   \   00001A   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   00001C   0600         DW 6
   \   00001E   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000020   FFFF         DW 65535
   \   000022   0000         DW 0H
    176          {
    177          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    178            // These aren't processed by sleeping end devices.
    179            { NWK_addr_req,           zdpProcessAddrReq },
    180            { Device_annce,           ZDO_ProcessDeviceAnnce },
    181          #endif
    182            { IEEE_addr_req,          zdpProcessAddrReq },
    183            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    184            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    185            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    186            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    187            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    188          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    189            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    192            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    198            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    204            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    207            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    208          #endif
    209          #if defined ( ZDO_USERDESC_RESPONSE )
    210            { User_Desc_req,          ZDO_ProcessUserDescReq },
    211          #endif
    212          #if defined ( ZDO_USERDESCSET_RESPONSE )
    213            { User_Desc_set,          ZDO_ProcessUserDescSet },
    214          #endif
    215          #if defined ( ZDO_SERVERDISC_RESPONSE )
    216            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    217          #endif
    218          #if defined ( ZIGBEE_CHILD_AGING )
    219          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    220            { End_Device_Timeout_req, ZDO_ProcessEndDeviceTimeoutReq },
    221          #endif
    222          #endif // ZIGBEE_CHILD_AGING
    223            {0xFFFF, NULL} // Last
    224          };
    225          
    226          /*********************************************************************
    227           * @fn          fillAndSend
    228           *
    229           * @brief       Combined to reduce space
    230           *
    231           * @param
    232           * @param
    233           *
    234           * @return      afStatus_t
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V4,R1
    238            afAddrType_t afAddr;
    239          
    240            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV     R4,#0xc
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    241            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV     A,#0x9
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000029   C0E0         PUSH    A
   \   00002B   7408         MOV     A,#0x8
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   D0E0         POP     A
   \   000032   12....       LCALL   ?Subroutine17 & 0xFFFF
    242          
    243            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_18:
   \   000035   85..82       MOV     DPL,?V0
   \   000038   85..83       MOV     DPH,?V1
   \   00003B   12....       LCALL   ?Subroutine77 & 0xFFFF
    244          
    245            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    246                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    247                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_124:
   \   00003E                ; Setup parameters for call to function AF_DataRequest
   \   00003E   75..1E       MOV     ?V5,#0x1e
   \   000041   78..         MOV     R0,#?V5
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   E5..         MOV     A,?V4
   \   000052   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   7421         MOV     A,#0x21
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000060   02....       LJMP    ??Subroutine142_0 & 0xFFFF
    248          
    249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   2401         ADD     A,#0x1
   \   000002   F5..         MOV     ?V0,A
   \   000004   E4           CLR     A
   \   000005   3400         ADDC    A,#0x0
   \   000007   F5..         MOV     ?V1,A
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   90....       MOV     DPTR,#ZDP_TxOptions
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000007   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E4           CLR     A
   \   000001   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000006   F5..         MOV     ?V2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   34FF         ADDC    A,#-0x1
   \   00000C   F5..         MOV     ?V3,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003   F9           MOV     R1,A
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   E8           MOV     A,R0
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   E9           MOV     A,R1
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX    A,@DPTR
   \   000013   24FF         ADD     A,#-0x1
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000003   12....       LCALL   ?XSTACK_DISP101_8
   \   000006   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000009   7409         MOV     A,#0x9
   \   00000B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000E   740C         MOV     A,#0xc
   \   000010                REQUIRE ??Subroutine143_0
   \   000010                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine144_0
   \   000003                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    250          
    251          /*********************************************************************
    252           * @fn          ZDP_SendData
    253           *
    254           * @brief       This builds and send a request message that has
    255           *              NWKAddrOfInterest as its only parameter.
    256           *
    257           * @param       dstAddr - destination address
    258           * @param       cmd - clusterID
    259           * @param       dataLen - number of bytes of data
    260           * @param       data - pointer to the data
    261           * @param       SecurityEnable - Security Options
    262           *
    263           * @return      afStatus_t
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    266                                  byte len, uint8 *buf, byte SecurityEnable )
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V1,R1
    268            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   12....       LCALL   ??Subroutine130_0 & 0xFFFF
    269            byte cnt = len;
   \                     ??CrossCallReturnLabel_256:
   \   000017   E9           MOV     A,R1
   \   000018   6023         JZ      ??ZDP_SendData_0
   \   00001A   F5..         MOV     ?V0,A
   \   00001C   741D         MOV     A,#0x1d
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ??Subroutine152_0 & 0xFFFF
    270          
    271            while ( cnt-- )
    272            {
    273              *pBuf++ = *buf++;
   \                     ??CrossCallReturnLabel_318:
   \   000024   12....       LCALL   ?Subroutine80 & 0xFFFF
    274            }
   \                     ??CrossCallReturnLabel_274:
   \   000027   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00002A   A882         MOV     R0,DPL
   \   00002C   A983         MOV     R1,DPH
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   A3           INC     DPTR
   \   000033   AA82         MOV     R2,DPL
   \   000035   AB83         MOV     R3,DPH
   \   000037   15..         DEC     ?V0
   \   000039   E5..         MOV     A,?V0
   \   00003B   70E7         JNZ     ??CrossCallReturnLabel_318
    275          
    276            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \                     ??ZDP_SendData_0:
   \   00003D   741F         MOV     A,#0x1f
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   90....       MOV     DPTR,#ZDP_TxOptions
   \   000046   6004         JZ      ??ZDP_SendData_1
   \   000048   7440         MOV     A,#0x40
   \   00004A   8001         SJMP    ??ZDP_SendData_2
   \                     ??ZDP_SendData_1:
   \   00004C   E4           CLR     A
   \                     ??ZDP_SendData_2:
   \   00004D   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000050   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000053   7409         MOV     A,#0x9
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00005B   C0E0         PUSH    A
   \   00005D   7408         MOV     A,#0x8
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   D0E0         POP     A
   \   000064   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000067   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00006A   F5..         MOV     ?V4,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   34FF         ADDC    A,#-0x1
   \   000070   F5..         MOV     ?V5,A
   \   000072   85..82       MOV     DPL,?V2
   \   000075   85..83       MOV     DPH,?V3
   \   000078   E0           MOVX    A,@DPTR
   \   000079   85..82       MOV     DPL,?V4
   \   00007C   85..83       MOV     DPH,?V5
   \   00007F   F0           MOVX    @DPTR,A
   \   000080                ; Setup parameters for call to function AF_DataRequest
   \   000080   75..1E       MOV     ?V6,#0x1e
   \   000083   78..         MOV     R0,#?V6
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000088   78..         MOV     R0,#?V2
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   78..         MOV     R0,#?V4
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   E5..         MOV     A,?V1
   \   000094   2401         ADD     A,#0x1
   \   000096   F5..         MOV     ?V2,A
   \   000098   E4           CLR     A
   \   000099   3400         ADDC    A,#0x0
   \   00009B   F5..         MOV     ?V3,A
   \   00009D   78..         MOV     R0,#?V2
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   7422         MOV     A,#0x22
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000AA   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0000AD   12....       LCALL   ?XSTACK_DISP101_8
   \   0000B0   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000B3   7409         MOV     A,#0x9
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B8   E9           MOV     A,R1
   \   0000B9   F9           MOV     R1,A
   \   0000BA   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000BD   E4           CLR     A
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   02....       LJMP    ?Subroutine1 & 0xFFFF
    277          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   740C         MOV     A,#0xc
   \   000002                REQUIRE ??Subroutine122_0
   \   000002                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001   7C0C         MOV     R4,#0xc
   \   000003   7D00         MOV     R5,#0x0
   \   000005   7900         MOV     R1,#0x0
   \   000007   AA..         MOV     R2,?XSP + 0
   \   000009   AB..         MOV     R3,?XSP + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine131_0
   \   000003                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine137_0
   \   000004                ; // Fall through to label ??Subroutine137_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000003   22           RET
    278          
    279          /*********************************************************************
    280           * @fn          ZDP_NWKAddrOfInterestReq
    281           *
    282           * @brief       This builds and send a request message that has
    283           *              NWKAddrOfInterest as its only parameter.
    284           *
    285           * @param       dstAddr - destination address
    286           * @param       nwkAddr - 16 bit address
    287           * @param       SecurityEnable - Security Options
    288           *
    289           * @return      afStatus_t
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    292                                               byte cmd, byte SecurityEnable )
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V2,R1
    294            (void)SecurityEnable;  // Intentionally unreferenced parameter
    295          
    296            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000010   12....       LCALL   ?Subroutine30 & 0xFFFF
    297            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_45:
   \   000013   12....       LCALL   ??Subroutine124_0 & 0xFFFF
    298          
    299            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \                     ??CrossCallReturnLabel_222:
   \   000016   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000019   7409         MOV     A,#0x9
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000021   C0E0         PUSH    A
   \   000023   7408         MOV     A,#0x8
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   D0E0         POP     A
   \   00002A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000030   75....       MOV     ?V4,#ZDP_TransID & 0xff
   \   000033   75....       MOV     ?V5,#(ZDP_TransID >> 8) & 0xff
   \   000036   78..         MOV     R0,#?V4
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   78..         MOV     R0,#?V0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..03       MOV     ?V0,#0x3
   \   000043   75..00       MOV     ?V1,#0x0
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   85....       MOV     ?V0,?V2
   \   00004E   02....       LJMP    ?Subroutine0 & 0xFFFF
    300          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   EC           MOV     A,R4
   \   000004   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000007   ED           MOV     A,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000006   90....       MOV     DPTR,#ZDP_TransID
   \   000009   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00000C                ; Setup parameters for call to function AF_DataRequest
   \   00000C                ; Setup parameters for call to function AF_DataRequest
   \   00000C   75..1E       MOV     ?V3,#0x1e
   \   00000F   78..         MOV     R0,#?V3
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   F5..         MOV     ?V0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   34FF         ADDC    A,#-0x1
   \   000009   F5..         MOV     ?V1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   78..         MOV     R0,#?V0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005                REQUIRE ??Subroutine142_0
   \   000005                ; // Fall through to label ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine150_0
   \   000003                ; // Fall through to label ??Subroutine150_0
    301          
    302          /*********************************************************************
    303           * Address Requests
    304           */
    305          
    306          /*********************************************************************
    307           * @fn          ZDP_NwkAddrReq
    308           *
    309           * @brief       This builds and send a NWK_addr_req message.  This
    310           *              function sends a broadcast message looking for a 16
    311           *              bit address with a 64 bit address as bait.
    312           *
    313           * @param       IEEEAddress - looking for this device
    314           * @param       SecurityEnable - Security Options
    315           *
    316           * @return      afStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    319                                     byte StartIndex, byte SecurityEnable )
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0,R1
   \   000010   8C..         MOV     ?V1,R4
    321            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V2,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V3,A
    322            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    323            zAddrType_t dstAddr;
    324          
    325            (void)SecurityEnable;  // Intentionally unreferenced parameter
    326          
    327            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \   00001C                ; Setup parameters for call to function sAddrExtCmp
   \   00001C   EE           MOV     A,R6
   \   00001D   FC           MOV     R4,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FD           MOV     R5,A
   \   000020   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000022   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000024   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000027   E9           MOV     A,R1
   \   000028   7012         JNZ     ??ZDP_NwkAddrReq_0
    328            {
    329              dstAddr.addrMode = AddrBroadcast;
   \   00002A   7408         MOV     A,#0x8
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   740F         MOV     A,#0xf
   \   000031   12....       LCALL   ??Subroutine121_0 & 0xFFFF
    330              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    331            }
   \                     ??CrossCallReturnLabel_205:
   \   000034   74FD         MOV     A,#-0x3
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   74FF         MOV     A,#-0x1
   \   00003A   8018         SJMP    ??ZDP_NwkAddrReq_1
    332            else
    333            {
    334              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00003C   7408         MOV     A,#0x8
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7402         MOV     A,#0x2
   \   000043   F0           MOVX    @DPTR,A
    335              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000044   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000047   12....       LCALL   ??Subroutine152_0 & 0xFFFF
    336            }
   \                     ??CrossCallReturnLabel_319:
   \   00004A   85..82       MOV     DPL,?XSP + 0
   \   00004D   85..83       MOV     DPH,?XSP + 1
   \   000050   E8           MOV     A,R0
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   E9           MOV     A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   000054   F0           MOVX    @DPTR,A
    337          
    338            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000055                ; Setup parameters for call to function sAddrExtCpy
   \   000055   EE           MOV     A,R6
   \   000056   FC           MOV     R4,A
   \   000057   EF           MOV     A,R7
   \   000058   FD           MOV     R5,A
   \   000059   AA..         MOV     R2,?V2
   \   00005B   AB..         MOV     R3,?V3
   \   00005D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000060   12....       LCALL   ?Subroutine44 & 0xFFFF
    339          
    340            *pBuf++ = ReqType;
    341            *pBuf++ = StartIndex;
    342          
    343            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \                     ??CrossCallReturnLabel_192:
   \   000063                ; Setup parameters for call to function osal_memset
   \   000063   7C0C         MOV     R4,#0xc
   \   000065   7D00         MOV     R5,#0x0
   \   000067   7900         MOV     R1,#0x0
   \   000069   7409         MOV     A,#0x9
   \   00006B   12....       LCALL   ?XSTACK_DISP101_8
   \   00006E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000071   7412         MOV     A,#0x12
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   E4           CLR     A
   \   000077   F0           MOVX    @DPTR,A
   \   000078   7408         MOV     A,#0x8
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   C0E0         PUSH    A
   \   000080   7411         MOV     A,#0x11
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   D0E0         POP     A
   \   000087   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00008A   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00008D   7409         MOV     A,#0x9
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000098   75....       MOV     ?V4,#ZDP_TransID & 0xff
   \   00009B   75....       MOV     ?V5,#(ZDP_TransID >> 8) & 0xff
   \   00009E   78..         MOV     R0,#?V4
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   78..         MOV     R0,#?V2
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   75..0B       MOV     ?V2,#0xb
   \   0000AB   75..00       MOV     ?V3,#0x0
   \   0000AE   78..         MOV     R0,#?V2
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   E4           CLR     A
   \   0000B4   F5..         MOV     ?V2,A
   \   0000B6   78..         MOV     R0,#?V2
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   0000BE   7412         MOV     A,#0x12
   \   0000C0   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C3   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000C6   7409         MOV     A,#0x9
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CB   7415         MOV     A,#0x15
   \   0000CD   02....       LJMP    ??Subroutine143_0 & 0xFFFF
    344          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine119_0
   \   000004                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   E5..         MOV     A,?V0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine120_0
   \   000004                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   90....       MOV     DPTR,#ZDP_TransID
   \   000006   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003   75..1E       MOV     ?V4,#0x1e
   \   000006   78..         MOV     R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   F5..         MOV     ?V2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   34FF         ADDC    A,#-0x1
   \   000009   F5..         MOV     ?V3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000004   E0           MOVX    A,@DPTR
   \   000005   24FF         ADD     A,#-0x1
   \   000007   22           RET
    345          
    346          /*********************************************************************
    347           * @fn          ZDP_IEEEAddrReq
    348           *
    349           * @brief       This builds and send a IEEE_addr_req message.  This
    350           *              function sends a unicast message looking for a 64
    351           *              bit IEEE address with a 16 bit address as bait.
    352           *
    353           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    354           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    355           * @param       SecurityEnable - Security Options
    356           *
    357           * @return      afStatus_t
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    360                                      byte StartIndex, byte SecurityEnable )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0,R1
    362            uint8 *pBuf = ZDP_TmpBuf;
   \   000010   12....       LCALL   ??Subroutine151_0 & 0xFFFF
    363            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    364            zAddrType_t dstAddr;
    365          
    366            (void)SecurityEnable;  // Intentionally unreferenced parameter
    367          
    368            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    369            dstAddr.addr.shortAddr = shortAddr;
    370          
    371            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_330:
   \   000013   EE           MOV     A,R6
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   F0           MOVX    @DPTR,A
    372            *pBuf++ = HI_UINT16( shortAddr );
   \   000019   EF           MOV     A,R7
   \   00001A   12....       LCALL   ?Subroutine51 & 0xFFFF
    373          
    374            *pBuf++ = ReqType;
   \                     ??CrossCallReturnLabel_230:
   \   00001D   A3           INC     DPTR
   \   00001E   E5..         MOV     A,?V0
   \   000020   12....       LCALL   ??Subroutine126_0 & 0xFFFF
    375            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_233:
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine12 & 0xFFFF
    376          
    377            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \                     ??CrossCallReturnLabel_219:
   \   000027   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   00002A   7409         MOV     A,#0x9
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E4           CLR     A
   \   000030   F0           MOVX    @DPTR,A
   \   000031   7408         MOV     A,#0x8
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000039   EE           MOV     A,R6
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   EF           MOV     A,R7
   \   00003D   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000043   75....       MOV     ?V4,#ZDP_TransID & 0xff
   \   000046   75....       MOV     ?V5,#(ZDP_TransID >> 8) & 0xff
   \   000049   78..         MOV     R0,#?V4
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   78..         MOV     R0,#?V2
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   75..05       MOV     ?V2,#0x5
   \   000056   75..00       MOV     ?V3,#0x0
   \   000059   78..         MOV     R0,#?V2
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..01       MOV     ?V2,#0x1
   \   000061                REQUIRE ?Subroutine6
   \   000061                ; // Fall through to label ?Subroutine6
    378          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   78..         MOV     R0,#?V2
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   02....       LJMP    ??Subroutine142_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine121_0
   \   000002                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   EC           MOV     A,R4
   \   000002                REQUIRE ??Subroutine124_0
   \   000002                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine126_0
   \   000001                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine152_0
   \   000003                ; // Fall through to label ??Subroutine152_0
    379          
    380          /*********************************************************************
    381           * @fn          ZDP_MatchDescReq
    382           *
    383           * @brief       This builds and send a Match_Desc_req message.  This
    384           *              function sends a broadcast or unicast message
    385           *              requesting the list of endpoint/interfaces that
    386           *              match profile ID and cluster IDs.
    387           *
    388           * @param       dstAddr - destination address
    389           * @param       nwkAddr - network address of interest
    390           * @param       ProfileID - Profile ID
    391           * @param       NumInClusters - number of input clusters
    392           * @param       InClusterList - input cluster ID list
    393           * @param       NumOutClusters - number of output clusters
    394           * @param       OutClusterList - output cluster ID list
    395           * @param       SecurityEnable - Security Options
    396           *
    397           * @return      afStatus_t
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    400                                          uint16 ProfileID,
    401                                          byte NumInClusters, cId_t *InClusterList,
    402                                          byte NumOutClusters, cId_t *OutClusterList,
    403                                          byte SecurityEnable )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   12....       LCALL   ?Subroutine67 & 0xFFFF
    405            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_316:
   \   000011   741F         MOV     A,#0x1f
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V6,A
    406            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    407            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    408          
    409            (void)SecurityEnable;  // Intentionally unreferenced parameter
    410          
    411            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000019   EE           MOV     A,R6
   \   00001A   25..         ADD     A,?V6
   \   00001C   C3           CLR     C
   \   00001D   33           RLC     A
   \   00001E   2406         ADD     A,#0x6
   \   000020   F5..         MOV     ?V3,A
    412          
    413            if ( len >= ZDP_BUF_SZ-1 )
   \   000022   C3           CLR     C
   \   000023   944F         SUBB    A,#0x4f
   \   000025   4005         JC      ??ZDP_MatchDescReq_0
    414            {
    415              return afStatus_MEM_FAIL;
   \   000027   7910         MOV     R1,#0x10
   \   000029   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    416            }
    417          
    418            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    419            // this command to 0xFFFF.  So, here we will filter this and replace
    420            // with 0xFFFD to only send to devices with RX ON.  This includes the
    421            // network address of interest.
    422            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    423                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   00002C   EA           MOV     A,R2
   \   00002D   2408         ADD     A,#0x8
   \   00002F   F5..         MOV     ?V4,A
   \   000031   E4           CLR     A
   \   000032   35..         ADDC    A,?V1
   \   000034   F5..         MOV     ?V5,A
   \   000036   85..82       MOV     DPL,?V4
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   740F         MOV     A,#0xf
   \   00003F   6A           XRL     A,R2
   \   000040   6005         JZ      ??ZDP_MatchDescReq_2
   \   000042   7402         MOV     A,#0x2
   \   000044   6A           XRL     A,R2
   \   000045   701A         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   000047   85..82       MOV     DPL,?V0
   \   00004A   8B83         MOV     DPH,R3
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F4           CPL     A
   \   00004E   7003         JNZ     ??ZDP_MatchDescReq_4
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F4           CPL     A
   \                     ??ZDP_MatchDescReq_4:
   \   000053   700C         JNZ     ??ZDP_MatchDescReq_3
    424            {
    425              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000055   85..82       MOV     DPL,?V0
   \   000058   8B83         MOV     DPH,R3
   \   00005A   74FD         MOV     A,#-0x3
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   74FF         MOV     A,#-0x1
   \   000060   F0           MOVX    @DPTR,A
    426            }
    427            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000061   74FF         MOV     A,#-0x1
   \   000063   6C           XRL     A,R4
   \   000064   7003         JNZ     ??ZDP_MatchDescReq_5
   \   000066   74FF         MOV     A,#-0x1
   \   000068   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   000069   7004         JNZ     ??ZDP_MatchDescReq_6
    428            {
    429              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00006B   7CFD         MOV     R4,#-0x3
   \   00006D   7DFF         MOV     R5,#-0x1
    430            }
    431          
    432            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   00006F   EC           MOV     A,R4
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   F0           MOVX    @DPTR,A
    433            *pBuf++ = HI_UINT16( nwkAddr );
   \   000075   ED           MOV     A,R5
   \   000076   A3           INC     DPTR
   \   000077   F0           MOVX    @DPTR,A
   \   000078   741B         MOV     A,#0x1b
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ?Subroutine70 & 0xFFFF
    434          
    435            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_107:
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   F0           MOVX    @DPTR,A
    436            *pBuf++ = HI_UINT16( ProfileID );
   \   000087   EB           MOV     A,R3
   \   000088   8882         MOV     DPL,R0
   \   00008A   8983         MOV     DPH,R1
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   F0           MOVX    @DPTR,A
    437          
    438            *pBuf++ = NumInClusters; // Input cluster list
   \   000090   EE           MOV     A,R6
   \   000091   8882         MOV     DPL,R0
   \   000093   8983         MOV     DPH,R1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   E8           MOV     A,R0
   \   00009B   2405         ADD     A,#0x5
   \   00009D   F8           MOV     R0,A
   \   00009E   5001         JNC     ??ZDP_MatchDescReq_7
   \   0000A0   09           INC     R1
    439            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_7:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   601B         JZ      ??ZDP_MatchDescReq_8
    440            {
    441              for (i=0; i<NumInClusters; ++i)  {
   \   0000A4   741D         MOV     A,#0x1d
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   0000AC   EE           MOV     A,R6
   \   0000AD   FF           MOV     R7,A
    442                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??ZDP_MatchDescReq_9:
   \   0000AE   12....       LCALL   ?Subroutine23 & 0xFFFF
    443                *pBuf++ = HI_UINT16( InClusterList[i] );
    444              }
   \                     ??CrossCallReturnLabel_32:
   \   0000B1   5001         JNC     ??ZDP_MatchDescReq_10
   \   0000B3   09           INC     R1
   \                     ??ZDP_MatchDescReq_10:
   \   0000B4   EA           MOV     A,R2
   \   0000B5   2402         ADD     A,#0x2
   \   0000B7   FA           MOV     R2,A
   \   0000B8   5001         JNC     ??ZDP_MatchDescReq_11
   \   0000BA   0B           INC     R3
   \                     ??ZDP_MatchDescReq_11:
   \   0000BB   1F           DEC     R7
   \   0000BC   EF           MOV     A,R7
   \   0000BD   70EF         JNZ     ??ZDP_MatchDescReq_9
    445            }
    446          
    447            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_8:
   \   0000BF   8882         MOV     DPL,R0
   \   0000C1   8983         MOV     DPH,R1
   \   0000C3   E5..         MOV     A,?V6
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   A882         MOV     R0,DPL
   \   0000C9   A983         MOV     R1,DPH
    448            if ( NumOutClusters )
   \   0000CB   601E         JZ      ??ZDP_MatchDescReq_12
    449            {
    450              for (i=0; i<NumOutClusters; ++i)  {
   \   0000CD   7420         MOV     A,#0x20
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   0000D5   85....       MOV     ?V2,?V6
    451                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??ZDP_MatchDescReq_13:
   \   0000D8   12....       LCALL   ?Subroutine23 & 0xFFFF
    452                *pBuf++ = HI_UINT16( OutClusterList[i] );
    453              }
   \                     ??CrossCallReturnLabel_33:
   \   0000DB   5001         JNC     ??ZDP_MatchDescReq_14
   \   0000DD   09           INC     R1
   \                     ??ZDP_MatchDescReq_14:
   \   0000DE   EA           MOV     A,R2
   \   0000DF   2402         ADD     A,#0x2
   \   0000E1   FA           MOV     R2,A
   \   0000E2   5001         JNC     ??ZDP_MatchDescReq_15
   \   0000E4   0B           INC     R3
   \                     ??ZDP_MatchDescReq_15:
   \   0000E5   15..         DEC     ?V2
   \   0000E7   E5..         MOV     A,?V2
   \   0000E9   70ED         JNZ     ??ZDP_MatchDescReq_13
    454            }
    455          
    456            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_12:
   \   0000EB                ; Setup parameters for call to function osal_memset
   \   0000EB   7C0C         MOV     R4,#0xc
   \   0000ED   7D00         MOV     R5,#0x0
   \   0000EF   7900         MOV     R1,#0x0
   \   0000F1   AA..         MOV     R2,?XSP + 0
   \   0000F3   AB..         MOV     R3,?XSP + 1
   \   0000F5   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000F8   7409         MOV     A,#0x9
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   E4           CLR     A
   \   0000FE   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000101   C0E0         PUSH    A
   \   000103   7408         MOV     A,#0x8
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   D0E0         POP     A
   \   00010A   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00010D   90....       MOV     DPTR,#ZDP_TransID
   \   000110   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000116   75....       MOV     ?V4,#ZDP_TransID & 0xff
   \   000119   75....       MOV     ?V5,#(ZDP_TransID >> 8) & 0xff
   \   00011C   78..         MOV     R0,#?V4
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000121   78..         MOV     R0,#?V0
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000126   E5..         MOV     A,?V3
   \   000128   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012E   75..06       MOV     ?V0,#0x6
   \   000131   75..00       MOV     ?V1,#0x0
   \   000134   78..         MOV     R0,#?V0
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000139   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   00013C   12....       LCALL   ?XSTACK_DISP101_8
   \   00013F   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000142   7409         MOV     A,#0x9
   \   000144   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   000147   02....       LJMP    ?Subroutine1 & 0xFFFF
    457          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000007   F0           MOVX    @DPTR,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
   \   000011   E8           MOV     A,R0
   \   000012   2402         ADD     A,#0x2
   \   000014   F8           MOV     R0,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003   75..1E       MOV     ?V4,#0x1e
   \   000006   78..         MOV     R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine146_0
   \   000001                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V4
   \   000004   85..83       MOV     DPH,?V5
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E9           MOV     A,R1
   \   000001   FE           MOV     R6,A
   \   000002                REQUIRE ??Subroutine151_0
   \   000002                ; // Fall through to label ??Subroutine151_0
    458          
    459          /*********************************************************************
    460           * @fn          ZDP_SimpleDescReq
    461           *
    462           * @brief       This builds and send a NWK_Simple_Desc_req
    463           *              message.  This function sends unicast message to the
    464           *              destination device.
    465           *
    466           * @param       dstAddr - destination address
    467           * @param       nwkAddr - 16 bit address
    468           * @param       epIntf - endpoint/interface
    469           * @param       SecurityEnable - Security Options
    470           *
    471           * @return      afStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    474                                              byte endPoint, byte SecurityEnable )
    475          
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    477            (void)SecurityEnable;  // Intentionally unreferenced parameter
    478          
    479            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   00000E   12....       LCALL   ?Subroutine30 & 0xFFFF
    480            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_46:
   \   000011   12....       LCALL   ?Subroutine27 & 0xFFFF
    481            ZDP_TmpBuf[2] = endPoint;
   \                     ??CrossCallReturnLabel_40:
   \   000014   12....       LCALL   ??Subroutine124_0 & 0xFFFF
    482          
    483            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_223:
   \   000017   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   00001A   7409         MOV     A,#0x9
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000022   C0E0         PUSH    A
   \   000024   7408         MOV     A,#0x8
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   D0E0         POP     A
   \   00002B   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V4,#ZDP_TransID & 0xff
   \   000034   75....       MOV     ?V5,#(ZDP_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V4
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   75..04       MOV     ?V0,#0x4
   \   000044   75..00       MOV     ?V1,#0x0
   \   000047   78..         MOV     R0,#?V0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   02....       LJMP    ?Subroutine0 & 0xFFFF
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   22           RET
    485          
    486          /*********************************************************************
    487           * @fn          ZDP_UserDescSet
    488           *
    489           * @brief       This builds and send a User_Desc_set message to set
    490           *              the user descriptor.  This function sends unicast
    491           *              message to the destination device.
    492           *
    493           * @param       dstAddr - destination address
    494           * @param       nwkAddr - 16 bit address
    495           * @param       UserDescriptor - user descriptor
    496           * @param       SecurityEnable - Security Options
    497           *
    498           * @return      afStatus_t
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    501                                    UserDescriptorFormat_t *UserDescriptor,
    502                                    byte SecurityEnable )
    503          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    504            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   00000C   88..         MOV     ?V0,R0
   \   00000E   89..         MOV     ?V1,R1
   \   000010   740F         MOV     A,#0xf
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine59 & 0xFFFF
    505            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    506                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_91:
   \   000018   FA           MOV     R2,A
   \   000019   C3           CLR     C
   \   00001A   9410         SUBB    A,#0x10
   \   00001C   5004         JNC     ??ZDP_UserDescSet_0
   \   00001E   8A..         MOV     ?V2,R2
   \   000020   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   000022   75..10       MOV     ?V2,#0x10
    507            byte addrLen = 2;
    508          
    509            (void)SecurityEnable;  // Intentionally unreferenced parameter
    510          
    511            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000025   EC           MOV     A,R4
   \   000026   85..82       MOV     DPL,?V0
   \   000029   85..83       MOV     DPH,?V1
   \   00002C   F0           MOVX    @DPTR,A
    512            *pBuf++ = HI_UINT16( nwkAddr );
   \   00002D   ED           MOV     A,R5
   \   00002E   12....       LCALL   ?Subroutine45 & 0xFFFF
    513          
    514            *pBuf++ = len;
   \                     ??CrossCallReturnLabel_73:
   \   000031   E5..         MOV     A,?V2
   \   000033   12....       LCALL   ?Subroutine21 & 0xFFFF
    515            addrLen = 3;
    516          
    517            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_28:
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000039   AC..         MOV     R4,?V2
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   E5..         MOV     A,?V0
   \   00003F   2403         ADD     A,#0x3
   \   000041   FA           MOV     R2,A
   \   000042   E4           CLR     A
   \   000043   35..         ADDC    A,?V1
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000049   7403         MOV     A,#0x3
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
    518            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   00004E                ; Setup parameters for call to function osal_memset
   \   00004E   A8..         MOV     R0,?V2
   \   000050   7410         MOV     A,#0x10
   \   000052   C3           CLR     C
   \   000053   98           SUBB    A,R0
   \   000054   FC           MOV     R4,A
   \   000055   95E0         SUBB    A,0xE0 /* A   */
   \   000057   FD           MOV     R5,A
   \   000058   7920         MOV     R1,#0x20
   \   00005A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    519          
    520            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   00005D                ; Setup parameters for call to function fillAndSend
   \   00005D   75..14       MOV     ?V0,#0x14
   \   000060   75..00       MOV     ?V1,#0x0
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   7913         MOV     R1,#0x13
   \   00006A   EE           MOV     A,R6
   \   00006B   FC           MOV     R4,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FD           MOV     R5,A
   \   00006E   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000070   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000072   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000075   7402         MOV     A,#0x2
   \   000077   80..         SJMP    ??Subroutine122_0
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   A982         MOV     R1,DPL
   \   000005   AA83         MOV     R2,DPH
   \   000007   89..         MOV     ?V4,R1
   \   000009   8A..         MOV     ?V5,R2
   \   00000B   75..00       MOV     ?V6,#0x0
   \   00000E   78..         MOV     R0,#?V4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_ServerDiscReq
    525           *
    526           * @brief       Build and send a Server_Discovery_req request message.
    527           *
    528           * @param       serverMask - 16-bit bit-mask of server services being sought.
    529           * @param       SecurityEnable - Security Options
    530           *
    531           * @return      afStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine67 & 0xFFFF
    535            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_317:
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
    536            zAddrType_t dstAddr;
    537          
    538            dstAddr.addrMode = AddrBroadcast;
    539            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    540          
    541            *pBuf++ = LO_UINT16( serverMask );
   \   000011   EA           MOV     A,R2
   \   000012   F0           MOVX    @DPTR,A
    542            *pBuf = HI_UINT16( serverMask );
   \   000013   EB           MOV     A,R3
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    543          
    544            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    545                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   000016   EE           MOV     A,R6
   \   000017   90....       MOV     DPTR,#ZDP_TxOptions
   \   00001A   6004         JZ      ??ZDP_ServerDiscReq_0
   \   00001C   7440         MOV     A,#0x40
   \   00001E   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000020   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000021   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000024   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000027   7409         MOV     A,#0x9
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   7408         MOV     A,#0x8
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   75....       MOV     ?V2,#ZDP_TransID & 0xff
   \   00003C   75....       MOV     ?V3,#(ZDP_TransID >> 8) & 0xff
   \   00003F   78..         MOV     R0,#?V2
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   78..         MOV     R0,#?V0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75..03       MOV     ?V0,#0x3
   \   00004C   75..00       MOV     ?V1,#0x0
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   75..15       MOV     ?V0,#0x15
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00005F   12....       LCALL   ?XSTACK_DISP101_8
   \   000062   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000065   7409         MOV     A,#0x9
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   E9           MOV     A,R1
   \   00006B   F9           MOV     R1,A
   \   00006C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
   \   000071   02....       LJMP    ??Subroutine138_0 & 0xFFFF
    546          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine138_0:
   \   000000   740C         MOV     A,#0xc
   \   000002                REQUIRE ??Subroutine139_0
   \   000002                ; // Fall through to label ??Subroutine139_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine139_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    547          
    548          /*********************************************************************
    549           * @fn          ZDP_DeviceAnnce
    550           *
    551           * @brief       This builds and send a Device_Annce message.  This
    552           *              function sends a broadcast message.
    553           *
    554           * @param       nwkAddr - 16 bit address of the device
    555           * @param       IEEEAddr - 64 bit address of the device
    556           * @param       capabilities - device capabilities.  This field is only
    557           *                 sent for v1.1 networks.
    558           * @param       SecurityEnable - Security Options
    559           *
    560           * @return      afStatus_t
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F                REQUIRE ??Subroutine123_0
   \   00000F                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000003   F5..         MOV     ?V0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   34FF         ADDC    A,#-0x1
   \   000009   F5..         MOV     ?V1,A
   \   00000B   90....       MOV     DPTR,#ZDP_TransID
   \   00000E   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003   75..1E       MOV     ?V2,#0x1e
   \   000006   78..         MOV     R0,#?V2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    563                                        byte capabilities, byte SecurityEnable )
    564          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    565            zAddrType_t dstAddr;
    566            uint8 len;
    567          
    568            (void)SecurityEnable;  // Intentionally unreferenced parameter
    569          
    570            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    571            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    572          
    573            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   00000C   12....       LCALL   ??Subroutine140_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   00000F   EA           MOV     A,R2
   \   000010   12....       LCALL   ?Subroutine32 & 0xFFFF
    574            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_49:
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    575            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   000015                ; Setup parameters for call to function sAddrExtCpy
   \   000015   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000018   E0           MOVX    A,@DPTR
   \   000019   2402         ADD     A,#0x2
   \   00001B   FA           MOV     R2,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   3400         ADDC    A,#0x0
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    576            len = 2 + Z_EXTADDR_LEN;
    577          
    578            ZDP_TmpBuf[10] = capabilities;
   \   000024   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000027   C8           XCH     A,R0
   \   000028   240A         ADD     A,#0xa
   \   00002A   F582         MOV     DPL,A
   \   00002C   E4           CLR     A
   \   00002D   38           ADDC    A,R0
   \   00002E   F583         MOV     DPH,A
   \   000030   EE           MOV     A,R6
   \   000031   12....       LCALL   ??Subroutine124_0 & 0xFFFF
    579            len++;
    580          
    581            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \                     ??CrossCallReturnLabel_225:
   \   000034   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000037   7409         MOV     A,#0x9
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   7408         MOV     A,#0x8
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   75....       MOV     ?V2,#ZDP_TransID & 0xff
   \   00004C   75....       MOV     ?V3,#(ZDP_TransID >> 8) & 0xff
   \   00004F   78..         MOV     R0,#?V2
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   75..0C       MOV     ?V0,#0xc
   \   00005C   75..00       MOV     ?V1,#0x0
   \   00005F   78..         MOV     R0,#?V0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   75..13       MOV     ?V0,#0x13
   \   000067   02....       LJMP    ?Subroutine2 & 0xFFFF
    582          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   78..         MOV     R0,#?V0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000008   12....       LCALL   ?XSTACK_DISP101_8
   \   00000B   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00000E   7409         MOV     A,#0x9
   \   000010   12....       LCALL   ?DEALLOC_XSTACK8
   \   000013                REQUIRE ??Subroutine138_0
   \   000013                ; // Fall through to label ??Subroutine138_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine140_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004                REQUIRE ??Subroutine141_0
   \   000004                ; // Fall through to label ??Subroutine141_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET
    583          
    584          #if defined ( ZIGBEE_CHILD_AGING )
    585          /*********************************************************************
    586           * @fn          ZDP_EndDeviceTimeoutReq
    587           *
    588           * @brief       This builds and send an End_Device_Timeout_req message.
    589           *
    590           * @param       parentAddr - destination address
    591           * @param       reqTimeout - Timeout value the device is requesting
    592           * @param       SecurityEnable - Security Options
    593           *
    594           * @return      afStatus_t
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          afStatus_t ZDP_EndDeviceTimeoutReq( uint16 parentAddr, uint16 reqTimeout,
   \                     ZDP_EndDeviceTimeoutReq:
    597                                              uint8 SecurityEnable )
    598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    599            uint8 *pBuf = ZDP_TmpBuf;
    600            uint8 len = Z_EXTADDR_LEN + 2;  // Device_IEEEAddress + reqTimeout.
    601            zAddrType_t dstAddr;
    602          
    603            (void)SecurityEnable;  // Intentionally unreferenced parameter
    604          
    605            dstAddr.addrMode = Addr16Bit;
    606            dstAddr.addr.shortAddr = parentAddr;
    607          
    608            pBuf = osal_cpyExtAddr( pBuf, saveExtAddr );
   \   000012                ; Setup parameters for call to function sAddrExtCpy
   \   000012   7C..         MOV     R4,#saveExtAddr & 0xff
   \   000014   7D..         MOV     R5,#(saveExtAddr >> 8) & 0xff
   \   000016   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000019   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
    609          
    610            *pBuf++ = LO_UINT16( reqTimeout );
   \   000020   EE           MOV     A,R6
   \   000021   F0           MOVX    @DPTR,A
    611            *pBuf++ = HI_UINT16( reqTimeout );
   \   000022   EF           MOV     A,R7
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ??Subroutine124_0 & 0xFFFF
    612          
    613            return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_Timeout_req, len );
   \                     ??CrossCallReturnLabel_226:
   \   000027   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   00002A   7409         MOV     A,#0x9
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E4           CLR     A
   \   000030   F0           MOVX    @DPTR,A
   \   000031   7408         MOV     A,#0x8
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000039   E5..         MOV     A,?V0
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   E5..         MOV     A,?V1
   \   00003F   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000045   75....       MOV     ?V2,#ZDP_TransID & 0xff
   \   000048   75....       MOV     ?V3,#(ZDP_TransID >> 8) & 0xff
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   78..         MOV     R0,#?V0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   75..0B       MOV     ?V0,#0xb
   \   000058   75..00       MOV     ?V1,#0x0
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   75..1F       MOV     ?V0,#0x1f
   \   000063   02....       LJMP    ?Subroutine2 & 0xFFFF
    614          }
    615          #endif // ZIGBEE_CHILD_AGING
    616          
    617          /*********************************************************************
    618           * Address Responses
    619           */
    620          
    621          /*********************************************************************
    622           * @fn      zdpProcessAddrReq
    623           *
    624           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    625           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    626           *
    627           * @param   inMsg - incoming message
    628           *
    629           * @return  none
    630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
    633            associated_devices_t *pAssoc;
    634            uint8 reqType;
    635            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV     ?V0,#-0x2
   \   000011   75..FF       MOV     ?V1,#-0x1
    636            uint8 *ieee = NULL;
   \   000014   7E00         MOV     R6,#0x0
   \   000016   7F00         MOV     R7,#0x0
    637          
    638            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000018   EA           MOV     A,R2
   \   000019   240C         ADD     A,#0xc
   \   00001B   F5..         MOV     ?V8,A
   \   00001D   E4           CLR     A
   \   00001E   35..         ADDC    A,?V7
   \   000020   F5..         MOV     ?V9,A
   \   000022   85..82       MOV     DPL,?V8
   \   000025   F583         MOV     DPH,A
   \   000027   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00002A   4B           ORL     A,R3
   \   00002B   7004         JNZ     ??zdpProcessAddrReq_0
   \   00002D   7C08         MOV     R4,#0x8
   \   00002F   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000031   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000033   E5..         MOV     A,?V6
   \   000035   2413         ADD     A,#0x13
   \   000037   F5..         MOV     ?V12,A
   \   000039   E4           CLR     A
   \   00003A   35..         ADDC    A,?V7
   \   00003C   F5..         MOV     ?V13,A
   \   00003E   85..82       MOV     DPL,?V12
   \   000041   F583         MOV     DPH,A
   \   000043   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000046   2C           ADD     A,R4
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   39           ADDC    A,R1
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V3,A
    639          
    640            if ( inMsg->clusterID == NWK_addr_req )
   \   000050   EA           MOV     A,R2
   \   000051   4B           ORL     A,R3
   \   000052   7058         JNZ     ??zdpProcessAddrReq_2
    641          
    642            {
    643              ieee = inMsg->asdu;
   \   000054   E8           MOV     A,R0
   \   000055   FE           MOV     R6,A
   \   000056   E9           MOV     A,R1
   \   000057   FF           MOV     R7,A
    644          
    645              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   000058                ; Setup parameters for call to function sAddrExtCmp
   \   000058   EE           MOV     A,R6
   \   000059   FC           MOV     R4,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FD           MOV     R5,A
   \   00005C   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00005E   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000060   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000063   E9           MOV     A,R1
   \   000064   6006         JZ      ??zdpProcessAddrReq_3
    646              {
    647                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000066   12....       LCALL   ?Subroutine57 & 0xFFFF
    648              }
   \                     ??CrossCallReturnLabel_301:
   \   000069   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    649              // Handle response for sleeping end devices
    650              else if ( (ZSTACK_ROUTER_BUILD)
    651                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    652                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_3:
   \   00006C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6007         JZ      ??zdpProcessAddrReq_5
   \   000072   6401         XRL     A,#0x1
   \   000074   6003         JZ      $+5
   \   000076   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
   \                     ??zdpProcessAddrReq_5:
   \   000079                ; Setup parameters for call to function AssocGetWithExt
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   FB           MOV     R3,A
   \   00007D   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000080   8A..         MOV     ?V4,R2
   \   000082   8B..         MOV     ?V5,R3
   \   000084   A8..         MOV     R0,?V4
   \   000086   A9..         MOV     R1,?V5
   \   000088   E8           MOV     A,R0
   \   000089   49           ORL     A,R1
   \   00008A   7003         JNZ     $+5
   \   00008C   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
   \   00008F   8882         MOV     DPL,R0
   \   000091   8983         MOV     DPH,R1
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   6401         XRL     A,#0x1
   \   00009A   6003         JZ      $+5
   \   00009C   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
    653              {
    654                aoi = pAssoc->shortAddr;
   \   00009F   8882         MOV     DPL,R0
   \   0000A1   8983         MOV     DPH,R1
   \   0000A3   12....       LCALL   ??Subroutine145_0 & 0xFFFF
    655                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??CrossCallReturnLabel_297:
   \   0000A6   E5..         MOV     A,?V3
   \   0000A8   707C         JNZ     ??zdpProcessAddrReq_7
   \   0000AA   807D         SJMP    ??zdpProcessAddrReq_4
    656                  reqType = 0xFF; // Force Invalid
    657              }
    658            }
    659            else  // if ( inMsg->clusterID == IEEE_addr_req )
    660            {
    661              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   0000AC   8882         MOV     DPL,R0
   \   0000AE   8983         MOV     DPH,R1
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   FA           MOV     R2,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F9           MOV     R1,A
   \   0000B5   EA           MOV     A,R2
   \   0000B6   2E           ADD     A,R6
   \   0000B7   F5..         MOV     ?V0,A
   \   0000B9   E4           CLR     A
   \   0000BA   39           ADDC    A,R1
   \   0000BB   F5..         MOV     ?V1,A
    662          
    663              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000BD   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   65..         XRL     A,?V0
   \   0000C3   7004         JNZ     ??zdpProcessAddrReq_8
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_8:
   \   0000C9   7006         JNZ     ??zdpProcessAddrReq_9
    664              {
    665                ieee = saveExtAddr;
   \   0000CB   7E..         MOV     R6,#saveExtAddr & 0xff
   \   0000CD   7F..         MOV     R7,#(saveExtAddr >> 8) & 0xff
   \   0000CF   8058         SJMP    ??zdpProcessAddrReq_4
    666              }
    667              else if ( (ZSTACK_ROUTER_BUILD)
    668                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    669                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_9:
   \   0000D1   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   6004         JZ      ??zdpProcessAddrReq_10
   \   0000D7   6401         XRL     A,#0x1
   \   0000D9   705E         JNZ     ??zdpProcessAddrReq_6
   \                     ??zdpProcessAddrReq_10:
   \   0000DB                ; Setup parameters for call to function AssocGetWithShort
   \   0000DB   AB..         MOV     R3,?V1
   \   0000DD   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   0000E0   8A..         MOV     ?V4,R2
   \   0000E2   8B..         MOV     ?V5,R3
   \   0000E4   A8..         MOV     R0,?V4
   \   0000E6   A9..         MOV     R1,?V5
   \   0000E8   E8           MOV     A,R0
   \   0000E9   49           ORL     A,R1
   \   0000EA   604D         JZ      ??zdpProcessAddrReq_6
   \   0000EC   8882         MOV     DPL,R0
   \   0000EE   8983         MOV     DPH,R1
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   6401         XRL     A,#0x1
   \   0000F7   7040         JNZ     ??zdpProcessAddrReq_6
    670              {
    671                AddrMgrEntry_t addrEntry;
    672                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000F9   7401         MOV     A,#0x1
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   E4           CLR     A
   \   0000FF   12....       LCALL   ?Subroutine50 & 0xFFFF
    673                addrEntry.index = pAssoc->addrIdx;
   \                     ??CrossCallReturnLabel_79:
   \   000102   F8           MOV     R0,A
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   F9           MOV     R1,A
   \   000106   740C         MOV     A,#0xc
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   12....       LCALL   ?Subroutine43 & 0xFFFF
    674                if ( AddrMgrEntryGet( &addrEntry ) )
   \                     ??CrossCallReturnLabel_66:
   \   00010E                ; Setup parameters for call to function AddrMgrEntryGet
   \   00010E   7401         MOV     A,#0x1
   \   000110   12....       LCALL   ?XSTACK_DISP101_8
   \   000113   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000116   E9           MOV     A,R1
   \   000117   6009         JZ      ??zdpProcessAddrReq_11
    675                {
    676                  ieee = addrEntry.extAddr;
   \   000119   7404         MOV     A,#0x4
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   AE82         MOV     R6,DPL
   \   000120   AF83         MOV     R7,DPH
    677                }
    678          
    679                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_11:
   \   000122   E5..         MOV     A,?V3
   \   000124   6003         JZ      ??zdpProcessAddrReq_4
    680                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_7:
   \   000126   75..FF       MOV     ?V3,#-0x1
    681              }
    682            }
    683          
    684            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000129   74FE         MOV     A,#-0x2
   \   00012B   65..         XRL     A,?V0
   \   00012D   7004         JNZ     ??zdpProcessAddrReq_12
   \   00012F   74FF         MOV     A,#-0x1
   \   000131   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_12:
   \   000133   6004         JZ      ??zdpProcessAddrReq_6
   \   000135   EE           MOV     A,R6
   \   000136   4F           ORL     A,R7
   \   000137   7011         JNZ     ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_6:
   \   000139   E5..         MOV     A,?V6
   \   00013B   240B         ADD     A,#0xb
   \   00013D   F582         MOV     DPL,A
   \   00013F   E4           CLR     A
   \   000140   35..         ADDC    A,?V7
   \   000142   F583         MOV     DPH,A
   \   000144   E0           MOVX    A,@DPTR
   \   000145   6003         JZ      $+5
   \   000147   02....       LJMP    ??zdpProcessAddrReq_14 & 0xFFFF
    685            {
    686              uint8 stat;
    687              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_13:
   \   00014A   12....       LCALL   ??Subroutine130_0 & 0xFFFF
    688              // Status + IEEE-Addr + Nwk-Addr.
    689              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_258:
   \   00014D   75..0B       MOV     ?V2,#0xb
    690          
    691              // If aoi and iee are both setup, we found results
    692              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   000150   74FE         MOV     A,#-0x2
   \   000152   65..         XRL     A,?V0
   \   000154   7004         JNZ     ??zdpProcessAddrReq_15
   \   000156   74FF         MOV     A,#-0x1
   \   000158   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_15:
   \   00015A   6018         JZ      ??zdpProcessAddrReq_16
   \   00015C   EE           MOV     A,R6
   \   00015D   4F           ORL     A,R7
   \   00015E   6014         JZ      ??zdpProcessAddrReq_16
    693              {
    694                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    695                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   000160   E5..         MOV     A,?V3
   \   000162   6006         JZ      ??zdpProcessAddrReq_17
   \   000164   7401         MOV     A,#0x1
   \   000166   65..         XRL     A,?V3
   \   000168   7005         JNZ     ??zdpProcessAddrReq_18
   \                     ??zdpProcessAddrReq_17:
   \   00016A   75..00       MOV     ?V4,#0x0
   \   00016D   8016         SJMP    ??zdpProcessAddrReq_19
   \                     ??zdpProcessAddrReq_18:
   \   00016F   75..80       MOV     ?V4,#-0x80
   \   000172   8011         SJMP    ??zdpProcessAddrReq_19
    696              }
    697              else
    698              {
    699                // not found and the req was unicast to this device
    700                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_16:
   \   000174   75..81       MOV     ?V4,#-0x7f
    701          
    702                // Fill in the missing field with this device's address
    703                if ( inMsg->clusterID == NWK_addr_req )
   \   000177   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   00017A   7005         JNZ     ??zdpProcessAddrReq_20
    704                {
    705                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00017C   12....       LCALL   ?Subroutine57 & 0xFFFF
    706                }
   \                     ??CrossCallReturnLabel_302:
   \   00017F   8004         SJMP    ??zdpProcessAddrReq_19
    707                else
    708                {
    709                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_20:
   \   000181   7E..         MOV     R6,#saveExtAddr & 0xff
   \   000183   7F..         MOV     R7,#(saveExtAddr >> 8) & 0xff
    710                }
    711              }
    712          
    713              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_19:
   \   000185   8A82         MOV     DPL,R2
   \   000187   8B83         MOV     DPH,R3
   \   000189   E5..         MOV     A,?V4
   \   00018B   12....       LCALL   ??Subroutine133_0 & 0xFFFF
    714          
    715              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_266:
   \   00018E                ; Setup parameters for call to function sAddrExtCpy
   \   00018E   EE           MOV     A,R6
   \   00018F   FC           MOV     R4,A
   \   000190   EF           MOV     A,R7
   \   000191   FD           MOV     R5,A
   \   000192   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000195   8A..         MOV     ?V10,R2
   \   000197   8B..         MOV     ?V11,R3
   \   000199   AE..         MOV     R6,?V10
   \   00019B   AF..         MOV     R7,?V11
    716          
    717              *pBuf++ = LO_UINT16( aoi );
   \   00019D   8E82         MOV     DPL,R6
   \   00019F   8F83         MOV     DPH,R7
   \   0001A1   12....       LCALL   ??Subroutine119_0 & 0xFFFF
    718              *pBuf++ = HI_UINT16( aoi );
    719          
    720              if ( ZSTACK_ROUTER_BUILD )
   \                     ??CrossCallReturnLabel_194:
   \   0001A4   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   6007         JZ      ??zdpProcessAddrReq_21
   \   0001AA   6401         XRL     A,#0x1
   \   0001AC   6003         JZ      $+5
   \   0001AE   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
    721              {
    722                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    723                     && (stat == ZDP_SUCCESS) )
   \                     ??zdpProcessAddrReq_21:
   \   0001B1   7401         MOV     A,#0x1
   \   0001B3   65..         XRL     A,?V3
   \   0001B5   6003         JZ      $+5
   \   0001B7   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
   \   0001BA   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   65..         XRL     A,?V0
   \   0001C0   7004         JNZ     ??zdpProcessAddrReq_23
   \   0001C2   A3           INC     DPTR
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_23:
   \   0001C6   6003         JZ      $+5
   \   0001C8   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
   \   0001CB   E5..         MOV     A,?V4
   \   0001CD   6003         JZ      $+5
   \   0001CF   02....       LJMP    ??zdpProcessAddrReq_22 & 0xFFFF
    724                {
    725                  uint8  cnt = 0;
   \   0001D2   85..82       MOV     DPL,?XSP + 0
   \   0001D5   85..83       MOV     DPH,?XSP + 1
   \   0001D8   E4           CLR     A
   \   0001D9   F0           MOVX    @DPTR,A
    726                  uint16 *list = AssocMakeList( &cnt );
   \   0001DA                ; Setup parameters for call to function AssocMakeList
   \   0001DA   AA..         MOV     R2,?XSP + 0
   \   0001DC   AB..         MOV     R3,?XSP + 1
   \   0001DE   12....       LCALL   `??AssocMakeList::?relay`; Banked call to: AssocMakeList
   \   0001E1   8A..         MOV     ?V0,R2
   \   0001E3   8B..         MOV     ?V1,R3
   \   0001E5   AC..         MOV     R4,?V0
   \   0001E7   AD..         MOV     R5,?V1
    727          
    728                  if ( list != NULL )
   \   0001E9   EC           MOV     A,R4
   \   0001EA   4D           ORL     A,R5
   \   0001EB   7003         JNZ     $+5
   \   0001ED   02....       LJMP    ??zdpProcessAddrReq_24 & 0xFFFF
    729                  {
    730                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   0001F0   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0001F3   7004         JNZ     ??zdpProcessAddrReq_25
   \   0001F5   7809         MOV     R0,#0x9
   \   0001F7   8002         SJMP    ??zdpProcessAddrReq_26
   \                     ??zdpProcessAddrReq_25:
   \   0001F9   7803         MOV     R0,#0x3
   \                     ??zdpProcessAddrReq_26:
   \   0001FB   85..82       MOV     DPL,?V12
   \   0001FE   85..83       MOV     DPH,?V13
   \   000201   E0           MOVX    A,@DPTR
   \   000202   28           ADD     A,R0
   \   000203   FA           MOV     R2,A
   \   000204   A3           INC     DPTR
   \   000205   E0           MOVX    A,@DPTR
   \   000206   3400         ADDC    A,#0x0
   \   000208   8A82         MOV     DPL,R2
   \   00020A   F583         MOV     DPH,A
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   FA           MOV     R2,A
    731                    uint16 *pList = list + idx;
   \   00020E   25E0         ADD     A,0xE0 /* A   */
   \   000210   F8           MOV     R0,A
   \   000211   E4           CLR     A
   \   000212   33           RLC     A
   \   000213   F9           MOV     R1,A
   \   000214   EC           MOV     A,R4
   \   000215   28           ADD     A,R0
   \   000216   F8           MOV     R0,A
   \   000217   ED           MOV     A,R5
   \   000218   39           ADDC    A,R1
   \   000219   F9           MOV     R1,A
    732          
    733                    // NumAssocDev field is only present on success.
    734                    if ( cnt > idx )
   \   00021A   85..82       MOV     DPL,?XSP + 0
   \   00021D   85..83       MOV     DPH,?XSP + 1
   \   000220   E0           MOVX    A,@DPTR
   \   000221   FB           MOV     R3,A
   \   000222   EA           MOV     A,R2
   \   000223   C3           CLR     C
   \   000224   9B           SUBB    A,R3
   \   000225   500C         JNC     ??zdpProcessAddrReq_27
    735                    {
    736                      cnt -= idx;
   \   000227   E0           MOVX    A,@DPTR
   \   000228   C3           CLR     C
   \   000229   9A           SUBB    A,R2
   \   00022A   F0           MOVX    @DPTR,A
    737                      len += (cnt * sizeof( uint16 ));
   \   00022B   C3           CLR     C
   \   00022C   33           RLC     A
   \   00022D   240B         ADD     A,#0xb
   \   00022F   F5..         MOV     ?V2,A
   \   000231   8002         SJMP    ??zdpProcessAddrReq_28
    738                    }
    739                    else
    740                    {
    741                      cnt = 0;
   \                     ??zdpProcessAddrReq_27:
   \   000233   E4           CLR     A
   \   000234   F0           MOVX    @DPTR,A
    742                    }
    743                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_28:
   \   000235   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000238   A3           INC     DPTR
   \   000239   F0           MOVX    @DPTR,A
    744                    len++;
    745          
    746                    // StartIndex field is only present if NumAssocDev field is non-zero.
    747                    *pBuf++ = idx;
   \   00023A   EA           MOV     A,R2
   \   00023B   8E82         MOV     DPL,R6
   \   00023D   8F83         MOV     DPH,R7
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   F0           MOVX    @DPTR,A
   \   000243   EE           MOV     A,R6
   \   000244   2404         ADD     A,#0x4
   \   000246   FA           MOV     R2,A
   \   000247   E4           CLR     A
   \   000248   3F           ADDC    A,R7
   \   000249   FB           MOV     R3,A
    748                    len++;
   \   00024A   05..         INC     ?V2
   \   00024C   05..         INC     ?V2
   \   00024E   8017         SJMP    ??zdpProcessAddrReq_29
    749          
    750                    while ( cnt != 0 )
    751                    {
    752                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_30:
   \   000250   12....       LCALL   ?Subroutine24 & 0xFFFF
    753                      *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_34:
   \   000253   FA           MOV     R2,A
   \   000254   5001         JNC     ??zdpProcessAddrReq_31
   \   000256   0B           INC     R3
    754                      pList++;
   \                     ??zdpProcessAddrReq_31:
   \   000257   E8           MOV     A,R0
   \   000258   2402         ADD     A,#0x2
   \   00025A   F8           MOV     R0,A
   \   00025B   5001         JNC     ??zdpProcessAddrReq_32
   \   00025D   09           INC     R1
    755                      cnt--;
   \                     ??zdpProcessAddrReq_32:
   \   00025E   85..82       MOV     DPL,?XSP + 0
   \   000261   85..83       MOV     DPH,?XSP + 1
   \   000264   E0           MOVX    A,@DPTR
   \   000265   14           DEC     A
   \   000266   F0           MOVX    @DPTR,A
    756                    }
   \                     ??zdpProcessAddrReq_29:
   \   000267   85..82       MOV     DPL,?XSP + 0
   \   00026A   85..83       MOV     DPH,?XSP + 1
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   70E0         JNZ     ??zdpProcessAddrReq_30
    757          
    758                    osal_mem_free( (uint8 *)list );
   \   000270                ; Setup parameters for call to function osal_mem_free
   \   000270   EC           MOV     A,R4
   \   000271   FA           MOV     R2,A
   \   000272   ED           MOV     A,R5
   \   000273   FB           MOV     R3,A
   \   000274   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000277   800B         SJMP    ??zdpProcessAddrReq_22
    759                  }
    760                  else
    761                  {
    762                    // NumAssocDev field is only present on success.
    763                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_24:
   \   000279   8E82         MOV     DPL,R6
   \   00027B   8F83         MOV     DPH,R7
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   E4           CLR     A
   \   000280   F0           MOVX    @DPTR,A
    764                    len++;
   \   000281   75..0C       MOV     ?V2,#0xc
    765                  }
    766                }
    767              }
    768          
    769              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_22:
   \   000284   90....       MOV     DPTR,#ZDP_TxOptions
   \   000287   7410         MOV     A,#0x10
   \   000289   F0           MOVX    @DPTR,A
    770              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   00028A                ; Setup parameters for call to function fillAndSend
   \   00028A   85..82       MOV     DPL,?V8
   \   00028D   85..83       MOV     DPH,?V9
   \   000290   E0           MOVX    A,@DPTR
   \   000291   F5..         MOV     ?V0,A
   \   000293   A3           INC     DPTR
   \   000294   E0           MOVX    A,@DPTR
   \   000295   4480         ORL     A,#0x80
   \   000297   F5..         MOV     ?V1,A
   \   000299   78..         MOV     R0,#?V0
   \   00029B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00029E   A9..         MOV     R1,?V2
   \   0002A0   E5..         MOV     A,?V6
   \   0002A2   2402         ADD     A,#0x2
   \   0002A4   FC           MOV     R4,A
   \   0002A5   E4           CLR     A
   \   0002A6   35..         ADDC    A,?V7
   \   0002A8   FD           MOV     R5,A
   \   0002A9   E5..         MOV     A,?V6
   \   0002AB   240F         ADD     A,#0xf
   \   0002AD   FA           MOV     R2,A
   \   0002AE   E4           CLR     A
   \   0002AF   35..         ADDC    A,?V7
   \   0002B1   FB           MOV     R3,A
   \   0002B2   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0002B5   7402         MOV     A,#0x2
   \   0002B7   12....       LCALL   ?DEALLOC_XSTACK8
    771              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   0002BA   90....       MOV     DPTR,#ZDP_TxOptions
   \   0002BD   E4           CLR     A
   \   0002BE   F0           MOVX    @DPTR,A
    772            }
    773          }
   \                     ??zdpProcessAddrReq_14:
   \   0002BF   740E         MOV     A,#0xe
   \   0002C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002C4   7F0E         MOV     R7,#0xe
   \   0002C6   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006                REQUIRE ??Subroutine125_0
   \   000006                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine145_0
   \   000003                ; // Fall through to label ??Subroutine145_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EA           MOV     A,R2
   \   000006   2402         ADD     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    774          
    775          /*********************************************************************
    776           * @fn          ZDP_NodeDescMsg
    777           *
    778           * @brief       Builds and sends a Node Descriptor message, unicast to the
    779           *              specified device.
    780           *
    781           * @param       inMsg - incoming message
    782           * @param       nwkAddr - 16 bit network address for device
    783           * @param       pNodeDesc - pointer to the node descriptor
    784           *
    785           * @return      afStatus_t
    786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    788                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    790            uint8 *pBuf = ZDP_TmpBuf;
   \   00000A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FE           MOV     R6,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   12....       LCALL   ?Subroutine31 & 0xFFFF
    791            byte len;
    792          
    793            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    794          
    795            *pBuf++ = ZDP_SUCCESS;
    796          
    797            *pBuf++ = LO_UINT16( nwkAddr );
    798            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_47:
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine59 & 0xFFFF
    799          
    800            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    801                               (pNodeDesc->UserDescAvail << 4) |
    802                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_92:
   \   00001A   541F         ANL     A,#0x1f
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   12....       LCALL   ?Subroutine51 & 0xFFFF
    803          
    804            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_231:
   \   000025   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000028   12....       LCALL   ?Subroutine50 & 0xFFFF
    805            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_80:
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   12....       LCALL   ?Subroutine40 & 0xFFFF
    806            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_235:
   \   000032   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000035   12....       LCALL   ?Subroutine40 & 0xFFFF
    807            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_236:
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   12....       LCALL   ?Subroutine39 & 0xFFFF
    808            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_62:
   \   000041   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000044   12....       LCALL   ?Subroutine39 & 0xFFFF
    809            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_63:
   \   000047   A3           INC     DPTR
   \   000048   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00004B   12....       LCALL   ?Subroutine34 & 0xFFFF
    810            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_53:
   \   00004E   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000051   A3           INC     DPTR
   \   000052   F0           MOVX    @DPTR,A
    811          
    812            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000053   E8           MOV     A,R0
   \   000054   2408         ADD     A,#0x8
   \   000056   FC           MOV     R4,A
   \   000057   E4           CLR     A
   \   000058   39           ADDC    A,R1
   \   000059   FD           MOV     R5,A
   \   00005A   8C82         MOV     DPL,R4
   \   00005C   8D83         MOV     DPH,R5
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V0,A
   \   000061   EE           MOV     A,R6
   \   000062   240B         ADD     A,#0xb
   \   000064   F582         MOV     DPL,A
   \   000066   E4           CLR     A
   \   000067   3F           ADDC    A,R7
   \   000068   F583         MOV     DPH,A
   \   00006A   E5..         MOV     A,?V0
   \   00006C   12....       LCALL   ??Subroutine132_0 & 0xFFFF
    813            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_265:
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C0E0         PUSH    A
   \   000072   EE           MOV     A,R6
   \   000073   240C         ADD     A,#0xc
   \   000075   F582         MOV     DPL,A
   \   000077   E4           CLR     A
   \   000078   3F           ADDC    A,R7
   \   000079   F583         MOV     DPH,A
   \   00007B   D0E0         POP     A
   \   00007D   12....       LCALL   ?Subroutine34 & 0xFFFF
    814            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_54:
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   C0E0         PUSH    A
   \   000086   EE           MOV     A,R6
   \   000087   240D         ADD     A,#0xd
   \   000089   F582         MOV     DPL,A
   \   00008B   E4           CLR     A
   \   00008C   3F           ADDC    A,R7
   \   00008D   F583         MOV     DPH,A
   \   00008F   D0E0         POP     A
   \   000091   F0           MOVX    @DPTR,A
    815            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   000092   E8           MOV     A,R0
   \   000093   240B         ADD     A,#0xb
   \   000095   F582         MOV     DPL,A
   \   000097   E4           CLR     A
   \   000098   39           ADDC    A,R1
   \   000099   F583         MOV     DPH,A
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   C0E0         PUSH    A
   \   00009E   EE           MOV     A,R6
   \   00009F   240E         ADD     A,#0xe
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   3F           ADDC    A,R7
   \   0000A5   F583         MOV     DPH,A
   \   0000A7   D0E0         POP     A
   \   0000A9   F0           MOVX    @DPTR,A
    816            *pBuf = pNodeDesc->DescriptorCapability;
   \   0000AA   E8           MOV     A,R0
   \   0000AB   240C         ADD     A,#0xc
   \   0000AD   F582         MOV     DPL,A
   \   0000AF   E4           CLR     A
   \   0000B0   39           ADDC    A,R1
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   C0E0         PUSH    A
   \   0000B6   EE           MOV     A,R6
   \   0000B7   240F         ADD     A,#0xf
   \   0000B9   F582         MOV     DPL,A
   \   0000BB   E4           CLR     A
   \   0000BC   3F           ADDC    A,R7
   \   0000BD   F583         MOV     DPH,A
   \   0000BF   D0E0         POP     A
   \   0000C1   12....       LCALL   ?Subroutine18 & 0xFFFF
    817          
    818            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \                     ??CrossCallReturnLabel_20:
   \   0000C4   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000C7   7409         MOV     A,#0x9
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000CF   C0E0         PUSH    A
   \   0000D1   7408         MOV     A,#0x8
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   D0E0         POP     A
   \   0000D8   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DE   78..         MOV     R0,#?V0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   78..         MOV     R0,#?V2
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   75..11       MOV     ?V0,#0x11
   \   0000EB   75..00       MOV     ?V1,#0x0
   \   0000EE   78..         MOV     R0,#?V0
   \   0000F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F3   75..02       MOV     ?V0,#0x2
   \   0000F6                REQUIRE ?Subroutine3
   \   0000F6                ; // Fall through to label ?Subroutine3
    819          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   75..80       MOV     ?V1,#-0x80
   \   000003   78..         MOV     R0,#?V0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   00000B   12....       LCALL   ?XSTACK_DISP101_8
   \   00000E   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000011   7409         MOV     A,#0x9
   \   000013   12....       LCALL   ?DEALLOC_XSTACK8
   \   000016   740C         MOV     A,#0xc
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   7F05         MOV     R7,#0x5
   \   00001D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine127_0
   \   000005                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   FF           MOV     R7,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E4           CLR     A
   \   000006   F0           MOVX    @DPTR,A
   \   000007   EC           MOV     A,R4
   \   000008   A3           INC     DPTR
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   ED           MOV     A,R5
   \   00000B   8E82         MOV     DPL,R6
   \   00000D   8F83         MOV     DPH,R7
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7419         MOV     A,#0x19
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EA           MOV     A,R2
   \   000002   2402         ADD     A,#0x2
   \   000004   F8           MOV     R0,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F9           MOV     R1,A
   \   000008   E8           MOV     A,R0
   \   000009   FE           MOV     R6,A
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   EA           MOV     A,R2
   \   00000D   240F         ADD     A,#0xf
   \   00000F   F5..         MOV     ?V0,A
   \   000011   E4           CLR     A
   \   000012   3B           ADDC    A,R3
   \   000013   F5..         MOV     ?V1,A
   \   000015                ; Setup parameters for call to function osal_memset
   \   000015                ; Setup parameters for call to function osal_memset
   \   000015   7C0C         MOV     R4,#0xc
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7900         MOV     R1,#0x0
   \   00001B   AA..         MOV     R2,?XSP + 0
   \   00001D   AB..         MOV     R3,?XSP + 1
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000003   85..82       MOV     DPL,?V0
   \   000006   85..83       MOV     DPH,?V1
   \   000009   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
    820          
    821          /*********************************************************************
    822           * @fn          ZDP_PowerDescMsg
    823           *
    824           * @brief       Builds and sends a Power Descriptor message, unicast to the
    825           *              specified device.
    826           *
    827           * @param       inMsg - incoming message (request)
    828           * @param       nwkAddr - 16 bit network address for device
    829           * @param       pPowerDesc - pointer to the node descriptor
    830           *
    831           * @return      afStatus_t
    832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    833          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    834                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    836            uint8 *pBuf = ZDP_TmpBuf;
   \   00000A   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   00000D   FE           MOV     R6,A
   \   00000E   E9           MOV     A,R1
   \   00000F   12....       LCALL   ?Subroutine31 & 0xFFFF
    837            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    838          
    839            *pBuf++ = ZDP_SUCCESS;
    840          
    841            *pBuf++ = LO_UINT16( nwkAddr );
    842            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_48:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine59 & 0xFFFF
    843          
    844            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    845                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_93:
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   12....       LCALL   ?Subroutine42 & 0xFFFF
    846            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    847                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_247:
   \   000020   F5..         MOV     ?V0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V1,A
   \   000026   540F         ANL     A,#0xf
   \   000028   F9           MOV     R1,A
   \   000029   740C         MOV     A,#0xc
   \   00002B   78..         MOV     R0,#?V0
   \   00002D   12....       LCALL   ?US_SHR
   \   000030   E5..         MOV     A,?V0
   \   000032   C4           SWAP    A
   \   000033   49           ORL     A,R1
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   12....       LCALL   ?Subroutine18 & 0xFFFF
    848          
    849            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \                     ??CrossCallReturnLabel_21:
   \   00003F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000042   7409         MOV     A,#0x9
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00004A   C0E0         PUSH    A
   \   00004C   7408         MOV     A,#0x8
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   D0E0         POP     A
   \   000053   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   78..         MOV     R0,#?V2
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   75..06       MOV     ?V0,#0x6
   \   000066   75..00       MOV     ?V1,#0x0
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   75..03       MOV     ?V0,#0x3
   \   000071   02....       LJMP    ?Subroutine3 & 0xFFFF
    850          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine128_0
   \   000003                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine129_0
   \   000002                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
    851          
    852          /*********************************************************************
    853           * @fn          ZDP_SimpleDescMsg
    854           *
    855           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    856           *              specified device.
    857           *
    858           * @param       inMsg - incoming message (request)
    859           * @param       Status - message status (ZDP_SUCCESS or other)
    860           * @param       pSimpleDesc - pointer to the node descriptor
    861           *
    862           * @return      afStatus_t
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    865                                        SimpleDescriptionFormat_t *pSimpleDesc )
    866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   E9           MOV     A,R1
   \   00000F   FF           MOV     R7,A
    867            uint8 *pBuf = ZDP_TmpBuf;
   \   000010   12....       LCALL   ??Subroutine130_0 & 0xFFFF
    868            uint8 i, len;
    869          
    870            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_259:
   \   000013   EF           MOV     A,R7
   \   000014   702E         JNZ     ??ZDP_SimpleDescMsg_0
   \   000016   EC           MOV     A,R4
   \   000017   4D           ORL     A,R5
   \   000018   602A         JZ      ??ZDP_SimpleDescMsg_0
    871            {
    872              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    873              len = 1 + 2 + 1 + 8;
    874              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   8C82         MOV     DPL,R4
   \   00002B   8D83         MOV     DPH,R5
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   28           ADD     A,R0
   \   000035   C3           CLR     C
   \   000036   33           RLC     A
   \   000037   240C         ADD     A,#0xc
   \   000039   FE           MOV     R6,A
    875            }
    876            else
    877            {
    878              len = 1 + 2 + 1; // Status + desc length
    879            }
    880            if ( len >= ZDP_BUF_SZ-1 )
   \   00003A   C3           CLR     C
   \   00003B   944F         SUBB    A,#0x4f
   \   00003D   4007         JC      ??ZDP_SimpleDescMsg_1
    881            {
    882              return afStatus_MEM_FAIL;
   \   00003F   7910         MOV     R1,#0x10
   \   000041   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    883            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   000044   7E04         MOV     R6,#0x4
    884          
    885            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   000046   EF           MOV     A,R7
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   F0           MOVX    @DPTR,A
    886          
    887            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   00004C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00004F   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000052   F0           MOVX    @DPTR,A
    888            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000053   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   000056   12....       LCALL   ?Subroutine78 & 0xFFFF
    889          
    890            if ( len > 4 )
   \                     ??CrossCallReturnLabel_126:
   \   000059   EA           MOV     A,R2
   \   00005A   2403         ADD     A,#0x3
   \   00005C   F582         MOV     DPL,A
   \   00005E   E4           CLR     A
   \   00005F   3B           ADDC    A,R3
   \   000060   F583         MOV     DPH,A
   \   000062   EE           MOV     A,R6
   \   000063   C3           CLR     C
   \   000064   9405         SUBB    A,#0x5
   \   000066   5003         JNC     $+5
   \   000068   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    891            {
    892              *pBuf++ = len - 4;   // Simple descriptor length
   \   00006B   74FC         MOV     A,#-0x4
   \   00006D   2E           ADD     A,R6
   \   00006E   F0           MOVX    @DPTR,A
    893          
    894              *pBuf++ = pSimpleDesc->EndPoint;
   \   00006F   8C82         MOV     DPL,R4
   \   000071   8D83         MOV     DPH,R5
   \   000073   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000076   A3           INC     DPTR
   \   000077   12....       LCALL   ?Subroutine47 & 0xFFFF
    895              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_263:
   \   00007A   A882         MOV     R0,DPL
   \   00007C   A983         MOV     R1,DPH
   \   00007E   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000081   12....       LCALL   ?Subroutine22 & 0xFFFF
    896              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_30:
   \   000084   F0           MOVX    @DPTR,A
    897              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   000085   EC           MOV     A,R4
   \   000086   2403         ADD     A,#0x3
   \   000088   F8           MOV     R0,A
   \   000089   E4           CLR     A
   \   00008A   3D           ADDC    A,R5
   \   00008B   F9           MOV     R1,A
   \   00008C   8882         MOV     DPL,R0
   \   00008E   8983         MOV     DPH,R1
   \   000090   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000093   A3           INC     DPTR
   \   000094   12....       LCALL   ?Subroutine22 & 0xFFFF
    898              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_31:
   \   000097   12....       LCALL   ?Subroutine47 & 0xFFFF
    899          
    900              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_264:
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   540F         ANL     A,#0xf
   \   0000A1   8A82         MOV     DPL,R2
   \   0000A3   8B83         MOV     DPH,R3
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   F0           MOVX    @DPTR,A
    901          
    902              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000AF   EC           MOV     A,R4
   \   0000B0   2406         ADD     A,#0x6
   \   0000B2   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000B5   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   EA           MOV     A,R2
   \   0000BF   240B         ADD     A,#0xb
   \   0000C1   FA           MOV     R2,A
   \   0000C2   5001         JNC     ??ZDP_SimpleDescMsg_4
   \   0000C4   0B           INC     R3
    903              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000C5   8882         MOV     DPL,R0
   \   0000C7   8983         MOV     DPH,R1
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   603D         JZ      ??ZDP_SimpleDescMsg_5
    904              {
    905                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000CC   75..00       MOV     ?V4,#0x0
   \   0000CF   EC           MOV     A,R4
   \   0000D0   2407         ADD     A,#0x7
   \   0000D2   08           INC     R0
   \   0000D3   E4           CLR     A
   \   0000D4   3D           ADDC    A,R5
   \   0000D5   F9           MOV     R1,A
   \   0000D6   88..         MOV     ?V6,R0
   \   0000D8   89..         MOV     ?V7,R1
   \   0000DA   801F         SJMP    ??ZDP_SimpleDescMsg_6
    906                {
    907                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000DC   A8..         MOV     R0,?V4
   \   0000DE   E8           MOV     A,R0
   \   0000DF   28           ADD     A,R0
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E4           CLR     A
   \   0000E2   33           RLC     A
   \   0000E3   F9           MOV     R1,A
   \   0000E4   85..82       MOV     DPL,?V6
   \   0000E7   85..83       MOV     DPH,?V7
   \   0000EA   12....       LCALL   ?Subroutine58 & 0xFFFF
    908                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??CrossCallReturnLabel_89:
   \   0000ED   85..82       MOV     DPL,?V6
   \   0000F0   85..83       MOV     DPH,?V7
   \   0000F3   12....       LCALL   ?Subroutine56 & 0xFFFF
    909                }
   \                     ??CrossCallReturnLabel_87:
   \   0000F6   5001         JNC     ??ZDP_SimpleDescMsg_8
   \   0000F8   0B           INC     R3
   \                     ??ZDP_SimpleDescMsg_8:
   \   0000F9   05..         INC     ?V4
   \                     ??ZDP_SimpleDescMsg_6:
   \   0000FB   85..82       MOV     DPL,?V0
   \   0000FE   85..83       MOV     DPH,?V1
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F8           MOV     R0,A
   \   000103   E5..         MOV     A,?V4
   \   000105   C3           CLR     C
   \   000106   98           SUBB    A,R0
   \   000107   40D3         JC      ??ZDP_SimpleDescMsg_7
    910              }
    911          
    912              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   000109   EC           MOV     A,R4
   \   00010A   2409         ADD     A,#0x9
   \   00010C   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00010F   12....       LCALL   ?Subroutine35 & 0xFFFF
    913              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_268:
   \   000112   8882         MOV     DPL,R0
   \   000114   8983         MOV     DPH,R1
   \   000116   E0           MOVX    A,@DPTR
   \   000117   603B         JZ      ??ZDP_SimpleDescMsg_9
    914              {
    915                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   000119   75..00       MOV     ?V4,#0x0
   \   00011C   EC           MOV     A,R4
   \   00011D   240A         ADD     A,#0xa
   \   00011F   08           INC     R0
   \   000120   E4           CLR     A
   \   000121   3D           ADDC    A,R5
   \   000122   F9           MOV     R1,A
   \   000123   E8           MOV     A,R0
   \   000124   FC           MOV     R4,A
   \   000125   E9           MOV     A,R1
   \   000126   FD           MOV     R5,A
   \                     ??ZDP_SimpleDescMsg_10:
   \   000127   85..82       MOV     DPL,?V0
   \   00012A   85..83       MOV     DPH,?V1
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   F8           MOV     R0,A
   \   00012F   E5..         MOV     A,?V4
   \   000131   C3           CLR     C
   \   000132   98           SUBB    A,R0
   \   000133   501F         JNC     ??ZDP_SimpleDescMsg_9
    916                {
    917                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000135   A8..         MOV     R0,?V4
   \   000137   E8           MOV     A,R0
   \   000138   28           ADD     A,R0
   \   000139   F8           MOV     R0,A
   \   00013A   E4           CLR     A
   \   00013B   33           RLC     A
   \   00013C   F9           MOV     R1,A
   \   00013D   8C82         MOV     DPL,R4
   \   00013F   8D83         MOV     DPH,R5
   \   000141   12....       LCALL   ?Subroutine58 & 0xFFFF
    918                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_90:
   \   000144   8C82         MOV     DPL,R4
   \   000146   8D83         MOV     DPH,R5
   \   000148   12....       LCALL   ?Subroutine56 & 0xFFFF
    919                }
   \                     ??CrossCallReturnLabel_88:
   \   00014B   5001         JNC     ??ZDP_SimpleDescMsg_11
   \   00014D   0B           INC     R3
   \                     ??ZDP_SimpleDescMsg_11:
   \   00014E   05..         INC     ?V4
   \   000150   80D5         SJMP    ??ZDP_SimpleDescMsg_10
    920              }
    921            }
    922          
    923            else
    924            {
    925              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   000152   E4           CLR     A
   \   000153   F0           MOVX    @DPTR,A
    926            }
    927          
    928            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_9:
   \   000154   E5..         MOV     A,?V2
   \   000156   2402         ADD     A,#0x2
   \   000158   F5..         MOV     ?V0,A
   \   00015A   E4           CLR     A
   \   00015B   35..         ADDC    A,?V3
   \   00015D   F5..         MOV     ?V1,A
   \   00015F   E5..         MOV     A,?V2
   \   000161   240F         ADD     A,#0xf
   \   000163   F5..         MOV     ?V2,A
   \   000165   5002         JNC     ??ZDP_SimpleDescMsg_12
   \   000167   05..         INC     ?V3
   \                     ??ZDP_SimpleDescMsg_12:
   \   000169                ; Setup parameters for call to function osal_memset
   \   000169   7C0C         MOV     R4,#0xc
   \   00016B   7D00         MOV     R5,#0x0
   \   00016D   7900         MOV     R1,#0x0
   \   00016F   AA..         MOV     R2,?XSP + 0
   \   000171   AB..         MOV     R3,?XSP + 1
   \   000173   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000176   7409         MOV     A,#0x9
   \   000178   12....       LCALL   ?XSTACK_DISP0_8
   \   00017B   E4           CLR     A
   \   00017C   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   E0           MOVX    A,@DPTR
   \   000183   C0E0         PUSH    A
   \   000185   7408         MOV     A,#0x8
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   D0E0         POP     A
   \   00018C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00018F   85..82       MOV     DPL,?V2
   \   000192   85..83       MOV     DPH,?V3
   \   000195   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000198   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019B   78..         MOV     R0,#?V2
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A0   78..         MOV     R0,#?V0
   \   0001A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A5   EE           MOV     A,R6
   \   0001A6   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0001A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AC   75..04       MOV     ?V0,#0x4
   \   0001AF   75..80       MOV     ?V1,#-0x80
   \   0001B2   78..         MOV     R0,#?V0
   \   0001B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B7   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   0001BA   12....       LCALL   ?XSTACK_DISP101_8
   \   0001BD   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0001C0   7409         MOV     A,#0x9
   \   0001C2   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   0001C5   740C         MOV     A,#0xc
   \   0001C7   02....       LJMP    ??Subroutine134_0 & 0xFFFF
    929          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   3D           ADDC    A,R5
   \   000003   F9           MOV     R1,A
   \   000004   88..         MOV     ?V0,R0
   \   000006   89..         MOV     ?V1,R1
   \   000008   8882         MOV     DPL,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000003   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000006   FA           MOV     R2,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   F5..         MOV     ?V5,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   39           ADDC    A,R1
   \   000007   85..82       MOV     DPL,?V5
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine132_0
   \   000002                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000005                REQUIRE ??Subroutine133_0
   \   000005                ; // Fall through to label ??Subroutine133_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000008   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine135_0
   \   000003                ; // Fall through to label ??Subroutine135_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    930          
    931          /*********************************************************************
    932           * @fn          ZDP_EPRsp
    933           *
    934           * @brief       This builds and send an endpoint list. Used in
    935           *              Active_EP_rsp and Match_Desc_Rsp
    936           *              message.  This function sends unicast message to the
    937           *              requesting device.
    938           *
    939           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    940           * @param       dstAddr - destination address
    941           * @param       Status - message status (ZDP_SUCCESS or other)
    942           * @param       nwkAddr - Device's short address that this response describes
    943           * @param       Count - number of endpoint/interfaces in list
    944           * @param       pEPIntfList - Array of Endpoint/Interfaces
    945           * @param       SecurityEnable - Security Options
    946           *
    947           * @return      afStatus_t
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    950                                  byte Status, uint16 nwkAddr, byte Count,
    951                                  uint8 *pEPList,
    952                                  byte SecurityEnable )
    953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   EC           MOV     A,R4
   \   000017   FE           MOV     R6,A
   \   000018   ED           MOV     A,R5
   \   000019   FF           MOV     R7,A
    954            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00001D   FA           MOV     R2,A
   \   00001E   E9           MOV     A,R1
   \   00001F   FB           MOV     R3,A
    955            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \   000020   75..04       MOV     ?V0,#0x4
    956            byte txOptions;
    957          
    958            (void)SecurityEnable;  // Intentionally unreferenced parameter
    959          
    960            if ( MsgType == Match_Desc_rsp )
   \   000023   7406         MOV     A,#0x6
   \   000025   65..         XRL     A,?V2
   \   000027   7004         JNZ     ??ZDP_EPRsp_0
   \   000029   7480         MOV     A,#-0x80
   \   00002B   65..         XRL     A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00002D   7005         JNZ     ??ZDP_EPRsp_1
    961              txOptions = AF_MSG_ACK_REQUEST;
   \   00002F   75..10       MOV     ?V1,#0x10
   \   000032   8003         SJMP    ??ZDP_EPRsp_2
    962            else
    963              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000034   75..00       MOV     ?V1,#0x0
    964          
    965              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000037   7410         MOV     A,#0x10
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   7411         MOV     A,#0x11
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine20 & 0xFFFF
    966            *pBuf++ = LO_UINT16( nwkAddr );
    967            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_24:
   \   000048   7413         MOV     A,#0x13
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FC           MOV     R4,A
    968          
    969            *pBuf++ = Count;   // Endpoint/Interface count
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   F0           MOVX    @DPTR,A
    970          
    971            if ( Count )
   \   000057   6021         JZ      ??ZDP_EPRsp_3
    972            {
    973              len += Count;
   \   000059   7404         MOV     A,#0x4
   \   00005B   2C           ADD     A,R4
   \   00005C   F5..         MOV     ?V0,A
    974              osal_memcpy( pBuf, pEPList, Count );
   \   00005E                ; Setup parameters for call to function osal_memcpy
   \   00005E   7414         MOV     A,#0x14
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   12....       LCALL   ?Subroutine64 & 0xFFFF
    975            }
   \                     ??CrossCallReturnLabel_101:
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000069   7D00         MOV     R5,#0x0
   \   00006B   EA           MOV     A,R2
   \   00006C   2404         ADD     A,#0x4
   \   00006E   FA           MOV     R2,A
   \   00006F   5001         JNC     ??ZDP_EPRsp_4
   \   000071   0B           INC     R3
   \                     ??ZDP_EPRsp_4:
   \   000072   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000075   7403         MOV     A,#0x3
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
    976          
    977            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   00007A   E5..         MOV     A,?V1
   \   00007C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00007F   F0           MOVX    @DPTR,A
   \   000080                ; Setup parameters for call to function fillAndSend
   \   000080   78..         MOV     R0,#?V2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   A9..         MOV     R1,?V0
   \   000087   EE           MOV     A,R6
   \   000088   FC           MOV     R4,A
   \   000089   EF           MOV     A,R7
   \   00008A   FD           MOV     R5,A
   \   00008B   7402         MOV     A,#0x2
   \   00008D   12....       LCALL   ?XSTACK_DISP101_8
   \   000090   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000093   7402         MOV     A,#0x2
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   E9           MOV     A,R1
   \   000099   F9           MOV     R1,A
   \   00009A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009D   E4           CLR     A
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   04           INC     A
   \   0000A0   02....       LJMP    ??Subroutine122_0 & 0xFFFF
    978          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000003   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   75..00       MOV     ?V6,#0x0
   \   000006   78..         MOV     R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E9           MOV     A,R1
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   22           RET
    979          
    980          /*********************************************************************
    981           * @fn          ZDP_UserDescRsp
    982           *
    983           * @brief       Build and send the User Decriptor Response.
    984           *
    985           *
    986           * @param       dstAddr - destination address
    987           * @param       nwkAddrOfInterest -
    988           * @param       userDesc -
    989           * @param       SecurityEnable - Security Options
    990           *
    991           * @return      ZStatus_t
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine134_0
   \   000002                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    994                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    995                          byte SecurityEnable )
    996          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine33 & 0xFFFF
    997            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_51:
   \   00000D   88..         MOV     ?V0,R0
   \   00000F   89..         MOV     ?V1,R1
   \   000011   7413         MOV     A,#0x13
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000019   88..         MOV     ?V8,R0
   \   00001B   89..         MOV     ?V9,R1
    998            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    999          
   1000            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1001          
   1002            len += userDesc->len;
   \   00001D   8882         MOV     DPL,R0
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   2404         ADD     A,#0x4
   \   000024   F5..         MOV     ?V2,A
   1003          
   1004            *pBuf++ = ZSUCCESS;
   \   000026   85..82       MOV     DPL,?V0
   \   000029   85..83       MOV     DPH,?V1
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
   1005          
   1006            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   00002E   EC           MOV     A,R4
   \   00002F   A3           INC     DPTR
   \   000030   F0           MOVX    @DPTR,A
   1007            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000031   ED           MOV     A,R5
   \   000032   85..82       MOV     DPL,?V0
   \   000035   85..83       MOV     DPH,?V1
   \   000038   12....       LCALL   ?Subroutine42 & 0xFFFF
   1008          
   1009            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_248:
   \   00003B   85..82       MOV     DPL,?V0
   \   00003E   85..83       MOV     DPH,?V1
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   12....       LCALL   ?Subroutine21 & 0xFFFF
   1010            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_29:
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004A   85..82       MOV     DPL,?V8
   \   00004D   85..83       MOV     DPH,?V9
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FC           MOV     R4,A
   \   000052   7D00         MOV     R5,#0x0
   \   000054   E5..         MOV     A,?V0
   \   000056   2404         ADD     A,#0x4
   \   000058   FA           MOV     R2,A
   \   000059   E4           CLR     A
   \   00005A   35..         ADDC    A,?V1
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   1011          
   1012            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   000065                ; Setup parameters for call to function fillAndSend
   \   000065   75..11       MOV     ?V0,#0x11
   \   000068   75..80       MOV     ?V1,#-0x80
   \   00006B   78..         MOV     R0,#?V0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   A9..         MOV     R1,?V2
   \   000072   EE           MOV     A,R6
   \   000073   FC           MOV     R4,A
   \   000074   EF           MOV     A,R7
   \   000075   FD           MOV     R5,A
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?XSTACK_DISP101_8
   \   00007B   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00007E   7402         MOV     A,#0x2
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   \   000083   02....       LJMP    ?Subroutine4 & 0xFFFF
   1013          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   EA           MOV     A,R2
   \   000009   FE           MOV     R6,A
   \   00000A   EB           MOV     A,R3
   \   00000B   FF           MOV     R7,A
   \   00000C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000F   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000012   22           RET
   1014          
   1015          /*********************************************************************
   1016           * @fn          ZDP_ServerDiscRsp
   1017           *
   1018           * @brief       Build and send the Server_Discovery_rsp response.
   1019           *
   1020           * @param       transID - Transaction sequence number of request.
   1021           * @param       dstAddr - Network Destination Address.
   1022           * @param       status - Status of response to request.
   1023           * @param       aoi - Network Address of Interest of request.
   1024           * @param       serverMask - Bit map of service(s) being sought.
   1025           * @param       SecurityEnable - Security Options
   1026           *
   1027           * @return      ZStatus_t
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1030                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1031          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine33 & 0xFFFF
   1032            const byte len = 1  + 2;  // status + aoi + mask.
   1033            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_52:
   \   00000D   E8           MOV     A,R0
   \   00000E   FA           MOV     R2,A
   \   00000F   E9           MOV     A,R1
   \   000010   FB           MOV     R3,A
   1034            ZStatus_t stat;
   1035          
   1036            // Intentionally unreferenced parameters
   1037            (void)aoi;
   1038            (void)SecurityEnable;
   1039          
   1040            *pBuf++ = status;
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   741D         MOV     A,#0x1d
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine20 & 0xFFFF
   1041          
   1042            *pBuf++ = LO_UINT16( serverMask );
   1043            *pBuf++ = HI_UINT16( serverMask );
   1044          
   1045            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??CrossCallReturnLabel_25:
   \   00001F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000022   7410         MOV     A,#0x10
   \   000024   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000027   12....       LCALL   ?XSTACK_DISP101_8
   \   00002A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   00002D   740A         MOV     A,#0xa
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000035   C0E0         PUSH    A
   \   000037   7409         MOV     A,#0x9
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   D0E0         POP     A
   \   00003E   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   7401         MOV     A,#0x1
   \   00004C   12....       LCALL   ?XSTACK_DISP100_8
   \   00004F   88..         MOV     ?V4,R0
   \   000051   89..         MOV     ?V5,R1
   \   000053   78..         MOV     R0,#?V4
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   78..         MOV     R0,#?V2
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..04       MOV     ?V2,#0x4
   \   000060   75..00       MOV     ?V3,#0x0
   \   000063   78..         MOV     R0,#?V2
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..15       MOV     ?V2,#0x15
   \   00006B   75..80       MOV     ?V3,#-0x80
   \   00006E   78..         MOV     R0,#?V2
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000076   12....       LCALL   ?XSTACK_DISP101_8
   \   000079   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00007C   7409         MOV     A,#0x9
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081   E9           MOV     A,R1
   \   000082   F9           MOV     R1,A
   1046            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   1047            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000083   90....       MOV     DPTR,#ZDP_TxOptions
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
   1048          
   1049            return ( stat );
   \   000088                REQUIRE ?Subroutine7
   \   000088                ; // Fall through to label ?Subroutine7
   1050          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   740D         MOV     A,#0xd
   \   000002   02....       LJMP    ??Subroutine143_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001   7C0C         MOV     R4,#0xc
   \   000003   7D00         MOV     R5,#0x0
   \   000005   7900         MOV     R1,#0x0
   \   000007   7401         MOV     A,#0x1
   \   000009   22           RET
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_GenericRsp
   1054           *
   1055           * @brief       Sends a response message with only the parameter status
   1056           *              byte and the addr of interest for data.
   1057           *              This function sends unicast message to the
   1058           *              requesting device.
   1059           *
   1060           * @param       dstAddr - destination address
   1061           * @param       status  - generic status for response
   1062           * @param       aoi     - address of interest
   1063           * @param       dstAddr - destination address
   1064           * @param       rspId   - response cluster ID
   1065           * @param       SecurityEnable - Security Options
   1066           *
   1067           * @return      afStatus_t
   1068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003                REQUIRE ??Subroutine136_0
   \   000003                ; // Fall through to label ??Subroutine136_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1069          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1070                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1071          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   12....       LCALL   ?Subroutine63 & 0xFFFF
   1072            uint8 len;
   1073          
   1074            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1075          
   1076            ZDP_TmpBuf[0] = status;
   \                     ??CrossCallReturnLabel_281:
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   741B         MOV     A,#0x1b
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   1077            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_322:
   \   00001F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8A82         MOV     DPL,R2
   \   00002A   A3           INC     DPTR
   \   00002B   E8           MOV     A,R0
   \   00002C   12....       LCALL   ?Subroutine27 & 0xFFFF
   1078            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \                     ??CrossCallReturnLabel_41:
   \   00002F   12....       LCALL   ?Subroutine32 & 0xFFFF
   1079          
   1080            // Length byte
   1081            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_50:
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   1082            len = 4;
   1083          
   1084            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000036                ; Setup parameters for call to function osal_memset
   \   000036   7C0C         MOV     R4,#0xc
   \   000038   FD           MOV     R5,A
   \   000039   F9           MOV     R1,A
   \   00003A   04           INC     A
   \   00003B   12....       LCALL   ?XSTACK_DISP101_8
   \   00003E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000041   740A         MOV     A,#0xa
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000049   C0E0         PUSH    A
   \   00004B   7409         MOV     A,#0x9
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005E   7401         MOV     A,#0x1
   \   000060   12....       LCALL   ?XSTACK_DISP100_8
   \   000063   88..         MOV     ?V4,R0
   \   000065   89..         MOV     ?V5,R1
   \   000067   78..         MOV     R0,#?V4
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   78..         MOV     R0,#?V2
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   75..05       MOV     ?V2,#0x5
   \   000074   75..00       MOV     ?V3,#0x0
   \   000077   78..         MOV     R0,#?V2
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   7424         MOV     A,#0x24
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000084   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000087   12....       LCALL   ?XSTACK_DISP101_8
   \   00008A   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00008D   7409         MOV     A,#0x9
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   02....       LJMP    ?Subroutine7 & 0xFFFF
   1085          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000003   740A         MOV     A,#0xa
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000007   85..82       MOV     DPL,?XSP + 0
   \   00000A   85..83       MOV     DPH,?XSP + 1
   \   00000D   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000010                ; Setup parameters for call to function AF_DataRequest
   \   000010                ; Setup parameters for call to function AF_DataRequest
   \   000010   75..1E       MOV     ?V1,#0x1e
   \   000013   78..         MOV     R0,#?V1
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                REQUIRE ??Subroutine140_0
   \   000004                ; // Fall through to label ??Subroutine140_0
   1086          
   1087          /*********************************************************************
   1088           * Binding
   1089           */
   1090          /*********************************************************************
   1091           * @fn          ZDP_EndDeviceBindReq
   1092           *
   1093           * @brief       This builds and sends a End_Device_Bind_req message.
   1094           *              This function sends a unicast message.
   1095           *
   1096           * @param       dstAddr - destination address
   1097           * @param       LocalCoordinator - short address of local coordinator
   1098           * @param       epIntf - Endpoint/Interface of Simple Desc
   1099           * @param       ProfileID - Profile ID
   1100           *
   1101           *   The Input cluster list is the opposite of what you would think.
   1102           *   This is the output cluster list of this device
   1103           * @param       NumInClusters - number of input clusters
   1104           * @param       InClusterList - input cluster ID list
   1105           *
   1106           *   The Output cluster list is the opposite of what you would think.
   1107           *   This is the input cluster list of this device
   1108           * @param       NumOutClusters - number of output clusters
   1109           * @param       OutClusterList - output cluster ID list
   1110           *
   1111           * @param       SecurityEnable - Security Options
   1112           *
   1113           * @return      afStatus_t
   1114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1115          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1116                                           uint16 LocalCoordinator,
   1117                                           byte endPoint,
   1118                                           uint16 ProfileID,
   1119                                           byte NumInClusters, cId_t *InClusterList,
   1120                                           byte NumOutClusters, cId_t *OutClusterList,
   1121                                           byte SecurityEnable )
   1122          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V5,R1
   1123            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V2,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V3,A
   \   000019   7414         MOV     A,#0x14
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V4,A
   \   000021   7417         MOV     A,#0x17
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V1,A
   1124            uint8 i, len;
   1125            uint8 *ieeeAddr;
   1126          
   1127            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1128          
   1129            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1130            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1131            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000029   E5..         MOV     A,?V4
   \   00002B   25..         ADD     A,?V1
   \   00002D   C3           CLR     C
   \   00002E   33           RLC     A
   \   00002F   240F         ADD     A,#0xf
   \   000031   F5..         MOV     ?V0,A
   1132          
   1133            if ( len >= ZDP_BUF_SZ-1 )
   \   000033   C3           CLR     C
   \   000034   944F         SUBB    A,#0x4f
   \   000036   4005         JC      ??ZDP_EndDeviceBindReq_0
   1134            {
   1135              return afStatus_MEM_FAIL;
   \   000038   7910         MOV     R1,#0x10
   \   00003A   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1136            }
   1137          
   1138            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   00003D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003D   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000040   EA           MOV     A,R2
   \   000041   6E           XRL     A,R6
   \   000042   7002         JNZ     ??ZDP_EndDeviceBindReq_2
   \   000044   EB           MOV     A,R3
   \   000045   6F           XRL     A,R7
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000046   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1139            {
   1140              return afStatus_INVALID_PARAMETER;
   \   000048   7902         MOV     R1,#0x2
   \   00004A   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1141            }
   1142          
   1143            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   00004D   EE           MOV     A,R6
   \   00004E   85..82       MOV     DPL,?V2
   \   000051   85..83       MOV     DPH,?V3
   \   000054   F0           MOVX    @DPTR,A
   1144            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000055   EF           MOV     A,R7
   \   000056   A3           INC     DPTR
   \   000057   F0           MOVX    @DPTR,A
   1145          
   1146            ieeeAddr = NLME_GetExtAddr();
   \   000058                ; Setup parameters for call to function NLME_GetExtAddr
   \   000058   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00005B   8A..         MOV     ?V8,R2
   \   00005D   8B..         MOV     ?V9,R3
   \   00005F   AC..         MOV     R4,?V8
   \   000061   AD..         MOV     R5,?V9
   1147            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   000063                ; Setup parameters for call to function sAddrExtCpy
   \   000063   E5..         MOV     A,?V2
   \   000065   2402         ADD     A,#0x2
   \   000067   FA           MOV     R2,A
   \   000068   E4           CLR     A
   \   000069   35..         ADDC    A,?V3
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1148          
   1149            *pBuf++ = endPoint;
   \   00006F   8A82         MOV     DPL,R2
   \   000071   8B83         MOV     DPH,R3
   \   000073   E5..         MOV     A,?V5
   \   000075   F0           MOVX    @DPTR,A
   \   000076   7412         MOV     A,#0x12
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   12....       LCALL   ?Subroutine20 & 0xFFFF
   1150          
   1151            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1152            *pBuf++ = HI_UINT16( ProfileID );
   1153          
   1154            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_26:
   \   00007E   8A82         MOV     DPL,R2
   \   000080   8B83         MOV     DPH,R3
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E5..         MOV     A,?V4
   \   000087   F0           MOVX    @DPTR,A
   \   000088   EA           MOV     A,R2
   \   000089   2404         ADD     A,#0x4
   \   00008B   F5..         MOV     ?V2,A
   \   00008D   E4           CLR     A
   \   00008E   3B           ADDC    A,R3
   \   00008F   F5..         MOV     ?V3,A
   1155            for ( i = 0; i < NumInClusters; ++i )
   \   000091   E5..         MOV     A,?V4
   \   000093   601C         JZ      ??ZDP_EndDeviceBindReq_4
   \   000095   7415         MOV     A,#0x15
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   00009D   AE..         MOV     R6,?V4
   1156            {
   1157              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   00009F   12....       LCALL   ?Subroutine19 & 0xFFFF
   1158              *pBuf++ = HI_UINT16(InClusterList[i]);
   1159            }
   \                     ??CrossCallReturnLabel_22:
   \   0000A2   5002         JNC     ??ZDP_EndDeviceBindReq_6
   \   0000A4   05..         INC     ?V3
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000A6   E8           MOV     A,R0
   \   0000A7   2402         ADD     A,#0x2
   \   0000A9   F8           MOV     R0,A
   \   0000AA   5001         JNC     ??ZDP_EndDeviceBindReq_7
   \   0000AC   09           INC     R1
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0000AD   1E           DEC     R6
   \   0000AE   EE           MOV     A,R6
   \   0000AF   70EE         JNZ     ??ZDP_EndDeviceBindReq_5
   1160          
   1161            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000B1   85..82       MOV     DPL,?V2
   \   0000B4   85..83       MOV     DPH,?V3
   \   0000B7   E5..         MOV     A,?V1
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   8582..       MOV     ?V2,DPL
   \   0000BE   8583..       MOV     ?V3,DPH
   1162            for ( i = 0; i < NumOutClusters; ++i )
   \   0000C1   601C         JZ      ??ZDP_EndDeviceBindReq_8
   \   0000C3   7418         MOV     A,#0x18
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   0000CB   AF..         MOV     R7,?V1
   1163            {
   1164              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_9:
   \   0000CD   12....       LCALL   ?Subroutine19 & 0xFFFF
   1165              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1166            }
   \                     ??CrossCallReturnLabel_23:
   \   0000D0   5002         JNC     ??ZDP_EndDeviceBindReq_10
   \   0000D2   05..         INC     ?V3
   \                     ??ZDP_EndDeviceBindReq_10:
   \   0000D4   E8           MOV     A,R0
   \   0000D5   2402         ADD     A,#0x2
   \   0000D7   F8           MOV     R0,A
   \   0000D8   5001         JNC     ??ZDP_EndDeviceBindReq_11
   \   0000DA   09           INC     R1
   \                     ??ZDP_EndDeviceBindReq_11:
   \   0000DB   1F           DEC     R7
   \   0000DC   EF           MOV     A,R7
   \   0000DD   70EE         JNZ     ??ZDP_EndDeviceBindReq_9
   1167          
   1168            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000DF                ; Setup parameters for call to function fillAndSend
   \   0000DF   75..20       MOV     ?V2,#0x20
   \   0000E2   75..00       MOV     ?V3,#0x0
   \   0000E5   78..         MOV     R0,#?V2
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   A9..         MOV     R1,?V0
   \   0000EC   AC..         MOV     R4,?V6
   \   0000EE   AD..         MOV     R5,?V7
   \   0000F0   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000F2   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000F4   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000F7   7402         MOV     A,#0x2
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   0000FC   02....       LJMP    ??Subroutine135_0 & 0xFFFF
   1169          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   85..82       MOV     DPL,?V2
   \   000010   85..83       MOV     DPH,?V3
   \   000013   A3           INC     DPTR
   \   000014   F0           MOVX    @DPTR,A
   \   000015   E5..         MOV     A,?V2
   \   000017   2402         ADD     A,#0x2
   \   000019   F5..         MOV     ?V2,A
   \   00001B   22           RET
   1170          
   1171          /*********************************************************************
   1172           * @fn          ZDP_BindUnbindReq
   1173           *
   1174           * @brief       This builds and send a Bind_req or Unbind_req message
   1175           *              Depending on the ClusterID. This function
   1176           *              sends a unicast message to the local coordinator.
   1177           *
   1178           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1179           * @param       dstAddr - destination address of the message
   1180           * @param       SourceAddr - source 64 bit address of the binding
   1181           * @param       SrcEPIntf - Source endpoint/interface
   1182           * @param       ClusterID - Binding cluster ID
   1183           * @param       DestinationAddr - destination 64 bit addr of binding
   1184           * @param       DstEPIntf - destination endpoint/interface
   1185           * @param       SecurityEnable - Security Options
   1186           *
   1187           * @return      afStatus_t
   1188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1189          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1190                                        uint8 *SourceAddr, byte SrcEndPoint,
   1191                                        cId_t ClusterID,
   1192                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1193                                        byte SecurityEnable )
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V3,R1
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   1196            byte len;
   1197          
   1198            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1199          
   1200            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1201            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_260:
   \   000012   75..0C       MOV     ?V2,#0xc
   \   000015   7416         MOV     A,#0x16
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine76 & 0xFFFF
   1202            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_120:
   \   00001D   EE           MOV     A,R6
   \   00001E   2408         ADD     A,#0x8
   \   000020   F5..         MOV     ?V0,A
   \   000022   E4           CLR     A
   \   000023   3F           ADDC    A,R7
   \   000024   F5..         MOV     ?V1,A
   \   000026   85..82       MOV     DPL,?V0
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7403         MOV     A,#0x3
   \   00002F   68           XRL     A,R0
   \   000030   7005         JNZ     ??ZDP_BindUnbindReq_0
   1203              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000032   75..15       MOV     ?V2,#0x15
   \   000035   8008         SJMP    ??ZDP_BindUnbindReq_1
   1204            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000037   7401         MOV     A,#0x1
   \   000039   68           XRL     A,R0
   \   00003A   7003         JNZ     ??ZDP_BindUnbindReq_1
   1205              len += sizeof ( uint16 );
   \   00003C   75..0E       MOV     ?V2,#0xe
   1206          
   1207            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00003F                ; Setup parameters for call to function sAddrExtCpy
   \   00003F   7412         MOV     A,#0x12
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FC           MOV     R4,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FD           MOV     R5,A
   \   000049   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1208            *pBuf++ = SrcEndPoint;
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   E5..         MOV     A,?V3
   \   000052   F0           MOVX    @DPTR,A
   \   000053   7414         MOV     A,#0x14
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine20 & 0xFFFF
   1209          
   1210            *pBuf++ = LO_UINT16( ClusterID );
   1211          
   1212            *pBuf++ = HI_UINT16( ClusterID );
   1213            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_27:
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000064   5001         JNC     ??ZDP_BindUnbindReq_2
   \   000066   0B           INC     R3
   1214            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   000067   85..82       MOV     DPL,?V0
   \   00006A   85..83       MOV     DPH,?V1
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F8           MOV     R0,A
   \   00006F   7403         MOV     A,#0x3
   \   000071   68           XRL     A,R0
   \   000072   7017         JNZ     ??ZDP_BindUnbindReq_3
   1215            {
   1216              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1217              *pBuf = DstEndPoint;
   \   000074   7418         MOV     A,#0x18
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   C0E0         PUSH    A
   \   00007C                ; Setup parameters for call to function sAddrExtCpy
   \   00007C   EE           MOV     A,R6
   \   00007D   FC           MOV     R4,A
   \   00007E   EF           MOV     A,R7
   \   00007F   FD           MOV     R5,A
   \   000080   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000083   8A82         MOV     DPL,R2
   \   000085   8B83         MOV     DPH,R3
   \   000087   D0E0         POP     A
   \   000089   8013         SJMP    ??CrossCallReturnLabel_131
   1218            }
   1219            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   00008B   7401         MOV     A,#0x1
   \   00008D   68           XRL     A,R0
   \   00008E   700F         JNZ     ??ZDP_BindUnbindReq_4
   1220            {
   1221              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   1222              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   1223            }
   \                     ??CrossCallReturnLabel_272:
   \   000097   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   00009A   A3           INC     DPTR
   \   00009B   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00009E   F0           MOVX    @DPTR,A
   1224          
   1225            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   00009F   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A2   7410         MOV     A,#0x10
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5                ; Setup parameters for call to function fillAndSend
   \   0000A5   78..         MOV     R0,#?V6
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AA   A9..         MOV     R1,?V2
   \   0000AC   AC..         MOV     R4,?V4
   \   0000AE   AD..         MOV     R5,?V5
   \   0000B0   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000B2   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000B4   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000B7   7402         MOV     A,#0x2
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV     A,R1
   \   0000BD   F9           MOV     R1,A
   \   0000BE   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C1   E4           CLR     A
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   02....       LJMP    ??Subroutine135_0 & 0xFFFF
   1226          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine147_0
   \   000001                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine148_0
   \   000007                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EA           MOV     A,R2
   \   000002   2404         ADD     A,#0x4
   \   000004   FA           MOV     R2,A
   \   000005   22           RET
   1227          
   1228          /*********************************************************************
   1229           * Network Management
   1230           */
   1231          
   1232          /*********************************************************************
   1233           * @fn          ZDP_MgmtNwkDiscReq
   1234           *
   1235           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1236           *              function sends a unicast message.
   1237           *
   1238           * @param       dstAddr - destination address of the message
   1239           * @param       ScanChannels - 32 bit address bit map
   1240           * @param       StartIndex - Starting index within the reporting network
   1241           *                           list
   1242           * @param       SecurityEnable - Security Options
   1243           *
   1244           * @return      afStatus_t
   1245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1246          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1247                                         uint32 ScanChannels,
   1248                                         byte ScanDuration,
   1249                                         byte StartIndex,
   1250                                         byte SecurityEnable )
   1251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   \   00000B   8C..         MOV     ?V1,R4
   1252            uint8 *pBuf = ZDP_TmpBuf;
   1253            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1254          
   1255            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1256          
   1257            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV     A,#0xc
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000018   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   12....       LCALL   ?Subroutine44 & 0xFFFF
   1258          
   1259            *pBuf++ = ScanDuration;
   1260            *pBuf = StartIndex;
   1261          
   1262            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \                     ??CrossCallReturnLabel_193:
   \   000023                ; Setup parameters for call to function fillAndSend
   \   000023   75..30       MOV     ?V2,#0x30
   \   000026   75..00       MOV     ?V3,#0x0
   \   000029   78..         MOV     R0,#?V2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7906         MOV     R1,#0x6
   \   000030                REQUIRE ?Subroutine8
   \   000030                ; // Fall through to label ?Subroutine8
   1263          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000B   7402         MOV     A,#0x2
   \   00000D   80..         SJMP    ??Subroutine139_0
   1264          
   1265          /*********************************************************************
   1266           * @fn          ZDP_MgmtDirectJoinReq
   1267           *
   1268           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1269           *              function sends a unicast message.
   1270           *
   1271           * @param       dstAddr - destination address of the message
   1272           * @param       deviceAddr - 64 bit IEEE Address
   1273           * @param       SecurityEnable - Security Options
   1274           *
   1275           * @return      afStatus_t
   1276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   89..         MOV     ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                REQUIRE ??Subroutine130_0
   \   000006                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1277          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1278                                         uint8 *deviceAddr,
   1279                                         byte capInfo,
   1280                                         byte SecurityEnable )
   1281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine71 & 0xFFFF
   1282            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1283          
   1284            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \                     ??CrossCallReturnLabel_250:
   \   000008   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1285            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00000B   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00000E   C8           XCH     A,R0
   \   00000F   2408         ADD     A,#0x8
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   38           ADDC    A,R0
   \   000015   F583         MOV     DPH,A
   \   000017   E5..         MOV     A,?V0
   \   000019   F0           MOVX    @DPTR,A
   1286          
   1287            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   00001A                ; Setup parameters for call to function fillAndSend
   \   00001A   75..35       MOV     ?V2,#0x35
   \   00001D   75..00       MOV     ?V3,#0x0
   \   000020   78..         MOV     R0,#?V2
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   7909         MOV     R1,#0x9
   \   000027   80..         SJMP    ?Subroutine8
   1288          }
   1289          
   1290          /*********************************************************************
   1291           * @fn          ZDP_MgmtPermitJoinReq
   1292           *
   1293           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1294           *
   1295           * @param       dstAddr - destination address of the message
   1296           * @param       duration - Permit duration
   1297           * @param       TcSignificance - Trust Center Significance
   1298           *
   1299           * @return      afStatus_t
   1300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1301          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1302                                            byte TcSignificance, byte SecurityEnable )
   1303          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine63 & 0xFFFF
   1304            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1305          
   1306            // Build buffer
   1307            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \                     ??CrossCallReturnLabel_282:
   \   00000D   E9           MOV     A,R1
   \   00000E   F0           MOVX    @DPTR,A
   1308            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \   00000F   12....       LCALL   ??Subroutine140_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000012   12....       LCALL   ?Subroutine12 & 0xFFFF
   1309          
   1310            // Send the message
   1311            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1312                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??CrossCallReturnLabel_220:
   \   000015   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000018   7409         MOV     A,#0x9
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000020   C0E0         PUSH    A
   \   000022   7408         MOV     A,#0x8
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00002C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000032   75....       MOV     ?V4,#ZDP_TransID & 0xff
   \   000035   75....       MOV     ?V5,#(ZDP_TransID >> 8) & 0xff
   \   000038   78..         MOV     R0,#?V4
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   78..         MOV     R0,#?V2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..03       MOV     ?V2,#0x3
   \   000045   75..00       MOV     ?V3,#0x0
   \   000048   78..         MOV     R0,#?V2
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   75..36       MOV     ?V2,#0x36
   \   000050   02....       LJMP    ?Subroutine6 & 0xFFFF
   1313          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   22           RET
   1314          
   1315          /*********************************************************************
   1316           * @fn          ZDP_MgmtLeaveReq
   1317           *
   1318           * @brief       This builds and send a Mgmt_Leave_req message.
   1319           *
   1320           * @param       dstAddr - destination address of the message
   1321           *              IEEEAddr - IEEE adddress of device that is removed
   1322           *              RemoveChildren - set to 1 to remove the children of the
   1323           *                                device as well. 0 otherwise.
   1324           *              Rejoin - set to 1 if the removed device should rejoin
   1325                                   afterwards. 0 otherwise.
   1326           *
   1327           * @return      afStatus_t
   1328           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1329          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1330                           uint8 Rejoin, uint8 SecurityEnable )
   1331          
   1332          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine71 & 0xFFFF
   1333            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1334          
   1335            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \                     ??CrossCallReturnLabel_251:
   \   00000D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1336            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000010   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000013   E0           MOVX    A,@DPTR
   \   000014   2408         ADD     A,#0x8
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F9           MOV     R1,A
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   1337          
   1338            if ( RemoveChildren == TRUE )
   \   000022   04           INC     A
   \   000023   65..         XRL     A,?V0
   \   000025   7003         JNZ     ??ZDP_MgmtLeaveReq_0
   1339            {
   1340              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000027   7440         MOV     A,#0x40
   \   000029   F0           MOVX    @DPTR,A
   1341            }
   1342            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   00002A   741A         MOV     A,#0x1a
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6401         XRL     A,#0x1
   \   000032   7008         JNZ     ??ZDP_MgmtLeaveReq_1
   1343            {
   1344              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   D2E7         SETB    0xE0 /* A   */.7
   \   00003B   F0           MOVX    @DPTR,A
   1345            }
   1346          
   1347            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   00003C                ; Setup parameters for call to function osal_memset
   \   00003C   7C0C         MOV     R4,#0xc
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7900         MOV     R1,#0x0
   \   000042   AA..         MOV     R2,?XSP + 0
   \   000044   AB..         MOV     R3,?XSP + 1
   \   000046   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000049   7409         MOV     A,#0x9
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000051   C0E0         PUSH    A
   \   000053   7408         MOV     A,#0x8
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   D0E0         POP     A
   \   00005A   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00005D   90....       MOV     DPTR,#ZDP_TransID
   \   000060   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000063                ; Setup parameters for call to function AF_DataRequest
   \   000063   75..1E       MOV     ?V1,#0x1e
   \   000066   78..         MOV     R0,#?V1
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006B   75....       MOV     ?V4,#ZDP_TransID & 0xff
   \   00006E   75....       MOV     ?V5,#(ZDP_TransID >> 8) & 0xff
   \   000071   78..         MOV     R0,#?V4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   78..         MOV     R0,#?V2
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   75..0A       MOV     ?V2,#0xa
   \   00007E   75..00       MOV     ?V3,#0x0
   \   000081   78..         MOV     R0,#?V2
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   75..34       MOV     ?V2,#0x34
   \   000089   02....       LJMP    ?Subroutine6 & 0xFFFF
   1348          }
   1349          
   1350          /*********************************************************************
   1351           * @fn          ZDP_MgmtNwkUpdateReq
   1352           *
   1353           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1354           *              function sends a unicast or broadcast message.
   1355           *
   1356           * @param       dstAddr - destination address of the message
   1357           * @param       ChannelMask - 32 bit address bit map
   1358           * @param       ScanDuration - length of time to spend scanning each channel
   1359           * @param       ScanCount - number of energy scans to be conducted
   1360           * @param       NwkUpdateId - NWk Update Id value
   1361           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1362           *                               bit set in its Node Descriptor
   1363           *
   1364           * @return      afStatus_t
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1367                                           uint32 ChannelMask,
   1368                                           uint8 ScanDuration,
   1369                                           uint8 ScanCount,
   1370                                           uint8 NwkUpdateId,
   1371                                           uint16 NwkManagerAddr )
   1372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   1373            uint8 *pBuf = ZDP_TmpBuf;
   1374            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   7E05         MOV     R6,#0x5
   1375          
   1376            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000011                ; Setup parameters for call to function osal_buffer_uint32
   \   000011   740E         MOV     A,#0xe
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000019   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00001C   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   1377          
   1378            *pBuf++ = ScanDuration;
   \   000024   EF           MOV     A,R7
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   F0           MOVX    @DPTR,A
   1379          
   1380            if ( ScanDuration <= 0x05 )
   \   00002A   C3           CLR     C
   \   00002B   9406         SUBB    A,#0x6
   \   00002D   500D         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1381            {
   1382              // Request is to scan over channelMask
   1383              len += sizeof( uint8 );
   \   00002F   7E06         MOV     R6,#0x6
   1384          
   1385              *pBuf++ = ScanCount;
   \   000031   A3           INC     DPTR
   \   000032   E5..         MOV     A,?V2
   \   000034   F0           MOVX    @DPTR,A
   \   000035   EA           MOV     A,R2
   \   000036   2402         ADD     A,#0x2
   \   000038   5025         JNC     ??ZDP_MgmtNwkUpdateReq_1
   \   00003A   8023         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1386            }
   1387            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00003C   74FE         MOV     A,#-0x2
   \   00003E   6F           XRL     A,R7
   \   00003F   6005         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   000041   74FF         MOV     A,#-0x1
   \   000043   6F           XRL     A,R7
   \   000044   7019         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1388            {
   1389              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1390              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000046   7E06         MOV     R6,#0x6
   1391          
   1392              *pBuf++ = NwkUpdateId;
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V3
   \   00004B   F0           MOVX    @DPTR,A
   1393          
   1394              if ( ScanDuration == 0xFF )
   \   00004C   74FF         MOV     A,#-0x1
   \   00004E   6F           XRL     A,R7
   \   00004F   700E         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1395              {
   1396                len += sizeof( uint16 );
   \   000051   7E08         MOV     R6,#0x8
   \   000053   7412         MOV     A,#0x12
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine49 & 0xFFFF
   1397          
   1398                *pBuf++  = LO_UINT16( NwkManagerAddr );
   1399                *pBuf++  = HI_UINT16( NwkManagerAddr );
   1400              }
   1401            }
   \                     ??CrossCallReturnLabel_77:
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   EA           MOV     A,R2
   \   00005D   2404         ADD     A,#0x4
   1402          
   1403            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   00005F                ; Setup parameters for call to function fillAndSend
   \   00005F   75..38       MOV     ?V4,#0x38
   \   000062   75..00       MOV     ?V5,#0x0
   \   000065   78..         MOV     R0,#?V4
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   EE           MOV     A,R6
   \   00006B   F9           MOV     R1,A
   \   00006C   AC..         MOV     R4,?V0
   \   00006E   AD..         MOV     R5,?V1
   \   000070   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000072   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000074   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000077   7402         MOV     A,#0x2
   \   000079   02....       LJMP    ??Subroutine143_0 & 0xFFFF
   1404          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   1405          
   1406          
   1407          /*********************************************************************
   1408           * Network Management Responses
   1409           */
   1410          
   1411          /*********************************************************************
   1412           * @fn          ZDP_MgmtNwkDiscRsp
   1413           *
   1414           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1415           *              function sends a unicast message.
   1416           *
   1417           * @param       dstAddr - destination address of the message
   1418           * @param       Status - message status (ZDP_SUCCESS or other)
   1419           * @param       NetworkCount - Total number of networks found
   1420           * @param       StartIndex - Starting index within the reporting network
   1421           *                           list
   1422           * @param       NetworkListCount - number of network lists included
   1423           *                                 in this message
   1424           * @param       NetworkList - List of network descriptors
   1425           * @param       SecurityEnable - Security Options
   1426           *
   1427           * @return      afStatus_t
   1428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1429          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1430                                      byte Status,
   1431                                      byte NetworkCount,
   1432                                      byte StartIndex,
   1433                                      byte NetworkListCount,
   1434                                      networkDesc_t *NetworkList,
   1435                                      byte SecurityEnable )
   1436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V10,R2
   \   000014   8B..         MOV     ?V11,R3
   \   000016   8C..         MOV     ?V9,R4
   \   000018   8D..         MOV     ?V8,R5
   \   00001A   7416         MOV     A,#0x16
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0,A
   1437            uint8 *buf;
   1438            uint8 *pBuf;
   1439            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1440            byte idx;
   1441          
   1442            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1443          
   1444            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000022   75F00C       MOV     B,#0xc
   \   000025   12....       LCALL   ?Subroutine82 & 0xFFFF
   1445          
   1446            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_311:
   \   000028   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002B   8A..         MOV     ?V4,R2
   \   00002D   8B..         MOV     ?V5,R3
   1447            if ( buf == NULL )
   \   00002F   EA           MOV     A,R2
   \   000030   45..         ORL     A,?V5
   \   000032   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1448            {
   1449              return afStatus_MEM_FAIL;
   \   000034   7910         MOV     R1,#0x10
   \   000036   02....       LJMP    ??CrossCallReturnLabel_59 & 0xFFFF
   1450            }
   1451          
   1452            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   A3           INC     DPTR
   \   00003E   8582..       MOV     ?V6,DPL
   \   000041   8583..       MOV     ?V7,DPH
   \   000044   AE..         MOV     R6,?V6
   \   000046   AF..         MOV     R7,?V7
   1453          
   1454            *pBuf++ = Status;
   \   000048   E5..         MOV     A,?V9
   \   00004A   F0           MOVX    @DPTR,A
   1455            *pBuf++ = NetworkCount;
   \   00004B   A3           INC     DPTR
   \   00004C   E5..         MOV     A,?V8
   \   00004E   F0           MOVX    @DPTR,A
   1456            *pBuf++ = StartIndex;
   \   00004F   7415         MOV     A,#0x15
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000057   A3           INC     DPTR
   \   000058   12....       LCALL   ?Subroutine54 & 0xFFFF
   1457            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_85:
   \   00005B   E5..         MOV     A,?V0
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   EE           MOV     A,R6
   \   00005F   2404         ADD     A,#0x4
   \   000061   FE           MOV     R6,A
   \   000062   5001         JNC     ??ZDP_MgmtNwkDiscRsp_1
   \   000064   0F           INC     R7
   1458          
   1459            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000065   E5..         MOV     A,?V0
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   \   00006C   F5..         MOV     ?V2,A
   \   00006E   7417         MOV     A,#0x17
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   1460            {
   1461              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   \                     ??CrossCallReturnLabel_298:
   \   000076                ; Setup parameters for call to function sAddrExtCpy
   \   000076   E5..         MOV     A,?V0
   \   000078   240B         ADD     A,#0xb
   \   00007A   FC           MOV     R4,A
   \   00007B   E4           CLR     A
   \   00007C   35..         ADDC    A,?V1
   \   00007E   FD           MOV     R5,A
   \   00007F   EE           MOV     A,R6
   \   000080   FA           MOV     R2,A
   \   000081   EF           MOV     A,R7
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1462              pBuf += Z_EXTADDR_LEN;
   1463          
   1464              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   \   000086   85..82       MOV     DPL,?V0
   \   000089   85..83       MOV     DPH,?V1
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   12....       LCALL   ?Subroutine52 & 0xFFFF
   1465              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   \                     ??CrossCallReturnLabel_81:
   \   000098   85..82       MOV     DPL,?V0
   \   00009B   85..83       MOV     DPH,?V1
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   0000A6   12....       LCALL   ?Subroutine36 & 0xFFFF
   1466              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   \                     ??CrossCallReturnLabel_55:
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   C4           SWAP    A
   \   0000AB   54F0         ANL     A,#0xf0
   \   0000AD   FA           MOV     R2,A
   \   0000AE   8882         MOV     DPL,R0
   \   0000B0   8983         MOV     DPH,R1
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   4A           ORL     A,R2
   \   0000B4   12....       LCALL   ?Subroutine54 & 0xFFFF
   1467              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1468              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   \                     ??CrossCallReturnLabel_86:
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   74FF         MOV     A,#-0x1
   \   0000C0   F0           MOVX    @DPTR,A
   1469          
   1470              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   \   0000C1   EE           MOV     A,R6
   \   0000C2   240C         ADD     A,#0xc
   \   0000C4   F8           MOV     R0,A
   \   0000C5   E4           CLR     A
   \   0000C6   3F           ADDC    A,R7
   \   0000C7   F9           MOV     R1,A
   \   0000C8   EE           MOV     A,R6
   \   0000C9   240B         ADD     A,#0xb
   \   0000CB   FA           MOV     R2,A
   \   0000CC   E4           CLR     A
   \   0000CD   3F           ADDC    A,R7
   \   0000CE   FB           MOV     R3,A
   \   0000CF   85..82       MOV     DPL,?V0
   \   0000D2   85..83       MOV     DPH,?V1
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   64FE         XRL     A,#0xfe
   \   0000DF   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_3
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   0000E4   8A82         MOV     DPL,R2
   \   0000E6   8B83         MOV     DPH,R3
   \   0000E8   6004         JZ      ??ZDP_MgmtNwkDiscRsp_4
   1471              {
   1472                *pBuf++ = TRUE;                         // Permit Joining
   \   0000EA   7401         MOV     A,#0x1
   \   0000EC   8001         SJMP    ??ZDP_MgmtNwkDiscRsp_5
   1473              }
   1474              else
   1475              {
   1476                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   0000EE   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   E8           MOV     A,R0
   \   0000F1   FE           MOV     R6,A
   \   0000F2   E9           MOV     A,R1
   \   0000F3   FF           MOV     R7,A
   1477              }
   1478          
   1479              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   0000F4   E5..         MOV     A,?V0
   \   0000F6   2414         ADD     A,#0x14
   \   0000F8   F582         MOV     DPL,A
   \   0000FA   E4           CLR     A
   \   0000FB   35..         ADDC    A,?V1
   \   0000FD   F583         MOV     DPH,A
   \   0000FF   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   1480            }
   \                     ??CrossCallReturnLabel_299:
   \   000102   15..         DEC     ?V2
   \   000104   E5..         MOV     A,?V2
   \   000106   6003         JZ      $+5
   \   000108   02....       LJMP    ??CrossCallReturnLabel_298 & 0xFFFF
   1481          
   1482            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   00010B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00010E   E5..         MOV     A,?V6
   \   000110   F0           MOVX    @DPTR,A
   \   000111   A3           INC     DPTR
   \   000112   E5..         MOV     A,?V7
   \   000114   F0           MOVX    @DPTR,A
   \   000115                ; Setup parameters for call to function fillAndSend
   \   000115   75..30       MOV     ?V0,#0x30
   \   000118   75..80       MOV     ?V1,#-0x80
   \   00011B   78..         MOV     R0,#?V0
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000120   A9..         MOV     R1,?V3
   \   000122   AC..         MOV     R4,?V10
   \   000124   AD..         MOV     R5,?V11
   \   000126   7402         MOV     A,#0x2
   \   000128   12....       LCALL   ?XSTACK_DISP101_8
   \   00012B   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00012E   7402         MOV     A,#0x2
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   E9           MOV     A,R1
   \   000134   FE           MOV     R6,A
   \   000135                ; Setup parameters for call to function osal_mem_free
   \   000135   AA..         MOV     R2,?V4
   \   000137   AB..         MOV     R3,?V5
   \   000139   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00013C   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00013F                REQUIRE ?Subroutine5
   \   00013F                ; // Fall through to label ?Subroutine5
   1483          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F0C         MOV     R7,#0xc
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2409         ADD     A,#0x9
   \   000004   F8           MOV     R0,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   A4           MUL     AB
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V3,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                REQUIRE ??Subroutine149_0
   \   000005                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   2401         ADD     A,#0x1
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   3400         ADDC    A,#0x0
   \   000006   FB           MOV     R3,A
   \   000007   22           RET
   1484          
   1485          /*********************************************************************
   1486           * @fn          ZDP_MgmtLqiRsp
   1487           *
   1488           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1489           *              function sends a unicast message.
   1490           *
   1491           * @param       dstAddr - destination address of the message
   1492           * @param       Status - message status (ZDP_SUCCESS or other)
   1493           * @param       NeighborLqiEntries - Total number of entries found
   1494           * @param       StartIndex - Starting index within the reporting list
   1495           * @param       NeighborLqiCount - number of lists included
   1496           *                                 in this message
   1497           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1498           *                is the list to be sent, not the entire list
   1499           * @param       SecurityEnable - true if secure
   1500           *
   1501           * @return      ZStatus_t
   1502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1503          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1504                                    byte Status,
   1505                                    byte NeighborLqiEntries,
   1506                                    byte StartIndex,
   1507                                    byte NeighborLqiCount,
   1508                                    ZDP_MgmtLqiItem_t* NeighborList,
   1509                                    byte SecurityEnable )
   1510          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V4,R2
   \   000014   8B..         MOV     ?V5,R3
   \   000016   8D..         MOV     ?V12,R5
   1511            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000018   7424         MOV     A,#0x24
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine76 & 0xFFFF
   1512            uint8 *buf, *pBuf;
   1513            byte len, x;
   1514          
   1515            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1516          
   1517            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_121:
   \   000020   EC           MOV     A,R4
   \   000021   7003         JNZ     $+5
   \   000023   02....       LJMP    ??ZDP_MgmtLqiRsp_0 & 0xFFFF
   1518            {
   1519              ZDP_TmpBuf[0] = Status;
   \   000026   12....       LCALL   ??Subroutine140_0 & 0xFFFF
   1520              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1521            }
   \                     ??CrossCallReturnLabel_286:
   \   000029   EC           MOV     A,R4
   \   00002A   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00002D   12....       LCALL   ?XSTACK_DISP101_8
   \   000030   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000033   740A         MOV     A,#0xa
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   85..82       MOV     DPL,?V4
   \   00003D   85..83       MOV     DPH,?V5
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   C0E0         PUSH    A
   \   00004B   7409         MOV     A,#0x9
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   7401         MOV     A,#0x1
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000061   F5..         MOV     ?V0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   34FF         ADDC    A,#-0x1
   \   000067   F5..         MOV     ?V1,A
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   7401         MOV     A,#0x1
   \   000077   12....       LCALL   ?XSTACK_DISP100_8
   \   00007A   88..         MOV     ?V2,R0
   \   00007C   89..         MOV     ?V3,R1
   \   00007E   78..         MOV     R0,#?V2
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   78..         MOV     R0,#?V0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   75..02       MOV     ?V0,#0x2
   \   00008B   75..00       MOV     ?V1,#0x0
   \   00008E   78..         MOV     R0,#?V0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   75..31       MOV     ?V0,#0x31
   \   000096   75..80       MOV     ?V1,#-0x80
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000A1   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A4   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000A7   7409         MOV     A,#0x9
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AC   02....       LJMP    ??CrossCallReturnLabel_60 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   0000AF   7423         MOV     A,#0x23
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F5..         MOV     ?V11,A
   1522          
   1523            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1524            //  neighbor LQI data.
   1525            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   0000B7   75F016       MOV     B,#0x16
   \   0000BA   A4           MUL     AB
   \   0000BB   2404         ADD     A,#0x4
   \   0000BD   F5..         MOV     ?V9,A
   1526          
   1527            buf = osal_mem_alloc( len+1 );
   \   0000BF                ; Setup parameters for call to function osal_mem_alloc
   \   0000BF   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   0000C2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C5   8A..         MOV     ?V2,R2
   \   0000C7   8B..         MOV     ?V3,R3
   1528            if ( buf == NULL )
   \   0000C9   EA           MOV     A,R2
   \   0000CA   45..         ORL     A,?V3
   \   0000CC   7005         JNZ     ??ZDP_MgmtLqiRsp_1
   1529            {
   1530              return afStatus_MEM_FAIL;
   \   0000CE   7910         MOV     R1,#0x10
   \   0000D0   02....       LJMP    ??CrossCallReturnLabel_60 & 0xFFFF
   1531            }
   1532          
   1533            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   0000D3   8A82         MOV     DPL,R2
   \   0000D5   8B83         MOV     DPH,R3
   \   0000D7   A3           INC     DPTR
   \   0000D8   8582..       MOV     ?V6,DPL
   \   0000DB   8583..       MOV     ?V7,DPH
   \   0000DE   85....       MOV     ?V0,?V6
   \   0000E1   85....       MOV     ?V1,?V7
   1534          
   1535            *pBuf++ = Status;
   \   0000E4   E4           CLR     A
   \   0000E5   F0           MOVX    @DPTR,A
   1536            *pBuf++ = NeighborLqiEntries;
   \   0000E6   A3           INC     DPTR
   \   0000E7   E5..         MOV     A,?V12
   \   0000E9   F0           MOVX    @DPTR,A
   1537            *pBuf++ = StartIndex;
   \   0000EA   7422         MOV     A,#0x22
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   85..82       MOV     DPL,?V0
   \   0000F3   85..83       MOV     DPH,?V1
   \   0000F6   A3           INC     DPTR
   \   0000F7   12....       LCALL   ?Subroutine45 & 0xFFFF
   1538            *pBuf++ = NeighborLqiCount;
   \                     ??CrossCallReturnLabel_74:
   \   0000FA   A3           INC     DPTR
   \   0000FB   E5..         MOV     A,?V11
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   E5..         MOV     A,?V0
   \   000100   2404         ADD     A,#0x4
   \   000102   F5..         MOV     ?V0,A
   \   000104   5002         JNC     ??ZDP_MgmtLqiRsp_2
   \   000106   05..         INC     ?V1
   1539          
   1540            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000108   E5..         MOV     A,?V11
   \   00010A   7003         JNZ     $+5
   \   00010C   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   \   00010F   F5..         MOV     ?V8,A
   1541            {
   1542              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000111                ; Setup parameters for call to function sAddrExtCpy
   \   000111   EE           MOV     A,R6
   \   000112   2402         ADD     A,#0x2
   \   000114   FC           MOV     R4,A
   \   000115   E4           CLR     A
   \   000116   3F           ADDC    A,R7
   \   000117   FD           MOV     R5,A
   \   000118   AA..         MOV     R2,?V0
   \   00011A   AB..         MOV     R3,?V1
   \   00011C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1543              pBuf += Z_EXTADDR_LEN;
   1544          
   1545              // EXTADDR
   1546              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   00011F                ; Setup parameters for call to function sAddrExtCpy
   \   00011F   EE           MOV     A,R6
   \   000120   240A         ADD     A,#0xa
   \   000122   FC           MOV     R4,A
   \   000123   E4           CLR     A
   \   000124   3F           ADDC    A,R7
   \   000125   FD           MOV     R5,A
   \   000126   E5..         MOV     A,?V0
   \   000128   2408         ADD     A,#0x8
   \   00012A   FA           MOV     R2,A
   \   00012B   E4           CLR     A
   \   00012C   35..         ADDC    A,?V1
   \   00012E   FB           MOV     R3,A
   \   00012F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1547          
   1548              // NWKADDR
   1549              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   000132   EE           MOV     A,R6
   \   000133   2412         ADD     A,#0x12
   \   000135   F8           MOV     R0,A
   \   000136   E4           CLR     A
   \   000137   3F           ADDC    A,R7
   \   000138   F9           MOV     R1,A
   \   000139   12....       LCALL   ?Subroutine24 & 0xFFFF
   1550              *pBuf++ = HI_UINT16( list->nwkAddr );
   1551          
   1552              // DEVICETYPE
   1553              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_35:
   \   00013C   F8           MOV     R0,A
   \   00013D   E4           CLR     A
   \   00013E   3B           ADDC    A,R3
   \   00013F   F9           MOV     R1,A
   \   000140   EE           MOV     A,R6
   \   000141   2414         ADD     A,#0x14
   \   000143   F582         MOV     DPL,A
   \   000145   E4           CLR     A
   \   000146   3F           ADDC    A,R7
   \   000147   F583         MOV     DPH,A
   \   000149   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   00014C   F0           MOVX    @DPTR,A
   1554          
   1555              // RXONIDLE
   1556              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   00014D   EE           MOV     A,R6
   \   00014E   2415         ADD     A,#0x15
   \   000150   F582         MOV     DPL,A
   \   000152   E4           CLR     A
   \   000153   3F           ADDC    A,R7
   \   000154   F583         MOV     DPH,A
   \   000156   E0           MOVX    A,@DPTR
   \   000157   33           RLC     A
   \   000158   33           RLC     A
   \   000159   54FC         ANL     A,#0xfc
   \   00015B   FC           MOV     R4,A
   \   00015C   8882         MOV     DPL,R0
   \   00015E   8983         MOV     DPH,R1
   \   000160   E0           MOVX    A,@DPTR
   \   000161   4C           ORL     A,R4
   \   000162   F0           MOVX    @DPTR,A
   1557          
   1558              // RELATIONSHIP
   1559              *pBuf++ |= (uint8)(list->relation << 4);
   \   000163   EE           MOV     A,R6
   \   000164   2416         ADD     A,#0x16
   \   000166   F582         MOV     DPL,A
   \   000168   E4           CLR     A
   \   000169   3F           ADDC    A,R7
   \   00016A   F583         MOV     DPH,A
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   C4           SWAP    A
   \   00016E   54F0         ANL     A,#0xf0
   \   000170   FC           MOV     R4,A
   \   000171   8882         MOV     DPL,R0
   \   000173   8983         MOV     DPH,R1
   \   000175   E0           MOVX    A,@DPTR
   \   000176   4C           ORL     A,R4
   \   000177   F0           MOVX    @DPTR,A
   1560          
   1561              // PERMITJOINING
   1562              *pBuf++ = (uint8)(list->permit);
   \   000178   EE           MOV     A,R6
   \   000179   2417         ADD     A,#0x17
   \   00017B   F582         MOV     DPL,A
   \   00017D   E4           CLR     A
   \   00017E   3F           ADDC    A,R7
   \   00017F   12....       LCALL   ?Subroutine73 & 0xFFFF
   1563          
   1564              // DEPTH
   1565              *pBuf++ = list->depth;
   \                     ??CrossCallReturnLabel_112:
   \   000182   EE           MOV     A,R6
   \   000183   2418         ADD     A,#0x18
   \   000185   F582         MOV     DPL,A
   \   000187   E4           CLR     A
   \   000188   3F           ADDC    A,R7
   \   000189   F583         MOV     DPH,A
   \   00018B   12....       LCALL   ?Subroutine69 & 0xFFFF
   1566          
   1567              // LQI
   1568              *pBuf++ = list->lqi;
   \                     ??CrossCallReturnLabel_105:
   \   00018E   EE           MOV     A,R6
   \   00018F   2419         ADD     A,#0x19
   \   000191   F582         MOV     DPL,A
   \   000193   E4           CLR     A
   \   000194   3F           ADDC    A,R7
   \   000195   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000198   F0           MOVX    @DPTR,A
   \   000199   EA           MOV     A,R2
   \   00019A   2406         ADD     A,#0x6
   \   00019C   F5..         MOV     ?V0,A
   \   00019E   E4           CLR     A
   \   00019F   3B           ADDC    A,R3
   \   0001A0   F5..         MOV     ?V1,A
   1569          
   1570              list++; // next list entry
   \   0001A2   EE           MOV     A,R6
   \   0001A3   241A         ADD     A,#0x1a
   \   0001A5   FE           MOV     R6,A
   \   0001A6   5001         JNC     ??ZDP_MgmtLqiRsp_5
   \   0001A8   0F           INC     R7
   1571            }
   \                     ??ZDP_MgmtLqiRsp_5:
   \   0001A9   15..         DEC     ?V8
   \   0001AB   E5..         MOV     A,?V8
   \   0001AD   6003         JZ      $+5
   \   0001AF   02....       LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1572          
   1573            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \                     ??ZDP_MgmtLqiRsp_3:
   \   0001B2   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001B5   E5..         MOV     A,?V6
   \   0001B7   F0           MOVX    @DPTR,A
   \   0001B8   A3           INC     DPTR
   \   0001B9   E5..         MOV     A,?V7
   \   0001BB   F0           MOVX    @DPTR,A
   \   0001BC                ; Setup parameters for call to function fillAndSend
   \   0001BC   75..31       MOV     ?V0,#0x31
   \   0001BF   75..80       MOV     ?V1,#-0x80
   \   0001C2   78..         MOV     R0,#?V0
   \   0001C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C7   A9..         MOV     R1,?V9
   \   0001C9   AC..         MOV     R4,?V4
   \   0001CB   AD..         MOV     R5,?V5
   \   0001CD   7402         MOV     A,#0x2
   \   0001CF   12....       LCALL   ?XSTACK_DISP101_8
   \   0001D2   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0001D5   7402         MOV     A,#0x2
   \   0001D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001DA   E9           MOV     A,R1
   \   0001DB   FE           MOV     R6,A
   \   0001DC                ; Setup parameters for call to function osal_mem_free
   \   0001DC   AA..         MOV     R2,?V2
   \   0001DE   AB..         MOV     R3,?V3
   \   0001E0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001E3   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0001E6   740D         MOV     A,#0xd
   \   0001E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001EB   7F0D         MOV     R7,#0xd
   \   0001ED   02....       LJMP    ?BANKED_LEAVE_XDATA
   1574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000003   22           RET
   1575          
   1576          /*********************************************************************
   1577           * @fn          ZDP_MgmtRtgRsp
   1578           *
   1579           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1580           *              function sends a unicast message.
   1581           *
   1582           * @param       dstAddr - destination address of the message
   1583           * @param       Status - message status (ZDP_SUCCESS or other)
   1584           * @param       RoutingTableEntries - Total number of entries
   1585           * @param       StartIndex - Starting index within the reporting list
   1586           * @param       RoutingTableListCount - number of entries included
   1587           *                                      in this message
   1588           * @param       RoutingTableList - List of Routing Table entries
   1589           * @param       SecurityEnable - true to enable security for this message
   1590           *
   1591           * @return      ZStatus_t
   1592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1593          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1594                                      byte Status,
   1595                                      byte RoutingTableEntries,
   1596                                      byte StartIndex,
   1597                                      byte RoutingListCount,
   1598                                      rtgItem_t *RoutingTableList,
   1599                                      byte SecurityEnable )
   1600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V4,R2
   \   000014   8B..         MOV     ?V5,R3
   \   000016   8C..         MOV     ?V2,R4
   \   000018   8D..         MOV     ?V0,R5
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V6,A
   1601            uint8 *buf;
   1602            uint8 *pBuf;
   1603            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1604            byte len = 1 + 1 + 1 + 1;
   1605            byte x;
   1606          
   1607            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1608          
   1609            // Add an array for Routing List data
   1610            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000022   75F005       MOV     B,#0x5
   \   000025   12....       LCALL   ?Subroutine82 & 0xFFFF
   1611          
   1612            buf = osal_mem_alloc( (short)(len+1) );
   \                     ??CrossCallReturnLabel_312:
   \   000028   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002B   8A..         MOV     ?V8,R2
   \   00002D   8B..         MOV     ?V9,R3
   \   00002F   AE..         MOV     R6,?V8
   \   000031   AF..         MOV     R7,?V9
   1613            if ( buf == NULL )
   \   000033   EE           MOV     A,R6
   \   000034   4F           ORL     A,R7
   \   000035   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1614            {
   1615              return afStatus_MEM_FAIL;
   \   000037   7910         MOV     R1,#0x10
   \   000039   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1616            }
   1617          
   1618            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   A882         MOV     R0,DPL
   \   000043   A983         MOV     R1,DPH
   \   000045   E8           MOV     A,R0
   \   000046   FA           MOV     R2,A
   \   000047   E9           MOV     A,R1
   \   000048   FB           MOV     R3,A
   1619          
   1620            *pBuf++ = Status;
   \   000049   E5..         MOV     A,?V2
   \   00004B   F0           MOVX    @DPTR,A
   1621            *pBuf++ = RoutingTableEntries;
   \   00004C   A3           INC     DPTR
   \   00004D   E5..         MOV     A,?V0
   \   00004F   F0           MOVX    @DPTR,A
   1622            *pBuf++ = StartIndex;
   \   000050   7413         MOV     A,#0x13
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   12....       LCALL   ?Subroutine78 & 0xFFFF
   1623            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_127:
   \   000058   8A82         MOV     DPL,R2
   \   00005A   8B83         MOV     DPH,R3
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E5..         MOV     A,?V6
   \   000061   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000064   5001         JNC     ??ZDP_MgmtRtgRsp_2
   \   000066   0B           INC     R3
   1624          
   1625            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000067   E5..         MOV     A,?V6
   \   000069   7003         JNZ     $+5
   \   00006B   02....       LJMP    ??ZDP_MgmtRtgRsp_3 & 0xFFFF
   \   00006E   F5..         MOV     ?V1,A
   \   000070   7415         MOV     A,#0x15
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FC           MOV     R4,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FD           MOV     R5,A
   1626            {
   1627              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   00007A   12....       LCALL   ?Subroutine26 & 0xFFFF
   1628              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   1629          
   1630              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_38:
   \   00007D   F5..         MOV     ?V6,A
   \   00007F   E4           CLR     A
   \   000080   3B           ADDC    A,R3
   \   000081   F5..         MOV     ?V7,A
   \   000083   8C82         MOV     DPL,R4
   \   000085   8D83         MOV     DPH,R5
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   5407         ANL     A,#0x7
   \   00008F   85..82       MOV     DPL,?V6
   \   000092   85..83       MOV     DPH,?V7
   \   000095   F0           MOVX    @DPTR,A
   1631              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   000096   EC           MOV     A,R4
   \   000097   2406         ADD     A,#0x6
   \   000099   F582         MOV     DPL,A
   \   00009B   E4           CLR     A
   \   00009C   3D           ADDC    A,R5
   \   00009D   F583         MOV     DPH,A
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   5418         ANL     A,#0x18
   \   0000A2   6029         JZ      ??ZDP_MgmtRtgRsp_5
   1632              {
   1633                uint8 options = 0;
   1634                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   0000A4   75..02       MOV     ?V8,#0x2
   1635          
   1636                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000AA   5003         JNC     ??ZDP_MgmtRtgRsp_6
   1637                {
   1638                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   0000AC   75..06       MOV     ?V8,#0x6
   1639                }
   1640          
   1641                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000AF   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000B1   5007         JNC     ??ZDP_MgmtRtgRsp_7
   1642                {
   1643                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000B3   D3           SETB    C
   \   0000B4   E5..         MOV     A,?V8
   \   0000B6   D2E0         SETB    0xE0 /* A   */.0
   \   0000B8   F5..         MOV     ?V8,A
   1644                }
   1645          
   1646                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000BA   E5..         MOV     A,?V8
   \   0000BC   33           RLC     A
   \   0000BD   33           RLC     A
   \   0000BE   33           RLC     A
   \   0000BF   54F8         ANL     A,#0xf8
   \   0000C1   F5..         MOV     ?V8,A
   \   0000C3   85..82       MOV     DPL,?V6
   \   0000C6   85..83       MOV     DPH,?V7
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   45..         ORL     A,?V8
   \   0000CC   F0           MOVX    @DPTR,A
   1647              }
   1648              pBuf++;
   1649          
   1650              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000CD   EC           MOV     A,R4
   \   0000CE   2402         ADD     A,#0x2
   \   0000D0   F5..         MOV     ?V6,A
   \   0000D2   E4           CLR     A
   \   0000D3   3D           ADDC    A,R5
   \   0000D4   F5..         MOV     ?V7,A
   \   0000D6   85..82       MOV     DPL,?V6
   \   0000D9   12....       LCALL   ?Subroutine73 & 0xFFFF
   1651              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \                     ??CrossCallReturnLabel_113:
   \   0000DC   85..82       MOV     DPL,?V6
   \   0000DF   85..83       MOV     DPH,?V7
   \   0000E2   A3           INC     DPTR
   \   0000E3   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000E6   EA           MOV     A,R2
   \   0000E7   2405         ADD     A,#0x5
   \   0000E9   FA           MOV     R2,A
   \   0000EA   5001         JNC     ??ZDP_MgmtRtgRsp_8
   \   0000EC   0B           INC     R3
   1652              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_8:
   \   0000ED   EC           MOV     A,R4
   \   0000EE   2407         ADD     A,#0x7
   \   0000F0   FC           MOV     R4,A
   \   0000F1   5001         JNC     ??ZDP_MgmtRtgRsp_9
   \   0000F3   0D           INC     R5
   1653            }
   \                     ??ZDP_MgmtRtgRsp_9:
   \   0000F4   15..         DEC     ?V1
   \   0000F6   E5..         MOV     A,?V1
   \   0000F8   7080         JNZ     ??ZDP_MgmtRtgRsp_4
   1654          
   1655            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000FA   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000FD   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000100                ; Setup parameters for call to function fillAndSend
   \   000100   75..32       MOV     ?V6,#0x32
   \   000103   75..80       MOV     ?V7,#-0x80
   \   000106   78..         MOV     R0,#?V6
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   A9..         MOV     R1,?V3
   \   00010D   AC..         MOV     R4,?V4
   \   00010F   AD..         MOV     R5,?V5
   \   000111   7402         MOV     A,#0x2
   \   000113   12....       LCALL   ?XSTACK_DISP101_8
   \   000116   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000119   7402         MOV     A,#0x2
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011E   E9           MOV     A,R1
   \   00011F   F5..         MOV     ?V3,A
   \   000121                ; Setup parameters for call to function osal_mem_free
   \   000121   EE           MOV     A,R6
   \   000122   FA           MOV     R2,A
   \   000123   EF           MOV     A,R7
   \   000124   FB           MOV     R3,A
   \   000125   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000128   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00012B   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   A3           INC     DPTR
   \   00012F   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A9..         MOV     R1,?V3
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000134   02....       LJMP    ?Subroutine4 & 0xFFFF
   1656          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00000E   22           RET
   1657          
   1658          /*********************************************************************
   1659           * @fn          ZDP_MgmtBindRsp
   1660           *
   1661           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1662           *              function sends a unicast message.
   1663           *
   1664           * @param       dstAddr - destination address of the message
   1665           * @param       Status - message status (ZDP_SUCCESS or other)
   1666           * @param       BindingTableEntries - Total number of entries
   1667           * @param       StartIndex - Starting index within the reporting list
   1668           * @param       BindingTableListCount - number of entries included
   1669           *                                 in this message
   1670           * @param       BindingTableList - List of Binding Table entries
   1671           * @param       SecurityEnable - Security Options
   1672           *
   1673           * @return      ZStatus_t
   1674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1675          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1676                                      byte Status,
   1677                                      byte BindingTableEntries,
   1678                                      byte StartIndex,
   1679                                      byte BindingTableListCount,
   1680                                      apsBindingItem_t *BindingTableList,
   1681                                      byte SecurityEnable )
   1682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V10,R2
   \   000014   8B..         MOV     ?V11,R3
   \   000016   8C..         MOV     ?V7,R4
   \   000018   8D..         MOV     ?V6,R5
   \   00001A   7416         MOV     A,#0x16
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FE           MOV     R6,A
   1683            uint8 *buf;
   1684            uint8 *pBuf;
   1685            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1686            uint8 len;    // Actual length varies due to different addrMode
   1687            uint8 x;
   1688            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1689            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1690          
   1691            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1692          
   1693            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1694            maxLen = 1 + 1 + 1 + 1;
   1695            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1696            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   75F015       MOV     B,#0x15
   \   000024   A4           MUL     AB
   \   000025   2404         ADD     A,#0x4
   \   000027   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   00002A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV     ?V2,R2
   \   00002F   8B..         MOV     ?V3,R3
   1697          
   1698            if ( buf == NULL )
   \   000031   EA           MOV     A,R2
   \   000032   45..         ORL     A,?V3
   \   000034   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1699            {
   1700              return afStatus_MEM_FAIL;
   \   000036   7910         MOV     R1,#0x10
   \   000038   02....       LJMP    ??CrossCallReturnLabel_61 & 0xFFFF
   1701            }
   1702          
   1703            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   8B83         MOV     DPH,R3
   \   00003F   A3           INC     DPTR
   \   000040   8582..       MOV     ?V4,DPL
   \   000043   8583..       MOV     ?V5,DPH
   \   000046   AA..         MOV     R2,?V4
   \   000048   AB..         MOV     R3,?V5
   1704          
   1705            *pBuf++ = Status;
   \   00004A   E5..         MOV     A,?V7
   \   00004C   F0           MOVX    @DPTR,A
   1706            *pBuf++ = BindingTableEntries;
   \   00004D   A3           INC     DPTR
   \   00004E   E5..         MOV     A,?V6
   \   000050   F0           MOVX    @DPTR,A
   1707            *pBuf++ = StartIndex;
   \   000051   7415         MOV     A,#0x15
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ?Subroutine72 & 0xFFFF
   1708            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_110:
   \   000059   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00005C   5001         JNC     ??ZDP_MgmtBindRsp_1
   \   00005E   0B           INC     R3
   1709          
   1710            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1711            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1712            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1713            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1714          
   1715            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   00005F   75..04       MOV     ?V0,#0x4
   1716            for ( x = 0; x < BindingTableListCount; x++ )
   \   000062   EE           MOV     A,R6
   \   000063   607B         JZ      ??ZDP_MgmtBindRsp_2
   \   000065   8E..         MOV     ?V1,R6
   \   000067   7417         MOV     A,#0x17
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   12....       LCALL   ?Subroutine76 & 0xFFFF
   1717            {
   1718              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   \                     ??CrossCallReturnLabel_122:
   \   00006F                ; Setup parameters for call to function sAddrExtCpy
   \   00006F   EE           MOV     A,R6
   \   000070   FC           MOV     R4,A
   \   000071   EF           MOV     A,R7
   \   000072   FD           MOV     R5,A
   \   000073   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1719              *pBuf++ = BindingTableList->srcEP;
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000085   12....       LCALL   ?Subroutine52 & 0xFFFF
   1720          
   1721              // Cluster ID
   1722              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   \                     ??CrossCallReturnLabel_82:
   \   000088   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   00008B   12....       LCALL   ?Subroutine51 & 0xFFFF
   1723              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   \                     ??CrossCallReturnLabel_232:
   \   00008E   12....       LCALL   ?Subroutine72 & 0xFFFF
   1724          
   1725              *pBuf++ = BindingTableList->dstAddr.addrMode;
   \                     ??CrossCallReturnLabel_111:
   \   000091   2413         ADD     A,#0x13
   \   000093   F8           MOV     R0,A
   \   000094   E4           CLR     A
   \   000095   3F           ADDC    A,R7
   \   000096   F9           MOV     R1,A
   \   000097   8882         MOV     DPL,R0
   \   000099   8983         MOV     DPH,R1
   \   00009B   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   00009E   5001         JNC     ??ZDP_MgmtBindRsp_3
   \   0000A0   0B           INC     R3
   1726              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   \                     ??ZDP_MgmtBindRsp_3:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   240B         ADD     A,#0xb
   \   0000A4   FC           MOV     R4,A
   \   0000A5   E4           CLR     A
   \   0000A6   3F           ADDC    A,R7
   \   0000A7   FD           MOV     R5,A
   \   0000A8   8882         MOV     DPL,R0
   \   0000AA   8983         MOV     DPH,R1
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   6403         XRL     A,#0x3
   \   0000AF   7015         JNZ     ??ZDP_MgmtBindRsp_4
   1727              {
   1728                len += extZdpBindEntrySize;
   \   0000B1   7415         MOV     A,#0x15
   \   0000B3   25..         ADD     A,?V0
   \   0000B5   F5..         MOV     ?V0,A
   1729                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   \   0000B7                ; Setup parameters for call to function sAddrExtCpy
   \   0000B7   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1730                *pBuf++ = BindingTableList->dstEP;
   \   0000BA   EE           MOV     A,R6
   \   0000BB   2414         ADD     A,#0x14
   \   0000BD   F582         MOV     DPL,A
   \   0000BF   E4           CLR     A
   \   0000C0   3F           ADDC    A,R7
   \   0000C1   12....       LCALL   ?Subroutine35 & 0xFFFF
   1731              }
   \                     ??CrossCallReturnLabel_269:
   \   0000C4   800D         SJMP    ??ZDP_MgmtBindRsp_5
   1732              else
   1733              {
   1734                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_4:
   \   0000C6   740E         MOV     A,#0xe
   \   0000C8   25..         ADD     A,?V0
   \   0000CA   F5..         MOV     ?V0,A
   1735                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   0000CC   12....       LCALL   ?Subroutine26 & 0xFFFF
   1736                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1737              }
   \                     ??CrossCallReturnLabel_39:
   \   0000CF   FA           MOV     R2,A
   \   0000D0   5001         JNC     ??ZDP_MgmtBindRsp_5
   \   0000D2   0B           INC     R3
   1738              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_5:
   \   0000D3   EE           MOV     A,R6
   \   0000D4   2415         ADD     A,#0x15
   \   0000D6   FE           MOV     R6,A
   \   0000D7   5001         JNC     ??ZDP_MgmtBindRsp_6
   \   0000D9   0F           INC     R7
   1739            }
   \                     ??ZDP_MgmtBindRsp_6:
   \   0000DA   15..         DEC     ?V1
   \   0000DC   E5..         MOV     A,?V1
   \   0000DE   708F         JNZ     ??CrossCallReturnLabel_122
   1740          
   1741            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_2:
   \   0000E0   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000E3   E5..         MOV     A,?V4
   \   0000E5   F0           MOVX    @DPTR,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E5..         MOV     A,?V5
   \   0000E9   F0           MOVX    @DPTR,A
   \   0000EA                ; Setup parameters for call to function fillAndSend
   \   0000EA   75..33       MOV     ?V4,#0x33
   \   0000ED   75..80       MOV     ?V5,#-0x80
   \   0000F0   78..         MOV     R0,#?V4
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   A9..         MOV     R1,?V0
   \   0000F7   AC..         MOV     R4,?V10
   \   0000F9   AD..         MOV     R5,?V11
   \   0000FB   7402         MOV     A,#0x2
   \   0000FD   12....       LCALL   ?XSTACK_DISP101_8
   \   000100   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000103   7402         MOV     A,#0x2
   \   000105   12....       LCALL   ?DEALLOC_XSTACK8
   \   000108   E9           MOV     A,R1
   \   000109   FE           MOV     R6,A
   \   00010A                ; Setup parameters for call to function osal_mem_free
   \   00010A   AA..         MOV     R2,?V2
   \   00010C   AB..         MOV     R3,?V3
   \   00010E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000111   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000114   02....       LJMP    ?Subroutine5 & 0xFFFF
   1742          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET
   1743          
   1744          /*********************************************************************
   1745           * @fn          ZDP_MgmtNwkUpdateNotify
   1746           *
   1747           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1748           *              function sends a unicast message.
   1749           *
   1750           * @param       dstAddr - destination address of the message
   1751           * @param       status - message status (ZDP_SUCCESS or other)
   1752           * @param       scannedChannels - List of channels scanned by the request
   1753           * @param       totalTransmissions - Total transmissions
   1754           * @param       transmissionFailures - Sum of transmission failures
   1755           * @param       listCount - Number of records contained in the energyValues list
   1756           * @param       energyValues - List of descriptors, one for each of ListCount,
   1757           *                             of the enegry detect descriptors
   1758           * @param       txOptions - Transmit options
   1759           * @param       securityEnable - Security options
   1760           *
   1761           * @return      afStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1764                                              uint8 status, uint32 scannedChannels,
   1765                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1766                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1767                                              uint8 securityEnable )
   1768          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V8,R2
   \   000014   8B..         MOV     ?V9,R3
   \   000016   8C..         MOV     ?V7,R4
   \   000018   8D..         MOV     ?V0,R5
   1769            uint8 *buf;
   1770            uint8 *pBuf;
   1771            uint8 len;
   1772          
   1773            (void)securityEnable;  // Intentionally unreferenced parameter
   1774          
   1775            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1776            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV     A,#0xa
   \   00001C   2D           ADD     A,R5
   \   00001D   F5..         MOV     ?V1,A
   1777          
   1778            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000022   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV     ?V2,R2
   \   000027   8B..         MOV     ?V3,R3
   \   000029   AE..         MOV     R6,?V2
   \   00002B   AF..         MOV     R7,?V3
   1779            if ( buf == NULL )
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1780            {
   1781              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1782            }
   1783          
   1784            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   8582..       MOV     ?V2,DPL
   \   00003E   8583..       MOV     ?V3,DPH
   1785          
   1786            *pBuf++ = status;
   \   000041   E5..         MOV     A,?V7
   \   000043   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   1787          
   1788            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_267:
   \   000046                ; Setup parameters for call to function osal_buffer_uint32
   \   000046   7413         MOV     A,#0x13
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004E   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   7417         MOV     A,#0x17
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   1789          
   1790            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_243:
   \   00005E   8A82         MOV     DPL,R2
   \   000060   8B83         MOV     DPH,R3
   \   000062   F0           MOVX    @DPTR,A
   1791            *pBuf++ = HI_UINT16( totalTransmissions );
   \   000063   E9           MOV     A,R1
   \   000064   A3           INC     DPTR
   \   000065   F0           MOVX    @DPTR,A
   \   000066   7419         MOV     A,#0x19
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ?Subroutine49 & 0xFFFF
   1792          
   1793            *pBuf++ = LO_UINT16( transmissionFailures );
   1794            *pBuf++ = HI_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_78:
   \   00006E   12....       LCALL   ?Subroutine29 & 0xFFFF
   1795          
   1796            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_42:
   \   000071   E5..         MOV     A,?V0
   \   000073   F0           MOVX    @DPTR,A
   1797          
   1798            if ( listCount > 0 )
   \   000074   601E         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1799              osal_memcpy( pBuf, energyValues, listCount );
   \   000076                ; Setup parameters for call to function osal_memcpy
   \   000076   741B         MOV     A,#0x1b
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000081   AC..         MOV     R4,?V0
   \   000083   7D00         MOV     R5,#0x0
   \   000085   EA           MOV     A,R2
   \   000086   2405         ADD     A,#0x5
   \   000088   FA           MOV     R2,A
   \   000089   5001         JNC     ??ZDP_MgmtNwkUpdateNotify_3
   \   00008B   0B           INC     R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   00008C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008F   7403         MOV     A,#0x3
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   1800          
   1801            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000094   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000097   E5..         MOV     A,?V2
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   E5..         MOV     A,?V3
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   741D         MOV     A,#0x1d
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8                ; Setup parameters for call to function fillAndSend
   \   0000A8   75..38       MOV     ?V2,#0x38
   \   0000AB   75..80       MOV     ?V3,#-0x80
   \   0000AE   78..         MOV     R0,#?V2
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   A9..         MOV     R1,?V1
   \   0000B5   AC..         MOV     R4,?V8
   \   0000B7   AD..         MOV     R5,?V9
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   12....       LCALL   ?XSTACK_DISP101_8
   \   0000BE   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000C1   7402         MOV     A,#0x2
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C6   E9           MOV     A,R1
   \   0000C7   F5..         MOV     ?V1,A
   \   0000C9                ; Setup parameters for call to function osal_mem_free
   \   0000C9   EE           MOV     A,R6
   \   0000CA   FA           MOV     R2,A
   \   0000CB   EF           MOV     A,R7
   \   0000CC   FB           MOV     R3,A
   \   0000CD   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D0   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000D3   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000DD   E4           CLR     A
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF   A9..         MOV     R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000E1   02....       LJMP    ?Subroutine4 & 0xFFFF
   1802          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   1803          
   1804          /*********************************************************************
   1805           * Functions to register for ZDO Over-the-air messages
   1806           */
   1807          
   1808          /*********************************************************************
   1809           * @fn          ZDO_RegisterForZDOMsg
   1810           *
   1811           * @brief       Call this function to register of an incoming over
   1812           *              the air ZDO message - probably a response message
   1813           *              but requests can also be received.
   1814           *              Messages are delivered to the task with ZDO_CB_MSG
   1815           *              as the message ID.
   1816           *
   1817           * @param       taskID - Where you would like the message delivered
   1818           * @param       clusterID - What message?
   1819           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1820           *                          and device announce
   1821           *
   1822           * @return      ZSuccess - successful, ZMemError if not
   1823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1824          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1825          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   1826            ZDO_MsgCB_t *pList;
   1827            ZDO_MsgCB_t *pLast;
   1828            ZDO_MsgCB_t *pNew;
   1829          
   1830            // Look for duplicate
   1831            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000011   EE           MOV     A,R6
   \   000012   F8           MOV     R0,A
   \   000013   EF           MOV     A,R7
   \   000014   8028         SJMP    ??CrossCallReturnLabel_339
   1832            while ( pList )
   1833            {
   1834              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   65..         XRL     A,?V2
   \   00001F   7012         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   65..         XRL     A,?V0
   \   00002B   7004         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   65..         XRL     A,?V1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000031   604E         JZ      ??CrossCallReturnLabel_68
   1835                return ( ZSuccess );
   1836              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   1837              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   1838            }
   \                     ??CrossCallReturnLabel_339:
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   70D3         JNZ     ??ZDO_RegisterForZDOMsg_0
   1839          
   1840            // Add to the list
   1841            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A05         MOV     R2,#0x5
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV     ?V4,R2
   \   00004C   8B..         MOV     ?V5,R3
   \   00004E   A8..         MOV     R0,?V4
   \   000050   A9..         MOV     R1,?V5
   1842            if ( pNew )
   \   000052   E8           MOV     A,R0
   \   000053   49           ORL     A,R1
   \   000054   602F         JZ      ??ZDO_RegisterForZDOMsg_3
   1843            {
   1844              pNew->taskID = taskID;
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V2
   \   00005E   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   1845              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_237:
   \   000061   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   1846              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_195:
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   E4           CLR     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   F0           MOVX    @DPTR,A
   1847              if ( zdoMsgCBs )
   \   00006C   90....       MOV     DPTR,#zdoMsgCBs
   \   00006F   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000072   4B           ORL     A,R3
   \   000073   6006         JZ      ??ZDO_RegisterForZDOMsg_4
   1848              {
   1849                pLast->next = pNew;
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   8003         SJMP    ??ZDO_RegisterForZDOMsg_5
   1850              }
   1851              else
   1852                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   00007B   90....       MOV     DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   00007E   12....       LCALL   ?Subroutine43 & 0xFFFF
   1853              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_68:
   \   000081   7900         MOV     R1,#0x0
   \   000083   8002         SJMP    ??ZDO_RegisterForZDOMsg_6
   1854            }
   1855            else
   1856              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000085   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   000087   02....       LJMP    ??Subroutine144_0 & 0xFFFF
   1857          }
   1858          
   1859          /*********************************************************************
   1860           * @fn          ZDO_RemoveRegisteredCB
   1861           *
   1862           * @brief       Call this function if you don't want to receive the
   1863           *              incoming message.
   1864           *
   1865           * @param       taskID - Where the messages are being delivered.
   1866           * @param       clusterID - What message?
   1867           *
   1868           * @return      ZSuccess - successful, ZFailure if not found
   1869           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1870          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1871          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1872            ZDO_MsgCB_t *pList;
   1873            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1874          
   1875            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1876            while ( pList )
   1877            {
   1878              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1879              {
   1880                if ( pLast )
   1881                {
   1882                  // remove this one from the linked list
   1883                  pLast->next = pList->next;
   1884                }
   1885                else if ( pList->next )
   1886                {
   1887                  // remove the first one from the linked list
   1888                  zdoMsgCBs = pList->next;
   1889                }
   1890                else
   1891                {
   1892                  // remove the only item from the list
   1893                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1894                }
   1895                osal_mem_free( pList );
   1896                return ( ZSuccess );
   1897              }
   1898              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1899              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00001B   6047         JZ      ??ZDO_RemoveRegisteredCB_2
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6E           XRL     A,R6
   \   000025   70E9         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000027   8882         MOV     DPL,R0
   \   000029   8983         MOV     DPH,R1
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6A           XRL     A,R2
   \   000030   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000035   70D9         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   00003E   EC           MOV     A,R4
   \   00003F   4D           ORL     A,R5
   \   000040   6006         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000042   8C82         MOV     DPL,R4
   \   000044   8D83         MOV     DPH,R5
   \   000046   8007         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000048   EA           MOV     A,R2
   \   000049   4B           ORL     A,R3
   \   00004A   90....       MOV     DPTR,#zdoMsgCBs
   \   00004D   6006         JZ      ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   00004F   EA           MOV     A,R2
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   EB           MOV     A,R3
   \   000053   8003         SJMP    ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000055   E4           CLR     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000058   F0           MOVX    @DPTR,A
   \   000059                ; Setup parameters for call to function osal_mem_free
   \   000059   E8           MOV     A,R0
   \   00005A   FA           MOV     R2,A
   \   00005B   E9           MOV     A,R1
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000060   7900         MOV     R1,#0x0
   \   000062   8002         SJMP    ??ZDO_RemoveRegisteredCB_8
   1900            }
   1901          
   1902            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000064   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000066   7F01         MOV     R7,#0x1
   \   000068   02....       LJMP    ?BANKED_LEAVE_XDATA
   1903          }
   1904          
   1905          /*********************************************************************
   1906           * @fn          ZDO_SendMsgCBs
   1907           *
   1908           * @brief       This function sends messages to registered tasks.
   1909           *              Local to ZDO and shouldn't be called outside of ZDO.
   1910           *
   1911           * @param       inMsg - incoming message
   1912           *
   1913           * @return      TRUE if sent to at least 1 task, FALSE if not
   1914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1915          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1916          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   1917            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V3,#0x0
   1918            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000012   EA           MOV     A,R2
   \   000013   2413         ADD     A,#0x13
   \   000015   F5..         MOV     ?V14,A
   \   000017   E4           CLR     A
   \   000018   35..         ADDC    A,?V7
   \   00001A   F5..         MOV     ?V15,A
   \   00001C   8A..         MOV     ?V0,R2
   \   00001E   8B..         MOV     ?V1,R3
   \   000020   75..00       MOV     ?V2,#0x0
   \   000023   EA           MOV     A,R2
   \   000024   2410         ADD     A,#0x10
   \   000026   F5..         MOV     ?V12,A
   \   000028   E4           CLR     A
   \   000029   35..         ADDC    A,?V7
   \   00002B   F5..         MOV     ?V13,A
   \   00002D   02....       LJMP    ??CrossCallReturnLabel_155 & 0xFFFF
   1919            while ( pList )
   1920            {
   1921              if ( (pList->clusterID == inMsg->clusterID)
   1922                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   1923                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_0:
   \   000030   E5..         MOV     A,?V6
   \   000032   240C         ADD     A,#0xc
   \   000034   F582         MOV     DPL,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V7
   \   000039   F583         MOV     DPH,A
   \   00003B   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00003E   85..82       MOV     DPL,?V4
   \   000041   85..83       MOV     DPH,?V5
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00004A   E8           MOV     A,R0
   \   00004B   6A           XRL     A,R2
   \   00004C   7002         JNZ     ??ZDO_SendMsgCBs_1
   \   00004E   E9           MOV     A,R1
   \   00004F   6B           XRL     A,R3
   \                     ??ZDO_SendMsgCBs_1:
   \   000050   601B         JZ      ??ZDO_SendMsgCBs_2
   \   000052   74FF         MOV     A,#-0x1
   \   000054   6A           XRL     A,R2
   \   000055   7003         JNZ     ??ZDO_SendMsgCBs_3
   \   000057   74FF         MOV     A,#-0x1
   \   000059   6B           XRL     A,R3
   \                     ??ZDO_SendMsgCBs_3:
   \   00005A   6003         JZ      $+5
   \   00005C   02....       LJMP    ??ZDO_SendMsgCBs_4 & 0xFFFF
   \   00005F   E9           MOV     A,R1
   \   000060   5480         ANL     A,#0x80
   \   000062   7009         JNZ     ??ZDO_SendMsgCBs_2
   \   000064   7413         MOV     A,#0x13
   \   000066   68           XRL     A,R0
   \   000067   49           ORL     A,R1
   \   000068   6003         JZ      $+5
   \   00006A   02....       LJMP    ??ZDO_SendMsgCBs_4 & 0xFFFF
   1924              {
   1925                zdoIncomingMsg_t *msgPtr;
   1926          
   1927                // Send the address to the task
   1928                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_2:
   \   00006D                ; Setup parameters for call to function osal_msg_allocate
   \   00006D   85..82       MOV     DPL,?V12
   \   000070   85..83       MOV     DPH,?V13
   \   000073   E0           MOVX    A,@DPTR
   \   000074   2417         ADD     A,#0x17
   \   000076   FA           MOV     R2,A
   \   000077   E4           CLR     A
   \   000078   3400         ADDC    A,#0x0
   \   00007A   FB           MOV     R3,A
   \   00007B   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00007E   8A..         MOV     ?V8,R2
   \   000080   8B..         MOV     ?V9,R3
   \   000082   AE..         MOV     R6,?V8
   \   000084   AF..         MOV     R7,?V9
   1929                if ( msgPtr )
   \   000086   EE           MOV     A,R6
   \   000087   4F           ORL     A,R7
   \   000088   6071         JZ      ??ZDO_SendMsgCBs_4
   1930                {
   1931                  // copy struct
   1932                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   00008A                ; Setup parameters for call to function osal_memcpy
   \   00008A   78..         MOV     R0,#?V0
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008F   7C17         MOV     R4,#0x17
   \   000091   7D00         MOV     R5,#0x0
   \   000093   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000096   7403         MOV     A,#0x3
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   1933          
   1934                  if ( inMsg->asduLen )
   \   00009B   85..82       MOV     DPL,?V12
   \   00009E   85..83       MOV     DPH,?V13
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   603C         JZ      ??ZDO_SendMsgCBs_5
   1935                  {
   1936                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   0000A4   EE           MOV     A,R6
   \   0000A5   2417         ADD     A,#0x17
   \   0000A7   FA           MOV     R2,A
   \   0000A8   E4           CLR     A
   \   0000A9   3F           ADDC    A,R7
   \   0000AA   FB           MOV     R3,A
   \   0000AB   EE           MOV     A,R6
   \   0000AC   2413         ADD     A,#0x13
   \   0000AE   F582         MOV     DPL,A
   \   0000B0   E4           CLR     A
   \   0000B1   3F           ADDC    A,R7
   \   0000B2   F583         MOV     DPH,A
   \   0000B4   EA           MOV     A,R2
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   EB           MOV     A,R3
   \   0000B8   F0           MOVX    @DPTR,A
   1937                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000B9                ; Setup parameters for call to function osal_memcpy
   \   0000B9   85..82       MOV     DPL,?V14
   \   0000BC   85..83       MOV     DPH,?V15
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F5..         MOV     ?V8,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F5..         MOV     ?V9,A
   \   0000C6   75..00       MOV     ?V10,#0x0
   \   0000C9   78..         MOV     R0,#?V8
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CE   85..82       MOV     DPL,?V12
   \   0000D1   85..83       MOV     DPH,?V13
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FC           MOV     R4,A
   \   0000D6   7D00         MOV     R5,#0x0
   \   0000D8   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000DB   7403         MOV     A,#0x3
   \   0000DD   12....       LCALL   ?DEALLOC_XSTACK8
   1938                  }
   1939          
   1940                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   74D3         MOV     A,#-0x2d
   \   0000E6   F0           MOVX    @DPTR,A
   1941                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000E7                ; Setup parameters for call to function osal_msg_send
   \   0000E7   EE           MOV     A,R6
   \   0000E8   FA           MOV     R2,A
   \   0000E9   EF           MOV     A,R7
   \   0000EA   FB           MOV     R3,A
   \   0000EB   85..82       MOV     DPL,?V4
   \   0000EE   85..83       MOV     DPH,?V5
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F9           MOV     R1,A
   \   0000F5   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1942                  ret = TRUE;
   \   0000F8   75..01       MOV     ?V3,#0x1
   1943                }
   1944              }
   1945              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000FB   85..82       MOV     DPL,?V4
   \   0000FE   85..83       MOV     DPH,?V5
   \   000101   12....       LCALL   ?Subroutine95 & 0xFFFF
   1946            }
   \                     ??CrossCallReturnLabel_155:
   \   000104   E5..         MOV     A,?V4
   \   000106   45..         ORL     A,?V5
   \   000108   6003         JZ      $+5
   \   00010A   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1947            return ( ret );
   \   00010D   A9..         MOV     R1,?V3
   \   00010F   7F10         MOV     R7,#0x10
   \   000111   02....       LJMP    ?BANKED_LEAVE_XDATA
   1948          }
   1949          
   1950          /*********************************************************************
   1951           * Incoming message processor
   1952           */
   1953          
   1954          /*********************************************************************
   1955           * @fn          ZDP_IncomingData
   1956           *
   1957           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1958           *              from the APS sub-layer to the ZDO.
   1959           *
   1960           * @param       pData - Incoming Message
   1961           *
   1962           * @return      none
   1963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1964          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1965          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1966            uint8 x = 0;
   \   00000A   7E00         MOV     R6,#0x0
   1967            uint8 handled;
   1968            zdoIncomingMsg_t inMsg;
   1969          
   1970            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV     A,#0xa
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?Subroutine29 & 0xFFFF
   1971            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_43:
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine43 & 0xFFFF
   1972            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_69:
   \   000023   EA           MOV     A,R2
   \   000024   2415         ADD     A,#0x15
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3B           ADDC    A,R3
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C0E0         PUSH    A
   \   00002F   740B         MOV     A,#0xb
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   12....       LCALL   ?Subroutine29 & 0xFFFF
   1973            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_44:
   \   000039   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   00003C   740C         MOV     A,#0xc
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine43 & 0xFFFF
   1974            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_70:
   \   000044   EA           MOV     A,R2
   \   000045   2419         ADD     A,#0x19
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   3B           ADDC    A,R3
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C0E0         PUSH    A
   \   000050   740E         MOV     A,#0xe
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   1975          
   1976            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV     A,R2
   \   000059   2420         ADD     A,#0x20
   \   00005B   F582         MOV     DPL,A
   \   00005D   E4           CLR     A
   \   00005E   3B           ADDC    A,R3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   14           DEC     A
   \   000063   C0E0         PUSH    A
   \   000065   7410         MOV     A,#0x10
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   1977            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV     A,R2
   \   00006E   2422         ADD     A,#0x22
   \   000070   F8           MOV     R0,A
   \   000071   E4           CLR     A
   \   000072   3B           ADDC    A,R3
   \   000073   F9           MOV     R1,A
   \   000074   8882         MOV     DPL,R0
   \   000076   8983         MOV     DPH,R1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   2401         ADD     A,#0x1
   \   00007B   FC           MOV     R4,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   3400         ADDC    A,#0x0
   \   000080   FD           MOV     R5,A
   \   000081   7413         MOV     A,#0x13
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   EC           MOV     A,R4
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   ED           MOV     A,R5
   \   00008A   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   1978            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_249:
   \   00008D   12....       LCALL   ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C0E0         PUSH    A
   \   000093   740F         MOV     A,#0xf
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   D0E0         POP     A
   \   00009A   F0           MOVX    @DPTR,A
   1979            inMsg.macDestAddr = pData->macDestAddr;
   \   00009B   EA           MOV     A,R2
   \   00009C   2412         ADD     A,#0x12
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3B           ADDC    A,R3
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   0000A7   7411         MOV     A,#0x11
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ?Subroutine43 & 0xFFFF
   1980            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_71:
   \   0000AF   EA           MOV     A,R2
   \   0000B0   2424         ADD     A,#0x24
   \   0000B2   F582         MOV     DPL,A
   \   0000B4   E4           CLR     A
   \   0000B5   3B           ADDC    A,R3
   \   0000B6   F583         MOV     DPH,A
   \   0000B8   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   0000BB   7415         MOV     A,#0x15
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ?Subroutine43 & 0xFFFF
   1981          
   1982            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_72:
   \   0000C3                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000C3   AA..         MOV     R2,?XSP + 0
   \   0000C5   AB..         MOV     R3,?XSP + 1
   \   0000C7   12....       LCALL   `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000CA   E9           MOV     A,R1
   \   0000CB   FC           MOV     R4,A
   \   0000CC   740C         MOV     A,#0xc
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   0000D4   8001         SJMP    ??ZDP_IncomingData_0
   1983          
   1984          #if (defined MT_ZDO_CB_FUNC)
   1985          #if !defined MT_TASK
   1986            if (zgZdoDirectCB)
   1987          #endif
   1988            {
   1989              MT_ZdoDirectCB( pData, &inMsg );
   1990            }
   1991          #endif
   1992          
   1993            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1994            {
   1995              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1996              {
   1997                zdpMsgProcs[x].pFn( &inMsg );
   1998                return;
   1999              }
   2000              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000D6   0E           INC     R6
   \                     ??ZDP_IncomingData_0:
   \   0000D7   8E..         MOV     ?V2,R6
   \   0000D9   75..00       MOV     ?V3,#0x0
   \   0000DC   7402         MOV     A,#0x2
   \   0000DE   78..         MOV     R0,#?V2
   \   0000E0   12....       LCALL   ?S_SHL
   \   0000E3   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000E5   25..         ADD     A,?V2
   \   0000E7   F8           MOV     R0,A
   \   0000E8   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   0000EA   35..         ADDC    A,?V3
   \   0000EC   F9           MOV     R1,A
   \   0000ED   8882         MOV     DPL,R0
   \   0000EF   8983         MOV     DPH,R1
   \   0000F1   E4           CLR     A
   \   0000F2   93           MOVC    A,@A+DPTR
   \   0000F3   C0E0         PUSH    A
   \   0000F5   7401         MOV     A,#0x1
   \   0000F7   93           MOVC    A,@A+DPTR
   \   0000F8   F583         MOV     DPH,A
   \   0000FA   D082         POP     DPL
   \   0000FC   AA82         MOV     R2,DPL
   \   0000FE   AB83         MOV     R3,DPH
   \   000100   74FF         MOV     A,#-0x1
   \   000102   6A           XRL     A,R2
   \   000103   7003         JNZ     ??ZDP_IncomingData_2
   \   000105   74FF         MOV     A,#-0x1
   \   000107   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_2:
   \   000108   6024         JZ      ??ZDP_IncomingData_3
   \   00010A   E5..         MOV     A,?V0
   \   00010C   6A           XRL     A,R2
   \   00010D   7003         JNZ     ??ZDP_IncomingData_4
   \   00010F   E5..         MOV     A,?V1
   \   000111   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_4:
   \   000112   70C2         JNZ     ??ZDP_IncomingData_1
   \   000114                ; Setup parameters for indirect call
   \   000114   AA..         MOV     R2,?XSP + 0
   \   000116   AB..         MOV     R3,?XSP + 1
   \   000118   8882         MOV     DPL,R0
   \   00011A   8983         MOV     DPH,R1
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   E4           CLR     A
   \   00011F   93           MOVC    A,@A+DPTR
   \   000120   C0E0         PUSH    A
   \   000122   7401         MOV     A,#0x1
   \   000124   93           MOVC    A,@A+DPTR
   \   000125   F583         MOV     DPH,A
   \   000127   D082         POP     DPL
   \   000129   12....       LCALL   ?CALL_IND
   \   00012C   800A         SJMP    ??ZDP_IncomingData_5
   2001            }
   2002          
   2003            // Handle unhandled messages
   2004            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00012E   EC           MOV     A,R4
   \   00012F   7007         JNZ     ??ZDP_IncomingData_5
   2005              ZDApp_InMsgCB( &inMsg );
   \   000131                ; Setup parameters for call to function ZDApp_InMsgCB
   \   000131   AA..         MOV     R2,?XSP + 0
   \   000133   AB..         MOV     R3,?XSP + 1
   \   000135   12....       LCALL   `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2006          }
   \                     ??ZDP_IncomingData_5:
   \   000138   7417         MOV     A,#0x17
   \   00013A   02....       LJMP    ??Subroutine139_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fillAndSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NWKAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NwkAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IEEEAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_DeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceTimeoutReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdpProcessAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NodeDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_PowerDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EPRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_GenericRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_BindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2007          
   2008          /*********************************************************************
   2009          *********************************************************************/
   2010          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     62   ZDO_SendMsgCBs
        0     27   -> osal_memcpy
        0     24   -> osal_msg_allocate
        0     24   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
        1     18   -> sAddrExtCpy
      1     34   ZDP_DeviceAnnce
        0     33   -> AF_DataRequest
        0     24   -> osal_memset
        0     24   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     33   ZDP_EndDeviceTimeoutReq
        0     33   -> AF_DataRequest
        0     24   -> osal_memset
        0     24   -> sAddrExtCpy
      1     40   ZDP_GenericRsp
        0     36   -> AF_DataRequest
        0     27   -> osal_memset
      1     35   ZDP_IEEEAddrReq
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     35   ZDP_IncomingData
        0     35   -> ZDApp_InMsgCB
        0     35   -> ZDO_SendMsgCBs
      1     44   ZDP_MatchDescReq
        0     36   -> AF_DataRequest
        0     27   -> osal_memset
      1     28   ZDP_MgmtBindRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     21   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     37   ZDP_MgmtLeaveReq
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
        0     26   -> sAddrExtCpy
      1     48   ZDP_MgmtLqiRsp
        0     43   -> AF_DataRequest
        0     36   -> fillAndSend
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
        0     34   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     28   ZDP_MgmtNwkDiscRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     21   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     35   ZDP_MgmtPermitJoinReq
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     26   ZDP_MgmtRtgRsp
        0     21   -> fillAndSend
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      1     36   ZDP_NWKAddrOfInterestReq
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     36   ZDP_NodeDescMsg
        0     34   -> AF_DataRequest
        0     25   -> osal_memset
      1     44   ZDP_NwkAddrReq
        0     44   -> AF_DataRequest
        0     35   -> osal_memset
        0     35   -> sAddrExtCmp
        0     35   -> sAddrExtCpy
      1     36   ZDP_PowerDescMsg
        0     34   -> AF_DataRequest
        0     25   -> osal_memset
      1     41   ZDP_SendData
        0     36   -> AF_DataRequest
        0     27   -> osal_memset
      1     33   ZDP_ServerDiscReq
        0     33   -> AF_DataRequest
        0     24   -> osal_memset
      1     40   ZDP_ServerDiscRsp
        0     36   -> AF_DataRequest
        0     27   -> osal_memset
      1     39   ZDP_SimpleDescMsg
        0     39   -> AF_DataRequest
        0     30   -> osal_memset
      1     36   ZDP_SimpleDescReq
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     20   ZDP_UserDescSet
        0     17   -> fillAndSend
        0     18   -> osal_memcpy
        0     15   -> osal_memset
      1     73   fillAndSend
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     38   zdpProcessAddrReq
        0     36   -> AddrMgrEntryGet
        0     36   -> AssocGetWithExt
        0     36   -> AssocGetWithShort
        0     36   -> AssocMakeList
        0     38   -> fillAndSend
        0     36   -> osal_mem_free
        0     36   -> sAddrExtCmp
        0     36   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       8  ??Subroutine119_0
      10  ??Subroutine120_0
       8  ??Subroutine121_0
       8  ??Subroutine122_0
      18  ??Subroutine123_0
      12  ??Subroutine124_0
       6  ??Subroutine125_0
       4  ??Subroutine126_0
       6  ??Subroutine127_0
       5  ??Subroutine128_0
       7  ??Subroutine129_0
       3  ??Subroutine130_0
       6  ??Subroutine131_0
       7  ??Subroutine132_0
       7  ??Subroutine133_0
       3  ??Subroutine134_0
       5  ??Subroutine135_0
       5  ??Subroutine136_0
       4  ??Subroutine137_0
       2  ??Subroutine138_0
       8  ??Subroutine139_0
       4  ??Subroutine140_0
       8  ??Subroutine141_0
      16  ??Subroutine142_0
       3  ??Subroutine143_0
       5  ??Subroutine144_0
       8  ??Subroutine145_0
       6  ??Subroutine146_0
       7  ??Subroutine147_0
       6  ??Subroutine148_0
       8  ??Subroutine149_0
       5  ??Subroutine150_0
       3  ??Subroutine151_0
       4  ??Subroutine152_0
       5  ?Subroutine0
       2  ?Subroutine1
       4  ?Subroutine10
       5  ?Subroutine100
       4  ?Subroutine101
       6  ?Subroutine102
       4  ?Subroutine103
      11  ?Subroutine104
       7  ?Subroutine105
      10  ?Subroutine106
       7  ?Subroutine107
       9  ?Subroutine108
      22  ?Subroutine109
      15  ?Subroutine11
       8  ?Subroutine110
       9  ?Subroutine111
       9  ?Subroutine112
       7  ?Subroutine113
       5  ?Subroutine114
       6  ?Subroutine115
       8  ?Subroutine116
       6  ?Subroutine117
       3  ?Subroutine118
       2  ?Subroutine12
      13  ?Subroutine13
      18  ?Subroutine14
      22  ?Subroutine15
      11  ?Subroutine16
       4  ?Subroutine17
      32  ?Subroutine18
      28  ?Subroutine19
      19  ?Subroutine2
       8  ?Subroutine20
      17  ?Subroutine21
      13  ?Subroutine22
      22  ?Subroutine23
      15  ?Subroutine24
      10  ?Subroutine25
      15  ?Subroutine26
       6  ?Subroutine27
       2  ?Subroutine28
      10  ?Subroutine29
      32  ?Subroutine3
       9  ?Subroutine30
      21  ?Subroutine31
       4  ?Subroutine32
      19  ?Subroutine33
       6  ?Subroutine34
       5  ?Subroutine35
       7  ?Subroutine36
       6  ?Subroutine37
      13  ?Subroutine38
      11  ?Subroutine39
       2  ?Subroutine4
       5  ?Subroutine40
       8  ?Subroutine41
       2  ?Subroutine42
       6  ?Subroutine43
       4  ?Subroutine44
       5  ?Subroutine45
       1  ?Subroutine46
       2  ?Subroutine47
      10  ?Subroutine48
       9  ?Subroutine49
      10  ?Subroutine5
       6  ?Subroutine50
       1  ?Subroutine51
       9  ?Subroutine52
       9  ?Subroutine53
       4  ?Subroutine54
       6  ?Subroutine55
       8  ?Subroutine56
       3  ?Subroutine57
       7  ?Subroutine58
       9  ?Subroutine59
       8  ?Subroutine6
       9  ?Subroutine60
       6  ?Subroutine61
       9  ?Subroutine62
       4  ?Subroutine63
       9  ?Subroutine64
       6  ?Subroutine65
       3  ?Subroutine66
       2  ?Subroutine67
       6  ?Subroutine68
       6  ?Subroutine69
       5  ?Subroutine7
       7  ?Subroutine70
       6  ?Subroutine71
       5  ?Subroutine72
       7  ?Subroutine73
       4  ?Subroutine74
       7  ?Subroutine75
       6  ?Subroutine76
       4  ?Subroutine77
       4  ?Subroutine78
       4  ?Subroutine79
      15  ?Subroutine8
       4  ?Subroutine80
      12  ?Subroutine81
       5  ?Subroutine82
      11  ?Subroutine83
      12  ?Subroutine84
      15  ?Subroutine85
       9  ?Subroutine86
       6  ?Subroutine87
       9  ?Subroutine88
       9  ?Subroutine89
      11  ?Subroutine9
       4  ?Subroutine90
      13  ?Subroutine91
      12  ?Subroutine92
      11  ?Subroutine93
       3  ?Subroutine94
       8  ?Subroutine95
       6  ?Subroutine96
      10  ?Subroutine97
       1  ?Subroutine98
      10  ?Subroutine99
     138  ZDO_RegisterForZDOMsg
       6  ZDO_RegisterForZDOMsg::?relay
     107  ZDO_RemoveRegisteredCB
       6  ZDO_RemoveRegisteredCB::?relay
     276  ZDO_SendMsgCBs
       6  ZDO_SendMsgCBs::?relay
       1  ZDP_AF_ENDPOINT
     198  ZDP_BindUnbindReq
       6  ZDP_BindUnbindReq::?relay
      80  ZDP_Buf
     106  ZDP_DeviceAnnce
       6  ZDP_DeviceAnnce::?relay
     163  ZDP_EPRsp
       6  ZDP_EPRsp::?relay
     255  ZDP_EndDeviceBindReq
       6  ZDP_EndDeviceBindReq::?relay
     102  ZDP_EndDeviceTimeoutReq
       6  ZDP_EndDeviceTimeoutReq::?relay
     149  ZDP_GenericRsp
       6  ZDP_GenericRsp::?relay
      97  ZDP_IEEEAddrReq
       6  ZDP_IEEEAddrReq::?relay
     317  ZDP_IncomingData
       6  ZDP_IncomingData::?relay
     330  ZDP_MatchDescReq
       6  ZDP_MatchDescReq::?relay
     279  ZDP_MgmtBindRsp
       6  ZDP_MgmtBindRsp::?relay
      41  ZDP_MgmtDirectJoinReq
       6  ZDP_MgmtDirectJoinReq::?relay
     140  ZDP_MgmtLeaveReq
       6  ZDP_MgmtLeaveReq::?relay
     496  ZDP_MgmtLqiRsp
       6  ZDP_MgmtLqiRsp::?relay
      48  ZDP_MgmtNwkDiscReq
       6  ZDP_MgmtNwkDiscReq::?relay
     319  ZDP_MgmtNwkDiscRsp
       6  ZDP_MgmtNwkDiscRsp::?relay
     228  ZDP_MgmtNwkUpdateNotify
       6  ZDP_MgmtNwkUpdateNotify::?relay
     124  ZDP_MgmtNwkUpdateReq
       6  ZDP_MgmtNwkUpdateReq::?relay
      83  ZDP_MgmtPermitJoinReq
       6  ZDP_MgmtPermitJoinReq::?relay
     311  ZDP_MgmtRtgRsp
       6  ZDP_MgmtRtgRsp::?relay
      81  ZDP_NWKAddrOfInterestReq
       6  ZDP_NWKAddrOfInterestReq::?relay
     246  ZDP_NodeDescMsg
       6  ZDP_NodeDescMsg::?relay
     208  ZDP_NwkAddrReq
       6  ZDP_NwkAddrReq::?relay
     116  ZDP_PowerDescMsg
       6  ZDP_PowerDescMsg::?relay
     194  ZDP_SendData
       6  ZDP_SendData::?relay
     116  ZDP_ServerDiscReq
       6  ZDP_ServerDiscReq::?relay
     136  ZDP_ServerDiscRsp
       6  ZDP_ServerDiscRsp::?relay
     458  ZDP_SimpleDescMsg
       6  ZDP_SimpleDescMsg::?relay
      79  ZDP_SimpleDescReq
       6  ZDP_SimpleDescReq::?relay
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     134  ZDP_UserDescRsp
       6  ZDP_UserDescRsp::?relay
     121  ZDP_UserDescSet
       6  ZDP_UserDescSet::?relay
      99  fillAndSend
       6  fillAndSend::?relay
       2  zdoMsgCBs
      36  zdpMsgProcs
     713  zdpProcessAddrReq
       6  zdpProcessAddrReq::?relay

 
 8 254 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    37 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 8 503 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none
