###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                16/Mar/2016  12:51:37
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\mac\low_level\srf04\mac_rx.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\mac\low_level\srf04\mac_rx.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        xNV_RESTORE -D ZTOOL_P1 -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\List\mac_rx.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\CoordinatorEB\Obj\mac_rx.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2014-05-16 10:22:59 -0700 (Fri, 16 May 2014) $
      4            Revision:       $Revision: 38564 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* OSAL */
     50          #include "OSAL.h"
     51          
     52          /* high-level */
     53          #include "mac_high_level.h"
     54          #include "mac_spec.h"
     55          #include "mac_pib.h"
     56          
     57          /* MAC security */
     58          #include "mac_security.h"
     59          
     60          /* exported low-level */
     61          #include "mac_low_level.h"
     62          
     63          /* low-level specific */
     64          #include "mac_rx.h"
     65          #include "mac_tx.h"
     66          #include "mac_rx_onoff.h"
     67          #include "mac_radio.h"
     68          
     69          /* target specific */
     70          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1
     71          #include "mac_autopend.h"
     72          
     73          /* debug */
     74          #include "mac_assert.h"
     75          
     76          #ifdef ACK_DONE_ISR_WORKAROUND
     77          typedef struct macTimer_s
     78          {
     79            struct macTimer_s     *pNext;                     /* next timer in queue */
     80            int32                 backoff;                    /* timer expiration count */
     81            void                  (*pFunc)(uint8 parameter);  /* timer callback function */
     82            uint8                 parameter;                  /* callback function parameter */
     83          } macTimer_t;
     84          
     85          extern macTimer_t macTxAckIsrTimer;
     86          extern void macTimerCancel(macTimer_t *pTimer);
     87          #endif /* ACK_DONE_ISR_WROKAROUND */
     88          
     89          /* ------------------------------------------------------------------------------------------------
     90           *                                            Defines
     91           * ------------------------------------------------------------------------------------------------
     92           */
     93          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     94          
     95          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     96          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     97                                             MAC_FCF_FIELD_LEN      +  \
     98                                             MAC_SEQ_NUM_FIELD_LEN  +  \
     99                                             MAC_FCS_FIELD_LEN)
    100          
    101          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
    102          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
    103          
    104          /* addressing mode reserved value */
    105          #define ADDR_MODE_RESERVERED  1
    106          
    107          /* length of command frame identifier */
    108          #define CMD_FRAME_ID_LEN      1
    109          
    110          /* packet size mask is equal to the maximum value */
    111          #define PHY_PACKET_SIZE_MASK  0x7F
    112          
    113          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
    114          #define PROMISCUOUS_MODE_OFF  0x00
    115          
    116          /* bit of proprietary FCS format that indicates if the CRC is OK */
    117          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
    118          
    119          /* dummy length value for unused entry in lookup table */
    120          #define DUMMY_LEN   0xBE
    121          
    122          /* value for rxThresholdIntState */
    123          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    124          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    125          #define RX_THRESHOLD_INT_STATE_RESET      2
    126          
    127          
    128          /* ------------------------------------------------------------------------------------------------
    129           *                                             Macros
    130           * ------------------------------------------------------------------------------------------------
    131           */
    132          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    133          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    134          
    135          /*
    136           *  Macro for encoding frame control information into internal flags format.
    137           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    138           *  format *or* the specification changes, this macro will need to be modified.
    139           */
    140          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    141          
    142          /*
    143           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    144           *  the same length as the original and includes:
    145           *    1) the RSSI value
    146           *    2) the average correlation value (used for LQI)
    147           *    3) a CRC passed bit
    148           *
    149           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    150           */
    151          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    152          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    153          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    154          
    155          /*
    156           *  Macros for security control field.
    157           */
    158          #define SECURITY_LEVEL(s)                       (s & 0x07)
    159          #define KEY_IDENTIFIER_MODE(s)                  ((s & 0x18) >> 3)
    160          #define SECURITY_CONTROL_RESERVED(s)            ((s & 0xE0) >> 5)
    161          
    162          /* ------------------------------------------------------------------------------------------------
    163           *                                       Global Variables
    164           * ------------------------------------------------------------------------------------------------
    165           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          uint8 macRxActive;
   \                     macRxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          uint8 macRxFilter;
   \                     macRxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          uint8 macRxOutgoingAckFlag;
   \                     macRxOutgoingAckFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    169          
    170          
    171          /* ------------------------------------------------------------------------------------------------
    172           *                                       Local Constants
    173           * ------------------------------------------------------------------------------------------------
    174           */

   \                                 In  segment CODE_C, align 1
    175          static const uint8 CODE macRxAddrLen[] =
   \                     macRxAddrLen:
   \   000000   00           DB 0
   \   000001   BE           DB 190
   \   000002   04           DB 4
   \   000003   0A           DB 10
    176          {
    177            0,                                                /* no address */
    178            DUMMY_LEN,                                        /* reserved */
    179            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    180            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    181          };
    182          
    183          
    184          /* ------------------------------------------------------------------------------------------------
    185           *                                       Local Prototypes
    186           * ------------------------------------------------------------------------------------------------
    187           */
    188          static void rxHaltCleanupFinalStep(void);
    189          
    190          static void rxStartIsr(void);
    191          static void rxAddrIsr(void);
    192          
    193          #ifdef FEATURE_MAC_SECURITY
    194            static void rxSecurityHdrIsr(void);
    195          #endif
    196          
    197          static void rxPayloadIsr(void);
    198          static void rxDiscardIsr(void);
    199          static void rxFcsIsr(void);
    200          
    201          static void rxPrepPayload(void);
    202          static void rxDiscardFrame(void);
    203          static void rxDone(void);
    204          static void rxPostRxUpdates(void);
    205          
    206          
    207          /* ------------------------------------------------------------------------------------------------
    208           *                                         Local Variables
    209           * ------------------------------------------------------------------------------------------------
    210           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          static void    (* pFuncRxState)(void);
   \                     pFuncRxState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          static macRx_t  * pRxBuf;
   \                     pRxBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    213          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
   \                     rxBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          static uint8  rxUnreadLen;
   \                     rxUnreadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          static uint8  rxNextLen;
   \                     rxNextLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          static uint8  rxPayloadLen;
   \                     rxPayloadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          static uint8  rxFilter;
   \                     rxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          static uint8  rxPromiscuousMode;
   \                     rxPromiscuousMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static uint8  rxIsrActiveFlag;
   \                     rxIsrActiveFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    221          static uint8  rxResetFlag;
   \                     rxResetFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          static uint8  rxFifoOverflowCount;
   \                     rxFifoOverflowCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    223          
    224          
    225          /**************************************************************************************************
    226           * @fn          macRxInit
    227           *
    228           * @brief       Initialize receive variable states.
    229           *
    230           * @param       none
    231           *
    232           * @return      none
    233           **************************************************************************************************
    234           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    235          MAC_INTERNAL_API void macRxInit(void)
   \                     macRxInit:
    236          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    237            macRxFilter          = RX_FILTER_OFF;
   \   000004   90....       MOV     DPTR,#macRxFilter
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    238            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
   \   000009   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000C   F0           MOVX    @DPTR,A
    239            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
   \   00000D   90....       MOV     DPTR,#pRxBuf
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
    240            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
   \   000013   90....       MOV     DPTR,#macRxActive
   \   000016   12....       LCALL   ?Subroutine25 & 0xFFFF
    241            pFuncRxState         = &rxStartIsr;
   \                     ??CrossCallReturnLabel_47:
   \   000019   12....       LCALL   ??Subroutine32_0 & 0xFFFF
    242            macRxOutgoingAckFlag = 0;
    243            rxIsrActiveFlag      = 0;
   \                     ??CrossCallReturnLabel_57:
   \   00001C   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00001F   F0           MOVX    @DPTR,A
    244            rxResetFlag          = 0;
   \   000020   90....       MOV     DPTR,#rxResetFlag
   \   000023   F0           MOVX    @DPTR,A
    245            rxFifoOverflowCount  = 0;
   \   000024   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000027   02....       LJMP    ?Subroutine0 & 0xFFFF
    246          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine31_0
   \   000001                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#pFuncRxState
   \   000004   74..         MOV     A,#`??rxStartIsr::?relay` & 0xff
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   74..         MOV     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   00000A   22           RET
    247          
    248          
    249          /**************************************************************************************************
    250           * @fn          macRxRadioPowerUpInit
    251           *
    252           * @brief       Initialization for after radio first powers up.
    253           *
    254           * @param       none
    255           *
    256           * @return      none
    257           **************************************************************************************************
    258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
   \                     macRxRadioPowerUpInit:
    260          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    261            /* set threshold at initial value */
    262            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   000004   906194       MOV     DPTR,#0x6194
   \   000007   7405         MOV     A,#0x5
   \   000009   12....       LCALL   ?Subroutine13 & 0xFFFF
    263          
    264            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    265            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \                     ??CrossCallReturnLabel_25:
   \   00000C   75E9FB       MOV     0xe9,#-0x5
   \   00000F   E9           MOV     A,R1
   \   000010   A2E7         MOV     C,0xE0 /* A   */.7
   \   000012   E4           CLR     A
   \   000013   33           RLC     A
   \   000014   F8           MOV     R0,A
   \   000015   E9           MOV     A,R1
   \   000016   A2E7         MOV     C,0xE0 /* A   */.7
   \   000018   92AF         MOV     0xa8.7,C
    266          
    267            /* enable threshold interrupts */
    268            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
   \   00001A   9061A3       MOV     DPTR,#0x61a3
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   D2E2         SETB    0xE0 /* A   */.2
   \   000020   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000023                REQUIRE _A_IEN0
   \   000023                REQUIRE S1CON
   \   000023                REQUIRE RFIRQF0
    269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A9A8         MOV     R1,0xa8+0x0
   \   000003   C2AF         CLR     0xa8.7
   \   000005   759B00       MOV     0x9b,#0x0
   \   000008   22           RET
    270          
    271          
    272          /**************************************************************************************************
    273           * @fn          macRxTxReset
    274           *
    275           * @brief       Reset the receive state.
    276           *
    277           * @param       none
    278           *
    279           * @return      none
    280           **************************************************************************************************
    281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          MAC_INTERNAL_API void macRxTxReset(void)
   \                     macRxTxReset:
    283          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    284            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    285            macRxHardDisable();
   \   000004                ; Setup parameters for call to function macRxHardDisable
   \   000004   12....       LCALL   `??macRxHardDisable::?relay`; Banked call to: macRxHardDisable
    286          
    287            /*
    288             *   Note : transmit does not require any reset logic
    289             *          beyond what macRxHardDisable() provides.
    290             */
    291          
    292            /* restore deault filter mode to off */
    293            macRxFilter = RX_FILTER_OFF;
   \   000007   90....       MOV     DPTR,#macRxFilter
   \   00000A   E4           CLR     A
   \   00000B   F0           MOVX    @DPTR,A
    294          
    295            /* return promiscuous mode to default off state */
    296            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
   \   00000C   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   906180       MOV     DPTR,#0x6180
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   4409         ORL     A,#0x9
   \   000017   02....       LJMP    ?Subroutine0 & 0xFFFF
    297          }
    298          
    299          
    300          /**************************************************************************************************
    301           * @fn          macRxHaltCleanup
    302           *
    303           * @brief       Cleanup up the receive logic after receiver is forced off.
    304           *
    305           * @param       none
    306           *
    307           * @return      none
    308           **************************************************************************************************
    309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          MAC_INTERNAL_API void macRxHaltCleanup(void)
   \                     macRxHaltCleanup:
    311          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    312            rxResetFlag = 1;
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    313            if (!rxIsrActiveFlag)
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7008         JNZ     ??macRxHaltCleanup_0
    314            {
    315              rxHaltCleanupFinalStep();
   \   000010                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000010   12....       LCALL   `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
    316              rxResetFlag = 0;
   \   000013   90....       MOV     DPTR,#rxResetFlag
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
    317            }
    318          }
   \                     ??macRxHaltCleanup_0:
   \   000018   80..         SJMP    ??Subroutine31_0
    319          
    320          
    321          /*=================================================================================================
    322           * @fn          rxHaltCleanupFinalStep
    323           *
    324           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    325           *
    326           * @param       none
    327           *
    328           * @return      none
    329           *=================================================================================================
    330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    331          static void rxHaltCleanupFinalStep(void)
   \                     rxHaltCleanupFinalStep:
    332          {  
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    333            /* cancel any upcoming ACK transmit complete callback */
    334            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000004   9061A4       MOV     DPTR,#0x61a4
   \   000007   E0           MOVX    A,@DPTR
   \   000008   C2E0         CLR     0xE0 /* A   */.0
   \   00000A   F0           MOVX    @DPTR,A
    335          
    336            /* set start of frame threshold */
    337            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00000B   906194       MOV     DPTR,#0x6194
   \   00000E   7405         MOV     A,#0x5
   \   000010   F0           MOVX    @DPTR,A
    338          
    339            /* flush the receive FIFO */
    340            MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV     0xe1,#-0x13
   \   000014   75E1ED       MOV     0xe1,#-0x13
    341          
    342            /* clear any receive interrupt that happened to squeak through */
    343            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   000017   A8A8         MOV     R0,0xa8+0x0
   \   000019   C2AF         CLR     0xa8.7
   \   00001B   759B00       MOV     0x9b,#0x0
   \   00001E   75E9FB       MOV     0xe9,#-0x5
   \   000021   E8           MOV     A,R0
   \   000022   A2E7         MOV     C,0xE0 /* A   */.7
   \   000024   E4           CLR     A
   \   000025   33           RLC     A
   \   000026   FA           MOV     R2,A
   \   000027   E8           MOV     A,R0
   \   000028   A2E7         MOV     C,0xE0 /* A   */.7
   \   00002A   92AF         MOV     0xa8.7,C
    344          
    345            /* if data buffer has been allocated, free it */
    346            if (pRxBuf != NULL)
   \   00002C   90....       MOV     DPTR,#pRxBuf
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   49           ORL     A,R1
   \   000036   6007         JZ      ??rxHaltCleanupFinalStep_0
    347            {
    348              MEM_FREE((uint8 **)&pRxBuf);
   \   000038                ; Setup parameters for call to function macDataRxMemFree
   \   000038   7A..         MOV     R2,#pRxBuf & 0xff
   \   00003A   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   00003C   12....       LCALL   `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
    349            }
    350            /* MEM_FREE() sets parameter to NULL. */
    351          
    352            pFuncRxState = &rxStartIsr;
   \                     ??rxHaltCleanupFinalStep_0:
   \   00003F   90....       MOV     DPTR,#pFuncRxState
   \   000042   74..         MOV     A,#`??rxStartIsr::?relay` & 0xff
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   74..         MOV     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000048   F0           MOVX    @DPTR,A
    353          
    354            /* if receive was active, perform the post receive updates */
    355            if (macRxActive || macRxOutgoingAckFlag)
   \   000049   90....       MOV     DPTR,#macRxActive
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   7006         JNZ     ??rxHaltCleanupFinalStep_1
   \   00004F   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6012         JZ      ??rxHaltCleanupFinalStep_2
    356            {
    357              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxHaltCleanupFinalStep_1:
   \   000055   90....       MOV     DPTR,#macRxActive
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
    358              macRxOutgoingAckFlag = 0;
   \   00005A   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00005D   F0           MOVX    @DPTR,A
    359          
    360              rxPostRxUpdates();
   \   00005E                ; Setup parameters for call to function macRxOffRequest
   \   00005E   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   \   000061                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000061   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   \   000064                ; Setup parameters for call to function macTxStartQueuedFrame
   \   000064   12....       LCALL   `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
    361            }
    362          }
   \                     ??rxHaltCleanupFinalStep_2:
   \   000067   80..         SJMP    ??Subroutine31_0
   \   000069                REQUIRE RFST
   \   000069                REQUIRE _A_IEN0
   \   000069                REQUIRE S1CON
   \   000069                REQUIRE RFIRQF0
    363          
    364          
    365          /**************************************************************************************************
    366           * @fn          macRxThresholdIsr
    367           *
    368           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    369           *              It implements a state machine for receiving a packet.
    370           *
    371           * @param       none
    372           *
    373           * @return      none
    374           **************************************************************************************************
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          MAC_INTERNAL_API void macRxThresholdIsr(void)
   \                     macRxThresholdIsr:
    377          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    378            /* if currently reseting, do not execute receive ISR logic */
    379            if (rxResetFlag)
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7022         JNZ     ??macRxThresholdIsr_0
    380            {
    381              return;
    382            }
    383          
    384            /*
    385             *  Call the function that handles the current receive state.
    386             *  A flag is set for the duration of the call to indicate
    387             *  the ISR is executing.  This is necessary for the reset
    388             *  logic so it does not perform a reset in the middle of
    389             *  executing the ISR.
    390             */
    391            rxIsrActiveFlag = 1;
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    392            (*pFuncRxState)();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000016   12....       LCALL   ?CALL_IND
    393            rxIsrActiveFlag = 0;
   \   000019   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
    394          
    395            /* if a reset occurred during the ISR, peform cleanup here */
    396            if (rxResetFlag)
   \   00001E   90....       MOV     DPTR,#rxResetFlag
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6008         JZ      ??macRxThresholdIsr_0
    397            {
    398              rxHaltCleanupFinalStep();
   \   000024                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000024   12....       LCALL   `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
    399              rxResetFlag = 0;
   \   000027   90....       MOV     DPTR,#rxResetFlag
   \   00002A   E4           CLR     A
   \   00002B   F0           MOVX    @DPTR,A
    400            }
    401          }
   \                     ??macRxThresholdIsr_0:
   \   00002C   80..         SJMP    ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    402          
    403          
    404          /*=================================================================================================
    405           * @fn          rxStartIsr
    406           *
    407           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    408           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    409           *              allocating a buffer.
    410           *
    411           * @param       none
    412           *
    413           * @return      none
    414           *=================================================================================================
    415           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    416          static void rxStartIsr(void)
   \                     rxStartIsr:
    417          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    418            uint8  addrLen;
    419            uint8  ackWithPending;
    420            uint8  dstAddrMode;
    421            uint8  srcAddrMode;
    422            uint8  mhrLen = 0;
   \   00000A   75..00       MOV     ?V0,#0x0
    423          
    424            MAC_ASSERT(!macRxActive); /* receive on top of receive */
   \   00000D   90....       MOV     DPTR,#macRxActive
   \   000010   E0           MOVX    A,@DPTR
   \   000011   6003         JZ      ??rxStartIsr_0
   \   000013                ; Setup parameters for call to function halAssertHandler
   \   000013   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    425          
    426            /* indicate rx is active */
    427            macRxActive = MAC_RX_ACTIVE_STARTED;
   \                     ??rxStartIsr_0:
   \   000016   90....       MOV     DPTR,#macRxActive
   \   000019   7481         MOV     A,#-0x7f
   \   00001B   F0           MOVX    @DPTR,A
    428          
    429            /*
    430             *  For bullet proof functionality, need to see if the receiver was just turned off.
    431             *  The logic to request turning off the receiver, disables interrupts and then checks
    432             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    433             *
    434             *  There is a small hole though.  It's possible to attempt turning off the receiver
    435             *  in the window from when the receive interrupt fires and the point where macRxActive
    436             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    437             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    438             *  in the RX fifo and the receive is simply aborted.
    439             *
    440             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    441             *  the receiver will just be off at this point after a hard disable.  The check described
    442             *  above will account for this case too.  However, if a hard disable were immediately
    443             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    444             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    445             */
    446            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
   \   00001C   90....       MOV     DPTR,#macRxOnFlag
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   600D         JZ      ??rxStartIsr_1
   \   000022   906193       MOV     DPTR,#0x6193
   \   000025   E0           MOVX    A,@DPTR
   \   000026   A2E7         MOV     C,0xE0 /* A   */.7
   \   000028   4016         JC      ??rxStartIsr_2
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   A2E6         MOV     C,0xE0 /* A   */.6
   \   00002D   4011         JC      ??rxStartIsr_2
    447            {
    448              /* reset active flag */
    449              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxStartIsr_1:
   \   00002F   90....       MOV     DPTR,#macRxActive
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    450          
    451              /*
    452               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    453               *  the tiny, tiny window when macRxActive was not zero.
    454               */
    455              rxPostRxUpdates();
   \   000034                ; Setup parameters for call to function macRxOffRequest
   \   000034   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   \   000037                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000037   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   \   00003A                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00003A   12....       LCALL   `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
    456          
    457              /* return immediately from here */
    458              return;
   \   00003D   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    459            }
    460          
    461            /*
    462             *  If interrupts are held off for too long it's possible the previous "transmit done"
    463             *  callback is pending.  If this is the case, it needs to be completed before
    464             *  continuing with the receive logic.
    465             */
    466            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
   \                     ??rxStartIsr_2:
   \   000040                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   000040   12....       LCALL   `??macCspForceTxDoneIfPending::?relay`; Banked call to: macCspForceTxDoneIfPending
    467          
    468            /*
    469             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    470             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    471             *  That callback execute receive cleanup logic that will run at the completion
    472             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    473             */
    474            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000043   12....       LCALL   ?Subroutine11 & 0xFFFF
    475            macRxOutgoingAckFlag = 0;
    476          
    477            /*
    478             *  Make a module-local copy of macRxFilter.  This prevents the selected
    479             *  filter from changing in the middle of a receive.
    480             */
    481            rxFilter = macRxFilter;
   \                     ??CrossCallReturnLabel_55:
   \   000046   90....       MOV     DPTR,#macRxFilter
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   90....       MOV     DPTR,#rxFilter
   \   00004D   F0           MOVX    @DPTR,A
    482          
    483            /*-------------------------------------------------------------------------------
    484             *  Read initial frame information from FIFO.
    485             *
    486             *   This code is not triggered until the following are in the RX FIFO:
    487             *     frame length          - one byte containing length of MAC frame (excludes this field)
    488             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    489             *     sequence number       - one byte unique sequence identifier
    490             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    491             *                             if so, the frame can be verified and responded to immediately,
    492             *                             if not an ACK, these bytes will be processed normally
    493             */
    494          
    495            /* read frame length, frame control field, and sequence number from FIFO */
    496            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
   \   00004E                ; Setup parameters for call to function macMemReadRxFifo
   \   00004E   7904         MOV     R1,#0x4
   \   000050   7A..         MOV     R2,#rxBuf & 0xff
   \   000052   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   000054   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    497          
    498            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    499            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
   \   000057   90....       MOV     DPTR,#rxBuf
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   547F         ANL     A,#0x7f
   \   00005D   24FD         ADD     A,#-0x3
   \   00005F   90....       MOV     DPTR,#rxUnreadLen
   \   000062   F0           MOVX    @DPTR,A
    500          
    501            /*
    502             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    503             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    504             *  the entire receive buffer is flushed.
    505             */
    506            if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    507                (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
   \   000063   C3           CLR     C
   \   000064   947D         SUBB    A,#0x7d
   \   000066   4003         JC      $+5
   \   000068   02....       LJMP    ??rxStartIsr_4 & 0xFFFF
   \   00006B   90....       MOV     DPTR,#rxBuf + 1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   5407         ANL     A,#0x7
   \   000071   F8           MOV     R0,A
   \   000072   C3           CLR     C
   \   000073   9404         SUBB    A,#0x4
   \   000075   4003         JC      $+5
   \   000077   02....       LJMP    ??rxStartIsr_4 & 0xFFFF
    508            {
    509              MAC_RADIO_FLUSH_RX_FIFO();
    510              rxDone();
    511              return;
    512            }
    513          
    514          
    515            /*-------------------------------------------------------------------------------
    516             *  Process ACKs.
    517             *
    518             *  If this frame is an ACK, process it immediately and exit from here.
    519             *  If this frame is not an ACK and transmit is listening for an ACK, let
    520             *  the transmit logic know an non-ACK was received so transmit can complete.
    521             *
    522             *  In promiscuous mode ACKs are treated like any other frame.
    523             */
    524            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
   \   00007A   7402         MOV     A,#0x2
   \   00007C   68           XRL     A,R0
   \   00007D   6003         JZ      $+5
   \   00007F   02....       LJMP    ??rxStartIsr_5 & 0xFFFF
   \   000082   90....       MOV     DPTR,#rxPromiscuousMode
   \   000085   E0           MOVX    A,@DPTR
   \   000086   6003         JZ      $+5
   \   000088   02....       LJMP    ??rxStartIsr_5 & 0xFFFF
    525            {
    526              halIntState_t  s;
    527              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    528              /*
    529               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    530               *  these two bytes will be the FCS.
    531               */
    532          
    533              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    534              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
   \   00008B                ; Setup parameters for call to function macMemReadRxFifo
   \   00008B   7902         MOV     R1,#0x2
   \   00008D   AA..         MOV     R2,?XSP + 0
   \   00008F   AB..         MOV     R3,?XSP + 1
   \   000091   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    535          
    536              /*
    537               *  This critical section ensures that the ACK timeout won't be triggered in the
    538               *  middle of receiving the ACK frame.
    539               */
    540              HAL_ENTER_CRITICAL_SECTION(s);
   \   000094   A2AF         MOV     C,0xa8.7
   \   000096   E4           CLR     A
   \   000097   33           RLC     A
   \   000098   F5..         MOV     ?V0,A
   \   00009A   C2AF         CLR     0xa8.7
    541          
    542              /* see if transmit is listening for an ACK */
    543              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   00009C   90....       MOV     DPTR,#macTxActive
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   6486         XRL     A,#0x86
   \   0000A2   7076         JNZ     ??rxStartIsr_6
    544              {
    545                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
   \   0000A4   90....       MOV     DPTR,#pMacDataTx
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F8           MOV     R0,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   E8           MOV     A,R0
   \   0000AD   49           ORL     A,R1
   \   0000AE   7003         JNZ     ??rxStartIsr_7
   \   0000B0                ; Setup parameters for call to function halAssertHandler
   \   0000B0   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    546          
    547                /* record link quality metrics for the receive ACK */
    548                {
    549                  int8 rssiDbm;
    550                  uint8 corr;
    551          
    552                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
   \                     ??rxStartIsr_7:
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   24B7         ADD     A,#-0x49
   \   0000BC   FE           MOV     R6,A
    553                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    554                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
   \   0000BD   7401         MOV     A,#0x1
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   547F         ANL     A,#0x7f
   \   0000C5   FF           MOV     R7,A
    555          
    556                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   0000C6                ; Setup parameters for call to function macRadioComputeLQI
   \   0000C6   FA           MOV     R2,A
   \   0000C7   EE           MOV     A,R6
   \   0000C8   F9           MOV     R1,A
   \   0000C9   12....       LCALL   `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   0000CC   90....       MOV     DPTR,#pMacDataTx
   \   0000CF   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    557                  pMacDataTx->internal.correlation = corr;
    558                  pMacDataTx->internal.rssi= rssiDbm;
    559                }
   \                     ??CrossCallReturnLabel_62:
   \   0000D2   2415         ADD     A,#0x15
   \   0000D4   F582         MOV     DPL,A
   \   0000D6   E4           CLR     A
   \   0000D7   38           ADDC    A,R0
   \   0000D8   F583         MOV     DPH,A
   \   0000DA   E9           MOV     A,R1
   \   0000DB   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000DE   2416         ADD     A,#0x16
   \   0000E0   F582         MOV     DPL,A
   \   0000E2   E4           CLR     A
   \   0000E3   38           ADDC    A,R0
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   EF           MOV     A,R7
   \   0000E7   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000EA   2417         ADD     A,#0x17
   \   0000EC   F582         MOV     DPL,A
   \   0000EE   E4           CLR     A
   \   0000EF   38           ADDC    A,R0
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   EE           MOV     A,R6
   \   0000F3   F0           MOVX    @DPTR,A
    560          
    561                /*
    562                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    563                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    564                 */
    565                HAL_EXIT_CRITICAL_SECTION(s);
   \   0000F4   E5..         MOV     A,?V0
   \   0000F6   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000F8   92AF         MOV     0xa8.7,C
    566          
    567                /*
    568                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    569                 *  the transmit logic still needs to know.  In that case, treat the frame
    570                 *  as a non-ACK to complete the active transmit.
    571                 */
    572                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
   \   0000FA   7401         MOV     A,#0x1
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   A2E7         MOV     C,0xE0 /* A   */.7
   \   000102   5011         JNC     ??rxStartIsr_8
    573                {
    574                  /* call transmit logic to indicate ACK was received */
    575                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
   \   000104                ; Setup parameters for call to function macTxAckReceivedCallback
   \   000104   90....       MOV     DPTR,#rxBuf + 1
   \   000107   E0           MOVX    A,@DPTR
   \   000108   5410         ANL     A,#0x10
   \   00010A   FA           MOV     R2,A
   \   00010B   90....       MOV     DPTR,#rxBuf + 3
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F9           MOV     R1,A
   \   000110   12....       LCALL   `??macTxAckReceivedCallback::?relay`; Banked call to: macTxAckReceivedCallback
   \   000113   800B         SJMP    ??rxStartIsr_9
    576                }
    577                else
    578                {
    579                  macTxAckNotReceivedCallback();
   \                     ??rxStartIsr_8:
   \   000115                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000115   12....       LCALL   `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
   \   000118   8006         SJMP    ??rxStartIsr_9
    580                }
    581              }
    582              else
    583              {
    584                HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??rxStartIsr_6:
   \   00011A   E5..         MOV     A,?V0
   \   00011C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00011E   92AF         MOV     0xa8.7,C
    585              }
    586          
    587              /* receive is done, exit from here */
    588              rxDone();
   \                     ??rxStartIsr_9:
   \   000120   906193       MOV     DPTR,#0x6193
   \   000123   E0           MOVX    A,@DPTR
   \   000124   A2E6         MOV     C,0xE0 /* A   */.6
   \   000126   500B         JNC     ??rxStartIsr_10
   \   000128   E0           MOVX    A,@DPTR
   \   000129   A2E7         MOV     C,0xE0 /* A   */.7
   \   00012B   4006         JC      ??rxStartIsr_10
   \   00012D   75E1ED       MOV     0xe1,#-0x13
   \   000130   75E1ED       MOV     0xe1,#-0x13
   \                     ??rxStartIsr_10:
   \   000133   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000136   7009         JNZ     ??rxStartIsr_11
   \   000138                ; Setup parameters for call to function macRxOffRequest
   \   000138   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   \   00013B                ; Setup parameters for call to function macRadioUpdateTxPower
   \   00013B   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   \   00013E                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00013E   12....       LCALL   `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
    589              return;
   \                     ??rxStartIsr_11:
   \   000141   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    590            }
    591            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \                     ??rxStartIsr_5:
   \   000144   90....       MOV     DPTR,#macTxActive
   \   000147   E0           MOVX    A,@DPTR
   \   000148   6486         XRL     A,#0x86
   \   00014A   7003         JNZ     ??rxStartIsr_12
    592            {
    593              macTxAckNotReceivedCallback();
   \   00014C                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   00014C   12....       LCALL   `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
    594            }
    595          
    596            /*-------------------------------------------------------------------------------
    597             *  Apply filtering.
    598             *
    599             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    600             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    601             *  do not apply filtering.
    602             */
    603            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
   \                     ??rxStartIsr_12:
   \   00014F   90....       MOV     DPTR,#rxFilter
   \   000152   E0           MOVX    A,@DPTR
   \   000153   6035         JZ      ??rxStartIsr_13
   \   000155   90....       MOV     DPTR,#rxPromiscuousMode
   \   000158   E0           MOVX    A,@DPTR
   \   000159   702F         JNZ     ??rxStartIsr_13
    604            {
    605              if (/* filter all frames */
    606                   (rxFilter == RX_FILTER_ALL) ||
    607          
    608                   /* filter non-beacon frames */
    609                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    610                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    611          
    612                   /* filter non-command frames */
    613                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    614                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
   \   00015B   90....       MOV     DPTR,#rxFilter
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   6401         XRL     A,#0x1
   \   000161   7003         JNZ     $+5
   \   000163   02....       LJMP    ??rxStartIsr_14 & 0xFFFF
   \   000166   E0           MOVX    A,@DPTR
   \   000167   6402         XRL     A,#0x2
   \   000169   700D         JNZ     ??rxStartIsr_15
   \   00016B   90....       MOV     DPTR,#rxBuf + 1
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   5407         ANL     A,#0x7
   \   000171   6003         JZ      $+5
   \   000173   02....       LJMP    ??rxStartIsr_14 & 0xFFFF
   \   000176   8012         SJMP    ??rxStartIsr_13
   \                     ??rxStartIsr_15:
   \   000178   E0           MOVX    A,@DPTR
   \   000179   6403         XRL     A,#0x3
   \   00017B   700D         JNZ     ??rxStartIsr_13
   \   00017D   90....       MOV     DPTR,#rxBuf + 1
   \   000180   E0           MOVX    A,@DPTR
   \   000181   5407         ANL     A,#0x7
   \   000183   6403         XRL     A,#0x3
   \   000185   6003         JZ      $+5
   \   000187   02....       LJMP    ??rxStartIsr_14 & 0xFFFF
    615              {
    616                /* discard rest of frame */
    617                rxDiscardFrame();
    618                return;
    619              }
    620            }
    621          
    622            /*-------------------------------------------------------------------------------
    623             *  Compute length of addressing fields.  Compute payload length.
    624             */
    625          
    626            /* decode addressing modes */
    627            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \                     ??rxStartIsr_13:
   \   00018A   90....       MOV     DPTR,#rxBuf + 2
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   F8           MOV     R0,A
   \   00018F   13           RRC     A
   \   000190   13           RRC     A
   \   000191   543F         ANL     A,#0x3f
   \   000193   5403         ANL     A,#0x3
   \   000195   F5..         MOV     ?V3,A
    628            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \   000197   E8           MOV     A,R0
   \   000198   C4           SWAP    A
   \   000199   13           RRC     A
   \   00019A   13           RRC     A
   \   00019B   5403         ANL     A,#0x3
   \   00019D   F5..         MOV     ?V5,A
    629          
    630            /*
    631            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    632             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    633             *  the entire receive buffer is flushed.
    634             */
    635            if (macChipVersion == REV_A)
   \   00019F   90....       MOV     DPTR,#macChipVersion
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   7036         JNZ     ??rxStartIsr_16
    636            {
    637              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
   \   0001A5   7401         MOV     A,#0x1
   \   0001A7   65..         XRL     A,?V5
   \   0001A9   6006         JZ      ??rxStartIsr_4
   \   0001AB   7401         MOV     A,#0x1
   \   0001AD   65..         XRL     A,?V3
   \   0001AF   702A         JNZ     ??rxStartIsr_16
    638              {
    639                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_4:
   \   0001B1   75E1ED       MOV     0xe1,#-0x13
   \   0001B4   75E1ED       MOV     0xe1,#-0x13
    640                rxDone();
   \   0001B7   906193       MOV     DPTR,#0x6193
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001BD   500B         JNC     ??rxStartIsr_17
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   A2E7         MOV     C,0xE0 /* A   */.7
   \   0001C2   4006         JC      ??rxStartIsr_17
   \   0001C4   75E1ED       MOV     0xe1,#-0x13
   \   0001C7   75E1ED       MOV     0xe1,#-0x13
   \                     ??rxStartIsr_17:
   \   0001CA   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001CD   7009         JNZ     ??rxStartIsr_18
   \   0001CF                ; Setup parameters for call to function macRxOffRequest
   \   0001CF   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   \   0001D2                ; Setup parameters for call to function macRadioUpdateTxPower
   \   0001D2   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   \   0001D5                ; Setup parameters for call to function macTxStartQueuedFrame
   \   0001D5   12....       LCALL   `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
    641                return;
   \                     ??rxStartIsr_18:
   \   0001D8   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    642              }
    643            }
    644          
    645            /*
    646             *  Compute the addressing field length.  A lookup table based on addressing
    647             *  mode is used for efficiency.  If the source address is present and the
    648             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    649             *  length is adjusted to match the smaller length.
    650             */
    651            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
   \                     ??rxStartIsr_16:
   \   0001DB   A8..         MOV     R0,?V5
   \   0001DD   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0001E0   FA           MOV     R2,A
   \   0001E1   A8..         MOV     R0,?V3
   \   0001E3   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0001E6   2A           ADD     A,R2
   \   0001E7   FF           MOV     R7,A
    652            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
   \   0001E8   E5..         MOV     A,?V5
   \   0001EA   600A         JZ      ??rxStartIsr_19
   \   0001EC   90....       MOV     DPTR,#rxBuf + 1
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001F2   5002         JNC     ??rxStartIsr_19
    653            {
    654              addrLen -= MAC_PAN_ID_FIELD_LEN;
   \   0001F4   1F           DEC     R7
   \   0001F5   1F           DEC     R7
    655            }
    656          
    657            /*
    658             *  If there are not enough unread bytes to include the computed address
    659             *  plus FCS field, the frame is corrupted and must be discarded.
    660             */
    661            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
   \                     ??rxStartIsr_19:
   \   0001F6   90....       MOV     DPTR,#rxUnreadLen
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   FA           MOV     R2,A
   \   0001FB   EF           MOV     A,R7
   \   0001FC   7900         MOV     R1,#0x0
   \   0001FE   2402         ADD     A,#0x2
   \   000200   F8           MOV     R0,A
   \   000201   5001         JNC     ??rxStartIsr_20
   \   000203   09           INC     R1
   \                     ??rxStartIsr_20:
   \   000204   C3           CLR     C
   \   000205   EA           MOV     A,R2
   \   000206   98           SUBB    A,R0
   \   000207   E4           CLR     A
   \   000208   99           SUBB    A,R1
   \   000209   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00020B   65D0         XRL     A,PSW
   \   00020D   33           RLC     A
   \   00020E   4038         JC      ??rxStartIsr_14
    662            {
    663              /* discard frame and exit */
    664              rxDiscardFrame();
   \   000210                ; Setup parameters for call to function rxDiscardFrame
    665              return;
    666            }
    667          
    668            /* aux security header plus payload length is equal to unread bytes minus
    669             * address length, minus the FCS
    670             */
    671            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
   \   000210   E0           MOVX    A,@DPTR
   \   000211   C3           CLR     C
   \   000212   9F           SUBB    A,R7
   \   000213   24FE         ADD     A,#-0x2
   \   000215   90....       MOV     DPTR,#rxPayloadLen
   \   000218   12....       LCALL   ?Subroutine9 & 0xFFFF
    672          
    673            /*-------------------------------------------------------------------------------
    674             *  Allocate memory for the incoming frame.
    675             */
    676            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \                     ??CrossCallReturnLabel_18:
   \   00021B   5003         JNC     ??rxStartIsr_21
    677            {
    678              /* increase the allocation size of MAC header for security */
    679              mhrLen = MAC_MHR_LEN;
   \   00021D   75..25       MOV     ?V0,#0x25
    680            }
    681          
    682            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + mhrLen + rxPayloadLen);
   \                     ??rxStartIsr_21:
   \   000220                ; Setup parameters for call to function macDataRxMemAlloc
   \   000220   90....       MOV     DPTR,#rxPayloadLen
   \   000223   E0           MOVX    A,@DPTR
   \   000224   F8           MOV     R0,A
   \   000225   E5..         MOV     A,?V0
   \   000227   28           ADD     A,R0
   \   000228   F8           MOV     R0,A
   \   000229   E4           CLR     A
   \   00022A   3400         ADDC    A,#0x0
   \   00022C   F9           MOV     R1,A
   \   00022D   E8           MOV     A,R0
   \   00022E   243A         ADD     A,#0x3a
   \   000230   FA           MOV     R2,A
   \   000231   E4           CLR     A
   \   000232   39           ADDC    A,R1
   \   000233   FB           MOV     R3,A
   \   000234   12....       LCALL   `??macDataRxMemAlloc::?relay`; Banked call to: macDataRxMemAlloc
   \   000237   90....       MOV     DPTR,#pRxBuf
   \   00023A   12....       LCALL   ?Subroutine7 & 0xFFFF
    683            if (pRxBuf == NULL)
   \                     ??CrossCallReturnLabel_71:
   \   00023D   F8           MOV     R0,A
   \   00023E   A3           INC     DPTR
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   F9           MOV     R1,A
   \   000241   E8           MOV     A,R0
   \   000242   49           ORL     A,R1
   \   000243   7009         JNZ     ??rxStartIsr_22
    684            {
    685              /* Cancel the outgoing TX ACK */
    686              MAC_RADIO_CANCEL_TX_ACK();
   \   000245   75E1E8       MOV     0xe1,#-0x18
    687          
    688              /* buffer allocation failed, discard the frame and exit*/
    689              rxDiscardFrame();
   \   000248                ; Setup parameters for call to function rxDiscardFrame
   \                     ??rxStartIsr_14:
   \   000248   12....       LCALL   `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    690              return;
   \   00024B   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    691            }
    692          
    693            /*-------------------------------------------------------------------------------
    694             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    695             */
    696            ackWithPending = 0;
   \                     ??rxStartIsr_22:
   \   00024E   7E00         MOV     R6,#0x0
    697            if (!rxPromiscuousMode)
   \   000250   90....       MOV     DPTR,#rxPromiscuousMode
   \   000253   E0           MOVX    A,@DPTR
   \   000254   700A         JNZ     ??rxStartIsr_23
    698            {
    699              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
   \   000256   90....       MOV     DPTR,#rxBuf + 1
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   5420         ANL     A,#0x20
   \   00025C   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00025F   F0           MOVX    @DPTR,A
    700            }
    701          
    702            /*-------------------------------------------------------------------------------
    703             *  Process any ACK request.
    704             */
    705            if (macRxOutgoingAckFlag)
   \                     ??rxStartIsr_23:
   \   000260   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000263   E0           MOVX    A,@DPTR
   \   000264   6053         JZ      ??rxStartIsr_24
    706            {
    707              halIntState_t  s;
    708          
    709              /*
    710               *  This critical section ensures that the callback ISR is initiated within time
    711               *  to guarantee correlation with the strobe.
    712               */
    713              HAL_ENTER_CRITICAL_SECTION(s);
   \   000266   A2AF         MOV     C,0xa8.7
   \   000268   E4           CLR     A
   \   000269   33           RLC     A
   \   00026A   F5..         MOV     ?V0,A
   \   00026C   C2AF         CLR     0xa8.7
    714          
    715              /* Do not ack data packet with pending more data */
    716              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
   \   00026E   90....       MOV     DPTR,#rxBuf + 1
   \   000271   E0           MOVX    A,@DPTR
   \   000272   5407         ANL     A,#0x7
   \   000274   6403         XRL     A,#0x3
   \   000276   701D         JNZ     ??rxStartIsr_25
    717              {
    718                if( macRxCheckMACPendingCallback())
   \   000278                ; Setup parameters for call to function macRxCheckMACPendingCallback
   \   000278   12....       LCALL   `??macRxCheckMACPendingCallback::?relay`; Banked call to: macRxCheckMACPendingCallback
   \   00027B   E9           MOV     A,R1
   \   00027C   6003         JZ      $+5
   \   00027E   02....       LJMP    ??rxStartIsr_26 & 0xFFFF
    719                {
    720                  /* Check is any mac data pending for end devices */
    721                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    722                }
    723                else
    724                {
    725                  if( macSrcMatchIsEnabled )
   \   000281   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000284   E0           MOVX    A,@DPTR
   \   000285   7003         JNZ     $+5
   \   000287   02....       LJMP    ??rxStartIsr_27 & 0xFFFF
    726                  {
    727                    /* When autopend is enabled, check if allpending is set to true */
    728                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
   \   00028A                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   00028A   12....       LCALL   `??MAC_SrcMatchCheckAllPending::?relay`; Banked call to: MAC_SrcMatchCheckAllPending
   \   00028D   E9           MOV     A,R1
   \   00028E   64FE         XRL     A,#0xfe
   \   000290   7003         JNZ     $+5
   \   000292   02....       LJMP    ??rxStartIsr_26 & 0xFFFF
    729                    {
    730                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    731                    }
    732                  }
    733                  else
    734                  {
    735                    /* When autopend is disabled, check the application pending callback */
    736                    if( macRxCheckPendingCallback() )
    737                    {
    738                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    739                    }
    740                  }
    741                }
    742              }
    743          
    744              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
    745              {
    746                MAC_RADIO_TX_ACK_PEND();
    747              }
    748              else
    749              {
    750                MAC_RADIO_TX_ACK();
   \                     ??rxStartIsr_25:
   \   000295   90618A       MOV     DPTR,#0x618a
   \   000298   E0           MOVX    A,@DPTR
   \   000299   C2E2         CLR     0xE0 /* A   */.2
    751              }
   \                     ??rxStartIsr_28:
   \   00029B   12....       LCALL   ?Subroutine13 & 0xFFFF
    752          
    753          
    754              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    755              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
   \                     ??CrossCallReturnLabel_26:
   \   00029E   7591FE       MOV     0x91,#-0x2
   \   0002A1   E9           MOV     A,R1
   \   0002A2   A2E7         MOV     C,0xE0 /* A   */.7
   \   0002A4   E4           CLR     A
   \   0002A5   33           RLC     A
   \   0002A6   F8           MOV     R0,A
   \   0002A7   E9           MOV     A,R1
   \   0002A8   A2E7         MOV     C,0xE0 /* A   */.7
   \   0002AA   92AF         MOV     0xa8.7,C
   \   0002AC   9061A4       MOV     DPTR,#0x61a4
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   D2E0         SETB    0xE0 /* A   */.0
   \   0002B2   F0           MOVX    @DPTR,A
    756              HAL_EXIT_CRITICAL_SECTION(s);
   \   0002B3   E5..         MOV     A,?V0
   \   0002B5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002B7   92AF         MOV     0xa8.7,C
    757            }
    758          
    759           /*-------------------------------------------------------------------------------
    760            *  Populate the receive buffer going up to high-level.
    761            */
    762          
    763            /* configure the payload buffer
    764             * save MAC header pointer regardless of security status.
    765             */
    766            pRxBuf->mhr.p   = pRxBuf->msdu.p   = (uint8 *) (pRxBuf + 1);
   \                     ??rxStartIsr_24:
   \   0002B9   90....       MOV     DPTR,#pRxBuf
   \   0002BC   E0           MOVX    A,@DPTR
   \   0002BD   243A         ADD     A,#0x3a
   \   0002BF   FA           MOV     R2,A
   \   0002C0   A3           INC     DPTR
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   3400         ADDC    A,#0x0
   \   0002C4   FB           MOV     R3,A
   \   0002C5   90....       MOV     DPTR,#pRxBuf
   \   0002C8   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0002CB   A3           INC     DPTR
   \   0002CC   A3           INC     DPTR
   \   0002CD   EA           MOV     A,R2
   \   0002CE   F0           MOVX    @DPTR,A
   \   0002CF   A3           INC     DPTR
   \   0002D0   EB           MOV     A,R3
   \   0002D1   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0002D4   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0002D7   12....       LCALL   ?Subroutine7 & 0xFFFF
    767            pRxBuf->mhr.len = pRxBuf->msdu.len =  rxPayloadLen;
   \                     ??CrossCallReturnLabel_72:
   \   0002DA   2404         ADD     A,#0x4
   \   0002DC   F8           MOV     R0,A
   \   0002DD   A3           INC     DPTR
   \   0002DE   E0           MOVX    A,@DPTR
   \   0002DF   3400         ADDC    A,#0x0
   \   0002E1   F9           MOV     R1,A
   \   0002E2   90....       MOV     DPTR,#rxPayloadLen
   \   0002E5   E0           MOVX    A,@DPTR
   \   0002E6   8882         MOV     DPL,R0
   \   0002E8   8983         MOV     DPH,R1
   \   0002EA   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0002ED   2435         ADD     A,#0x35
   \   0002EF   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0002F2   E0           MOVX    A,@DPTR
   \   0002F3   8A82         MOV     DPL,R2
   \   0002F5   8B83         MOV     DPH,R3
   \   0002F7   12....       LCALL   ?Subroutine9 & 0xFFFF
    768          
    769            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \                     ??CrossCallReturnLabel_19:
   \   0002FA   5046         JNC     ??rxStartIsr_29
    770            {
    771              /* Copy FCF and sequence number to RX buffer */
    772              pRxBuf->mhr.len = MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN;
   \   0002FC   8A82         MOV     DPL,R2
   \   0002FE   8B83         MOV     DPH,R3
   \   000300   7403         MOV     A,#0x3
   \   000302   F0           MOVX    @DPTR,A
    773              osal_memcpy(pRxBuf->mhr.p, &rxBuf[1], pRxBuf->mhr.len);
   \   000303                ; Setup parameters for call to function osal_memcpy
   \   000303   75....       MOV     ?V0,#(rxBuf + 1) & 0xff
   \   000306   75....       MOV     ?V1,#((rxBuf + 1) >> 8) & 0xff
   \   000309   75..00       MOV     ?V2,#0x0
   \   00030C   78..         MOV     R0,#?V0
   \   00030E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000311   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000314   FC           MOV     R4,A
   \   000315   7D00         MOV     R5,#0x0
   \   000317   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00031A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00031D   7403         MOV     A,#0x3
   \   00031F   12....       LCALL   ?DEALLOC_XSTACK8
    774              pRxBuf->mhr.p += pRxBuf->mhr.len;
   \   000322   12....       LCALL   ?Subroutine20 & 0xFFFF
    775            }
   \                     ??CrossCallReturnLabel_37:
   \   000325   E8           MOV     A,R0
   \   000326   FA           MOV     R2,A
   \   000327   E9           MOV     A,R1
   \   000328   FB           MOV     R3,A
   \   000329   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00032C   F8           MOV     R0,A
   \   00032D   8A82         MOV     DPL,R2
   \   00032F   8B83         MOV     DPH,R3
   \   000331   E0           MOVX    A,@DPTR
   \   000332   28           ADD     A,R0
   \   000333   F8           MOV     R0,A
   \   000334   A3           INC     DPTR
   \   000335   E0           MOVX    A,@DPTR
   \   000336   3400         ADDC    A,#0x0
   \   000338   F9           MOV     R1,A
   \   000339   8A82         MOV     DPL,R2
   \   00033B   8B83         MOV     DPH,R3
   \   00033D   E8           MOV     A,R0
   \   00033E   F0           MOVX    @DPTR,A
   \   00033F   A3           INC     DPTR
   \   000340   E9           MOV     A,R1
   \   000341   F0           MOVX    @DPTR,A
    776          
    777            /* set internal values */
    778            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
   \                     ??rxStartIsr_29:
   \   000342   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000345   241B         ADD     A,#0x1b
   \   000347   F582         MOV     DPL,A
   \   000349   E4           CLR     A
   \   00034A   38           ADDC    A,R0
   \   00034B   F583         MOV     DPH,A
   \   00034D   E5..         MOV     A,?V5
   \   00034F   12....       LCALL   ?Subroutine2 & 0xFFFF
    779            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
   \                     ??CrossCallReturnLabel_0:
   \   000352   2424         ADD     A,#0x24
   \   000354   F582         MOV     DPL,A
   \   000356   E4           CLR     A
   \   000357   38           ADDC    A,R0
   \   000358   F583         MOV     DPH,A
   \   00035A   E5..         MOV     A,?V3
   \   00035C   F0           MOVX    @DPTR,A
    780            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
   \   00035D                ; Setup parameters for call to function macMcuOverflowCapture
   \   00035D   12....       LCALL   `??macMcuOverflowCapture::?relay`; Banked call to: macMcuOverflowCapture
   \   000360   8A..         MOV     ?V0,R2
   \   000362   8B..         MOV     ?V1,R3
   \   000364   8C..         MOV     ?V2,R4
   \   000366   8D..         MOV     ?V3,R5
   \   000368   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00036B   2425         ADD     A,#0x25
   \   00036D   F582         MOV     DPL,A
   \   00036F   E4           CLR     A
   \   000370   38           ADDC    A,R0
   \   000371   F583         MOV     DPH,A
   \   000373   78..         MOV     R0,#?V0
   \   000375   12....       LCALL   ?L_MOV_TO_X
    781            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
   \   000378                ; Setup parameters for call to function macMcuTimerCapture
   \   000378   12....       LCALL   `??macMcuTimerCapture::?relay`; Banked call to: macMcuTimerCapture
   \   00037B   8A..         MOV     ?V0,R2
   \   00037D   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000380   2429         ADD     A,#0x29
   \   000382   F582         MOV     DPL,A
   \   000384   E4           CLR     A
   \   000385   3A           ADDC    A,R2
   \   000386   F583         MOV     DPH,A
   \   000388   E5..         MOV     A,?V0
   \   00038A   F0           MOVX    @DPTR,A
   \   00038B   A3           INC     DPTR
   \   00038C   EB           MOV     A,R3
   \   00038D   F0           MOVX    @DPTR,A
    782          
    783            /* Special Case for Enhanced Beacon Request which has a different
    784             * frame version
    785             */
    786          #ifdef FEATURE_ENHANCED_BEACON
    787            if( MAC_FRAME_VERSION(&rxBuf[1]) == 2 )
    788            {
    789                pRxBuf->internal.frameType  = MAC_FRAME_TYPE_INTERNAL_MAC_VERSION_E | \
    790                                            MAC_FRAME_TYPE(&rxBuf[1]);
    791            }
    792            else
    793          #endif
    794            {
    795              pRxBuf->internal.frameType  = MAC_FRAME_TYPE(&rxBuf[1]);
   \   00038E   90....       MOV     DPTR,#rxBuf + 1
   \   000391   E0           MOVX    A,@DPTR
   \   000392   5407         ANL     A,#0x7
   \   000394   C0E0         PUSH    A
   \   000396   12....       LCALL   ?Subroutine19 & 0xFFFF
    796            }
   \                     ??CrossCallReturnLabel_35:
   \   000399   A3           INC     DPTR
   \   00039A   D0E0         POP     A
   \   00039C   F0           MOVX    @DPTR,A
    797          
    798            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
   \   00039D   90....       MOV     DPTR,#rxBuf + 3
   \   0003A0   E0           MOVX    A,@DPTR
   \   0003A1   C0E0         PUSH    A
   \   0003A3   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0003A6   2432         ADD     A,#0x32
   \   0003A8   F582         MOV     DPL,A
   \   0003AA   E4           CLR     A
   \   0003AB   38           ADDC    A,R0
   \   0003AC   F583         MOV     DPH,A
   \   0003AE   D0E0         POP     A
   \   0003B0   F0           MOVX    @DPTR,A
    799            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
   \   0003B1   90....       MOV     DPTR,#rxBuf + 1
   \   0003B4   E0           MOVX    A,@DPTR
   \   0003B5   5478         ANL     A,#0x78
   \   0003B7   F8           MOV     R0,A
   \   0003B8   A3           INC     DPTR
   \   0003B9   E0           MOVX    A,@DPTR
   \   0003BA   C4           SWAP    A
   \   0003BB   540F         ANL     A,#0xf
   \   0003BD   5403         ANL     A,#0x3
   \   0003BF   48           ORL     A,R0
   \   0003C0   4E           ORL     A,R6
   \   0003C1   C0E0         PUSH    A
   \   0003C3   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0003C6   D0E0         POP     A
   \   0003C8   F0           MOVX    @DPTR,A
    800          
    801            /*-------------------------------------------------------------------------------
    802             *  If the processing the addressing fields does not require more bytes from
    803             *  the FIFO go directly address processing function.  Otherwise, configure
    804             *  interrupt to jump there once bytes are received.
    805             */
    806            if (addrLen == 0)
   \   0003C9   EF           MOV     A,R7
   \   0003CA   7033         JNZ     ??rxStartIsr_30
    807            {
    808              /* no addressing fields to read, prepare for payload interrupts */
    809              pFuncRxState = &rxPayloadIsr;
   \   0003CC   12....       LCALL   ?Subroutine10 & 0xFFFF
    810              rxPrepPayload();
    811            }
   \                     ??CrossCallReturnLabel_21:
   \   0003CF   7019         JNZ     ??rxStartIsr_31
   \   0003D1   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0003D4   8043         SJMP    ??rxStartIsr_32
   \                     ??rxStartIsr_27:
   \   0003D6                ; Setup parameters for call to function macRxCheckPendingCallback
   \   0003D6   12....       LCALL   `??macRxCheckPendingCallback::?relay`; Banked call to: macRxCheckPendingCallback
   \   0003D9   E9           MOV     A,R1
   \   0003DA   7003         JNZ     $+5
   \   0003DC   02....       LJMP    ??rxStartIsr_25 & 0xFFFF
   \                     ??rxStartIsr_26:
   \   0003DF   7E04         MOV     R6,#0x4
   \   0003E1   90618A       MOV     DPTR,#0x618a
   \   0003E4   E0           MOVX    A,@DPTR
   \   0003E5   D2E2         SETB    0xE0 /* A   */.2
   \   0003E7   02....       LJMP    ??rxStartIsr_28 & 0xFFFF
   \                     ??rxStartIsr_31:
   \   0003EA   C3           CLR     C
   \   0003EB   9410         SUBB    A,#0x10
   \   0003ED   5006         JNC     ??rxStartIsr_33
   \   0003EF   E0           MOVX    A,@DPTR
   \   0003F0   90....       MOV     DPTR,#rxNextLen
   \   0003F3   8005         SJMP    ??rxStartIsr_34
   \                     ??rxStartIsr_33:
   \   0003F5   90....       MOV     DPTR,#rxNextLen
   \   0003F8   7410         MOV     A,#0x10
   \                     ??rxStartIsr_34:
   \   0003FA   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0003FD   801A         SJMP    ??rxStartIsr_32
    812            else
    813            {
    814              /* need to read and process addressing fields, prepare for address interrupt */
    815              rxNextLen = addrLen;
   \                     ??rxStartIsr_30:
   \   0003FF   90....       MOV     DPTR,#rxNextLen
   \   000402   12....       LCALL   ?Subroutine9 & 0xFFFF
    816              if (MAC_SEC_ENABLED(&rxBuf[1]))
   \                     ??CrossCallReturnLabel_20:
   \   000405   90....       MOV     DPTR,#rxNextLen
   \   000408   E0           MOVX    A,@DPTR
   \   000409   4001         JC      ??rxStartIsr_35
    817              {
    818                /* When security is enabled, read off security control field as well */
    819                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
    820              }
    821              else
    822              {
    823                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00040B   14           DEC     A
   \                     ??rxStartIsr_35:
   \   00040C   906194       MOV     DPTR,#0x6194
   \   00040F   F0           MOVX    @DPTR,A
    824              }
    825              pFuncRxState = &rxAddrIsr;
   \   000410   90....       MOV     DPTR,#pFuncRxState
   \   000413   74..         MOV     A,#`??rxAddrIsr::?relay` & 0xff
   \   000415   F0           MOVX    @DPTR,A
   \   000416   A3           INC     DPTR
   \   000417   74..         MOV     A,#(`??rxAddrIsr::?relay` >> 8) & 0xff
   \                     ??rxStartIsr_32:
   \   000419   F0           MOVX    @DPTR,A
    826            }
    827          }
   \                     ??rxStartIsr_3:
   \   00041A   7402         MOV     A,#0x2
   \   00041C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00041F   7F08         MOV     R7,#0x8
   \   000421   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000424                REQUIRE RFST
   \   000424                REQUIRE _A_IEN0
   \   000424                REQUIRE S1CON
   \   000424                REQUIRE RFIRQF1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   74..         MOV     A,#macRxAddrLen & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#(macRxAddrLen >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   E4           CLR     A
   \   00000B   93           MOVC    A,@A+DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   2435         ADD     A,#0x35
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#pMacDataTx
   \   000004   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   9061A4       MOV     DPTR,#0x61a4
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C2E0         CLR     0xE0 /* A   */.0
   \   000006                REQUIRE ??Subroutine32_0
   \   000006                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#rxBuf + 1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   A2E3         MOV     C,0xE0 /* A   */.3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   CA           XCH     A,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003                REQUIRE ??Subroutine34_0
   \   000003                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   2407         ADD     A,#0x7
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#pFuncRxState
   \   000003   74..         MOV     A,#`??rxPayloadIsr::?relay` & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#(`??rxPayloadIsr::?relay` >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#rxPayloadLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   906194       MOV     DPTR,#0x6194
   \   000003   7401         MOV     A,#0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#pFuncRxState
   \   000009   74..         MOV     A,#`??rxFcsIsr::?relay` & 0xff
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74..         MOV     A,#(`??rxFcsIsr::?relay` >> 8) & 0xff
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2433         ADD     A,#0x33
   \   000006   F8           MOV     R0,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   2433         ADD     A,#0x33
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E0           MOVX    A,@DPTR
   \   000002   14           DEC     A
   \   000003   906194       MOV     DPTR,#0x6194
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004                REQUIRE ??Subroutine36_0
   \   000004                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function macRxCompleteCallback
   \   000001   90....       MOV     DPTR,#pRxBuf
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003                REQUIRE ??Subroutine37_0
   \   000003                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   22           RET
    828          
    829          
    830          /*=================================================================================================
    831           * @fn          rxAddrIsr
    832           *
    833           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    834           *              from the incoming packet.
    835           *
    836           * @param       none
    837           *
    838           * @return      none
    839           *=================================================================================================
    840           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    841          static void rxAddrIsr(void)
   \                     rxAddrIsr:
    842          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    843            uint8 buf[MAX_ADDR_FIELDS_LEN];
    844            uint8 dstAddrMode;
    845            uint8 srcAddrMode;
    846          #ifdef FEATURE_MAC_SECURITY
    847            uint8 securityControl;
    848          #endif /* MAC_SECURITY */
    849            uint8  * p;
    850          
    851            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
   \   00000A   90....       MOV     DPTR,#rxNextLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??rxAddrIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    852          
    853            /*  read out address fields into local buffer in one shot */
    854            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \                     ??rxAddrIsr_0:
   \   000013                ; Setup parameters for call to function macMemReadRxFifo
   \   000013   90....       MOV     DPTR,#rxNextLen
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   AA..         MOV     R2,?XSP + 0
   \   00001A   AB..         MOV     R3,?XSP + 1
   \   00001C   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    855          
    856            /* set pointer to buffer with addressing fields */
    857            p = buf;
   \   00001F   A8..         MOV     R0,?XSP + 0
   \   000021   A9..         MOV     R1,?XSP + 1
   \   000023   88..         MOV     ?V0,R0
   \   000025   89..         MOV     ?V1,R1
   \   000027   AC..         MOV     R4,?V0
   \   000029   AD..         MOV     R5,?V1
    858          
    859            /* destination address */
    860            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \   00002B   90....       MOV     DPTR,#rxBuf + 2
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   13           RRC     A
   \   000030   13           RRC     A
   \   000031   543F         ANL     A,#0x3f
   \   000033   5403         ANL     A,#0x3
   \   000035   FE           MOV     R6,A
    861            if (dstAddrMode != SADDR_MODE_NONE)
   \   000036   6071         JZ      ??rxAddrIsr_1
    862            {
    863              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
   \   000038   90....       MOV     DPTR,#pRxBuf
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   242D         ADD     A,#0x2d
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   3400         ADDC    A,#0x0
   \   000043   F9           MOV     R1,A
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FC           MOV     R4,A
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E0           MOVX    A,@DPTR
   \   000052   FB           MOV     R3,A
   \   000053   EC           MOV     A,R4
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   EB           MOV     A,R3
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   8882         MOV     DPL,R0
   \   00005E   8983         MOV     DPH,R1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000067   242B         ADD     A,#0x2b
   \   000069   12....       LCALL   ?Subroutine5 & 0xFFFF
    864              p += MAC_PAN_ID_FIELD_LEN;
    865              if (dstAddrMode == SADDR_MODE_EXT)
   \                     ??CrossCallReturnLabel_68:
   \   00006C   241C         ADD     A,#0x1c
   \   00006E   FA           MOV     R2,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   3400         ADDC    A,#0x0
   \   000073   FB           MOV     R3,A
   \   000074   7403         MOV     A,#0x3
   \   000076   6E           XRL     A,R6
   \   000077   7010         JNZ     ??rxAddrIsr_2
    866              {
    867                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
   \   000079                ; Setup parameters for call to function sAddrExtCpy
   \   000079   7402         MOV     A,#0x2
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   AC82         MOV     R4,DPL
   \   000080   AD83         MOV     R5,DPH
   \   000082   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    868                p += MAC_EXT_ADDR_FIELD_LEN;
   \   000085   740A         MOV     A,#0xa
   \   000087   8019         SJMP    ??rxAddrIsr_3
    869              }
    870              else
    871              {
    872                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_2:
   \   000089   7402         MOV     A,#0x2
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   FC           MOV     R4,A
   \   000090   7403         MOV     A,#0x3
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F9           MOV     R1,A
   \   000097   EC           MOV     A,R4
   \   000098   8A82         MOV     DPL,R2
   \   00009A   8B83         MOV     DPH,R3
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
   \   00009E   E9           MOV     A,R1
   \   00009F   F0           MOVX    @DPTR,A
    873                p += MAC_SHORT_ADDR_FIELD_LEN;
   \   0000A0   7404         MOV     A,#0x4
   \                     ??rxAddrIsr_3:
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   AC82         MOV     R4,DPL
   \   0000A7   AD83         MOV     R5,DPH
    874              }
    875            }
    876          
    877            /* sources address */
    878            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \                     ??rxAddrIsr_1:
   \   0000A9   90....       MOV     DPTR,#rxBuf + 2
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   C4           SWAP    A
   \   0000AE   13           RRC     A
   \   0000AF   13           RRC     A
   \   0000B0   5403         ANL     A,#0x3
   \   0000B2   FE           MOV     R6,A
    879            if (srcAddrMode != SADDR_MODE_NONE)
   \   0000B3   6035         JZ      ??CrossCallReturnLabel_46
    880            {
    881              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
   \   0000B5   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   A2E6         MOV     C,0xE0 /* A   */.6
   \   0000BB   400F         JC      ??rxAddrIsr_4
    882              {
    883                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
   \   0000BD   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000C0   242B         ADD     A,#0x2b
   \   0000C2   12....       LCALL   ?Subroutine24 & 0xFFFF
    884                p += MAC_PAN_ID_FIELD_LEN;
   \                     ??CrossCallReturnLabel_45:
   \   0000C5   EC           MOV     A,R4
   \   0000C6   2402         ADD     A,#0x2
   \   0000C8   FC           MOV     R4,A
   \   0000C9   5001         JNC     ??rxAddrIsr_4
   \   0000CB   0D           INC     R5
    885              }
    886              if (srcAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_4:
   \   0000CC   7403         MOV     A,#0x3
   \   0000CE   6E           XRL     A,R6
   \   0000CF   7011         JNZ     ??rxAddrIsr_5
    887              {
    888                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
   \   0000D1                ; Setup parameters for call to function sAddrExtCpy
   \   0000D1   90....       MOV     DPTR,#pRxBuf
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   2413         ADD     A,#0x13
   \   0000D7   FA           MOV     R2,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   3400         ADDC    A,#0x0
   \   0000DC   FB           MOV     R3,A
   \   0000DD   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000E0   8008         SJMP    ??CrossCallReturnLabel_46
    889              }
    890              else
    891              {
    892                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_5:
   \   0000E2   12....       LCALL   ?Subroutine15 & 0xFFFF
    893              }
    894            }
   \                     ??CrossCallReturnLabel_30:
   \   0000E5   2413         ADD     A,#0x13
   \   0000E7   12....       LCALL   ?Subroutine24 & 0xFFFF
    895          
    896          #ifdef FEATURE_MAC_SECURITY
    897            if (MAC_SEC_ENABLED(&rxBuf[1]))
    898            {
    899              uint8 keyIdMode;
    900          
    901              if (MAC_FRAME_VERSION(&rxBuf[1]) == 0)
    902              {
    903                /* MAC_UNSUPPORTED_LEGACY - Cancel the outgoing TX ACK.
    904                 * It may be too late but we have to try.
    905                 */
    906                MAC_RADIO_CANCEL_TX_ACK();
    907          
    908                /* clean up after unsupported security legacy */
    909                macRxHaltCleanup();
    910                return;
    911              }
    912          
    913              /* Copy addressing fields to RX buffer */
    914              osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
    915              pRxBuf->mhr.p   += rxNextLen;
    916              pRxBuf->mhr.len += rxNextLen;
    917          
    918              /*-------------------------------------------------------------------------------
    919               *  Prepare for auxiliary security header interrupts.
    920               */
    921          
    922              /* read out security control field from FIFO (threshold set so bytes are guaranteed to be there) */
    923              MAC_RADIO_READ_RX_FIFO(&securityControl, MAC_SEC_CONTROL_FIELD_LEN);
    924          
    925              /* Copy security fields to MHR buffer */
    926              *pRxBuf->mhr.p   = securityControl;
    927              pRxBuf->mhr.p   += MAC_SEC_CONTROL_FIELD_LEN;
    928              pRxBuf->mhr.len += MAC_SEC_CONTROL_FIELD_LEN;
    929          
    930              /* store security level and key ID mode */
    931              pRxBuf->sec.securityLevel = SECURITY_LEVEL(securityControl);
    932              pRxBuf->sec.keyIdMode = keyIdMode = KEY_IDENTIFIER_MODE(securityControl);
    933          
    934              /* Corrupted RX frame, should never occur. */
    935              if ((keyIdMode > MAC_KEY_ID_MODE_8)
    936              /* Get the next RX length according to AuxLen table minus security control field.
    937               * The security control length is counted already.
    938               */
    939              || ((macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN) >= rxPayloadLen)
    940              /* Security Enabled subfield is one, but the Security Level in the header is zero:
    941               * MAC_UNSUPPORTED_SECURITY - Cancel the outgoing TX ACK.
    942               */
    943              || (pRxBuf->sec.securityLevel == MAC_SEC_LEVEL_NONE))
    944              {
    945                /* It may be too late but we have to try. */
    946                MAC_RADIO_CANCEL_TX_ACK();
    947          
    948                /* clean up after unsupported security or corrupted RX frame. */
    949                macRxHaltCleanup();
    950                return;
    951              }
    952          
    953              /* get the next RX length according to AuxLen table minus security control field.
    954               * The sceurity control length is counted already.
    955               */
    956              rxNextLen = macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN;
    957              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
    958              pFuncRxState = &rxSecurityHdrIsr;
    959            }
    960            else
    961          #endif /* MAC_SECURITY */
    962            {
    963              /* clear security level */
    964              pRxBuf->sec.securityLevel = MAC_SEC_LEVEL_NONE;
   \                     ??CrossCallReturnLabel_46:
   \   0000EA   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000ED   2410         ADD     A,#0x10
   \   0000EF   F582         MOV     DPL,A
   \   0000F1   E4           CLR     A
   \   0000F2   38           ADDC    A,R0
   \   0000F3   F583         MOV     DPH,A
   \   0000F5   E4           CLR     A
   \   0000F6   F0           MOVX    @DPTR,A
    965          
    966              /*-------------------------------------------------------------------------------
    967               *  Prepare for payload interrupts.
    968               */
    969              pFuncRxState = &rxPayloadIsr;
   \   0000F7   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000FA   7005         JNZ     ??rxAddrIsr_6
   \   0000FC   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000FF   8013         SJMP    ??CrossCallReturnLabel_9
   \                     ??rxAddrIsr_6:
   \   000101   C3           CLR     C
   \   000102   9410         SUBB    A,#0x10
   \   000104   5006         JNC     ??rxAddrIsr_7
   \   000106   E0           MOVX    A,@DPTR
   \   000107   90....       MOV     DPTR,#rxNextLen
   \   00010A   8005         SJMP    ??rxAddrIsr_8
   \                     ??rxAddrIsr_7:
   \   00010C   90....       MOV     DPTR,#rxNextLen
   \   00010F   7410         MOV     A,#0x10
   \                     ??rxAddrIsr_8:
   \   000111   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000114   F0           MOVX    @DPTR,A
    970              rxPrepPayload();
    971            }
    972          }
   \   000115   7414         MOV     A,#0x14
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011A                REQUIRE ?Subroutine1
   \   00011A                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F9           MOV     R1,A
   \   000001                REQUIRE ??Subroutine33_0
   \   000001                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3A           ADDC    A,R2
   \   000004   F583         MOV     DPH,A
   \   000006   E8           MOV     A,R0
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   E9           MOV     A,R1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EA           MOV     A,R2
   \   00000A   F8           MOV     R0,A
   \   00000B   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3A           ADDC    A,R2
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine35_0
   \   000006                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   90....       MOV     DPTR,#pRxBuf
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET
    973          
    974          
    975          #ifdef FEATURE_MAC_SECURITY
    976          /*=================================================================================================
    977           * @fn          rxSecurityHdrIsr
    978           *
    979           * @brief       Receive ISR state for reading out and storing the auxiliary security header.
    980           *
    981           * @param       none
    982           *
    983           * @return      none
    984           *=================================================================================================
    985           */
    986          static void rxSecurityHdrIsr(void)
    987          {
    988            uint8 buf[MAC_FRAME_COUNTER_LEN + MAC_KEY_ID_8_LEN];
    989          
    990            /* read out frame counter and key ID */
    991            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
    992          
    993            /* Incoming frame counter */
    994            pRxBuf->frameCounter = BUILD_UINT32(buf[0], buf[1], buf[2], buf[3]);
    995            if (rxNextLen - MAC_FRAME_COUNTER_LEN > 0)
    996            {
    997              /* Explicit mode */
    998              osal_memcpy(pRxBuf->sec.keySource, &buf[MAC_FRAME_COUNTER_LEN], rxNextLen - MAC_FRAME_COUNTER_LEN - 1);
    999              pRxBuf->sec.keyIndex = buf[rxNextLen - MAC_KEY_INDEX_LEN];
   1000            }
   1001          
   1002            /* Copy security fields to RX buffer */
   1003            osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
   1004            pRxBuf->mhr.p   += rxNextLen;
   1005            pRxBuf->mhr.len += rxNextLen;
   1006          
   1007            /* Update payload pointer and payload length. The rxPayloadLen includes security header length
   1008             * and SCF byte. The security header and SCF length must be deducted from the rxPayloadLen.
   1009             */
   1010            rxPayloadLen    -= (rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
   1011            pRxBuf->msdu.len = rxPayloadLen;
   1012            pRxBuf->mhr.len += rxPayloadLen;
   1013          
   1014            /*-------------------------------------------------------------------------------
   1015             *  Prepare for payload interrupts.
   1016             */
   1017            pFuncRxState = &rxPayloadIsr;
   1018            rxPrepPayload();
   1019          }
   1020          #endif /* MAC_SECURITY */
   1021          
   1022          
   1023          /*=================================================================================================
   1024           * @fn          rxPrepPayload
   1025           *
   1026           * @brief       Common code to prepare for the payload ISR.
   1027           *
   1028           * @param       none
   1029           *
   1030           * @return      none
   1031           *=================================================================================================
   1032           */
   1033          static void rxPrepPayload(void)
   1034          {
   1035            if (rxPayloadLen == 0)
   1036            {
   1037              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
   1038              pFuncRxState = &rxFcsIsr;
   1039            }
   1040            else
   1041            {
   1042              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   1043              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   1044            }
   1045          }
   1046          
   1047          
   1048          /*=================================================================================================
   1049           * @fn          rxPayloadIsr
   1050           *
   1051           * @brief       Receive ISR state for reading out and storing the packet payload.
   1052           *
   1053           * @param       none
   1054           *
   1055           * @return      none
   1056           *=================================================================================================
   1057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1058          static void rxPayloadIsr(void)
   \                     rxPayloadIsr:
   1059          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1060            MAC_RADIO_READ_RX_FIFO(pRxBuf->mhr.p, rxNextLen);
   \   000004                ; Setup parameters for call to function macMemReadRxFifo
   \   000004   90....       MOV     DPTR,#rxNextLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00000C   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1061            pRxBuf->mhr.p += rxNextLen;
   \   00000F   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000012   90....       MOV     DPTR,#rxNextLen
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   2A           ADD     A,R2
   \   00001D   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   EB           MOV     A,R3
   \   000024   F0           MOVX    @DPTR,A
   1062          
   1063            rxPayloadLen -= rxNextLen;
   \   000025   90....       MOV     DPTR,#rxNextLen
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   90....       MOV     DPTR,#rxPayloadLen
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C3           CLR     C
   \   00002F   98           SUBB    A,R0
   \   000030   F0           MOVX    @DPTR,A
   1064          
   1065            rxPrepPayload();
   \   000031   7005         JNZ     ??rxPayloadIsr_0
   \   000033   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000036   8013         SJMP    ??CrossCallReturnLabel_10
   \                     ??rxPayloadIsr_0:
   \   000038   C3           CLR     C
   \   000039   9410         SUBB    A,#0x10
   \   00003B   5006         JNC     ??rxPayloadIsr_1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   90....       MOV     DPTR,#rxNextLen
   \   000041   8005         SJMP    ??rxPayloadIsr_2
   \                     ??rxPayloadIsr_1:
   \   000043   90....       MOV     DPTR,#rxNextLen
   \   000046   7410         MOV     A,#0x10
   \                     ??rxPayloadIsr_2:
   \   000048   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00004B   02....       LJMP    ?Subroutine0 & 0xFFFF
   1066          }
   1067          
   1068          
   1069          /*=================================================================================================
   1070           * @fn          rxFcsIsr
   1071           *
   1072           * @brief       Receive ISR state for handling the FCS.
   1073           *
   1074           * @param       none
   1075           *
   1076           * @return      none
   1077           *=================================================================================================
   1078           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1079          static void rxFcsIsr(void)
   \                     rxFcsIsr:
   1080          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1081            uint8 crcOK;
   1082            uint8 ackWithPending = 0;
   \   000005   7E00         MOV     R6,#0x0
   1083          
   1084            /* read FCS, rxBuf is now available storage */
   1085            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
   \   000007                ; Setup parameters for call to function macMemReadRxFifo
   \   000007   7902         MOV     R1,#0x2
   \   000009   7A..         MOV     R2,#rxBuf & 0xff
   \   00000B   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   00000D   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1086          
   1087            /*
   1088             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
   1089             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
   1090             *    1) the RSSI value
   1091             *    2) the average correlation value (used for LQI)
   1092             *    3) a CRC passed bit
   1093             */
   1094          
   1095            /* save the "CRC-is-OK" status */
   1096            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
   \   000010   90....       MOV     DPTR,#rxBuf + 1
   \   000013   E0           MOVX    A,@DPTR
   \   000014   5480         ANL     A,#0x80
   \   000016   FF           MOV     R7,A
   1097          
   1098            /*
   1099             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
   1100             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
   1101             *  a special variant of promiscuous mode is active.
   1102             */
   1103            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
   \   000017   700B         JNZ     ??rxFcsIsr_0
   \   000019   90....       MOV     DPTR,#rxPromiscuousMode
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6402         XRL     A,#0x2
   \   00001F   6003         JZ      $+5
   \   000021   02....       LJMP    ??rxFcsIsr_1 & 0xFFFF
   1104            {
   1105              int8 rssiDbm;
   1106              uint8 corr;
   1107          
   1108          #ifdef FEATURE_SYSTEM_STATS
   1109              /* Increment diagnostic CRC success counter */
   1110              macLowLevelDiags( MAC_DIAGS_RX_CRC_PASS );
   1111          #endif /* FEATURE_SYSTEM_STATS */
   1112          
   1113              /*
   1114               *  As power saving optimization, set state variable to indicate physical receive
   1115               *  has completed and then request turning of the receiver.  This means the receiver
   1116               *  can be off (if other conditions permit) during execution of the callback function.
   1117               *
   1118               *  The receiver will be requested to turn off once again at the end of the receive
   1119               *  logic.  There is no harm in doing this.
   1120               */
   1121              macRxActive = MAC_RX_ACTIVE_DONE;
   \                     ??rxFcsIsr_0:
   \   000024   90....       MOV     DPTR,#macRxActive
   \   000027   7402         MOV     A,#0x2
   \   000029   F0           MOVX    @DPTR,A
   1122              macRxOffRequest();
   \   00002A                ; Setup parameters for call to function macRxOffRequest
   \   00002A   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1123          
   1124              /* decode RSSI and correlation values */
   1125              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
   \   00002D   90....       MOV     DPTR,#rxBuf
   \   000030   E0           MOVX    A,@DPTR
   \   000031   24B7         ADD     A,#-0x49
   \   000033   F5..         MOV     ?V1,A
   1126              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
   1127              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   547F         ANL     A,#0x7f
   \   000039   F5..         MOV     ?V0,A
   1128          
   1129              /* record parameters that get passed up to high-level */
   1130              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   00003B                ; Setup parameters for call to function macRadioComputeLQI
   \   00003B   FA           MOV     R2,A
   \   00003C   A9..         MOV     R1,?V1
   \   00003E   12....       LCALL   `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   000041   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000044   242F         ADD     A,#0x2f
   \   000046   F582         MOV     DPL,A
   \   000048   E4           CLR     A
   \   000049   38           ADDC    A,R0
   \   00004A   F583         MOV     DPH,A
   \   00004C   E9           MOV     A,R1
   \   00004D   12....       LCALL   ?Subroutine2 & 0xFFFF
   1131              pRxBuf->mac.rssi = rssiDbm;
   \                     ??CrossCallReturnLabel_1:
   \   000050   2431         ADD     A,#0x31
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   38           ADDC    A,R0
   \   000056   F583         MOV     DPH,A
   \   000058   E5..         MOV     A,?V1
   \   00005A   12....       LCALL   ?Subroutine2 & 0xFFFF
   1132              pRxBuf->mac.correlation = corr;
   \                     ??CrossCallReturnLabel_2:
   \   00005D   2430         ADD     A,#0x30
   \   00005F   F582         MOV     DPL,A
   \   000061   E4           CLR     A
   \   000062   38           ADDC    A,R0
   \   000063   F583         MOV     DPH,A
   \   000065   E5..         MOV     A,?V0
   \   000067   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   1133          
   1134              /* set the MSDU pointer to point at start of data */
   1135              pRxBuf->mhr.p   = (uint8 *) (pRxBuf + 1);
   \                     ??CrossCallReturnLabel_73:
   \   00006A   243A         ADD     A,#0x3a
   \   00006C   F8           MOV     R0,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   3400         ADDC    A,#0x0
   \   000071   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000074   2433         ADD     A,#0x33
   \   000076   12....       LCALL   ?Subroutine5 & 0xFFFF
   1136              pRxBuf->msdu.p += (pRxBuf->mhr.len - pRxBuf->msdu.len);
   \                     ??CrossCallReturnLabel_69:
   \   000079   2402         ADD     A,#0x2
   \   00007B   F8           MOV     R0,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   3400         ADDC    A,#0x0
   \   000080   F9           MOV     R1,A
   \   000081   E8           MOV     A,R0
   \   000082   FA           MOV     R2,A
   \   000083   E9           MOV     A,R1
   \   000084   FB           MOV     R3,A
   \   000085   18           DEC     R0
   \   000086   18           DEC     R0
   \   000087   E0           MOVX    A,@DPTR
   \   000088   C8           XCH     A,R0
   \   000089   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00008C   FC           MOV     R4,A
   \   00008D   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F8           MOV     R0,A
   \   000092   EC           MOV     A,R4
   \   000093   C3           CLR     C
   \   000094   98           SUBB    A,R0
   \   000095   F8           MOV     R0,A
   \   000096   95E0         SUBB    A,0xE0 /* A   */
   \   000098   F9           MOV     R1,A
   \   000099   8A82         MOV     DPL,R2
   \   00009B   8B83         MOV     DPH,R3
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   28           ADD     A,R0
   \   00009F   F8           MOV     R0,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   39           ADDC    A,R1
   \   0000A3   F9           MOV     R1,A
   \   0000A4   8A82         MOV     DPL,R2
   \   0000A6   8B83         MOV     DPH,R3
   \   0000A8   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   1137          
   1138              if ((pRxBuf->internal.flags & MAC_RX_FLAG_ACK_PENDING) && (*pRxBuf->msdu.p != MAC_DATA_REQ_FRAME))
   \                     ??CrossCallReturnLabel_70:
   \   0000AB   FA           MOV     R2,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   CA           XCH     A,R2
   \   0000AF   2407         ADD     A,#0x7
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   E4           CLR     A
   \   0000B4   3A           ADDC    A,R2
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000BA   5010         JNC     ??rxFcsIsr_2
   \   0000BC   8882         MOV     DPL,R0
   \   0000BE   8983         MOV     DPH,R1
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   6404         XRL     A,#0x4
   \   0000C3   6007         JZ      ??rxFcsIsr_2
   1139              {
   1140                /* For non-data request commands, cancel the pending bit in the ACK. */
   1141                MAC_RADIO_TX_ACK();
   \   0000C5   90618A       MOV     DPTR,#0x618a
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   C2E2         CLR     0xE0 /* A   */.2
   \   0000CB   F0           MOVX    @DPTR,A
   1142              }
   1143          
   1144              /* Read the source matching result back */
   1145              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
   \                     ??rxFcsIsr_2:
   \   0000CC   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   6008         JZ      ??rxFcsIsr_3
   \   0000D2                ; Setup parameters for call to function MAC_SrcMatchCheckResult
   \   0000D2   12....       LCALL   `??MAC_SrcMatchCheckResult::?relay`; Banked call to: MAC_SrcMatchCheckResult
   \   0000D5   E9           MOV     A,R1
   \   0000D6   6002         JZ      ??rxFcsIsr_3
   1146              {
   1147                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
   1148                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0000D8   7E04         MOV     R6,#0x4
   1149              }
   1150              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
   \                     ??rxFcsIsr_3:
   \   0000DA   EF           MOV     A,R7
   \   0000DB   4E           ORL     A,R6
   \   0000DC   F8           MOV     R0,A
   \   0000DD   90....       MOV     DPTR,#pRxBuf
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F9           MOV     R1,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   C9           XCH     A,R1
   \   0000E5   2407         ADD     A,#0x7
   \   0000E7   F582         MOV     DPL,A
   \   0000E9   E4           CLR     A
   \   0000EA   39           ADDC    A,R1
   \   0000EB   F583         MOV     DPH,A
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   48           ORL     A,R0
   \   0000EF   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   1151          
   1152              /* finally... execute callback function */
   1153              macRxCompleteCallback(pRxBuf);
   \                     ??CrossCallReturnLabel_74:
   \   0000F2   FA           MOV     R2,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   FB           MOV     R3,A
   \   0000F6   12....       LCALL   `??macRxCompleteCallback::?relay`; Banked call to: macRxCompleteCallback
   1154              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \   0000F9   800A         SJMP    ??rxFcsIsr_4
   1155            }
   1156            else
   1157            {
   1158          #ifdef FEATURE_SYSTEM_STATS
   1159              /* Increment diagnostic CRC failure counter */
   1160              macLowLevelDiags( MAC_DIAGS_RX_CRC_FAIL );
   1161          #endif /* FEATURE_SYSTEM_STATS */
   1162          
   1163              /*
   1164               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
   1165               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
   1166               *  slightly more efficient to do so.)
   1167               */
   1168              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \                     ??rxFcsIsr_1:
   \   0000FB   12....       LCALL   ?Subroutine11 & 0xFFFF
   1169              macRxOutgoingAckFlag = 0;
   1170          
   1171              /* the CRC failed so the packet must be discarded */
   1172              MEM_FREE((uint8 **)&pRxBuf);
   \                     ??CrossCallReturnLabel_56:
   \   0000FE                ; Setup parameters for call to function macDataRxMemFree
   \   0000FE   7A..         MOV     R2,#pRxBuf & 0xff
   \   000100   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   000102   12....       LCALL   `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
   1173              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
   \                     ??rxFcsIsr_4:
   \   000105   90....       MOV     DPTR,#pRxBuf
   \   000108   E4           CLR     A
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   A3           INC     DPTR
   \   00010B   F0           MOVX    @DPTR,A
   1174            }
   1175          
   1176            /* reset threshold level, reset receive state, and complete receive logic */
   1177            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00010C   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00010F   500B         JNC     ??rxFcsIsr_5
   \   000111   E0           MOVX    A,@DPTR
   \   000112   A2E7         MOV     C,0xE0 /* A   */.7
   \   000114   4006         JC      ??rxFcsIsr_5
   \   000116   75E1ED       MOV     0xe1,#-0x13
   \   000119   75E1ED       MOV     0xe1,#-0x13
   \                     ??rxFcsIsr_5:
   \   00011C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00011F   7009         JNZ     ??rxFcsIsr_6
   \   000121                ; Setup parameters for call to function macRxOffRequest
   \   000121   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   \   000124                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000124   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   \   000127                ; Setup parameters for call to function macTxStartQueuedFrame
   \   000127   12....       LCALL   `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
   1178            pFuncRxState = &rxStartIsr;
   1179            rxDone();
   1180          }
   \                     ??rxFcsIsr_6:
   \   00012A   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   00012D                REQUIRE RFST

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   906194       MOV     DPTR,#0x6194
   \   000003   7405         MOV     A,#0x5
   \   000005   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000008   F0           MOVX    @DPTR,A
   \   000009   906193       MOV     DPTR,#0x6193
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000F   22           RET
   1181          
   1182          
   1183          /*=================================================================================================
   1184           * @fn          rxDone
   1185           *
   1186           * @brief       Common exit point for receive.
   1187           *
   1188           * @param       none
   1189           *
   1190           * @return      none
   1191           *=================================================================================================
   1192           */
   1193          static void rxDone(void)
   1194          {
   1195            /* if the receive FIFO has overflowed, flush it here */
   1196            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
   1197            {
   1198              MAC_RADIO_FLUSH_RX_FIFO();
   1199            }
   1200          
   1201            /* mark receive as inactive */
   1202            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   1203          
   1204            /* if there is no outgoing ACK, run the post receive updates */
   1205            if (!macRxOutgoingAckFlag)
   1206            {
   1207              rxPostRxUpdates();
   1208            }
   1209          }
   1210          
   1211          
   1212          /**************************************************************************************************
   1213           * @fn          macRxAckTxDoneCallback
   1214           *
   1215           * @brief       Function called when the outoing ACK has completed transmitting.
   1216           *
   1217           * @param       none
   1218           *
   1219           * @return      none
   1220           **************************************************************************************************
   1221           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1222          void macRxAckTxDoneCallback(void)
   \                     macRxAckTxDoneCallback:
   1223          {  
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1224            macRxOutgoingAckFlag = 0;
   \   000004   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   1225          
   1226          #ifdef ACK_DONE_ISR_WORKAROUND
   1227            macTimerCancel(&macTxAckIsrTimer);
   1228          #endif /* ACK_DONE_ISR_WROKAROUND */
   1229          
   1230            /*
   1231             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1232             *  could be executed before the primary receive logic completes.  To prevent this, the
   1233             *  post updates are only executed if receive logic is no longer active.  In the case the
   1234             *  post updates are not executed here, they will execute when the main receive logic
   1235             *  completes.
   1236             */
   1237            if (!macRxActive)
   \   000009   90....       MOV     DPTR,#macRxActive
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7009         JNZ     ??macRxAckTxDoneCallback_0
   1238            {
   1239              rxPostRxUpdates();
   \   00000F                ; Setup parameters for call to function macRxOffRequest
   \   00000F   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   \   000012                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000012   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   \   000015                ; Setup parameters for call to function macTxStartQueuedFrame
   \   000015   12....       LCALL   `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
   1240            }
   1241          }
   \                     ??macRxAckTxDoneCallback_0:
   \   000018   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   1242          
   1243          
   1244          /*=================================================================================================
   1245           * @fn          rxPostRxUpdates
   1246           *
   1247           * @brief       Updates that need to be performed once receive is complete.
   1248           *
   1249           *              It is not fatal to execute this function if somehow receive is active.  Under
   1250           *              certain timing/interrupt conditions a new receive may have started before this
   1251           *              function executes.  This should happen very rarely (if it happens at all) and
   1252           *              would cause no problems.
   1253           *
   1254           * @param       none
   1255           *
   1256           * @return      none
   1257           *=================================================================================================
   1258           */
   1259          static void rxPostRxUpdates(void)
   1260          {
   1261            /* turn off receiver if permitted */
   1262            macRxOffRequest();
   1263          
   1264            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1265            macRadioUpdateTxPower();
   1266          
   1267            /* initiate and transmit that was queued during receive */
   1268            macTxStartQueuedFrame();
   1269          }
   1270          
   1271          
   1272          /*=================================================================================================
   1273           * @fn          rxDiscardFrame
   1274           *
   1275           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1276           *
   1277           * @param       none
   1278           *
   1279           * @return      none
   1280           *=================================================================================================
   1281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1282          static void rxDiscardFrame(void)
   \                     rxDiscardFrame:
   1283          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1284            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   \   000004   90....       MOV     DPTR,#pFuncRxState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64..         XRL     A,#`??rxStartIsr::?relay` & 0xff
   \   00000A   7004         JNZ     ??rxDiscardFrame_0
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   64..         XRL     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \                     ??rxDiscardFrame_0:
   \   000010   6003         JZ      ??rxDiscardFrame_1
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1285          
   1286            if (rxUnreadLen == 0)
   \                     ??rxDiscardFrame_1:
   \   000015   90....       MOV     DPTR,#rxUnreadLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7023         JNZ     ??rxDiscardFrame_2
   1287            {
   1288              rxDone();
   \   00001B   906193       MOV     DPTR,#0x6193
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   A2E6         MOV     C,0xE0 /* A   */.6
   \   000021   500B         JNC     ??rxDiscardFrame_3
   \   000023   E0           MOVX    A,@DPTR
   \   000024   A2E7         MOV     C,0xE0 /* A   */.7
   \   000026   4006         JC      ??rxDiscardFrame_3
   \   000028   75E1ED       MOV     0xe1,#-0x13
   \   00002B   75E1ED       MOV     0xe1,#-0x13
   \                     ??rxDiscardFrame_3:
   \   00002E   12....       LCALL   ?Subroutine8 & 0xFFFF
   1289            }
   \                     ??CrossCallReturnLabel_16:
   \   000031   7029         JNZ     ??rxDiscardFrame_4
   \   000033                ; Setup parameters for call to function macRxOffRequest
   \   000033   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   \   000036                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000036   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   \   000039                ; Setup parameters for call to function macTxStartQueuedFrame
   \   000039   12....       LCALL   `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
   \   00003C   801E         SJMP    ??rxDiscardFrame_4
   1290            else
   1291            {
   1292              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxDiscardFrame_2:
   \   00003E   C3           CLR     C
   \   00003F   9410         SUBB    A,#0x10
   \   000041   5006         JNC     ??rxDiscardFrame_5
   \   000043   E0           MOVX    A,@DPTR
   \   000044   90....       MOV     DPTR,#rxNextLen
   \   000047   8005         SJMP    ??rxDiscardFrame_6
   \                     ??rxDiscardFrame_5:
   \   000049   90....       MOV     DPTR,#rxNextLen
   \   00004C   7410         MOV     A,#0x10
   \                     ??rxDiscardFrame_6:
   \   00004E   12....       LCALL   ?Subroutine6 & 0xFFFF
   1293              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \                     ??CrossCallReturnLabel_11:
   \   000051   F0           MOVX    @DPTR,A
   1294              pFuncRxState = &rxDiscardIsr;
   \   000052   90....       MOV     DPTR,#pFuncRxState
   \   000055   74..         MOV     A,#`??rxDiscardIsr::?relay` & 0xff
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   74..         MOV     A,#(`??rxDiscardIsr::?relay` >> 8) & 0xff
   \   00005B   F0           MOVX    @DPTR,A
   1295            }
   1296          }
   \                     ??rxDiscardFrame_4:
   \   00005C   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   \   00005F                REQUIRE RFST

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#macRxActive
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET
   1297          
   1298          
   1299          /*=================================================================================================
   1300           * @fn          rxDiscardIsr
   1301           *
   1302           * @brief       Receive ISR state for discarding a packet.
   1303           *
   1304           * @param       none
   1305           *
   1306           * @return      none
   1307           *=================================================================================================
   1308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1309          static void rxDiscardIsr(void)
   \                     rxDiscardIsr:
   1310          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 16
   \   000004   74F0         MOV     A,#-0x10
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1311            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1312          
   1313            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \   000009                ; Setup parameters for call to function macMemReadRxFifo
   \   000009   90....       MOV     DPTR,#rxNextLen
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   AA..         MOV     R2,?XSP + 0
   \   000010   AB..         MOV     R3,?XSP + 1
   \   000012   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1314            rxUnreadLen -= rxNextLen;
   \   000015   90....       MOV     DPTR,#rxNextLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   90....       MOV     DPTR,#rxUnreadLen
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   C3           CLR     C
   \   00001F   98           SUBB    A,R0
   \   000020   F0           MOVX    @DPTR,A
   1315          
   1316            /* read out and discard bytes until all bytes of packet are disposed of */
   1317            if (rxUnreadLen != 0)
   \   000021   6011         JZ      ??rxDiscardIsr_0
   1318            {
   1319              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   \   000023   C3           CLR     C
   \   000024   9410         SUBB    A,#0x10
   \   000026   502A         JNC     ??rxDiscardIsr_1
   1320              {
   1321                rxNextLen = rxUnreadLen;
   \   000028   E0           MOVX    A,@DPTR
   \   000029   90....       MOV     DPTR,#rxNextLen
   \   00002C   F0           MOVX    @DPTR,A
   1322                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00002D   14           DEC     A
   \   00002E   906194       MOV     DPTR,#0x6194
   \   000031   F0           MOVX    @DPTR,A
   \   000032   801E         SJMP    ??rxDiscardIsr_1
   1323              }
   1324            }
   1325            else
   1326            {
   1327              /* reset threshold level, reset receive state, and complete receive logic */
   1328              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxDiscardIsr_0:
   \   000034   12....       LCALL   ?Subroutine3 & 0xFFFF
   1329              pFuncRxState = &rxStartIsr;
   1330              rxDone();
   1331            }
   \                     ??CrossCallReturnLabel_5:
   \   000037   500B         JNC     ??rxDiscardIsr_2
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   A2E7         MOV     C,0xE0 /* A   */.7
   \   00003C   4006         JC      ??rxDiscardIsr_2
   \   00003E   75E1ED       MOV     0xe1,#-0x13
   \   000041   75E1ED       MOV     0xe1,#-0x13
   \                     ??rxDiscardIsr_2:
   \   000044   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000047   7009         JNZ     ??rxDiscardIsr_1
   \   000049                ; Setup parameters for call to function macRxOffRequest
   \   000049   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   \   00004C                ; Setup parameters for call to function macRadioUpdateTxPower
   \   00004C   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   \   00004F                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00004F   12....       LCALL   `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
   1332          }
   \                     ??rxDiscardIsr_1:
   \   000052   7410         MOV     A,#0x10
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   \   00005A                REQUIRE RFST
   1333          
   1334          
   1335          /**************************************************************************************************
   1336           * @fn          macRxFifoOverflowIsr
   1337           *
   1338           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1339           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1340           *              It simply halts and cleanup the RX.
   1341           *
   1342           * @param       none
   1343           *
   1344           * @return      none
   1345           **************************************************************************************************
   1346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1347          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   \                     macRxFifoOverflowIsr:
   1348          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1349            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   \   000004   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000007   E0           MOVX    A,@DPTR
   \   000008   04           INC     A
   \   000009   F0           MOVX    @DPTR,A
   1350            macRxHaltCleanup();
   \   00000A   90....       MOV     DPTR,#rxResetFlag
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   90....       MOV     DPTR,#rxIsrActiveFlag
   \   000013   E0           MOVX    A,@DPTR
   \   000014   7008         JNZ     ??macRxFifoOverflowIsr_0
   \   000016                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000016   12....       LCALL   `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
   \   000019   90....       MOV     DPTR,#rxResetFlag
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
   1351          }
   \                     ??macRxFifoOverflowIsr_0:
   \   00001E   02....       LJMP    ??Subroutine31_0 & 0xFFFF
   1352          
   1353          
   1354          /**************************************************************************************************
   1355           * @fn          macRxPromiscuousMode
   1356           *
   1357           * @brief       Sets promiscuous mode - enabling or disabling it.
   1358           *
   1359           * @param       none
   1360           *
   1361           * @return      none
   1362           **************************************************************************************************
   1363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1364          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   \                     macRxPromiscuousMode:
   1365          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1366            rxPromiscuousMode = mode;
   \   000007   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000A   F0           MOVX    @DPTR,A
   1367          
   1368            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   \   00000B   700A         JNZ     ??macRxPromiscuousMode_0
   1369            {
   1370              MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   00000D   906180       MOV     DPTR,#0x6180
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   4409         ORL     A,#0x9
   \   000015   8013         SJMP    ??macRxPromiscuousMode_1
   1371            }
   1372            else
   1373            {
   1374              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1375                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   \                     ??macRxPromiscuousMode_0:
   \   000017   7402         MOV     A,#0x2
   \   000019   6E           XRL     A,R6
   \   00001A   6008         JZ      ??macRxPromiscuousMode_2
   \   00001C   7401         MOV     A,#0x1
   \   00001E   6E           XRL     A,R6
   \   00001F   6003         JZ      ??macRxPromiscuousMode_2
   \   000021                ; Setup parameters for call to function halAssertHandler
   \   000021   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1376          
   1377              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   \                     ??macRxPromiscuousMode_2:
   \   000024   906180       MOV     DPTR,#0x6180
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C2E0         CLR     0xE0 /* A   */.0
   \                     ??macRxPromiscuousMode_1:
   \   00002A   F0           MOVX    @DPTR,A
   1378            }
   1379          }
   \   00002B   7F01         MOV     R7,#0x1
   \   00002D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxRadioPowerUpInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxRadioPowerUpInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxTxReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxTxReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxHaltCleanup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxHaltCleanup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxHaltCleanupFinalStep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxHaltCleanupFinalStep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxThresholdIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxThresholdIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxStartIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxStartIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxAddrIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxAddrIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxPayloadIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPayloadIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxFcsIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxFcsIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxAckTxDoneCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxAckTxDoneCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxDiscardFrame::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxDiscardIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxFifoOverflowIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxFifoOverflowIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxPromiscuousMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxPromiscuousMode
   1380          
   1381          
   1382          /**************************************************************************************************
   1383           *                                  Compile Time Integrity Checks
   1384           **************************************************************************************************
   1385           */
   1386          
   1387          /* check for changes to the spec that would affect the source code */
   1388          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1389               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1390               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1391               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1392               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1393               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1394               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1395               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1396               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1397          #error "ERROR!  Change to the spec that requires modification of source code."
   1398          #endif
   1399          
   1400          /* check for changes to the internal flags format */
   1401          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1402               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1403               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1404               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1405               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1406               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1407          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1408          #endif
   1409          
   1410          /* validate CRC OK bit optimization */
   1411          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1412          #error "ERROR!  Optimization relies on these bits having the same position."
   1413          #endif
   1414          
   1415          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1416          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1417          #endif
   1418          
   1419          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1420          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1421          #endif
   1422          
   1423          
   1424          /**************************************************************************************************
   1425          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   macRxAckTxDoneCallback
        2      0   -> macRadioUpdateTxPower
        2      0   -> macRxOffRequest
        2      0   -> macTxStartQueuedFrame
      2      0   macRxFifoOverflowIsr
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxHaltCleanup
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxInit
      0      9   macRxPromiscuousMode
        0      9   -> halAssertHandler
      2      0   macRxRadioPowerUpInit
      2      0   macRxThresholdIsr
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxTxReset
        2      0   -> macRxHardDisable
      0     30   rxAddrIsr
        0     30   -> halAssertHandler
        0     30   -> macMemReadRxFifo
        0     30   -> sAddrExtCpy
      2     18   rxDiscardFrame
        2      0   -> halAssertHandler
        2      0   -> macRadioUpdateTxPower
        2      0   -> macRxOffRequest
        2      0   -> macTxStartQueuedFrame
      2     16   rxDiscardIsr
        2     16   -> macMemReadRxFifo
        2     16   -> macRadioUpdateTxPower
        2     16   -> macRxOffRequest
        2     16   -> macTxStartQueuedFrame
      1     10   rxFcsIsr
        0     10   -> MAC_SrcMatchCheckResult
        0     10   -> macDataRxMemFree
        0     10   -> macMemReadRxFifo
        0     10   -> macRadioComputeLQI
        0     10   -> macRadioUpdateTxPower
        0     10   -> macRxCompleteCallback
        0     10   -> macRxOffRequest
        0     10   -> macTxStartQueuedFrame
      2      0   rxHaltCleanupFinalStep
        2      0   -> macDataRxMemFree
        2      0   -> macRadioUpdateTxPower
        2      0   -> macRxOffRequest
        2      0   -> macTxStartQueuedFrame
      2      0   rxPayloadIsr
        2      0   -> macMemReadRxFifo
      1     21   rxStartIsr
        0     18   -> MAC_SrcMatchCheckAllPending
        0     18   -> halAssertHandler
        0     18   -> macCspForceTxDoneIfPending
        0     18   -> macDataRxMemAlloc
        0     18   -> macMcuOverflowCapture
        0     18   -> macMcuTimerCapture
        0     18   -> macMemReadRxFifo
        0     18   -> macRadioComputeLQI
        0     18   -> macRadioUpdateTxPower
        0     18   -> macRxCheckMACPendingCallback
        0     18   -> macRxCheckPendingCallback
        0     18   -> macRxOffRequest
        0     18   -> macTxAckNotReceivedCallback
        0     18   -> macTxAckReceivedCallback
        0     18   -> macTxStartQueuedFrame
        0     21   -> osal_memcpy
        0     18   -> rxDiscardFrame


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ??Subroutine31_0
       7  ??Subroutine32_0
       9  ??Subroutine33_0
       4  ??Subroutine34_0
      10  ??Subroutine35_0
       6  ??Subroutine36_0
       6  ??Subroutine37_0
       1  ?Subroutine0
       5  ?Subroutine1
      15  ?Subroutine10
       6  ?Subroutine11
       8  ?Subroutine12
       9  ?Subroutine13
      12  ?Subroutine14
      15  ?Subroutine15
       7  ?Subroutine16
      12  ?Subroutine17
       3  ?Subroutine18
      11  ?Subroutine19
       5  ?Subroutine2
      13  ?Subroutine20
       4  ?Subroutine21
      11  ?Subroutine22
      13  ?Subroutine23
      12  ?Subroutine24
      11  ?Subroutine25
       3  ?Subroutine26
       1  ?Subroutine27
       9  ?Subroutine28
      10  ?Subroutine29
      16  ?Subroutine3
       9  ?Subroutine30
      16  ?Subroutine4
       6  ?Subroutine5
       7  ?Subroutine6
       4  ?Subroutine7
      10  ?Subroutine8
       8  ?Subroutine9
       1  RFIRQF0
       1  RFIRQF1
       1  RFST
       1  S1CON
       1  _A_IEN0
      27  macRxAckTxDoneCallback
       6  macRxAckTxDoneCallback::?relay
       1  macRxActive
       4  macRxAddrLen
      33  macRxFifoOverflowIsr
       6  macRxFifoOverflowIsr::?relay
       1  macRxFilter
      26  macRxHaltCleanup
       6  macRxHaltCleanup::?relay
      42  macRxInit
       6  macRxInit::?relay
       1  macRxOutgoingAckFlag
      48  macRxPromiscuousMode
       6  macRxPromiscuousMode::?relay
      35  macRxRadioPowerUpInit
       6  macRxRadioPowerUpInit::?relay
      46  macRxThresholdIsr
       6  macRxThresholdIsr::?relay
      26  macRxTxReset
       6  macRxTxReset::?relay
       2  pFuncRxState
       2  pRxBuf
     282  rxAddrIsr
       6  rxAddrIsr::?relay
       4  rxBuf
      95  rxDiscardFrame
       6  rxDiscardFrame::?relay
      90  rxDiscardIsr
       6  rxDiscardIsr::?relay
     301  rxFcsIsr
       6  rxFcsIsr::?relay
       1  rxFifoOverflowCount
       1  rxFilter
     105  rxHaltCleanupFinalStep
       6  rxHaltCleanupFinalStep::?relay
       1  rxIsrActiveFlag
       1  rxNextLen
      78  rxPayloadIsr
       6  rxPayloadIsr::?relay
       1  rxPayloadLen
       1  rxPromiscuousMode
       1  rxResetFlag
    1060  rxStartIsr
       6  rxStartIsr::?relay
       1  rxUnreadLen

 
 2 615 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
     4 bytes in segment CODE_C
     5 bytes in segment SFR_AN
    19 bytes in segment XDATA_Z
 
 2 709 bytes of CODE  memory
     0 bytes of DATA  memory (+ 5 bytes shared)
    19 bytes of XDATA memory

Errors: none
Warnings: none
