###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                15/Mar/2016  12:05:01
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoSensor.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoSensor.c
#        -D NWK_AUTO_POLL -D HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\DemoSensor.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\DemoSensor.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoSensor.c
      1          /**************************************************************************************************
      2            Filename:       DemoSensor.c
      3          
      4            Description:    Sensor application for the sensor demo utilizing the Simple API.
      5          
      6                            The sensor node is a ZigBee end device.
      7                            The sensor application binds to a gateway and will periodically
      8                            read temperature and supply voltage from the ADC and send report
      9                            towards the gateway node.
     10          
     11          
     12            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     13          
     14            IMPORTANT: Your use of this Software is limited to those specific rights
     15            granted under the terms of a software license agreement between the user
     16            who downloaded the software, his/her employer (which must be your employer)
     17            and Texas Instruments Incorporated (the "License").  You may not use this
     18            Software unless you agree to abide by the terms of the License. The License
     19            limits your use, and you acknowledge, that the Software may not be modified,
     20            copied or distributed unless embedded on a Texas Instruments microcontroller
     21            or used solely and exclusively in conjunction with a Texas Instruments radio
     22            frequency transceiver, which is integrated into your product.  Other than for
     23            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     24            works of, modify, distribute, perform, display or sell this Software and/or
     25            its documentation for any purpose.
     26          
     27            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     28            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     29            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     30            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     31            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     32            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     33            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     34            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     35            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     36            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     37            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     38          
     39            Should you have any questions regarding your right to use this Software,
     40            contact Texas Instruments Incorporated at www.TI.com.
     41          **************************************************************************************************/
     42          
     43          /******************************************************************************
     44           * INCLUDES
     45           */
     46          
     47          #include "ZComDef.h"
     48          #include "OSAL.h"
     49          #include "sapi.h"
     50          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

  #define RFD_RCVC_ALWAYS_ON 1
          ^
"C:\Users\Bart\Documents\GitHub\WTSN\Components\hal\target\CC2530EB\hal_board_cfg.h",83  Warning[Pe047]: 
          incompatible redefinition of macro "RFD_RCVC_ALWAYS_ON"
     51          #include "hal_lcd.h"
     52          #include "hal_led.h"
     53          #include "hal_adc.h"
     54          #include "hal_mcu.h"
     55          #include "hal_uart.h"
     56          #include "DemoApp.h"
     57          
     58          /******************************************************************************
     59           * CONSTANTS
     60           */
     61          #define REPORT_FAILURE_LIMIT                4
     62          #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
     63          
     64          // Application States
     65          #define APPSTATE_INIT                       0
     66          #define APPSTATE_STARTED                    1
     67          #define APPSTATE_BOUND                      2
     68          
     69          // Application osal event identifiers
     70          // Bit mask of events ( from 0x0000 to 0x00FF )
     71          #define RETRY_START_EVT                        0x0001
     72          
     73          // ADC definitions for CC2430/CC2530 from the hal_adc.c file
     74          #if defined (HAL_MCU_CC2530)
     75          #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
     76          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     77          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     78          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     79          #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
     80          #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
     81          #endif // HAL_MCU_CC2530
     82          
     83          /******************************************************************************
     84           * TYPEDEFS
     85           */
     86          
     87          /******************************************************************************
     88           * LOCAL VARIABLES
     89           */
     90          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          static uint8 appState = APPSTATE_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     92          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     93          static uint8 retryStartDelay =  10;
   \                     retryStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for retryStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static uint16 parentShortAddr;
   \                     parentShortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          /******************************************************************************
     98           * GLOBAL VARIABLES
     99           */
    100          
    101          // Inputs and Outputs for Sensor device
    102          #define NUM_OUT_CMD_SENSOR                1
    103          #define NUM_IN_CMD_SENSOR                 1
    104          
    105          // List of output and input commands for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    106          const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_OutCmdList:
   \   000000   0200         DW 2
    107          {
    108            LIGHT_CONTROL_CMD_ID
    109          };
    110          

   \                                 In  segment XDATA_ROM_C, align 1
    111          const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
   \                     zb_InCmdList:
   \   000000   0400         DW 4
    112          {
    113            LIGHT_STATUS_CMD_ID
    114          };
    115          
    116          // Define SimpleDescriptor for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    117          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0100         DW 1
   \   000005   01           DB 1
   \   000006   01           DB 1
   \   000007   ....         DW zb_InCmdList
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    118          {
    119            MY_ENDPOINT_ID,             //  Endpoint
    120            MY_PROFILE_ID,              //  Profile ID
    121            DEV_ID_SENSOR,              //  Device ID
    122            DEVICE_VERSION_SENSOR,      //  Device Version
    123            0,                          //  Reserved
    124            NUM_IN_CMD_SENSOR,          //  Number of Input Commands
    125            (cId_t *) zb_InCmdList,     //  Input Command List
    126            NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
    127            (cId_t *) zb_OutCmdList     //  Output Command List
    128          };
    129          
    130          /******************************************************************************
    131           * LOCAL FUNCTIONS
    132           */
    133          
    134          void uartRxCB( uint8 port, uint8 event );
    135          void sendLightCommand(uint8 state);
    136          
    137          /*****************************************************************************
    138           * @fn          zb_HandleOsalEvent
    139           *
    140           * @brief       The zb_HandleOsalEvent function is called by the operating
    141           *              system when a task event is set
    142           *
    143           * @param       event - Bitmask containing the events that have been set
    144           *
    145           * @return      none
    146           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    148          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    149            if( event & SYS_EVENT_MSG )
    150            {
    151            }
    152          
    153            if( event & ZB_ENTRY_EVENT || event & RETRY_START_EVT )
   \   000004   EA           MOV     A,R2
   \   000005   5401         ANL     A,#0x1
   \   000007   F8           MOV     R0,A
   \   000008   EB           MOV     A,R3
   \   000009   5410         ANL     A,#0x10
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   6003         JZ      ??zb_HandleOsalEvent_0
    154            {
    155              // Start the device
    156              zb_StartRequest();
   \   000010                ; Setup parameters for call to function zb_StartRequest
   \   000010   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    157            }
    158          }
   \                     ??zb_HandleOsalEvent_0:
   \   000013                REQUIRE ?Subroutine0
   \   000013                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    159          
    160          /******************************************************************************
    161           * @fn      zb_HandleKeys
    162           *
    163           * @brief   Handles all key events for this device.
    164           *
    165           * @param   shift - true if in shift/alt.
    166           * @param   keys - bit field for key events. Valid entries:
    167           *                 EVAL_SW4
    168           *                 EVAL_SW3
    169           *                 EVAL_SW2
    170           *                 EVAL_SW1
    171           *
    172           * @return  none
    173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    175          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    176            // Shift is used to make each button/switch dual purpose.
    177            if ( shift )
    178            {
    179              if ( keys & HAL_KEY_SW_1 )
    180              {
    181              }
    182              if ( keys & HAL_KEY_SW_2 )
    183              {
    184              }
    185              if ( keys & HAL_KEY_SW_3 )
    186              {
    187              }
    188              if ( keys & HAL_KEY_SW_4 )
    189              {
    190              }
    191            }
    192            else
    193            {
    194              if ( keys & HAL_KEY_SW_1 )
    195              {   
    196              }
    197              if ( keys & HAL_KEY_SW_2 )
    198              {
    199              }
    200              if ( keys & HAL_KEY_SW_3 )
    201              {
    202              }
    203              if ( keys & HAL_KEY_SW_4 )
    204              {
    205              }
    206            }
    207          }
   \   000000   02....       LJMP    ?BRET
    208          
    209          /******************************************************************************
    210           * @fn          zb_StartConfirm
    211           *
    212           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    213           *              after a start request operation completes
    214           *
    215           * @param       status - The status of the start operation.  Status of
    216           *                       ZB_SUCCESS indicates the start operation completed
    217           *                       successfully.  Else the status is an error code.
    218           *
    219           * @return      none
    220           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    221          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    222          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    223            MCU_IO_DIR_OUTPUT_PREP(1, 2);
   \   000006   12....       LCALL   ?Subroutine2 & 0xFFFF
    224            MCU_IO_OUTPUT_PREP(1,2,0);
    225            
    226            // If the device sucessfully started, change state to running
    227            if ( status == ZB_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000009   7039         JNZ     ??zb_StartConfirm_0
    228            {
    229              // Change application state
    230              appState = APPSTATE_STARTED;
   \   00000B   90....       MOV     DPTR,#appState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    231          
    232              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   000011                ; Setup parameters for call to function HalLedSet
   \   000011   FA           MOV     R2,A
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    233              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000016                ; Setup parameters for call to function HalLedSet
   \   000016   7A00         MOV     R2,#0x0
   \   000018   7902         MOV     R1,#0x2
   \   00001A   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    234              HalLedSet( HAL_LED_3, HAL_LED_MODE_OFF );
   \   00001D                ; Setup parameters for call to function HalLedSet
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   7904         MOV     R1,#0x4
   \   000021   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    235          
    236              // Store parent short address
    237              zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
   \   000024                ; Setup parameters for call to function zb_GetDeviceInfo
   \   000024   7A..         MOV     R2,#parentShortAddr & 0xff
   \   000026   7B..         MOV     R3,#(parentShortAddr >> 8) & 0xff
   \   000028   7903         MOV     R1,#0x3
   \   00002A   12....       LCALL   `??zb_GetDeviceInfo::?relay`; Banked call to: zb_GetDeviceInfo
    238          
    239              MCU_IO_DIR_OUTPUT_PREP(1, 2);
   \   00002D   12....       LCALL   ?Subroutine2 & 0xFFFF
    240              MCU_IO_OUTPUT_PREP(1,2,0);
    241              
    242              zb_AllowBind( 0xFF );
   \                     ??CrossCallReturnLabel_1:
   \   000030                ; Setup parameters for call to function zb_AllowBind
   \   000030   79FF         MOV     R1,#-0x1
   \   000032   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    243          
    244              zb_BindDevice( TRUE, LIGHT_CONTROL_CMD_ID, (uint8 *)NULL );
   \   000035                ; Setup parameters for call to function zb_BindDevice
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A02         MOV     R2,#0x2
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   7901         MOV     R1,#0x1
   \   00003F   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
   \   000042   8023         SJMP    ??zb_StartConfirm_1
    245            }
    246            else
    247            {
    248              // Try again later with a delay
    249              osal_start_timerEx( sapi_TaskID, RETRY_START_EVT, retryStartDelay );
   \                     ??zb_StartConfirm_0:
   \   000044                ; Setup parameters for call to function osal_start_timerEx
   \   000044   90....       MOV     DPTR,#retryStartDelay
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0,A
   \   00004A   E4           CLR     A
   \   00004B   F5..         MOV     ?V1,A
   \   00004D   F5..         MOV     ?V2,A
   \   00004F   F5..         MOV     ?V3,A
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000056   7A01         MOV     R2,#0x1
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   90....       MOV     DPTR,#sapi_TaskID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000062   7404         MOV     A,#0x4
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    250            }
    251          }
   \                     ??zb_StartConfirm_1:
   \   000067   7F04         MOV     R7,#0x4
   \   000069   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00006C                REQUIRE P1DIR
   \   00006C                REQUIRE P1SEL
   \   00006C                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   43FE04       ORL     0xfe,#0x4
   \   000003   53F4FB       ANL     0xf4,#0xfb
   \   000006   C292         CLR     0x90.2
   \   000008   43FE04       ORL     0xfe,#0x4
   \   00000B   22           RET
    252          
    253          /******************************************************************************
    254           * @fn          zb_SendDataConfirm
    255           *
    256           * @brief       The zb_SendDataConfirm callback function is called by the
    257           *              ZigBee after a send data operation completes
    258           *
    259           * @param       handle - The handle identifying the data transmission.
    260           *              status - The status of the operation.
    261           *
    262           * @return      none
    263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    265          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    266            if(status == ZB_SUCCESS)
    267            {
    268             
    269            }
    270          }
   \   000000   02....       LJMP    ?BRET
    271          
    272          /******************************************************************************
    273           * @fn          zb_BindConfirm
    274           *
    275           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    276           *              after a bind operation completes.
    277           *
    278           * @param       commandId - The command ID of the binding being confirmed.
    279           *              status - The status of the bind operation.
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    285            if( status == ZB_SUCCESS )
   \   00000B   703F         JNZ     ??zb_BindConfirm_0
    286            {
    287              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   00000D                ; Setup parameters for call to function HalLedSet
   \   00000D   7A01         MOV     R2,#0x1
   \   00000F   7902         MOV     R1,#0x2
   \   000011   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    288              
    289              uint8 pData[LIGHT_CMD_LENGTH];
    290              pData[LIGHT_CMD_OFFSET] = IDENTIFIER_COMMAND; 
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   74F0         MOV     A,#-0x10
   \   00001C   12....       LCALL   ?Subroutine3 & 0xFFFF
    291              uint8 txOptions;
    292              zb_SendDataRequest( 0xFFFE, LIGHT_CONTROL_CMD_ID, LIGHT_CMD_LENGTH , pData, 0, txOptions, 0 );
                                                                                                    ^
Warning[Pe549]: variable "txOptions" is used before its value is set
    293            }
   \                     ??CrossCallReturnLabel_2:
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   7403         MOV     A,#0x3
   \   00002E   12....       LCALL   ?XSTACK_DISP100_8
   \   000031   88..         MOV     ?V0,R0
   \   000033   89..         MOV     ?V1,R1
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7901         MOV     R1,#0x1
   \   00003C   7C02         MOV     R4,#0x2
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7AFE         MOV     R2,#-0x2
   \   000042   7BFF         MOV     R3,#-0x1
   \   000044   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   000047   7405         MOV     A,#0x5
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
    294          }
   \                     ??zb_BindConfirm_0:
   \   00004C                REQUIRE ?Subroutine1
   \   00004C                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F02         MOV     R7,#0x2
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zb_SendDataRequest
   \   000001                ; Setup parameters for call to function zb_SendDataRequest
   \   000001                ; Setup parameters for call to function zb_SendDataRequest
   \   000001   75..00       MOV     ?V0,#0x0
   \   000004   78..         MOV     R0,#?V0
   \   000006   22           RET
    295          
    296          /******************************************************************************
    297           * @fn          zb_AllowBindConfirm
    298           *
    299           * @brief       Indicates when another device attempted to bind to this device
    300           *
    301           * @param
    302           *
    303           * @return      none
    304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    306          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    307            zb_AllowBind( 0x00 );
   \   00000A                ; Setup parameters for call to function zb_AllowBind
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    308            HalLedSet( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7904         MOV     R1,#0x4
   \   000013   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    309            appState = APPSTATE_BOUND;
   \   000016   90....       MOV     DPTR,#appState
   \   000019   7402         MOV     A,#0x2
   \   00001B   F0           MOVX    @DPTR,A
    310            sendLightCommand(1);
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   14           DEC     A
   \   000023   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000033   7403         MOV     A,#0x3
   \   000035   12....       LCALL   ?XSTACK_DISP100_8
   \   000038   88..         MOV     ?V0,R0
   \   00003A   89..         MOV     ?V1,R1
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7901         MOV     R1,#0x1
   \   000043   7C02         MOV     R4,#0x2
   \   000045   7D00         MOV     R5,#0x0
   \   000047   7AFE         MOV     R2,#-0x2
   \   000049   7BFF         MOV     R3,#-0x1
   \   00004B   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   00004E   7405         MOV     A,#0x5
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
    311          }
   \   000053   80..         SJMP    ?Subroutine1
    312          
    313          /******************************************************************************
    314           * @fn          zb_FindDeviceConfirm
    315           *
    316           * @brief       The zb_FindDeviceConfirm callback function is called by the
    317           *              ZigBee stack when a find device operation completes.
    318           *
    319           * @param       searchType - The type of search that was performed.
    320           *              searchKey - Value that the search was executed on.
    321           *              result - The result of the search.
    322           *
    323           * @return      none
    324           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    325          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    326          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    327            (void)searchType;
    328            (void)searchKey;
    329            (void)result;
    330          }
   \   000000   02....       LJMP    ?BRET
    331          
    332          /******************************************************************************
    333           * @fn          zb_ReceiveDataIndication
    334           *
    335           * @brief       The zb_ReceiveDataIndication callback function is called
    336           *              asynchronously by the ZigBee stack to notify the application
    337           *              when data is received from a peer device.
    338           *
    339           * @param       source - The short address of the peer device that sent the data
    340           *              command - The commandId associated with the data
    341           *              len - The number of bytes in the pData parameter
    342           *              pData - The data sent by the peer device
    343           *
    344           * @return      none
    345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    346          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    347          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    348            if(command == LIGHT_STATUS_CMD_ID){
   \   000004   7404         MOV     A,#0x4
   \   000006   6C           XRL     A,R4
   \   000007   4D           ORL     A,R5
   \   000008   7023         JNZ     ??zb_ReceiveDataIndication_0
    349              uint8 lightState = (*pData != 0);
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F583         MOV     DPH,A
   \   000015   8882         MOV     DPL,R0
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6004         JZ      ??zb_ReceiveDataIndication_1
   \   00001A   7804         MOV     R0,#0x4
   \   00001C   8002         SJMP    ??zb_ReceiveDataIndication_2
   \                     ??zb_ReceiveDataIndication_1:
   \   00001E   7800         MOV     R0,#0x0
    350              MCU_IO_OUTPUT_PREP(1,2,lightState);
   \                     ??zb_ReceiveDataIndication_2:
   \   000020   53F4FB       ANL     0xf4,#0xfb
   \   000023   E590         MOV     A,0x90
   \   000025   54FB         ANL     A,#0xfb
   \   000027   48           ORL     A,R0
   \   000028   F590         MOV     0x90,A
   \   00002A   43FE04       ORL     0xfe,#0x4
    351            }
    352          }
   \                     ??zb_ReceiveDataIndication_0:
   \   00002D   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000030                REQUIRE P1SEL
   \   000030                REQUIRE _A_P1
   \   000030                REQUIRE P1DIR
    353          
    354          /******************************************************************************
    355           * @fn          uartRxCB
    356           *
    357           * @brief       Callback function for UART
    358           *
    359           * @param       port - UART port
    360           *              event - UART event that caused callback
    361           *
    362           * @return      none
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    365          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    366            (void)port;
    367            (void)event;
    368          }
   \   000000   02....       LJMP    ?BRET
    369            

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    370            void sendLightCommand(uint8 state){
   \                     sendLightCommand:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    371            if ( appState == APPSTATE_BOUND ){
   \   00000C   90....       MOV     DPTR,#appState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6402         XRL     A,#0x2
   \   000012   703E         JNZ     ??sendLightCommand_0
    372                uint8 pData[LIGHT_CMD_LENGTH];
    373                pData[LIGHT_CMD_OFFSET] = (state > 0);
   \   000014   EE           MOV     A,R6
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   6004         JZ      ??sendLightCommand_1
   \   00001D   7401         MOV     A,#0x1
   \   00001F   8001         SJMP    ??sendLightCommand_2
   \                     ??sendLightCommand_1:
   \   000021   E4           CLR     A
   \                     ??sendLightCommand_2:
   \   000022   12....       LCALL   ?Subroutine3 & 0xFFFF
    374                uint8 txOptions;
    375                zb_SendDataRequest( 0xFFFE, LIGHT_CONTROL_CMD_ID, LIGHT_CMD_LENGTH , pData, 0, txOptions, 0 );
                                                                                                      ^
Warning[Pe549]: variable "txOptions" is used before its value is set
    376              }
   \                     ??CrossCallReturnLabel_4:
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   78..         MOV     R0,#?V0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP100_8
   \   000037   88..         MOV     ?V0,R0
   \   000039   89..         MOV     ?V1,R1
   \   00003B   78..         MOV     R0,#?V0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   7901         MOV     R1,#0x1
   \   000042   7C02         MOV     R4,#0x2
   \   000044   7D00         MOV     R5,#0x0
   \   000046   7AFE         MOV     R2,#-0x2
   \   000048   7BFF         MOV     R3,#-0x1
   \   00004A   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   00004D   7405         MOV     A,#0x5
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
    377          }
   \                     ??sendLightCommand_0:
   \   000052   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for retryStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sendLightCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sendLightCommand

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     16   sendLightCommand
        0     16   -> zb_SendDataRequest
      0      0   uartRxCB
      0     16   zb_AllowBindConfirm
        0     11   -> HalLedSet
        0     11   -> zb_AllowBind
        0     16   -> zb_SendDataRequest
      0     16   zb_BindConfirm
        0     11   -> HalLedSet
        0     16   -> zb_SendDataRequest
      0      0   zb_FindDeviceConfirm
      0      0   zb_HandleKeys
      2      0   zb_HandleOsalEvent
        2      0   -> zb_StartRequest
      2      4   zb_ReceiveDataIndication
      0      0   zb_SendDataConfirm
      0     16   zb_StartConfirm
        0     12   -> HalLedSet
        0     16   -> osal_start_timerEx
        0     12   -> zb_AllowBind
        0     12   -> zb_BindDevice
        0     12   -> zb_GetDeviceInfo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for retryStartDelay>
       7  ?Subroutine0
      10  ?Subroutine1
      12  ?Subroutine2
       7  ?Subroutine3
       1  P1DIR
       1  P1SEL
       1  _A_P1
       1  appState
       2  parentShortAddr
       1  retryStartDelay
      85  sendLightCommand
       6  sendLightCommand::?relay
       3  uartRxCB
       6  uartRxCB::?relay
      85  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
      76  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
       3  zb_HandleKeys
       6  zb_HandleKeys::?relay
      19  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       2  zb_InCmdList
       2  zb_OutCmdList
      48  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
       3  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
     108  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 469 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  16 bytes in segment XDATA_ROM_C
   3 bytes in segment XDATA_Z
 
 530 bytes of CODE  memory
  16 bytes of CONST memory
   0 bytes of DATA  memory (+ 3 bytes shared)
   4 bytes of XDATA memory

Errors: none
Warnings: 3
