###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                14/Mar/2016  22:12:56
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoSensor.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoSensor.c
#        -D NWK_AUTO_POLL -D HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\DemoSensor.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\DemoSensor.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoSensor.c
      1          /**************************************************************************************************
      2            Filename:       DemoSensor.c
      3          
      4            Description:    Sensor application for the sensor demo utilizing the Simple API.
      5          
      6                            The sensor node is a ZigBee end device.
      7                            The sensor application binds to a gateway and will periodically
      8                            read temperature and supply voltage from the ADC and send report
      9                            towards the gateway node.
     10          
     11          
     12            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     13          
     14            IMPORTANT: Your use of this Software is limited to those specific rights
     15            granted under the terms of a software license agreement between the user
     16            who downloaded the software, his/her employer (which must be your employer)
     17            and Texas Instruments Incorporated (the "License").  You may not use this
     18            Software unless you agree to abide by the terms of the License. The License
     19            limits your use, and you acknowledge, that the Software may not be modified,
     20            copied or distributed unless embedded on a Texas Instruments microcontroller
     21            or used solely and exclusively in conjunction with a Texas Instruments radio
     22            frequency transceiver, which is integrated into your product.  Other than for
     23            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     24            works of, modify, distribute, perform, display or sell this Software and/or
     25            its documentation for any purpose.
     26          
     27            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     28            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     29            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     30            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     31            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     32            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     33            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     34            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     35            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     36            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     37            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     38          
     39            Should you have any questions regarding your right to use this Software,
     40            contact Texas Instruments Incorporated at www.TI.com.
     41          **************************************************************************************************/
     42          
     43          /******************************************************************************
     44           * INCLUDES
     45           */
     46          
     47          #include "ZComDef.h"
     48          #include "OSAL.h"
     49          #include "sapi.h"
     50          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     51          #include "hal_lcd.h"
     52          #include "hal_led.h"
     53          #include "hal_adc.h"
     54          #include "hal_mcu.h"
     55          #include "hal_uart.h"
     56          #include "DemoApp.h"
     57          
     58          /******************************************************************************
     59           * CONSTANTS
     60           */
     61          #define REPORT_FAILURE_LIMIT                4
     62          #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
     63          
     64          // Application States
     65          #define APP_INIT                            0    // Initial state
     66          #define APP_START                           1    // Sensor has joined network
     67          #define APP_BIND                            2    // Sensor is in process of binding
     68          #define APP_REPORT                          4    // Sensor is in reporting state
     69          
     70          // Application osal event identifiers
     71          // Bit mask of events ( from 0x0000 to 0x00FF )
     72          #define MY_START_EVT                        0x0001
     73          #define MY_REPORT_EVT                       0x0002
     74          #define MY_FIND_COLLECTOR_EVT               0x0004
     75          
     76          // ADC definitions for CC2430/CC2530 from the hal_adc.c file
     77          #if defined (HAL_MCU_CC2530)
     78          #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
     79          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     80          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     81          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     82          #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
     83          #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
     84          #endif // HAL_MCU_CC2530
     85          
     86          /******************************************************************************
     87           * TYPEDEFS
     88           */
     89          
     90          /******************************************************************************
     91           * LOCAL VARIABLES
     92           */
     93          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          static uint8 appState =           APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static uint8 reportState =        FALSE;
   \                     reportState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     96          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          static uint8 reportFailureNr =    0;
   \                     reportFailureNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     98          
     99          static uint16 timeDone       =    0;

   \                                 In  segment XDATA_I, align 1, keep-with-next
    100          static uint16 myReportPeriod =    50;        // milliseconds
   \                     myReportPeriod:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myReportPeriod>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          static uint16 myBindRetryDelay =  2000;        // milliseconds
   \                     myBindRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myBindRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          static uint8 myStartRetryDelay =    10;        // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    103          static uint8 oldValue = 0;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          static uint16 parentShortAddr;
   \                     parentShortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /******************************************************************************
    107           * GLOBAL VARIABLES
    108           */
    109          
    110          // Inputs and Outputs for Sensor device
    111          #define NUM_OUT_CMD_SENSOR                1
    112          #define NUM_IN_CMD_SENSOR                 1
    113          
    114          // List of output and input commands for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    115          const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_OutCmdList:
   \   000000   0200         DW 2
    116          {
    117            LIGHT_CONTROL_CMD_ID
    118          };
    119          

   \                                 In  segment XDATA_ROM_C, align 1
    120          const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
   \                     zb_InCmdList:
   \   000000   0400         DW 4
    121          {
    122            LIGHT_STATUS_CMD_ID
    123          };
    124          
    125          // Define SimpleDescriptor for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    126          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0100         DW 1
   \   000005   01           DB 1
   \   000006   01           DB 1
   \   000007   0000         DW 0H
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    127          {
    128            MY_ENDPOINT_ID,             //  Endpoint
    129            MY_PROFILE_ID,              //  Profile ID
    130            DEV_ID_SENSOR,              //  Device ID
    131            DEVICE_VERSION_SENSOR,      //  Device Version
    132            0,                          //  Reserved
    133            NUM_IN_CMD_SENSOR,          //  Number of Input Commands
    134            (cId_t *) NULL,             //  Input Command List
    135            NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
    136            (cId_t *) zb_OutCmdList     //  Output Command List
    137          };
    138          
    139          /******************************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          void uartRxCB( uint8 port, uint8 event );
    144          static void sendReport(void);
    145          static int8 readTemp(void);
    146          static uint8 readVoltage(void);
    147          
    148          /*****************************************************************************
    149           * @fn          zb_HandleOsalEvent
    150           *
    151           * @brief       The zb_HandleOsalEvent function is called by the operating
    152           *              system when a task event is set
    153           *
    154           * @param       event - Bitmask containing the events that have been set
    155           *
    156           * @return      none
    157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    159          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
    160            if( event & SYS_EVENT_MSG )
    161            {
    162            }
    163          
    164            if( event & ZB_ENTRY_EVENT )
   \   000008   5410         ANL     A,#0x10
   \   00000A   6003         JZ      ??zb_HandleOsalEvent_0
    165            {
    166              zb_StartRequest();
   \   00000C                ; Setup parameters for call to function zb_StartRequest
   \   00000C   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    167              
    168            }
    169          
    170            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   00000F   EE           MOV     A,R6
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5003         JNC     ??zb_HandleOsalEvent_1
    171            {
    172              zb_StartRequest();
   \   000014                ; Setup parameters for call to function zb_StartRequest
   \   000014   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    173            }
    174          
    175            if ( event & MY_REPORT_EVT )
   \                     ??zb_HandleOsalEvent_1:
   \   000017   EE           MOV     A,R6
   \   000018   5402         ANL     A,#0x2
   \   00001A   6022         JZ      ??zb_HandleOsalEvent_2
    176            {
    177              if ( appState == APP_REPORT )
   \   00001C   90....       MOV     DPTR,#appState
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6404         XRL     A,#0x4
   \   000022   701A         JNZ     ??zb_HandleOsalEvent_2
    178              {
    179                sendReport();
    180                osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
   \   000024                ; Setup parameters for call to function osal_start_timerEx
   \   000024   90....       MOV     DPTR,#myReportPeriod
   \   000027   12....       LCALL   ?Subroutine2 & 0xFFFF
    181              }
    182            }
   \                     ??CrossCallReturnLabel_0:
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00002D   7A02         MOV     R2,#0x2
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#sapi_TaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
    183          
    184            if ( event & MY_FIND_COLLECTOR_EVT )
   \                     ??zb_HandleOsalEvent_2:
   \   00003E   EE           MOV     A,R6
   \   00003F   5404         ANL     A,#0x4
   \   000041   6012         JZ      ??zb_HandleOsalEvent_3
    185            {
    186              // Delete previous binding
    187              if ( appState == APP_REPORT )
    188              {
    189                //zb_BindDevice( FALSE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
    190              }
    191          
    192              appState = APP_BIND;
   \   000043   90....       MOV     DPTR,#appState
   \   000046   7402         MOV     A,#0x2
   \   000048   F0           MOVX    @DPTR,A
    193              // blink LED 2 to indicate discovery and binding
    194              HalLedBlink ( HAL_LED_2, 0, 50, 500 );
   \   000049                ; Setup parameters for call to function HalLedBlink
   \   000049   7CF4         MOV     R4,#-0xc
   \   00004B   7D01         MOV     R5,#0x1
   \   00004D   7B32         MOV     R3,#0x32
   \   00004F   7A00         MOV     R2,#0x0
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    195          
    196              // Find and bind to a collector device
    197              //zb_BindDevice( TRUE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
    198            }
    199          }
   \                     ??zb_HandleOsalEvent_3:
   \   000055                REQUIRE ?Subroutine0
   \   000055                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   E4           CLR     A
   \   000008   F5..         MOV     ?V2,A
   \   00000A   F5..         MOV     ?V3,A
   \   00000C   78..         MOV     R0,#?V0
   \   00000E   22           RET
    200          
    201          /******************************************************************************
    202           * @fn      zb_HandleKeys
    203           *
    204           * @brief   Handles all key events for this device.
    205           *
    206           * @param   shift - true if in shift/alt.
    207           * @param   keys - bit field for key events. Valid entries:
    208           *                 EVAL_SW4
    209           *                 EVAL_SW3
    210           *                 EVAL_SW2
    211           *                 EVAL_SW1
    212           *
    213           * @return  none
    214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    215          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    216          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    217            // Shift is used to make each button/switch dual purpose.
    218            if ( shift )
    219            {
    220              if ( keys & HAL_KEY_SW_1 )
    221              {
    222              }
    223              if ( keys & HAL_KEY_SW_2 )
    224              {
    225              }
    226              if ( keys & HAL_KEY_SW_3 )
    227              {
    228              }
    229              if ( keys & HAL_KEY_SW_4 )
    230              {
    231              }
    232            }
    233            else
    234            {
    235              if ( keys & HAL_KEY_SW_1 )
    236              {   
    237              }
    238              if ( keys & HAL_KEY_SW_2 )
    239              {
    240              }
    241              if ( keys & HAL_KEY_SW_3 )
    242              {
    243              }
    244              if ( keys & HAL_KEY_SW_4 )
    245              {
    246              }
    247            }
    248          }
   \   000000   02....       LJMP    ?BRET
    249          
    250          /******************************************************************************
    251           * @fn          zb_StartConfirm
    252           *
    253           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    254           *              after a start request operation completes
    255           *
    256           * @param       status - The status of the start operation.  Status of
    257           *                       ZB_SUCCESS indicates the start operation completed
    258           *                       successfully.  Else the status is an error code.
    259           *
    260           * @return      none
    261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    264            // If the device sucessfully started, change state to running
    265            if ( status == ZB_SUCCESS )
   \   000006   7044         JNZ     ??zb_StartConfirm_0
    266            {
    267              // Change application state
    268              appState = APP_START;
   \   000008   90....       MOV     DPTR,#appState
   \   00000B   7401         MOV     A,#0x1
   \   00000D   F0           MOVX    @DPTR,A
    269          
    270          
    271              // Store parent short address
    272              zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
   \   00000E                ; Setup parameters for call to function zb_GetDeviceInfo
   \   00000E   7A..         MOV     R2,#parentShortAddr & 0xff
   \   000010   7B..         MOV     R3,#(parentShortAddr >> 8) & 0xff
   \   000012   7903         MOV     R1,#0x3
   \   000014   12....       LCALL   `??zb_GetDeviceInfo::?relay`; Banked call to: zb_GetDeviceInfo
    273          
    274              // Set event to bind to a collector
    275              osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A04         MOV     R2,#0x4
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#sapi_TaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    276              
    277              
    278              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   000023                ; Setup parameters for call to function HalLedSet
   \   000023   7A01         MOV     R2,#0x1
   \   000025   7901         MOV     R1,#0x1
   \   000027   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    279              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   00002A                ; Setup parameters for call to function HalLedSet
   \   00002A   7A00         MOV     R2,#0x0
   \   00002C   7902         MOV     R1,#0x2
   \   00002E   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    280              HalLedSet( HAL_LED_3, HAL_LED_MODE_OFF );
   \   000031                ; Setup parameters for call to function HalLedSet
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7904         MOV     R1,#0x4
   \   000035   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    281              
    282              zb_AllowBind( 0xFF );
   \   000038                ; Setup parameters for call to function zb_AllowBind
   \   000038   79FF         MOV     R1,#-0x1
   \   00003A   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    283          
    284              zb_BindDevice( TRUE, LIGHT_CONTROL_CMD_ID, (uint8 *)NULL );
   \   00003D                ; Setup parameters for call to function zb_BindDevice
   \   00003D   7C00         MOV     R4,#0x0
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A02         MOV     R2,#0x2
   \   000043   7B00         MOV     R3,#0x0
   \   000045   7901         MOV     R1,#0x1
   \   000047   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
   \   00004A   8023         SJMP    ??zb_StartConfirm_1
    285            }
    286            else
    287            {
    288              // Try again later with a delay
    289              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   00004C                ; Setup parameters for call to function osal_start_timerEx
   \   00004C   90....       MOV     DPTR,#myStartRetryDelay
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F5..         MOV     ?V0,A
   \   000052   E4           CLR     A
   \   000053   F5..         MOV     ?V1,A
   \   000055   F5..         MOV     ?V2,A
   \   000057   F5..         MOV     ?V3,A
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00005E   7A01         MOV     R2,#0x1
   \   000060   7B00         MOV     R3,#0x0
   \   000062   90....       MOV     DPTR,#sapi_TaskID
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006A   7404         MOV     A,#0x4
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    290            }
    291          }
   \                     ??zb_StartConfirm_1:
   \   00006F   80..         SJMP    ?Subroutine0
    292          
    293          /******************************************************************************
    294           * @fn          zb_SendDataConfirm
    295           *
    296           * @brief       The zb_SendDataConfirm callback function is called by the
    297           *              ZigBee after a send data operation completes
    298           *
    299           * @param       handle - The handle identifying the data transmission.
    300           *              status - The status of the operation.
    301           *
    302           * @return      none
    303           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    304          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    305          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    306            if(status != ZB_SUCCESS)
   \   000006   6029         JZ      ??zb_SendDataConfirm_0
    307            {
    308              if ( ++reportFailureNr >= REPORT_FAILURE_LIMIT )
   \   000008   90....       MOV     DPTR,#reportFailureNr
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   04           INC     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   C3           CLR     C
   \   00000F   9404         SUBB    A,#0x4
   \   000011   4023         JC      ??zb_SendDataConfirm_1
    309              {
    310                 // Stop reporting
    311                 osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
   \   000013                ; Setup parameters for call to function osal_stop_timerEx
   \   000013   7A02         MOV     R2,#0x2
   \   000015   7B00         MOV     R3,#0x0
   \   000017   90....       MOV     DPTR,#sapi_TaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    312          
    313                 // After failure start reporting automatically when the device
    314                 // is binded to a new gateway
    315                 reportState = TRUE;
   \   00001F   90....       MOV     DPTR,#reportState
   \   000022   7401         MOV     A,#0x1
   \   000024   F0           MOVX    @DPTR,A
    316          
    317                 // Try binding to a new gateway
    318                 osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000025                ; Setup parameters for call to function osal_set_event
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#sapi_TaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    319                 reportFailureNr = 0;
    320              }
    321            }
    322            // status == SUCCESS
    323            else
    324            {
    325              // Reset failure counter
    326              reportFailureNr = 0;
   \                     ??zb_SendDataConfirm_0:
   \   000031   90....       MOV     DPTR,#reportFailureNr
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
    327            }
    328          }
   \                     ??zb_SendDataConfirm_1:
   \   000036   7F01         MOV     R7,#0x1
   \   000038   02....       LJMP    ?BANKED_LEAVE_XDATA
    329          
    330          /******************************************************************************
    331           * @fn          zb_BindConfirm
    332           *
    333           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    334           *              after a bind operation completes.
    335           *
    336           * @param       commandId - The command ID of the binding being confirmed.
    337           *              status - The status of the bind operation.
    338           *
    339           * @return      none
    340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    341          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    342          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    343            if( status == ZB_SUCCESS )
   \   00000B   705C         JNZ     ??zb_BindConfirm_0
    344            {
    345              appState = APP_REPORT;
   \   00000D   90....       MOV     DPTR,#appState
   \   000010   7404         MOV     A,#0x4
   \   000012   F0           MOVX    @DPTR,A
    346              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A01         MOV     R2,#0x1
   \   000015   7902         MOV     R1,#0x2
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    347              
    348              uint8 pData[LIGHT_CMD_LENGTH];
    349              pData[LIGHT_CMD_OFFSET] = IDENTIFIER_COMMAND; 
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   74F0         MOV     A,#-0x10
   \   000022   F0           MOVX    @DPTR,A
    350              uint8 txOptions;
    351              zb_SendDataRequest( 0xFFFE, LIGHT_CONTROL_CMD_ID, LIGHT_CMD_LENGTH , pData, 0, txOptions, 0 );
                                                                                                    ^
Warning[Pe549]: variable "txOptions" is used before its value is set

  static uint16 timeDone       =    0;
                ^
"C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoSensor.c",99  Warning[Pe177]: 
          variable "timeDone" was declared but never referenced

  static uint8 oldValue = 0;
               ^
"C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\Source\DemoSensor.c",103  Warning[Pe177]: 
          variable "oldValue" was declared but never referenced
   \   000023                ; Setup parameters for call to function zb_SendDataRequest
   \   000023   75..00       MOV     ?V0,#0x0
   \   000026   78..         MOV     R0,#?V0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002B   78..         MOV     R0,#?V0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   7403         MOV     A,#0x3
   \   000037   12....       LCALL   ?XSTACK_DISP100_8
   \   00003A   88..         MOV     ?V0,R0
   \   00003C   89..         MOV     ?V1,R1
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7901         MOV     R1,#0x1
   \   000045   7C02         MOV     R4,#0x2
   \   000047   7D00         MOV     R5,#0x0
   \   000049   7AFE         MOV     R2,#-0x2
   \   00004B   7BFF         MOV     R3,#-0x1
   \   00004D   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   000050   7405         MOV     A,#0x5
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
    352          
    353              // After failure reporting start automatically when the device
    354              // is binded to a new gateway
    355              if ( reportState )
   \   000055   90....       MOV     DPTR,#reportState
   \   000058   E0           MOVX    A,@DPTR
   \   000059   6028         JZ      ??zb_BindConfirm_1
    356              {
    357                // Start reporting
    358                osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   00005B                ; Setup parameters for call to function osal_set_event
   \   00005B   7A02         MOV     R2,#0x2
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   90....       MOV     DPTR,#sapi_TaskID
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000067   801A         SJMP    ??zb_BindConfirm_1
    359              }
    360            }
    361            else
    362            {
    363              osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \                     ??zb_BindConfirm_0:
   \   000069                ; Setup parameters for call to function osal_start_timerEx
   \   000069   90....       MOV     DPTR,#myBindRetryDelay
   \   00006C   12....       LCALL   ?Subroutine2 & 0xFFFF
    364            }
   \                     ??CrossCallReturnLabel_1:
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000072   7A04         MOV     R2,#0x4
   \   000074   7B00         MOV     R3,#0x0
   \   000076   90....       MOV     DPTR,#sapi_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00007E   7404         MOV     A,#0x4
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
    365          }
   \                     ??zb_BindConfirm_1:
   \   000083   7401         MOV     A,#0x1
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   02....       LJMP    ?Subroutine0 & 0xFFFF
    366          
    367          /******************************************************************************
    368           * @fn          zb_AllowBindConfirm
    369           *
    370           * @brief       Indicates when another device attempted to bind to this device
    371           *
    372           * @param
    373           *
    374           * @return      none
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    377          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    378            zb_AllowBind( 0x00 );
   \   000004                ; Setup parameters for call to function zb_AllowBind
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    379            HalLedSet( HAL_LED_3, HAL_LED_MODE_ON );
   \   000009                ; Setup parameters for call to function HalLedSet
   \   000009   7A01         MOV     R2,#0x1
   \   00000B   7904         MOV     R1,#0x4
   \   00000D   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    380          }
   \   000010                REQUIRE ?Subroutine1
   \   000010                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    381          
    382          /******************************************************************************
    383           * @fn          zb_FindDeviceConfirm
    384           *
    385           * @brief       The zb_FindDeviceConfirm callback function is called by the
    386           *              ZigBee stack when a find device operation completes.
    387           *
    388           * @param       searchType - The type of search that was performed.
    389           *              searchKey - Value that the search was executed on.
    390           *              result - The result of the search.
    391           *
    392           * @return      none
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    395          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    396            (void)searchType;
    397            (void)searchKey;
    398            (void)result;
    399          }
   \   000000   02....       LJMP    ?BRET
    400          
    401          /******************************************************************************
    402           * @fn          zb_ReceiveDataIndication
    403           *
    404           * @brief       The zb_ReceiveDataIndication callback function is called
    405           *              asynchronously by the ZigBee stack to notify the application
    406           *              when data is received from a peer device.
    407           *
    408           * @param       source - The short address of the peer device that sent the data
    409           *              command - The commandId associated with the data
    410           *              len - The number of bytes in the pData parameter
    411           *              pData - The data sent by the peer device
    412           *
    413           * @return      none
    414           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    416          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    417            uint8 lightState = *pData;
   \   000004   7402         MOV     A,#0x2
   \   000006   12....       LCALL   ?XSTACK_DISP0_8
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F583         MOV     DPH,A
   \   00000F   8882         MOV     DPL,R0
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
    418            MCU_IO_OUTPUT_PREP(1,2,lightState);
   \   000013   53F4FB       ANL     0xf4,#0xfb
   \   000016   A2E0         MOV     C,0xE0 /* A   */.0
   \   000018   9292         MOV     0x90.2,C
   \   00001A   43FE04       ORL     0xfe,#0x4
    419          }
   \   00001D   80..         SJMP    ?Subroutine1
   \   00001F                REQUIRE P1SEL
   \   00001F                REQUIRE _A_P1
   \   00001F                REQUIRE P1DIR
    420          
    421          /******************************************************************************
    422           * @fn          uartRxCB
    423           *
    424           * @brief       Callback function for UART
    425           *
    426           * @param       port - UART port
    427           *              event - UART event that caused callback
    428           *
    429           * @return      none
    430           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    432          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    433            (void)port;
    434            (void)event;
    435          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myReportPeriod>`:
   \   000000   3200         DW 50

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myBindRetryDelay>`:
   \   000000   D007         DW 2000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB
    436          
    437          /******************************************************************************
    438           * @fn          sendReport
    439           *
    440           * @brief       Send sensor report
    441           *
    442           * @param       none
    443           *
    444           * @return      none
    445           */
    446          static void sendReport(void)
    447          {
    448            /*uint8 pData[LIGHT_CMD_LENGTH];
    449            static uint8 reportNr = 0;
    450            uint8 txOptions;
    451          
    452            // Read and report temperature value
    453            pData[LIGHT_CMD_OFFSET] = readTemp();
    454          
    455            // Read and report voltage value
    456            pData[SENSOR_VOLTAGE_OFFSET] = readVoltage();
    457          
    458            pData[SENSOR_PARENT_OFFSET] =  HI_UINT16(parentShortAddr);
    459            pData[SENSOR_PARENT_OFFSET + 1] =  LO_UINT16(parentShortAddr);
    460            pData[BUTTON_PARENT_OFFSET+1] = MCU_IO_GET(0,1);
    461           // HalUARTWrite(HAL_UART_PORT_0,pData,SENSOR_REPORT_LENGTH);
    462           // HalUARTWrite(HAL_UART_PORT_1,pData,SENSOR_REPORT_LENGTH);
    463            int test = MCU_IO_GET(0,1);
    464            if( MCU_IO_GET(0,1) > 0){
    465              MCU_IO_SET_LOW(0, 0);
    466            } else {
    467              MCU_IO_SET_HIGH(0, 0);
    468            }
    469            MCU_IO_SET_LOW(0, 1);
    470            // Set ACK request on each ACK_INTERVAL report
    471            // If a report failed, set ACK request on next report
    472            if ( ++reportNr<ACK_REQ_INTERVAL && reportFailureNr == 0 )
    473            {
    474              txOptions = AF_TX_OPTIONS_NONE;
    475            }
    476            else
    477            {
    478              txOptions = AF_MSG_ACK_REQUEST;
    479              reportNr = 0;
    480            }
    481            // Destination address 0xFFFE: Destination address is sent to previously
    482            // established binding for the commandId.
    483            //printf("%i %i",pData[SENSOR_TEMP_OFFSET],oldValue);
    484            if(timeDone >= 60000){
    485               timeDone += 1;
    486            }
    487            if(pData[SENSOR_TEMP_OFFSET] != oldValue && timeDone >= 60000){
    488              oldValue = pData[SENSOR_TEMP_OFFSET];
    489              zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, SENSOR_REPORT_LENGTH, pData, 0, txOptions, 0 );
    490              timeDone = 0;
    491            } else {
    492              timeDone += myReportPeriod;
    493            }*/
    494          }
    495          /******************************************************************************
    496           * @fn          readTemp
    497           *
    498           * @brief       read temperature from ADC
    499           *
    500           * @param       none
    501           *
    502           * @return      temperature
    503           */
    504          static int8 readTemp(void)
                             ^
Warning[Pe177]: function "readTemp" was declared but never referenced
    505          {
    506            static uint16 voltageAtTemp22;
    507            static uint8 bCalibrate = TRUE; // Calibrate the first time the temp sensor is read
    508            uint16 value;
    509            int8 temp;
    510          
    511            #if defined (HAL_MCU_CC2530)
    512            /*
    513             * Use the ADC to read the temperature
    514             */
    515            value = HalReadTemp();
    516          
    517            // Use the 12 MSB of adcValue
    518            value >>= 4;
    519          
    520            /*
    521             * These parameters are typical values and need to be calibrated
    522             * See the datasheet for the appropriate chip for more details
    523             * also, the math below may not be very accurate
    524             */
    525            /* Assume ADC = 1480 at 25C and ADC = 4/C */
    526            #define VOLTAGE_AT_TEMP_25        1480
    527            #define TEMP_COEFFICIENT          4
    528          
    529            // Calibrate for 22C the first time the temp sensor is read.
    530            // This will assume that the demo is started up in temperature of 22C
    531            if ( bCalibrate ) {
    532              voltageAtTemp22 = value;
    533              bCalibrate = FALSE;
    534            }
    535          
    536            temp = 22 + ( (value - voltageAtTemp22) / TEMP_COEFFICIENT );
    537          
    538            // Set 0C as minimum temperature, and 100C as max
    539            if ( temp >= 100 )
    540            {
    541              return 100;
    542            }
    543            else if ( temp <= 0 ) {
    544              return 0;
    545            }
    546            else {
    547              return temp;
    548            }
    549            // Only CC2530 is supported
    550            #else
    551            return 0;
    552            #endif
    553          }
    554          
    555          /******************************************************************************
    556           * @fn          readVoltage
    557           *
    558           * @brief       read voltage from ADC
    559           *
    560           * @param       none
    561           *
    562           * @return      voltage
    563           */
    564          static uint8 readVoltage(void)
                              ^
Warning[Pe177]: function "readVoltage" was declared but never referenced
    565          {
    566            #if defined (HAL_MCU_CC2530)
    567            /*
    568             * Use the ADC to read the bus voltage
    569             */
    570            uint16 value = HalReadTemp();
    571          
    572            // value now contains measurement of Vdd/3
    573            // 0 indicates 0V and 32767 indicates 1.25V
    574            // voltage = (value*3*1.25)/32767 volts
    575            // we will multiply by this by 10 to allow units of 0.1 volts
    576            value = value >> 6;   // divide first by 2^6
    577            value = (uint16)(value * 37.5);
    578            value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
    579          
    580            return value;
    581            #else
    582            return 0;
    583            #endif // CC2530
    584          }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   uartRxCB
      2      0   zb_AllowBindConfirm
        2      0   -> HalLedSet
        2      0   -> zb_AllowBind
      0     18   zb_BindConfirm
        0     13   -> HalLedSet
        0     13   -> osal_set_event
        0     17   -> osal_start_timerEx
        0     18   -> zb_SendDataRequest
      0      0   zb_FindDeviceConfirm
      0      0   zb_HandleKeys
      0     16   zb_HandleOsalEvent
        0     12   -> HalLedBlink
        0     16   -> osal_start_timerEx
        0     12   -> zb_StartRequest
      2      4   zb_ReceiveDataIndication
      0      9   zb_SendDataConfirm
        0      9   -> osal_set_event
        0      9   -> osal_stop_timerEx
      0     16   zb_StartConfirm
        0     12   -> HalLedSet
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
        0     12   -> zb_AllowBind
        0     12   -> zb_BindDevice
        0     12   -> zb_GetDeviceInfo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for myBindRetryDelay>
       2  ?<Initializer for myReportPeriod>
       1  ?<Initializer for myStartRetryDelay>
       5  ?Subroutine0
       7  ?Subroutine1
      15  ?Subroutine2
       1  P1DIR
       1  P1SEL
       1  _A_P1
       1  appState
       2  myBindRetryDelay
       2  myReportPeriod
       1  myStartRetryDelay
       2  parentShortAddr
       1  reportFailureNr
       1  reportState
       3  uartRxCB
       6  uartRxCB::?relay
      16  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
     139  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
       3  zb_HandleKeys
       6  zb_HandleKeys::?relay
      85  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       2  zb_InCmdList
       2  zb_OutCmdList
      31  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
      59  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
     113  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 479 bytes in segment BANKED_CODE
  54 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   5 bytes in segment XDATA_I
   5 bytes in segment XDATA_ID
  16 bytes in segment XDATA_ROM_C
   5 bytes in segment XDATA_Z
 
 538 bytes of CODE  memory
  16 bytes of CONST memory
   0 bytes of DATA  memory (+ 3 bytes shared)
  10 bytes of XDATA memory

Errors: none
Warnings: 5
