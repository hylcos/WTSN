###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                15/Mar/2016  12:05:10
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDObject.c -D
#        NWK_AUTO_POLL -D HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\ZDObject.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\ZDObject.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2014-08-04 18:42:36 -0700 (Mon, 04 Aug 2014) $
      4            Revision:       $Revision: 39656 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"

  #define RFD_RCVC_ALWAYS_ON 1
          ^
"C:\Users\Bart\Documents\GitHub\WTSN\Components\hal\target\CC2530EB\hal_board_cfg.h",83  Warning[Pe047]: 
          incompatible redefinition of macro "RFD_RCVC_ALWAYS_ON"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          #if defined ( REFLECTOR )
     87          typedef struct
     88          {
     89            byte SrcTransSeq;
     90            zAddrType_t SrcAddr;
     91            uint16 LocalCoordinator;
     92            byte epIntf;
     93            uint16 ProfileID;
     94            byte numInClusters;
     95            uint16 *inClusters;
     96            byte numOutClusters;
     97            uint16 *outClusters;
     98            byte SecurityUse;
     99            byte status;
    100          } ZDO_EDBind_t;
    101          #endif // defined ( REFLECTOR )
    102          
    103          enum
    104          {
    105            ZDMATCH_INIT,           // Initialized
    106            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    107            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    108          };
    109          
    110          enum
    111          {
    112            ZDMATCH_SENDING_NOT,
    113            ZDMATCH_SENDING_UNBIND,
    114            ZDMATCH_SENDING_BIND
    115          };
    116          
    117          /*********************************************************************
    118           * GLOBAL VARIABLES
    119           */
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    133          
    134          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          #endif
    137          
    138          #if defined ( MANAGED_SCAN )
    139            uint32 managedScanNextChannel = 0;
    140            uint32 managedScanChannelMask = 0;
    141            uint8  managedScanTimesPerChannel = 0;
    142          #endif
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          int16 zdpExternalStateTaskID = -1;
   \                     zdpExternalStateTaskID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zdpExternalStateTaskID>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          /*********************************************************************
    151           * LOCAL FUNCTIONS
    152           */
    153          static void ZDODeviceSetup( void );
    154          #if defined ( MANAGED_SCAN )
    155            static void ZDOManagedScan_Next( void );
    156          #endif
    157          #if defined ( REFLECTOR )
    158            static void ZDO_RemoveEndDeviceBind( void );
    159            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    160          #endif
    161          #if ( ZG_BUILD_COORDINATOR_TYPE )
    162            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    163                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    164            static void ZDO_RemoveMatchMemory( void );
    165            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    166            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    167          #endif
    168          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    169          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    170          
    171          /*********************************************************************
    172           * @fn          ZDO_Init
    173           *
    174           * @brief       ZDObject and ZDProfile initialization.
    175           *
    176           * @param       none
    177           *
    178           * @return      none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void ZDO_Init( void )
   \                     ZDO_Init:
    181          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    182            // Initialize ZD items
    183            #if defined ( REFLECTOR )
    184            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    185            #endif
    186          
    187            // Initialize default ZDO_UseExtendedPANID to the APS one.
    188            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    189          
    190            // Setup the device - type of device to create.
    191            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function APS_ReflectorInit
   \   000016   12....       LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
   \   000019                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000019   12....       LCALL   `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
    192          }
   \   00001C                REQUIRE ?Subroutine0
   \   00001C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    193          
    194          #if defined ( MANAGED_SCAN )
    195          /*********************************************************************
    196           * @fn      ZDOManagedScan_Next()
    197           *
    198           * @brief   Setup a managed scan.
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           */
    204          static void ZDOManagedScan_Next( void )
    205          {
    206            // Is it the first time
    207            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    208            {
    209              // Setup the defaults
    210              managedScanNextChannel  = 1;
    211          
    212              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    213                managedScanNextChannel <<= 1;
    214          
    215              managedScanChannelMask = managedScanNextChannel;
    216              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    217            }
    218            else
    219            {
    220              // Do we need to go to the next channel
    221              if ( managedScanTimesPerChannel == 0 )
    222              {
    223                // Find next active channel
    224                managedScanChannelMask  = managedScanNextChannel;
    225                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    226              }
    227              else
    228              {
    229                managedScanTimesPerChannel--;
    230          
    231                if ( managedScanTimesPerChannel == 0 )
    232                {
    233                  managedScanNextChannel  <<= 1;
    234                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    235                    managedScanNextChannel <<= 1;
    236          
    237                  if ( managedScanNextChannel == 0 )
    238                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    239                }
    240              }
    241            }
    242          }
    243          #endif // MANAGED_SCAN
    244          
    245          /*********************************************************************
    246           * @fn      ZDODeviceSetup()
    247           *
    248           * @brief   Call set functions depending on the type of device compiled.
    249           *
    250           * @param   none
    251           *
    252           * @return  none
    253           */
    254          static void ZDODeviceSetup( void )
    255          {
    256            if ( ZG_BUILD_COORDINATOR_TYPE )
    257            {
    258              NLME_CoordinatorInit();
    259            }
    260          
    261          #if defined ( REFLECTOR )
    262            APS_ReflectorInit();
    263          #endif
    264          
    265            if ( ZG_BUILD_JOINING_TYPE )
    266            {
    267              NLME_DeviceJoiningInit();
    268            }
    269          }
    270          
    271          /*********************************************************************
    272           * @fn          ZDO_StartDevice
    273           *
    274           * @brief       This function starts a device in a network.
    275           *
    276           * @param       logicalType     - Device type to start
    277           *              startMode       - indicates mode of device startup
    278           *              beaconOrder     - indicates time betwen beacons
    279           *              superframeOrder - indicates length of active superframe
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   8A..         MOV     ?V1,R2
    285            ZStatus_t ret;
    286          #if defined ( ZIGBEE_FREQ_AGILITY )
    287            static uint8 discRetries = 0;
    288          #endif
    289          #if defined ( ZIGBEE_COMMISSIONING )
    290            static uint8 scanCnt = 0;
    291          #endif
    292          
    293            ret = ZUnsupportedMode;
    294          
    295            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    296            {
    297              if ( startMode == MODE_HARD )
    298              {
    299                devState = DEV_COORD_STARTING;
    300                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    301                                                    zgDefaultStartingScanDuration, beaconOrder,
    302                                                    superframeOrder, false );
    303              }
    304              else if ( startMode == MODE_RESUME )
    305              {
    306                // Just start the coordinator
    307                devState = DEV_COORD_STARTING;
    308                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    309              }
    310              else
    311              {
    312          #if defined( LCD_SUPPORTED )
    313                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    314          #endif
    315              }
    316            }
    317          
    318            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000E   7401         MOV     A,#0x1
   \   000010   65..         XRL     A,?V0
   \   000012   6009         JZ      ??ZDO_StartDevice_0
   \   000014   7402         MOV     A,#0x2
   \   000016   65..         XRL     A,?V0
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??ZDO_StartDevice_1 & 0xFFFF
    319            {
    320              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   00001D   EA           MOV     A,R2
   \   00001E   6006         JZ      ??ZDO_StartDevice_2
   \   000020   7403         MOV     A,#0x3
   \   000022   65..         XRL     A,?V1
   \   000024   7038         JNZ     ??ZDO_StartDevice_3
    321              {
    322                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   000026   90....       MOV     DPTR,#devState
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?Subroutine36 & 0xFFFF
    323          
    324            #if defined( MANAGED_SCAN )
    325                ZDOManagedScan_Next();
    326                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    327            #else
    328                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \                     ??CrossCallReturnLabel_53:
   \   00002E   12....       LCALL   ?XLOAD_R2345
   \   000031   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000034   E9           MOV     A,R1
   \   000035   F9           MOV     R1,A
    329              #if defined ( ZIGBEE_FREQ_AGILITY )
    330                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    331                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    332                {
    333                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    334                  // change will not be recieved. On these devices or routers that have
    335                  // lost the network, an active scan shall be conducted on the Default
    336                  // Channel list using the extended PANID to find the network. If the
    337                  // extended PANID isn't found using the Default Channel list, an scan
    338                  // should be completed using all channels.
    339                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    340                }
    341              #endif // ZIGBEE_FREQ_AGILITY
    342              #if defined ( ZIGBEE_COMMISSIONING )
    343                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \   000036   7403         MOV     A,#0x3
   \   000038   65..         XRL     A,?V1
   \   00003A   706C         JNZ     ??ZDO_StartDevice_4
   \   00003C   90....       MOV     DPTR,#??scanCnt
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   7401         MOV     A,#0x1
   \   000043   28           ADD     A,R0
   \   000044   F0           MOVX    @DPTR,A
   \   000045   E8           MOV     A,R0
   \   000046   C3           CLR     C
   \   000047   9405         SUBB    A,#0x5
   \   000049   405D         JC      ??ZDO_StartDevice_4
    344                {
    345                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    346                  // application specific means, the device shall conduct an active scan
    347                  // on the Default Channel list and join the PAN with the same
    348                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    349                  // on all channels.
    350                  // When devices rejoin the network and the PAN is not found from
    351                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   00004B   90....       MOV     DPTR,#zgDefaultChannelList
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74F8         MOV     A,#-0x8
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   74FF         MOV     A,#-0x1
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   7407         MOV     A,#0x7
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   804A         SJMP    ??ZDO_StartDevice_4
    352                }
    353              #endif // ZIGBEE_COMMISSIONING
    354            #endif
    355              }
    356              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   00005E   7401         MOV     A,#0x1
   \   000060   65..         XRL     A,?V1
   \   000062   7047         JNZ     ??ZDO_StartDevice_1
    357              {
    358                if ( logicalType == NODETYPE_ROUTER )
   \   000064   7401         MOV     A,#0x1
   \   000066   65..         XRL     A,?V0
   \   000068   90....       MOV     DPTR,#devState
   \   00006B   702E         JNZ     ??ZDO_StartDevice_5
    359                {
    360                  ZMacScanCnf_t scanCnf;
    361                  devState = DEV_NWK_ORPHAN;
   \   00006D   740A         MOV     A,#0xa
   \   00006F   F0           MOVX    @DPTR,A
    362          
    363                  /* if router and nvram is available, fake successful orphan scan */
    364                  scanCnf.hdr.Status = ZSUCCESS;
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E4           CLR     A
   \   000076   F0           MOVX    @DPTR,A
    365                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   000077   7402         MOV     A,#0x2
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   7403         MOV     A,#0x3
   \   00007E   F0           MOVX    @DPTR,A
    366                  scanCnf.UnscannedChannels = 0;
   \   00007F   04           INC     A
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   F0           MOVX    @DPTR,A
    367                  scanCnf.ResultListSize = 0;
   \   00008B   7408         MOV     A,#0x8
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   E4           CLR     A
   \   000091   F0           MOVX    @DPTR,A
    368                  nwk_ScanJoiningOrphan(&scanCnf);
   \   000092                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   000092   AA..         MOV     R2,?XSP + 0
   \   000094   AB..         MOV     R3,?XSP + 1
   \   000096   12....       LCALL   `??nwk_ScanJoiningOrphan::?relay`; Banked call to: nwk_ScanJoiningOrphan
    369          
    370                  ret = ZSuccess;
   \   000099   8027         SJMP    ??ZDO_StartDevice_6
    371                }
    372                else
    373                {
    374                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_5:
   \   00009B   740A         MOV     A,#0xa
   \   00009D   12....       LCALL   ?Subroutine36 & 0xFFFF
    375                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    376                                                zgDefaultStartingScanDuration );
    377                }
    378              }
    379              else
    380              {
    381          #if defined( LCD_SUPPORTED )
    382                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    383          #endif
    384              }
    385            }
   \                     ??CrossCallReturnLabel_54:
   \   0000A0   12....       LCALL   ?XLOAD_R2345
   \   0000A3   12....       LCALL   `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
   \   0000A6   E9           MOV     A,R1
   \   0000A7   F9           MOV     R1,A
    386          
    387            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_4:
   \   0000A8   E9           MOV     A,R1
   \   0000A9   6017         JZ      ??ZDO_StartDevice_6
    388            {
    389              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   0000AB                ; Setup parameters for call to function osal_start_timerEx
   \   0000AB   90....       MOV     DPTR,#__Constant_3e8
   \   0000AE   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000B1   7A01         MOV     R2,#0x1
   \   0000B3   7B00         MOV     R3,#0x0
   \   0000B5   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F9           MOV     R1,A
   \   0000BA   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000BD   7404         MOV     A,#0x4
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
    390            }
    391          }
   \                     ??ZDO_StartDevice_6:
   \   0000C2   740B         MOV     A,#0xb
   \   0000C4   80..         SJMP    ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000001                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000001   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#zgDefaultChannelList
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine155_0
   \   000003                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   000009                ; Setup parameters for call to function osal_msg_find
   \   000009   7AD1         MOV     R2,#-0x2f
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
    413          
    414            if (NULL == pMsg)
   \   000013   E582         MOV     A,DPL
   \   000015   4583         ORL     A,DPH
   \   000017   702A         JNZ     ??zdoSendStateChangeMsg_0
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   7A02         MOV     R2,#0x2
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000020   EA           MOV     A,R2
   \   000021   4B           ORL     A,R3
   \   000022   700E         JNZ     ??zdoSendStateChangeMsg_1
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A10         MOV     R2,#0x10
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000030   8014         SJMP    ??zdoSendStateChangeMsg_2
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   74D1         MOV     A,#-0x2f
   \   000038   F0           MOVX    @DPTR,A
    425                pMsg->status = state;
   \   000039   EF           MOV     A,R7
   \   00003A   A3           INC     DPTR
   \   00003B   F0           MOVX    @DPTR,A
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   00003C                ; Setup parameters for call to function osal_msg_send
   \   00003C   EE           MOV     A,R6
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000041   8003         SJMP    ??zdoSendStateChangeMsg_2
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   000043   EF           MOV     A,R7
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
    434            }
    435          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000046   80..         SJMP    ??Subroutine155_0
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   800B         SJMP    ??CrossCallReturnLabel_136
    462          
    463          #if defined MT_ZDO_CB_FUNC
    464            if ( zdpExternalStateTaskID == -1 )
    465            {
    466              zdpExternalStateTaskID = MT_TaskID;
    467            }
    468          #endif
    469          
    470            while (pItem != NULL)
    471            {
    472              if (pItem->epDesc->endPoint != ZDO_EP)
    473              {
    474                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000010   A3           INC     DPTR
   \   000011   E5..         MOV     A,?V1
   \   000013   F0           MOVX    @DPTR,A
    475              }
    476          
    477              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00001B   FF           MOV     R7,A
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   604B         JZ      ??ZDO_UpdateNwkStatus_2
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   60EA         JZ      ??ZDO_UpdateNwkStatus_1
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ??Subroutine169_0 & 0xFFFF
    478            }
   \                     ??CrossCallReturnLabel_325:
   \   00002E   F5..         MOV     ?V0,A
   \   000030                ; Setup parameters for call to function osal_msg_find
   \   000030   7AD1         MOV     R2,#-0x2f
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   E582         MOV     A,DPL
   \   00003C   4583         ORL     A,DPH
   \   00003E   70D0         JNZ     ??ZDO_UpdateNwkStatus_0
   \   000040                ; Setup parameters for call to function osal_msg_allocate
   \   000040   7A02         MOV     R2,#0x2
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000047   EA           MOV     A,R2
   \   000048   4B           ORL     A,R3
   \   000049   700E         JNZ     ??ZDO_UpdateNwkStatus_3
   \   00004B                ; Setup parameters for call to function osal_set_event
   \   00004B   7A10         MOV     R2,#0x10
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   90....       MOV     DPTR,#ZDAppTaskID
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000057   80BB         SJMP    ??ZDO_UpdateNwkStatus_1
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   74D1         MOV     A,#-0x2f
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   E5..         MOV     A,?V1
   \   000063   F0           MOVX    @DPTR,A
   \   000064                ; Setup parameters for call to function osal_msg_send
   \   000064   A9..         MOV     R1,?V0
   \   000066   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000069   80A9         SJMP    ??ZDO_UpdateNwkStatus_1
    479            
    480            if ( zdpExternalStateTaskID != -1 )
   \                     ??ZDO_UpdateNwkStatus_2:
   \   00006B   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F4           CPL     A
   \   000070   7003         JNZ     ??ZDO_UpdateNwkStatus_4
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F4           CPL     A
   \                     ??ZDO_UpdateNwkStatus_4:
   \   000075   600A         JZ      ??ZDO_UpdateNwkStatus_5
    481            {  
    482              zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
   \   000077                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000077   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FA           MOV     R2,A
   \   00007C   A9..         MOV     R1,?V1
   \   00007E   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    483            }
    484            
    485            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_5:
   \   000081                ; Setup parameters for call to function NLME_GetShortAddr
   \   000081   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000084   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000087   12....       LCALL   ?Subroutine27 & 0xFFFF
    486            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_275:
   \   00008A                ; Setup parameters for call to function NLME_GetExtAddr
   \   00008A   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    487          }
   \   00008D   80..         SJMP    ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine156_0
   \   000002                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine157_0
   \   000001                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine163_0
   \   000001                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   22           RET
    488          
    489          #if defined ( REFLECTOR )
    490          /*********************************************************************
    491           * @fn          ZDO_RemoveEndDeviceBind
    492           *
    493           * @brief       Remove the end device bind
    494           *
    495           * @param  none
    496           *
    497           * @return      none
    498           */
    499          static void ZDO_RemoveEndDeviceBind( void )
    500          {
    501            if ( ZDO_EDBind != NULL )
    502            {
    503              // Free the RAM
    504              if ( ZDO_EDBind->inClusters != NULL )
    505              {
    506                osal_mem_free( ZDO_EDBind->inClusters );
    507              }
    508              if ( ZDO_EDBind->outClusters != NULL )
    509              {
    510                osal_mem_free( ZDO_EDBind->outClusters );
    511              }
    512              osal_mem_free( ZDO_EDBind );
    513              ZDO_EDBind = NULL;
    514            }
    515          }
    516          #endif // REFLECTOR
    517          
    518          #if defined ( REFLECTOR )
    519          /*********************************************************************
    520           * @fn          ZDO_RemoveEndDeviceBind
    521           *
    522           * @brief       Remove the end device bind
    523           *
    524           * @param  none
    525           *
    526           * @return      none
    527           */
    528          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    529          {
    530            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    531          
    532          #if defined( LCD_SUPPORTED )
    533            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    534            if ( Status == ZDP_SUCCESS )
    535            {
    536              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    537            }
    538            else
    539            {
    540              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    541            }
    542          #endif
    543          
    544          }
    545          #endif // REFLECTOR
    546          
    547          #if ( ZG_BUILD_COORDINATOR_TYPE )
    548          /*********************************************************************
    549           * @fn          ZDO_CompareClusterLists
    550           *
    551           * @brief       Compare one list to another list
    552           *
    553           * @param       numList1 - number of items in list 1
    554           * @param       list1 - first list of cluster IDs
    555           * @param       numList2 - number of items in list 2
    556           * @param       list2 - second list of cluster IDs
    557           * @param       pMatches - buffer to put matches
    558           *
    559           * @return      number of matches
    560           */
    561          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    562                                    byte numList2, uint16 *list2, uint16 *pMatches )
    563          {
    564            byte x, y;
    565            uint16 z;
    566            byte numMatches = 0;
    567          
    568            // Check the first in against the seconds out
    569            for ( x = 0; x < numList1; x++ )
    570            {
    571              for ( y = 0; y < numList2; y++ )
    572              {
    573                z = list2[y];
    574                if ( list1[x] == z )
    575                {
    576                  pMatches[numMatches++] = z;
    577                }
    578              }
    579            }
    580          
    581            return ( numMatches );
    582          }
    583          #endif // ZG_BUILD_COORDINATOR_TYPE
    584          
    585          /*********************************************************************
    586           * Utility functions
    587           */
    588          
    589          /*********************************************************************
    590           * @fn          ZDO_CompareByteLists
    591           *
    592           * @brief       Compares two lists for matches.
    593           *
    594           * @param       ACnt  - number of entries in list A
    595           * @param       AList  - List A
    596           * @param       BCnt  - number of entries in list B
    597           * @param       BList  - List B
    598           *
    599           * @return      true if a match is found
    600           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    602          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   F9           MOV     R1,A
   \   00000B   8C..         MOV     ?V2,R4
    603            byte x, y;
    604          
    605            for ( x = 0; x < ACnt; x++ )
   \   00000D   7E00         MOV     R6,#0x0
   \   00000F   E8           MOV     A,R0
   \   000010   FC           MOV     R4,A
   \   000011   E9           MOV     A,R1
   \   000012   FD           MOV     R5,A
   \   000013   740D         MOV     A,#0xd
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00001B   8008         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   00001D   0E           INC     R6
   \   00001E   EC           MOV     A,R4
   \   00001F   2402         ADD     A,#0x2
   \   000021   FC           MOV     R4,A
   \   000022   5001         JNC     ??ZDO_AnyClusterMatches_0
   \   000024   0D           INC     R5
   \                     ??ZDO_AnyClusterMatches_0:
   \   000025   EE           MOV     A,R6
   \   000026   C3           CLR     C
   \   000027   9F           SUBB    A,R7
   \   000028   5037         JNC     ??ZDO_AnyClusterMatches_2
    606            {
    607              for ( y = 0; y < BCnt; y++ )
   \   00002A   75..00       MOV     ?V3,#0x0
   \   00002D   EA           MOV     A,R2
   \   00002E   F8           MOV     R0,A
   \   00002F   EB           MOV     A,R3
   \   000030   F9           MOV     R1,A
   \   000031   8009         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000033   05..         INC     ?V3
   \   000035   E8           MOV     A,R0
   \   000036   2402         ADD     A,#0x2
   \   000038   F8           MOV     R0,A
   \   000039   5001         JNC     ??ZDO_AnyClusterMatches_3
   \   00003B   09           INC     R1
   \                     ??ZDO_AnyClusterMatches_3:
   \   00003C   E5..         MOV     A,?V3
   \   00003E   C3           CLR     C
   \   00003F   95..         SUBB    A,?V2
   \   000041   50DA         JNC     ??ZDO_AnyClusterMatches_1
    608              {
    609                if ( AList[x] == BList[y] )
   \   000043   8C82         MOV     DPL,R4
   \   000045   8D83         MOV     DPH,R5
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V1,A
   \   00004E   8882         MOV     DPL,R0
   \   000050   8983         MOV     DPH,R1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   65..         XRL     A,?V0
   \   000055   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   65..         XRL     A,?V1
   \                     ??ZDO_AnyClusterMatches_5:
   \   00005B   70D6         JNZ     ??ZDO_AnyClusterMatches_4
    610                {
    611                  return true;
   \   00005D   7901         MOV     R1,#0x1
   \   00005F   8002         SJMP    ??ZDO_AnyClusterMatches_6
    612                }
    613              }
    614            }
    615          
    616            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000061   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000063   7F05         MOV     R7,#0x5
   \   000065   02....       LJMP    ?BANKED_LEAVE_XDATA
    617          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    618          
    619          /*********************************************************************
    620           * Callback functions from ZDProfile
    621           */
    622          
    623          /*********************************************************************
    624           * @fn          ZDO_ProcessNodeDescReq
    625           *
    626           * @brief       This function processes and responds to the
    627           *              Node_Desc_req message.
    628           *
    629           * @param       inMsg - incoming message
    630           *
    631           * @return      none
    632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    634          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine47 & 0xFFFF
    635            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    636            NodeDescriptorFormat_t *desc = NULL;
    637          
    638            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_73:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    639            {
    640              desc = &ZDO_Config_Node_Descriptor;
    641            }
    642          
    643            if ( desc != NULL )
    644            {
    645              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessNodeDescReq_2
    646            }
    647            else
    648            {
    649              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    650                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0,#0x2
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine50 & 0xFFFF
    651            }
   \                     ??CrossCallReturnLabel_80:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    652          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   02....       LJMP    ??Subroutine155_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000004   3F           ADDC    A,R7
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FD           MOV     R5,A
   \   000009   7C80         MOV     R4,#-0x80
   \   00000B   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000007   FC           MOV     R4,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   FD           MOV     R5,A
   \   00000B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6C           XRL     A,R4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   EE           MOV     A,R6
   \   000008   240F         ADD     A,#0xf
   \   00000A   F582         MOV     DPL,A
   \   00000C   E4           CLR     A
   \   00000D   3F           ADDC    A,R7
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000003   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   E4           CLR     A
   \   00000B   C8           XCH     A,R0
   \   00000C   F9           MOV     R1,A
   \   00000D   EA           MOV     A,R2
   \   00000E   28           ADD     A,R0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET
    653          
    654          /*********************************************************************
    655           * @fn          ZDO_ProcessPowerDescReq
    656           *
    657           * @brief       This function processes and responds to the
    658           *              Node_Power_req message.
    659           *
    660           * @param       inMsg  - incoming request
    661           *
    662           * @return      none
    663           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    665          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine47 & 0xFFFF
    666            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    667            NodePowerDescriptorFormat_t *desc = NULL;
    668          
    669            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_74:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    670            {
    671              desc = &ZDO_Config_Power_Descriptor;
    672            }
    673          
    674            if ( desc != NULL )
    675            {
    676              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessPowerDescReq_2
    677            }
    678            else
    679            {
    680              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    681                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0,#0x3
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine50 & 0xFFFF
    682            }
   \                     ??CrossCallReturnLabel_81:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    683          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   02....       LJMP    ??Subroutine155_0 & 0xFFFF
    684          
    685          /*********************************************************************
    686           * @fn          ZDO_ProcessSimpleDescReq
    687           *
    688           * @brief       This function processes and responds to the
    689           *              Simple_Desc_req message.
    690           *
    691           * @param       inMsg - incoming message (request)
    692           *
    693           * @return      none
    694           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine154_0
   \   000002                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    695          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    697            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    698            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   00001B   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00001E   FB           MOV     R3,A
   \   00001F   EC           MOV     A,R4
   \   000020   FA           MOV     R2,A
    699            byte endPoint = inMsg->asdu[2];
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
    700            byte free = false;
   \   000029   75..00       MOV     ?V1,#0x0
    701            byte stat = ZDP_SUCCESS;
   \   00002C   75..00       MOV     ?V0,#0x0
    702          
    703            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002F   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000031   74FF         MOV     A,#-0x1
   \   000033   69           XRL     A,R1
   \   000034   7005         JNZ     ??ZDO_ProcessSimpleDescReq_1
    704            {
    705              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000036   75..82       MOV     ?V0,#-0x7e
   \   000039   8024         SJMP    ??ZDO_ProcessSimpleDescReq_2
    706            }
    707            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6A           XRL     A,R2
   \   000040   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000045   7015         JNZ     ??ZDO_ProcessSimpleDescReq_4
    708            {
    709              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000047                ; Setup parameters for call to function afFindSimpleDesc
   \   000047   AA..         MOV     R2,?XSP + 0
   \   000049   AB..         MOV     R3,?XSP + 1
   \   00004B   12....       LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   00004E   E9           MOV     A,R1
   \   00004F   FA           MOV     R2,A
    710              if ( sDesc == NULL )
   \   000050   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000053   7003         JNZ     ??ZDO_ProcessSimpleDescReq_5
    711              {
    712                stat = ZDP_NOT_ACTIVE;
   \   000055   75..83       MOV     ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000058   8A..         MOV     ?V1,R2
   \   00005A   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    713              }
    714            }
    715            else
    716            {
    717              if ( ZSTACK_ROUTER_BUILD )
    718              {
    719                stat = ZDP_DEVICE_NOT_FOUND;
    720              }
    721              else if ( ZSTACK_END_DEVICE_BUILD )
    722              {
    723                stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   00005C   75..80       MOV     ?V0,#-0x80
    724              }
    725            }
    726          
    727            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   00005F                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   00005F   85..82       MOV     DPL,?XSP + 0
   \   000062   85..83       MOV     DPH,?XSP + 1
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FC           MOV     R4,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FD           MOV     R5,A
   \   00006A   A9..         MOV     R1,?V0
   \   00006C   EE           MOV     A,R6
   \   00006D   FA           MOV     R2,A
   \   00006E   EF           MOV     A,R7
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    728          
    729            if ( free && sDesc )
   \   000073   E5..         MOV     A,?V1
   \   000075   600B         JZ      ??ZDO_ProcessSimpleDescReq_6
   \   000077   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   00007A   6006         JZ      ??ZDO_ProcessSimpleDescReq_6
    730            {
    731              osal_mem_free( sDesc );
   \   00007C                ; Setup parameters for call to function osal_mem_free
   \   00007C   12....       LCALL   ??Subroutine165_0 & 0xFFFF
    732            }
   \                     ??CrossCallReturnLabel_305:
   \   00007F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    733          }
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   000082   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine164_0
   \   000006                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   49           ORL     A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine166_0
   \   000006                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003   22           RET
    734          
    735          /*********************************************************************
    736           * @fn          ZDO_ProcessActiveEPReq
    737           *
    738           * @brief       This function processes and responds to the
    739           *              Active_EP_req message.
    740           *
    741           * @param       inMsg  - incoming message (request)
    742           *
    743           * @return      none
    744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    745          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    746          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    747            byte cnt = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    748            uint16 aoi;
    749            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V1,#0x0
    750          
    751            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000012   F5..         MOV     ?V2,A
   \   000014   E4           CLR     A
   \   000015   39           ADDC    A,R1
   \   000016   F5..         MOV     ?V3,A
    752          
    753            if ( aoi == NLME_GetShortAddr() )
   \   000018                ; Setup parameters for call to function NLME_GetShortAddr
   \   000018   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001B   EA           MOV     A,R2
   \   00001C   65..         XRL     A,?V2
   \   00001E   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000020   EB           MOV     A,R3
   \   000021   65..         XRL     A,?V3
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000023   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    754            {
    755              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000025                ; Setup parameters for call to function afNumEndPoints
   \   000025   12....       LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   000028   E9           MOV     A,R1
   \   000029   14           DEC     A
   \   00002A   F5..         MOV     ?V0,A
    756              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002C                ; Setup parameters for call to function afEndPoints
   \   00002C   7901         MOV     R1,#0x1
   \   00002E   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000030   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000032   12....       LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000035   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    757            }
    758            else
    759            {
    760              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000037   75..80       MOV     ?V1,#-0x80
    761            }
    762          
    763            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    764                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003A                ; Setup parameters for call to function ZDP_EPRsp
   \   00003A   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   00003D   F5..         MOV     ?V4,A
   \   00003F   78..         MOV     R0,#?V4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000047   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00004A   78..         MOV     R0,#?V4
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   78..         MOV     R0,#?V2
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   E5..         MOV     A,?V1
   \   00005B   F5..         MOV     ?V0,A
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000065   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000068   F9           MOV     R1,A
   \   000069   7A05         MOV     R2,#0x5
   \   00006B   7B80         MOV     R3,#-0x80
   \   00006D   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000070   7407         MOV     A,#0x7
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
    765          }
   \   000075   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FD           MOV     R5,A
   \   000007   EE           MOV     A,R6
   \   000008   240F         ADD     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003                REQUIRE ??Subroutine175_0
   \   000003                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
    766          
    767          /*********************************************************************
    768           * @fn          ZDO_ConvertOTAClusters
    769           *
    770           * @brief       This function will convert the over-the-air cluster list
    771           *              format to an internal format.
    772           *
    773           * @param       inMsg  - incoming message (request)
    774           *
    775           * @return      pointer to incremented inBuf
    776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    777          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    778          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    779            uint8 x;
    780          
    781            for ( x = 0; x < cnt; x++ )
   \   000005   E9           MOV     A,R1
   \   000006   6020         JZ      ??ZDO_ConvertOTAClusters_0
   \   000008   F5..         MOV     ?V1,A
    782            {
    783              // convert ota format to internal
    784              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000011   12....       LCALL   ??Subroutine188_0 & 0xFFFF
    785              inBuf += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_428:
   \   000014   EA           MOV     A,R2
   \   000015   2402         ADD     A,#0x2
   \   000017   FA           MOV     R2,A
   \   000018   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   00001A   0B           INC     R3
    786            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   00001B   EC           MOV     A,R4
   \   00001C   2402         ADD     A,#0x2
   \   00001E   FC           MOV     R4,A
   \   00001F   5001         JNC     ??ZDO_ConvertOTAClusters_3
   \   000021   0D           INC     R5
   \                     ??ZDO_ConvertOTAClusters_3:
   \   000022   15..         DEC     ?V1
   \   000024   E5..         MOV     A,?V1
   \   000026   70E2         JNZ     ??ZDO_ConvertOTAClusters_1
    787            return ( inBuf );
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000028   02....       LJMP    ??Subroutine155_0 & 0xFFFF
    788          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EE           MOV     A,R6
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    789          
    790          /*********************************************************************
    791           * @fn          ZDO_ProcessMatchDescReq
    792           *
    793           * @brief       This function processes and responds to the
    794           *              Match_Desc_req message.
    795           *
    796           * @param       inMsg  - incoming message (request)
    797           *
    798           * @return      none
    799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    800          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine27 & 0xFFFF
    802            uint8 epCnt = 0;
   \                     ??CrossCallReturnLabel_276:
   \   000012   7405         MOV     A,#0x5
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    803            uint8 numInClusters;
    804            uint16 *inClusters = NULL;
   \   000019   7408         MOV     A,#0x8
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
    805            uint8 numOutClusters;
    806            uint16 *outClusters = NULL;
   \   000022   7406         MOV     A,#0x6
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   F0           MOVX    @DPTR,A
    807            epList_t *epDesc;
    808            SimpleDescriptionFormat_t *sDesc = NULL;
    809            uint8 allocated;
    810            uint8 *msg;
    811            uint16 aoi;
    812            uint16 profileID;
    813          
    814            // Parse the incoming message
    815            msg = inMsg->asdu;
   \   00002B   04           INC     A
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000032   12....       LCALL   ??Subroutine184_0 & 0xFFFF
    816            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_415:
   \   000035   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000038   F5..         MOV     ?V8,A
   \   00003A   E4           CLR     A
   \   00003B   39           ADDC    A,R1
   \   00003C   F5..         MOV     ?V9,A
    817            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   EA           MOV     A,R2
   \   000050   F5..         MOV     ?V12,A
   \   000052   E4           CLR     A
   \   000053   39           ADDC    A,R1
   \   000054   F5..         MOV     ?V13,A
    818            msg += 4;
    819          
    820            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000056                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000056   AA..         MOV     R2,?V8
   \   000058   AB..         MOV     R3,?V9
   \   00005A   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00005D   E9           MOV     A,R1
   \   00005E   6401         XRL     A,#0x1
   \   000060   6018         JZ      ??ZDO_ProcessMatchDescReq_0
    821            {
    822              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    823                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    824              return;
    825            }
    826            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   000062                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000062   AA..         MOV     R2,?V8
   \   000064   AB..         MOV     R3,?V9
   \   000066   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000069   E9           MOV     A,R1
   \   00006A   704F         JNZ     ??ZDO_ProcessMatchDescReq_1
   \   00006C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   65..         XRL     A,?V8
   \   000072   7004         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   65..         XRL     A,?V9
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000078   6041         JZ      ??ZDO_ProcessMatchDescReq_1
    827            {
    828              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    829                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   00007A                ; Setup parameters for call to function ZDP_EPRsp
   \   00007A   7401         MOV     A,#0x1
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   E4           CLR     A
   \   000086   F5..         MOV     ?V0,A
   \   000088   F5..         MOV     ?V1,A
   \   00008A   78..         MOV     R0,#?V0
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000094   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000097   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00009A   75..80       MOV     ?V0,#-0x80
   \   00009D   78..         MOV     R0,#?V0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A2   7408         MOV     A,#0x8
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000B0   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000B3   7407         MOV     A,#0x7
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
    830              return;
   \   0000B8   02....       LJMP    ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    831            }
    832          
    833            if ((numInClusters = *msg++) &&
    834                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000BB   8E82         MOV     DPL,R6
   \   0000BD   8F83         MOV     DPH,R7
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F5..         MOV     ?V7,A
   \   0000C6   EE           MOV     A,R6
   \   0000C7   2405         ADD     A,#0x5
   \   0000C9   FE           MOV     R6,A
   \   0000CA   5001         JNC     ??ZDO_ProcessMatchDescReq_4
   \   0000CC   0F           INC     R7
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000CD   E5..         MOV     A,?V7
   \   0000CF   602F         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000D1                ; Setup parameters for call to function osal_mem_alloc
   \   0000D1   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000D4   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000D7   7408         MOV     A,#0x8
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   0000DF   7408         MOV     A,#0x8
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0000E7   6017         JZ      ??ZDO_ProcessMatchDescReq_5
    835            {
    836              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000E9                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000E9   7408         MOV     A,#0x8
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL   ?Subroutine81 & 0xFFFF
    837            }
   \                     ??CrossCallReturnLabel_129:
   \   0000F1   A9..         MOV     R1,?V7
   \   0000F3   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000F6   8A..         MOV     ?V0,R2
   \   0000F8   8B..         MOV     ?V1,R3
   \   0000FA   AE..         MOV     R6,?V0
   \   0000FC   AF..         MOV     R7,?V1
   \   0000FE   8003         SJMP    ??ZDO_ProcessMatchDescReq_6
    838            else
    839            {
    840              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   000100   75..00       MOV     ?V7,#0x0
    841            }
    842          
    843            if ((numOutClusters = *msg++) &&
    844                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   E0           MOVX    A,@DPTR
   \   000108   85..82       MOV     DPL,?XSP + 0
   \   00010B   85..83       MOV     DPH,?XSP + 1
   \   00010E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000111   602D         JZ      ??ZDO_ProcessMatchDescReq_7
   \   000113                ; Setup parameters for call to function osal_mem_alloc
   \   000113   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000116   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000119   7406         MOV     A,#0x6
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000121   7406         MOV     A,#0x6
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000129   6015         JZ      ??ZDO_ProcessMatchDescReq_7
    845            {
    846              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   00012B                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00012B   7406         MOV     A,#0x6
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   12....       LCALL   ?Subroutine81 & 0xFFFF
    847            }
   \                     ??CrossCallReturnLabel_130:
   \   000133   85..82       MOV     DPL,?XSP + 0
   \   000136   85..83       MOV     DPH,?XSP + 1
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   F9           MOV     R1,A
   \   00013B   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00013E   8008         SJMP    ??ZDO_ProcessMatchDescReq_8
    848            else
    849            {
    850              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000140   85..82       MOV     DPL,?XSP + 0
   \   000143   85..83       MOV     DPH,?XSP + 1
   \   000146   E4           CLR     A
   \   000147   F0           MOVX    @DPTR,A
    851            }
    852          
    853            // First count the number of endpoints that match.
    854            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000148   90....       MOV     DPTR,#epList
   \   00014B   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   00014E   740A         MOV     A,#0xa
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   E8           MOV     A,R0
   \   000154   F0           MOVX    @DPTR,A
   \   000155   A3           INC     DPTR
   \   000156   E9           MOV     A,R1
   \   000157   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00015A   25..         ADD     A,?V7
   \   00015C   C3           CLR     C
   \   00015D   33           RLC     A
   \   00015E   240A         ADD     A,#0xa
   \   000160   F5..         MOV     ?V10,A
   \   000162   75..00       MOV     ?V11,#0x0
   \   000165   E0           MOVX    A,@DPTR
   \   000166   25E0         ADD     A,0xE0 /* A   */
   \   000168   FE           MOV     R6,A
   \   000169   E4           CLR     A
   \   00016A   33           RLC     A
   \   00016B   FF           MOV     R7,A
   \   00016C   85....       MOV     ?V2,?V7
   \   00016F   E5..         MOV     A,?V2
   \   000171   25E0         ADD     A,0xE0 /* A   */
   \   000173   F5..         MOV     ?V2,A
   \   000175   E4           CLR     A
   \   000176   33           RLC     A
   \   000177   F5..         MOV     ?V3,A
   \   000179   85....       MOV     ?V0,?V7
   \   00017C   E5..         MOV     A,?V0
   \   00017E   25E0         ADD     A,0xE0 /* A   */
   \   000180   F5..         MOV     ?V0,A
   \   000182   E4           CLR     A
   \   000183   33           RLC     A
   \   000184   F5..         MOV     ?V1,A
   \   000186   7401         MOV     A,#0x1
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00018E   7410         MOV     A,#0x10
   \   000190   805D         SJMP    ??ZDO_ProcessMatchDescReq_9
    855            while ( epDesc )
    856            {
    857              // Don't search endpoint 0 and check if response is allowed
    858              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    859              {
    860                if ( epDesc->pfnDescCB )
    861                {
    862                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    863                  allocated = TRUE;
    864                }
    865                else
    866                {
    867                  sDesc = epDesc->epDesc->simpleDesc;
    868                  allocated = FALSE;
    869                }
    870          
    871                // Allow specific ProfileId or Wildcard ProfileID
    872                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
    873                {
    874                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    875          
    876                  // Are there matching input clusters?
    877                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    878                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    879                      // Are there matching output clusters?
    880                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    881                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    882                  {
    883                    // Notify the endpoint of the match.
    884                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    885                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    886          
    887                    if (pRspSent)
    888                    {
    889                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    890                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    891                      pRspSent->numInClusters = numInClusters;
    892                      pRspSent->numOutClusters = numOutClusters;
    893          
    894                      if (numInClusters)
    895                      {
    896                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    897                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    898                      }
    899                      else
    900                      {
    901                        pRspSent->pInClusters = NULL;
    902                      }
    903          
    904                      if (numOutClusters)
    905                      {
    906                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    907                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    908                      }
    909                      else
    910                      {
    911                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000192   8882         MOV     DPL,R0
   \   000194   8983         MOV     DPH,R1
   \   000196   E4           CLR     A
   \   000197   F0           MOVX    @DPTR,A
   \   000198   A3           INC     DPTR
   \   000199   F0           MOVX    @DPTR,A
    912                      }
    913          
    914                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00019A                ; Setup parameters for call to function osal_msg_send
   \   00019A   AA..         MOV     R2,?V14
   \   00019C   AB..         MOV     R3,?V15
   \   00019E   740E         MOV     A,#0xe
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   0001A6   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   0001A9   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   0001AC   F9           MOV     R1,A
   \   0001AD   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    915                    }
    916          
    917                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   0001B0   7403         MOV     A,#0x3
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   0001B8   C0E0         PUSH    A
   \   0001BA   7405         MOV     A,#0x5
   \   0001BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F8           MOV     R0,A
   \   0001C1   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   0001C3   28           ADD     A,R0
   \   0001C4   F582         MOV     DPL,A
   \   0001C6   E4           CLR     A
   \   0001C7   34..         ADDC    A,#(ZDOBuildBuf >> 8) & 0xff
   \   0001C9   F583         MOV     DPH,A
   \   0001CB   D0E0         POP     A
   \   0001CD   F0           MOVX    @DPTR,A
   \   0001CE   7405         MOV     A,#0x5
   \   0001D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   04           INC     A
   \   0001D5   F0           MOVX    @DPTR,A
    918                  }
    919                }
    920          
    921                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   0001D6   A2..         MOV     C,?VB.0
   \   0001D8   500B         JNC     ??ZDO_ProcessMatchDescReq_14
    922                {
    923                  osal_mem_free( sDesc );
   \   0001DA                ; Setup parameters for call to function osal_mem_free
   \   0001DA   7403         MOV     A,#0x3
   \   0001DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DF   12....       LCALL   ??Subroutine166_0 & 0xFFFF
    924                }
   \                     ??CrossCallReturnLabel_298:
   \   0001E2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    925              }
    926              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   0001E5   740A         MOV     A,#0xa
   \   0001E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EA   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0001ED   740A         MOV     A,#0xa
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   0001EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F2   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   0001F5   740A         MOV     A,#0xa
   \   0001F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FA   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   0001FD   7003         JNZ     $+5
   \   0001FF   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   000202   740A         MOV     A,#0xa
   \   000204   12....       LCALL   ?XSTACK_DISP0_8
   \   000207   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00020A   740E         MOV     A,#0xe
   \   00020C   12....       LCALL   ?XSTACK_DISP0_8
   \   00020F   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000212   740E         MOV     A,#0xe
   \   000214   12....       LCALL   ?XSTACK_DISP0_8
   \   000217   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00021A   E8           MOV     A,R0
   \   00021B   FA           MOV     R2,A
   \   00021C   E9           MOV     A,R1
   \   00021D   FB           MOV     R3,A
   \   00021E   8A82         MOV     DPL,R2
   \   000220   8B83         MOV     DPH,R3
   \   000222   E0           MOVX    A,@DPTR
   \   000223   FC           MOV     R4,A
   \   000224   60BF         JZ      ??ZDO_ProcessMatchDescReq_14
   \   000226   740A         MOV     A,#0xa
   \   000228   12....       LCALL   ?XSTACK_DISP0_8
   \   00022B   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00022E   2408         ADD     A,#0x8
   \   000230   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000233   A2E0         MOV     C,0xE0 /* A   */.0
   \   000235   50AE         JNC     ??ZDO_ProcessMatchDescReq_14
   \   000237   740A         MOV     A,#0xa
   \   000239   12....       LCALL   ?XSTACK_DISP0_8
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000240   A3           INC     DPTR
   \   000241   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000244   E582         MOV     A,DPL
   \   000246   4583         ORL     A,DPH
   \   000248   6013         JZ      ??ZDO_ProcessMatchDescReq_16
   \   00024A                ; Setup parameters for indirect call
   \   00024A   EC           MOV     A,R4
   \   00024B   FA           MOV     R2,A
   \   00024C   7901         MOV     R1,#0x1
   \   00024E   12....       LCALL   ?CALL_IND
   \   000251   7403         MOV     A,#0x3
   \   000253   12....       LCALL   ?XSTACK_DISP0_8
   \   000256   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000259   D2..         SETB    ?VB.0
   \   00025B   8014         SJMP    ??ZDO_ProcessMatchDescReq_17
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   00025D   8A82         MOV     DPL,R2
   \   00025F   8B83         MOV     DPH,R3
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000267   7403         MOV     A,#0x3
   \   000269   12....       LCALL   ?XSTACK_DISP0_8
   \   00026C   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   00026F   C2..         CLR     ?VB.0
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   000271   7403         MOV     A,#0x3
   \   000273   12....       LCALL   ?XSTACK_DISP0_8
   \   000276   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000279   7003         JNZ     $+5
   \   00027B   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   00027E   7403         MOV     A,#0x3
   \   000280   12....       LCALL   ?XSTACK_DISP0_8
   \   000283   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000286   E0           MOVX    A,@DPTR
   \   000287   65..         XRL     A,?V12
   \   000289   7004         JNZ     ??ZDO_ProcessMatchDescReq_18
   \   00028B   A3           INC     DPTR
   \   00028C   E0           MOVX    A,@DPTR
   \   00028D   65..         XRL     A,?V13
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   00028F   600F         JZ      ??ZDO_ProcessMatchDescReq_19
   \   000291   74FF         MOV     A,#-0x1
   \   000293   65..         XRL     A,?V12
   \   000295   7004         JNZ     ??ZDO_ProcessMatchDescReq_20
   \   000297   74FF         MOV     A,#-0x1
   \   000299   65..         XRL     A,?V13
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   00029B   6003         JZ      $+5
   \   00029D   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0002A0   7403         MOV     A,#0x3
   \   0002A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A5   A3           INC     DPTR
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   C8           XCH     A,R0
   \   0002A8   2407         ADD     A,#0x7
   \   0002AA   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   0002AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B0   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   0002B3   7403         MOV     A,#0x3
   \   0002B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B8   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0002BB   2406         ADD     A,#0x6
   \   0002BD   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0002C0   7408         MOV     A,#0x8
   \   0002C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C5   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0002C8   8026         SJMP    ??ZDO_ProcessMatchDescReq_21
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0002CA   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0002CD   7003         JNZ     ??ZDO_ProcessMatchDescReq_23
   \   0002CF   A3           INC     DPTR
   \   0002D0   E0           MOVX    A,@DPTR
   \   0002D1   6B           XRL     A,R3
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0002D2   7003         JNZ     $+5
   \   0002D4   02....       LJMP    ??ZDO_ProcessMatchDescReq_24 & 0xFFFF
   \   0002D7   0D           INC     R5
   \   0002D8   E8           MOV     A,R0
   \   0002D9   2402         ADD     A,#0x2
   \   0002DB   F8           MOV     R0,A
   \   0002DC   5001         JNC     ??ZDO_ProcessMatchDescReq_25
   \   0002DE   09           INC     R1
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   0002DF   ED           MOV     A,R5
   \   0002E0   C3           CLR     C
   \   0002E1   95..         SUBB    A,?V6
   \   0002E3   40E5         JC      ??ZDO_ProcessMatchDescReq_22
   \   0002E5   0C           INC     R4
   \   0002E6   E5..         MOV     A,?V4
   \   0002E8   2402         ADD     A,#0x2
   \   0002EA   F5..         MOV     ?V4,A
   \   0002EC   5002         JNC     ??ZDO_ProcessMatchDescReq_21
   \   0002EE   05..         INC     ?V5
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   0002F0   EC           MOV     A,R4
   \   0002F1   C3           CLR     C
   \   0002F2   95..         SUBB    A,?V7
   \   0002F4   500C         JNC     ??ZDO_ProcessMatchDescReq_26
   \   0002F6   7D00         MOV     R5,#0x0
   \   0002F8   740C         MOV     A,#0xc
   \   0002FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FD   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000300   80DD         SJMP    ??ZDO_ProcessMatchDescReq_25
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   000302   7403         MOV     A,#0x3
   \   000304   12....       LCALL   ?XSTACK_DISP0_8
   \   000307   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00030A   240A         ADD     A,#0xa
   \   00030C   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   00030F   12....       LCALL   ?XSTACK_DISP0_8
   \   000312   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000315   7403         MOV     A,#0x3
   \   000317   12....       LCALL   ?XSTACK_DISP0_8
   \   00031A   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00031D   2409         ADD     A,#0x9
   \   00031F   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000322   7406         MOV     A,#0x6
   \   000324   12....       LCALL   ?XSTACK_DISP0_8
   \   000327   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00032A   800B         SJMP    ??ZDO_ProcessMatchDescReq_27
   \                     ??ZDO_ProcessMatchDescReq_28:
   \   00032C   0C           INC     R4
   \   00032D   E5..         MOV     A,?V4
   \   00032F   2402         ADD     A,#0x2
   \   000331   F5..         MOV     ?V4,A
   \   000333   5002         JNC     ??ZDO_ProcessMatchDescReq_27
   \   000335   05..         INC     ?V5
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   000337   85..82       MOV     DPL,?XSP + 0
   \   00033A   85..83       MOV     DPH,?XSP + 1
   \   00033D   E0           MOVX    A,@DPTR
   \   00033E   F8           MOV     R0,A
   \   00033F   EC           MOV     A,R4
   \   000340   C3           CLR     C
   \   000341   98           SUBB    A,R0
   \   000342   4003         JC      $+5
   \   000344   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   000347   7D00         MOV     R5,#0x0
   \   000349   740C         MOV     A,#0xc
   \   00034B   12....       LCALL   ?XSTACK_DISP0_8
   \   00034E   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000351   8008         SJMP    ??ZDO_ProcessMatchDescReq_29
   \                     ??ZDO_ProcessMatchDescReq_30:
   \   000353   0D           INC     R5
   \   000354   E8           MOV     A,R0
   \   000355   2402         ADD     A,#0x2
   \   000357   F8           MOV     R0,A
   \   000358   5001         JNC     ??ZDO_ProcessMatchDescReq_29
   \   00035A   09           INC     R1
   \                     ??ZDO_ProcessMatchDescReq_29:
   \   00035B   ED           MOV     A,R5
   \   00035C   C3           CLR     C
   \   00035D   95..         SUBB    A,?V6
   \   00035F   50CB         JNC     ??ZDO_ProcessMatchDescReq_28
   \   000361   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000364   7003         JNZ     ??ZDO_ProcessMatchDescReq_31
   \   000366   A3           INC     DPTR
   \   000367   E0           MOVX    A,@DPTR
   \   000368   6B           XRL     A,R3
   \                     ??ZDO_ProcessMatchDescReq_31:
   \   000369   70E8         JNZ     ??ZDO_ProcessMatchDescReq_30
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   00036B                ; Setup parameters for call to function osal_msg_allocate
   \   00036B   AA..         MOV     R2,?V10
   \   00036D   AB..         MOV     R3,?V11
   \   00036F   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000372   8A..         MOV     ?V14,R2
   \   000374   8B..         MOV     ?V15,R3
   \   000376   EA           MOV     A,R2
   \   000377   45..         ORL     A,?V15
   \   000379   7003         JNZ     $+5
   \   00037B   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   00037E   8A82         MOV     DPL,R2
   \   000380   8B83         MOV     DPH,R3
   \   000382   74D2         MOV     A,#-0x2e
   \   000384   F0           MOVX    @DPTR,A
   \   000385   7410         MOV     A,#0x10
   \   000387   12....       LCALL   ?XSTACK_DISP0_8
   \   00038A   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00038D   8A82         MOV     DPL,R2
   \   00038F   8B83         MOV     DPH,R3
   \   000391   A3           INC     DPTR
   \   000392   A3           INC     DPTR
   \   000393   E8           MOV     A,R0
   \   000394   F0           MOVX    @DPTR,A
   \   000395   A3           INC     DPTR
   \   000396   E9           MOV     A,R1
   \   000397   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00039A   A3           INC     DPTR
   \   00039B   A3           INC     DPTR
   \   00039C   A3           INC     DPTR
   \   00039D   E5..         MOV     A,?V7
   \   00039F   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0003A2   8A82         MOV     DPL,R2
   \   0003A4   8B83         MOV     DPH,R3
   \   0003A6   A3           INC     DPTR
   \   0003A7   A3           INC     DPTR
   \   0003A8   A3           INC     DPTR
   \   0003A9   A3           INC     DPTR
   \   0003AA   A3           INC     DPTR
   \   0003AB   A3           INC     DPTR
   \   0003AC   A3           INC     DPTR
   \   0003AD   F0           MOVX    @DPTR,A
   \   0003AE   EA           MOV     A,R2
   \   0003AF   2405         ADD     A,#0x5
   \   0003B1   F582         MOV     DPL,A
   \   0003B3   E4           CLR     A
   \   0003B4   35..         ADDC    A,?V15
   \   0003B6   F583         MOV     DPH,A
   \   0003B8   E5..         MOV     A,?V7
   \   0003BA   6024         JZ      ??ZDO_ProcessMatchDescReq_32
   \   0003BC   EA           MOV     A,R2
   \   0003BD   240A         ADD     A,#0xa
   \   0003BF   FA           MOV     R2,A
   \   0003C0   E4           CLR     A
   \   0003C1   35..         ADDC    A,?V15
   \   0003C3   FB           MOV     R3,A
   \   0003C4   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   0003C7                ; Setup parameters for call to function osal_memcpy
   \   0003C7   7408         MOV     A,#0x8
   \   0003C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CC   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0003CF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003D2   AC..         MOV     R4,?V0
   \   0003D4   AD..         MOV     R5,?V1
   \   0003D6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003D9   7403         MOV     A,#0x3
   \   0003DB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003DE   8004         SJMP    ??ZDO_ProcessMatchDescReq_33
   \                     ??ZDO_ProcessMatchDescReq_32:
   \   0003E0   E4           CLR     A
   \   0003E1   F0           MOVX    @DPTR,A
   \   0003E2   A3           INC     DPTR
   \   0003E3   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_33:
   \   0003E4   E5..         MOV     A,?V14
   \   0003E6   2408         ADD     A,#0x8
   \   0003E8   F8           MOV     R0,A
   \   0003E9   E4           CLR     A
   \   0003EA   35..         ADDC    A,?V15
   \   0003EC   F9           MOV     R1,A
   \   0003ED   85..82       MOV     DPL,?XSP + 0
   \   0003F0   85..83       MOV     DPH,?XSP + 1
   \   0003F3   E0           MOVX    A,@DPTR
   \   0003F4   7003         JNZ     $+5
   \   0003F6   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   0003F9   E5..         MOV     A,?V14
   \   0003FB   25..         ADD     A,?V2
   \   0003FD   FA           MOV     R2,A
   \   0003FE   E5..         MOV     A,?V15
   \   000400   35..         ADDC    A,?V3
   \   000402   FB           MOV     R3,A
   \   000403   EA           MOV     A,R2
   \   000404   240A         ADD     A,#0xa
   \   000406   FA           MOV     R2,A
   \   000407   5001         JNC     ??ZDO_ProcessMatchDescReq_34
   \   000409   0B           INC     R3
   \                     ??ZDO_ProcessMatchDescReq_34:
   \   00040A   8882         MOV     DPL,R0
   \   00040C   8983         MOV     DPH,R1
   \   00040E   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000411                ; Setup parameters for call to function osal_memcpy
   \   000411   7406         MOV     A,#0x6
   \   000413   12....       LCALL   ?XSTACK_DISP0_8
   \   000416   12....       LCALL   ?Subroutine63 & 0xFFFF
    927            }
   \                     ??CrossCallReturnLabel_99:
   \   000419   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00041C   EE           MOV     A,R6
   \   00041D   FC           MOV     R4,A
   \   00041E   EF           MOV     A,R7
   \   00041F   FD           MOV     R5,A
   \   000420   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000423   7403         MOV     A,#0x3
   \   000425   12....       LCALL   ?DEALLOC_XSTACK8
   \   000428   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    928          
    929            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   00042B   7405         MOV     A,#0x5
   \   00042D   12....       LCALL   ?XSTACK_DISP0_8
   \   000430   E0           MOVX    A,@DPTR
   \   000431   602E         JZ      ??ZDO_ProcessMatchDescReq_35
    930            {
    931              // Send the message if at least one match found.
    932              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    933                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   000433                ; Setup parameters for call to function ZDP_EPRsp
   \   000433   7401         MOV     A,#0x1
   \   000435   12....       LCALL   ?XSTACK_DISP0_8
   \   000438   12....       LCALL   ?Subroutine45 & 0xFFFF
    934              {
    935          #if defined( LCD_SUPPORTED )
    936                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
    937          #endif
    938              }
    939            }
   \                     ??CrossCallReturnLabel_71:
   \   00043B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00043E   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000441   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000444   78..         MOV     R0,#?V0
   \   000446   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000449   7408         MOV     A,#0x8
   \   00044B   12....       LCALL   ?XSTACK_DISP0_8
   \   00044E   E0           MOVX    A,@DPTR
   \   00044F   F5..         MOV     ?V0,A
   \   000451   78..         MOV     R0,#?V0
   \   000453   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000456   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000459   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00045C   75..00       MOV     ?V0,#0x0
   \   00045F   802E         SJMP    ??ZDO_ProcessMatchDescReq_36
    940            else
    941            {
    942              // No match found
    943              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_35:
   \   000461                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000461   AA..         MOV     R2,?V8
   \   000463   AB..         MOV     R3,?V9
   \   000465   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000468   E9           MOV     A,R1
   \   000469   703F         JNZ     ??ZDO_ProcessMatchDescReq_37
    944              {
    945                // send response message with match length = 0
    946                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    947                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   00046B                ; Setup parameters for call to function ZDP_EPRsp
   \   00046B   7401         MOV     A,#0x1
   \   00046D   12....       LCALL   ?XSTACK_DISP0_8
   \   000470   12....       LCALL   ?Subroutine45 & 0xFFFF
    948          #if defined( LCD_SUPPORTED )
    949                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
    950          #endif
    951              }
    952              else
    953              {
    954                // no response mesage for broadcast message
    955          #if defined( LCD_SUPPORTED )
    956                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
    957          #endif
    958              }
    959            }
   \                     ??CrossCallReturnLabel_72:
   \   000473   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000476   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000479   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00047C   78..         MOV     R0,#?V0
   \   00047E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000481   75..00       MOV     ?V0,#0x0
   \   000484   78..         MOV     R0,#?V0
   \   000486   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000489   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00048C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \                     ??ZDO_ProcessMatchDescReq_36:
   \   00048F   78..         MOV     R0,#?V0
   \   000491   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000494   7408         MOV     A,#0x8
   \   000496   12....       LCALL   ?XSTACK_DISP0_8
   \   000499   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00049C   12....       LCALL   ?XSTACK_DISP0_8
   \   00049F   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0004A2   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0004A5   7407         MOV     A,#0x7
   \   0004A7   12....       LCALL   ?DEALLOC_XSTACK8
    960          
    961            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_37:
   \   0004AA   7408         MOV     A,#0x8
   \   0004AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0004AF   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   0004B2   600B         JZ      ??ZDO_ProcessMatchDescReq_38
    962            {
    963              osal_mem_free( inClusters );
   \   0004B4                ; Setup parameters for call to function osal_mem_free
   \   0004B4   7408         MOV     A,#0x8
   \   0004B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B9   12....       LCALL   ??Subroutine166_0 & 0xFFFF
    964            }
   \                     ??CrossCallReturnLabel_299:
   \   0004BC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    965          
    966            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_38:
   \   0004BF   7406         MOV     A,#0x6
   \   0004C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0004C4   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   0004C7   600B         JZ      ??ZDO_ProcessMatchDescReq_3
    967            {
    968              osal_mem_free( outClusters );
   \   0004C9                ; Setup parameters for call to function osal_mem_free
   \   0004C9   7406         MOV     A,#0x6
   \   0004CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0004CE   12....       LCALL   ??Subroutine166_0 & 0xFFFF
    969            }
   \                     ??CrossCallReturnLabel_300:
   \   0004D1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    970          }
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0004D4   7412         MOV     A,#0x12
   \   0004D6                REQUIRE ?Subroutine4
   \   0004D6                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine159_0
   \   000003                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   F5..         MOV     ?V6,A
   \   000005   7C00         MOV     R4,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine160_0
   \   000001                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   7408         MOV     A,#0x8
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   85..82       MOV     DPL,?V4
   \   000003   85..83       MOV     DPH,?V5
   \   000006   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6A           XRL     A,R2
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine161_0
   \   000006                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000003   740C         MOV     A,#0xc
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   75..00       MOV     ?V6,#0x0
   \   000006   78..         MOV     R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   240F         ADD     A,#0xf
   \   000005   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000008   F9           MOV     R1,A
   \   000009   7A06         MOV     R2,#0x6
   \   00000B   7B80         MOV     R3,#-0x80
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine162_0
   \   000003                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   38           ADDC    A,R0
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000003   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000006   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000009   F5..         MOV     ?V0,A
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000006   38           ADDC    A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000003   A3           INC     DPTR
   \   000004   AE82         MOV     R6,DPL
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   FA           MOV     R2,A
   \   000001                REQUIRE ??Subroutine179_0
   \   000001                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine185_0
   \   000002                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine188_0
   \   000001                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   000003   28           ADD     A,R0
   \   000004   22           RET
    971          
    972          #if defined ( REFLECTOR )
    973          /*********************************************************************
    974           * @fn      ZDO_ProcessBindUnbindReq()
    975           *
    976           * @brief   Called to process a Bind or Unbind Request message.
    977           *
    978           * @param   inMsg  - incoming message (request)
    979           * @param   pReq - place to put parsed information
    980           *
    981           * @return  none
    982           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    983          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    984          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    985            zAddrType_t SourceAddr;       // Binding Source addres
    986            byte bindStat;
    987          
    988            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    989            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP101_8
   \   00001D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    990          
    991            // If the local device is not the primary binding cache
    992            // check the src address of the bind request.
    993            // If it is not the local device's extended address
    994            // discard the request.
    995            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    996                  (pReq->dstAddress.addrMode != Addr64Bit &&
    997                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000023   8A..         MOV     ?V2,R2
   \   000025   8B..         MOV     ?V3,R3
   \   000027   AC..         MOV     R4,?V2
   \   000029   AD..         MOV     R5,?V3
   \   00002B                ; Setup parameters for call to function sAddrExtCmp
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP101_8
   \   000030   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000033   E9           MOV     A,R1
   \   000034   6017         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000036   EE           MOV     A,R6
   \   000037   2413         ADD     A,#0x13
   \   000039   F8           MOV     R0,A
   \   00003A   E4           CLR     A
   \   00003B   3F           ADDC    A,R7
   \   00003C   F9           MOV     R1,A
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FA           MOV     R2,A
   \   000043   7403         MOV     A,#0x3
   \   000045   6A           XRL     A,R2
   \   000046   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   000048   7401         MOV     A,#0x1
   \   00004A   6A           XRL     A,R2
   \   00004B   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
    998            {
    999              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   7484         MOV     A,#-0x7c
   \   000055   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1000            }
   1001            else
   1002            {
   1003              // Check source & destination endpoints
   1004              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
   1005                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1006                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   000058   EE           MOV     A,R6
   \   000059   2408         ADD     A,#0x8
   \   00005B   F5..         MOV     ?V2,A
   \   00005D   E4           CLR     A
   \   00005E   3F           ADDC    A,R7
   \   00005F   F5..         MOV     ?V3,A
   \   000061   85..82       MOV     DPL,?V2
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F5..         MOV     ?V6,A
   \   000069   6019         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00006B   74FF         MOV     A,#-0x1
   \   00006D   65..         XRL     A,?V6
   \   00006F   6013         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000071   7403         MOV     A,#0x3
   \   000073   6A           XRL     A,R2
   \   000074   7019         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000076   EE           MOV     A,R6
   \   000077   2414         ADD     A,#0x14
   \   000079   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   00007C   FA           MOV     R2,A
   \   00007D   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00007F   74FF         MOV     A,#-0x1
   \   000081   6A           XRL     A,R2
   \   000082   700B         JNZ     ??ZDO_ProcessBindUnbindReq_4
   1007              {
   1008                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   7482         MOV     A,#-0x7e
   \   00008C   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1009              }
   1010              else
   1011              {
   1012                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   00008F   EE           MOV     A,R6
   \   000090   240B         ADD     A,#0xb
   \   000092   F5..         MOV     ?V4,A
   \   000094   E4           CLR     A
   \   000095   3F           ADDC    A,R7
   \   000096   F5..         MOV     ?V5,A
   \   000098   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   00009B   6421         XRL     A,#0x21
   \   00009D   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000A1   6003         JZ      $+5
   \   0000A3   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
   1013                {
   1014                  // Assume the table is full
   1015                  bindStat = ZDP_TABLE_FULL;
   \   0000A6   85..82       MOV     DPL,?XSP + 0
   \   0000A9   85..83       MOV     DPH,?XSP + 1
   \   0000AC   748C         MOV     A,#-0x74
   \   0000AE   12....       LCALL   ?Subroutine43 & 0xFFFF
   1016          
   1017          #if defined( APP_TP ) || defined( APP_TP2 )
   1018                  // For ZigBee Conformance Testing
   1019                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1020          #endif
   1021                  {
   1022          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1023                    uint16 nwkAddr;
   1024          
   1025                    // Verifies that a valid NWK address exists for the device
   1026                    // before creating a Binding entry. If NWK address does not
   1027                    // exist the request is sent out and the BindReq is saved, to
   1028                    // create the Bind Entry once the NwkAddrRsp is received
   1029                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1030                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   \                     ??CrossCallReturnLabel_65:
   \   0000B1   6003         JZ      $+5
   \   0000B3   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   \   0000B6                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000B6   7401         MOV     A,#0x1
   \   0000B8   12....       LCALL   ?XSTACK_DISP102_8
   \   0000BB   AA..         MOV     R2,?V4
   \   0000BD   AB..         MOV     R3,?V5
   \   0000BF   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   0000C2   E9           MOV     A,R1
   \   0000C3   6003         JZ      $+5
   \   0000C5   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   1031                    {
   1032                      // find an empty bind slot in the pending Bind Req list
   1033                      ZDO_PendingBindReq_t *pPendingBind;
   1034          
   1035                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   \   0000C8                ; Setup parameters for call to function ZDApp_GetEmptyPendingBindReq
   \   0000C8   12....       LCALL   `??ZDApp_GetEmptyPendingBindReq::?relay`; Banked call to: ZDApp_GetEmptyPendingBindReq
   \   0000CB   8A..         MOV     ?V2,R2
   \   0000CD   8B..         MOV     ?V3,R3
   \   0000CF   EA           MOV     A,R2
   \   0000D0   45..         ORL     A,?V3
   \   0000D2   7003         JNZ     $+5
   \   0000D4   02....       LJMP    ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
   1036                      {
   1037                        // copy the received request into the empty slot and all required info
   1038                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   \   0000D7                ; Setup parameters for call to function osal_memcpy
   \   0000D7   8E..         MOV     ?V8,R6
   \   0000D9   8F..         MOV     ?V9,R7
   \   0000DB   75..00       MOV     ?V10,#0x0
   \   0000DE   78..         MOV     R0,#?V8
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E3   7C15         MOV     R4,#0x15
   \   0000E5   7D00         MOV     R5,#0x0
   \   0000E7   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EA   7403         MOV     A,#0x3
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   1039          
   1040                        pPendingBind->srcAddr = inMsg->srcAddr;
   \   0000EF   85..82       MOV     DPL,?V0
   \   0000F2   85..83       MOV     DPH,?V1
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   E5..         MOV     A,?V2
   \   0000F9   2415         ADD     A,#0x15
   \   0000FB   FC           MOV     R4,A
   \   0000FC   E4           CLR     A
   \   0000FD   35..         ADDC    A,?V3
   \   0000FF   FD           MOV     R5,A
   \   000100   7409         MOV     A,#0x9
   \   000102   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1041                        pPendingBind->securityUse = inMsg->SecurityUse;
   \   000105   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000108   C0E0         PUSH    A
   \   00010A   E5..         MOV     A,?V2
   \   00010C   241E         ADD     A,#0x1e
   \   00010E   F582         MOV     DPL,A
   \   000110   E4           CLR     A
   \   000111   35..         ADDC    A,?V3
   \   000113   F583         MOV     DPH,A
   \   000115   D0E0         POP     A
   \   000117   12....       LCALL   ?Subroutine20 & 0xFFFF
   1042                        pPendingBind->transSeq = inMsg->TransSeq;
   \                     ??CrossCallReturnLabel_25:
   \   00011A   C0E0         PUSH    A
   \   00011C   E5..         MOV     A,?V2
   \   00011E   241F         ADD     A,#0x1f
   \   000120   F582         MOV     DPL,A
   \   000122   E4           CLR     A
   \   000123   35..         ADDC    A,?V3
   \   000125   F583         MOV     DPH,A
   \   000127   D0E0         POP     A
   \   000129   F0           MOVX    @DPTR,A
   1043                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   \   00012A   E5..         MOV     A,?V2
   \   00012C   2420         ADD     A,#0x20
   \   00012E   F582         MOV     DPL,A
   \   000130   E4           CLR     A
   \   000131   35..         ADDC    A,?V3
   \   000133   F583         MOV     DPH,A
   \   000135   7405         MOV     A,#0x5
   \   000137   F0           MOVX    @DPTR,A
   1044          
   1045                        // create an entry in Address Manager
   1046                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   \   000138                ; Setup parameters for call to function bindAddrIndexGet
   \   000138   AA..         MOV     R2,?V4
   \   00013A   AB..         MOV     R3,?V5
   \   00013C   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   1047          
   1048                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00013F                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00013F   7D00         MOV     R5,#0x0
   \   000141   7C00         MOV     R4,#0x0
   \   000143   7900         MOV     R1,#0x0
   \   000145   AA..         MOV     R2,?V4
   \   000147   AB..         MOV     R3,?V5
   \   000149   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   1049          
   1050                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1051                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   \   00014C                ; Setup parameters for call to function osal_start_timerEx
   \   00014C   90....       MOV     DPTR,#__Constant_3e8
   \   00014F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000152   7A00         MOV     R2,#0x0
   \   000154   7B10         MOV     R3,#0x10
   \   000156   90....       MOV     DPTR,#ZDAppTaskID
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F9           MOV     R1,A
   \   00015B   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00015E   7404         MOV     A,#0x4
   \   000160   12....       LCALL   ?DEALLOC_XSTACK8
   1052                        return;
   \   000163   02....       LJMP    ??ZDO_ProcessBindUnbindReq_9 & 0xFFFF
   1053                      }
   1054                    }
   1055                    // Add Bind entry
   1056                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1057                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   000166                ; Setup parameters for call to function APSME_BindRequest
   \   000166   EE           MOV     A,R6
   \   000167   2414         ADD     A,#0x14
   \   000169   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   1058                    {
   1059                      // valid entry
   1060                      bindStat = ZDP_SUCCESS;
   1061          
   1062                      // Notify to save info into NV
   1063                      ZDApp_NVUpdate();
   1064                    }
   1065          #else // ZDP_BIND_SKIP_VALIDATION  is defined
   1066                    // Create binding entry first independently of existance of  valid NWK addres
   1067                    // if NWK address does not exist a request is sent out
   1068                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1069                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1070                    {
   1071                      uint16 nwkAddr;
   1072          
   1073                      // valid entry
   1074                      bindStat = ZDP_SUCCESS;
   1075          
   1076                      // Notify to save info into NV
   1077                      ZDApp_NVUpdate();
   1078          
   1079                      // Check for the destination address
   1080                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   1081                      {
   1082                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   1083                        {
   1084                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1085                        }
   1086                      }
   1087                    }
   1088          #endif
   1089                  }
   1090                }
   \                     ??CrossCallReturnLabel_368:
   \   00016C   F5..         MOV     ?V6,A
   \   00016E   78..         MOV     R0,#?V6
   \   000170   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000173   AC..         MOV     R4,?V4
   \   000175   AD..         MOV     R5,?V5
   \   000177   8E82         MOV     DPL,R6
   \   000179   8F83         MOV     DPH,R7
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000187   85..82       MOV     DPL,?V2
   \   00018A   85..83       MOV     DPH,?V3
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   F9           MOV     R1,A
   \   00018F   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   000192   7401         MOV     A,#0x1
   \   000194   12....       LCALL   ?DEALLOC_XSTACK8
   \   000197   E9           MOV     A,R1
   \   000198   7046         JNZ     ??ZDO_ProcessBindUnbindReq_8
   \   00019A   802E         SJMP    ??ZDO_ProcessBindUnbindReq_10
   1091                else // Unbind_req
   1092                {
   1093                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1094                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   00019C                ; Setup parameters for call to function APSME_UnBindRequest
   \   00019C   EE           MOV     A,R6
   \   00019D   2414         ADD     A,#0x14
   \   00019F   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   0001A2   F5..         MOV     ?V2,A
   \   0001A4   78..         MOV     R0,#?V2
   \   0001A6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A9   AC..         MOV     R4,?V4
   \   0001AB   AD..         MOV     R5,?V5
   \   0001AD   8E82         MOV     DPL,R6
   \   0001AF   8F83         MOV     DPH,R7
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   0001BD   A9..         MOV     R1,?V6
   \   0001BF   12....       LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   0001C2   7401         MOV     A,#0x1
   \   0001C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C7   E9           MOV     A,R1
   \   0001C8   700D         JNZ     ??ZDO_ProcessBindUnbindReq_11
   1095                  {
   1096                    bindStat = ZDP_SUCCESS;
   \                     ??ZDO_ProcessBindUnbindReq_10:
   \   0001CA   85..82       MOV     DPL,?XSP + 0
   \   0001CD   85..83       MOV     DPH,?XSP + 1
   \   0001D0   E4           CLR     A
   \   0001D1   F0           MOVX    @DPTR,A
   1097          
   1098                    // Notify to save info into NV
   1099                    ZDApp_NVUpdate();
   \   0001D2                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0001D2   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   0001D5   8009         SJMP    ??ZDO_ProcessBindUnbindReq_8
   1100                  }
   1101                  else
   1102                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_11:
   \   0001D7   85..82       MOV     DPL,?XSP + 0
   \   0001DA   85..83       MOV     DPH,?XSP + 1
   \   0001DD   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   0001DF   F0           MOVX    @DPTR,A
   1103                }
   1104              }
   1105            }
   1106          
   1107            // Send back a response message
   1108            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1109                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1110                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   0001E0                ; Setup parameters for call to function ZDP_SendData
   \   0001E0   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   0001E3   F5..         MOV     ?V2,A
   \   0001E5   78..         MOV     R0,#?V2
   \   0001E7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001EA   7401         MOV     A,#0x1
   \   0001EC   12....       LCALL   ?XSTACK_DISP100_8
   \   0001EF   88..         MOV     ?V2,R0
   \   0001F1   89..         MOV     ?V3,R1
   \   0001F3   78..         MOV     R0,#?V2
   \   0001F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F8   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0001FB   F5..         MOV     ?V2,A
   \   0001FD   A3           INC     DPTR
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   4480         ORL     A,#0x80
   \   000201   F5..         MOV     ?V3,A
   \   000203   78..         MOV     R0,#?V2
   \   000205   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000208   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00020B   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00020E   7405         MOV     A,#0x5
   \   000210   12....       LCALL   ?DEALLOC_XSTACK8
   1111          }
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000213   740C         MOV     A,#0xc
   \   000215   12....       LCALL   ?DEALLOC_XSTACK8
   \   000218   7F0B         MOV     R7,#0xb
   \   00021A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   E5..         MOV     A,?V0
   \   000002   240C         ADD     A,#0xc
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000005   35..         ADDC    A,?V1
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   6403         XRL     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E5..         MOV     A,?V0
   \   000003   240F         ADD     A,#0xf
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   35..         ADDC    A,?V1
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   7901         MOV     R1,#0x1
   \   000002   E5..         MOV     A,?V0
   \   000004   2402         ADD     A,#0x2
   \   000006   FC           MOV     R4,A
   \   000007   E4           CLR     A
   \   000008   35..         ADDC    A,?V1
   \   00000A   FD           MOV     R5,A
   \   00000B   E5..         MOV     A,?V0
   \   00000D   240F         ADD     A,#0xf
   \   00000F   FA           MOV     R2,A
   \   000010   E4           CLR     A
   \   000011   35..         ADDC    A,?V1
   \   000013   FB           MOV     R3,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
   1112          #endif // REFLECTOR
   1113          
   1114          /*********************************************************************
   1115           * @fn      ZDO_UpdateAddrManager
   1116           *
   1117           * @brief   Update the Address Manager.
   1118           *
   1119           * @param   nwkAddr - network address
   1120           * @param   extAddr - extended address
   1121           *
   1122           * @return  none
   1123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1124          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1125          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1126            AddrMgrEntry_t addrEntry;
   1127          
   1128            // Update the address manager
   1129            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1130            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine27 & 0xFFFF
   1131            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_281:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1132            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   AA..         MOV     R2,?XSP + 0
   \   000026   AB..         MOV     R3,?XSP + 1
   \   000028   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1133          }
   \   00002B   740D         MOV     A,#0xd
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   1134          
   1135          /*********************************************************************
   1136           * @fn      ZDO_ProcessServerDiscReq
   1137           *
   1138           * @brief   Process the Server_Discovery_req message.
   1139           *
   1140           * @param   inMsg  - incoming message (request)
   1141           *
   1142           * @return  none
   1143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1144          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1146            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1147            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   000009   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00000C   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   00000F   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000012   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   58           ANL     A,R0
   \   000017   F5..         MOV     ?V0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   59           ANL     A,R1
   \   00001C   F5..         MOV     ?V1,A
   1148          
   1149            if ( matchMask )
   \   00001E   E5..         MOV     A,?V0
   \   000020   45..         ORL     A,?V1
   \   000022   601C         JZ      ??ZDO_ProcessServerDiscReq_0
   1150            {
   1151              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1152                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000024                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002F   12....       LCALL   ?Subroutine101 & 0xFFFF
   1153            }
   \                     ??CrossCallReturnLabel_372:
   \   000032   FD           MOV     R5,A
   \   000033   7C00         MOV     R4,#0x0
   \   000035   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000038   12....       LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   1154          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000040   02....       LJMP    ??Subroutine155_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000003   F8           MOV     R0,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000003   F583         MOV     DPH,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET
   1155          
   1156          #if defined ( ZIGBEE_CHILD_AGING )
   1157          /*********************************************************************
   1158           * @fn          ZDO_ProcessEndDeviceTimeoutReq
   1159           *
   1160           * @brief       This function processes and responds to the
   1161           *              End_Device_Timeout_Req message.
   1162           *
   1163           * @param       inMsg  - incoming message (request)
   1164           *
   1165           * @return      none
   1166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1167          void ZDO_ProcessEndDeviceTimeoutReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessEndDeviceTimeoutReq:
   1168          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1169            uint8 stat = ZDP_SUCCESS;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   1170            uint8 *ieee = NULL;
   1171            uint16 reqTimeout;
   1172          
   1173            // Only process this message if Child Table Management is enabled OR
   1174            // If message was broadcast OR multicast OR
   1175            // if the NWK src and the MAC src are not the same) drop message
   1176            if ( ( zgChildAgingEnable == FALSE ) ||
   1177                 ( inMsg->wasBroadcast == TRUE ) ||
   1178                 ( inMsg->srcAddr.addr.shortAddr != inMsg->macSrcAddr ) )
   \   000012   90....       MOV     DPTR,#zgChildAgingEnable
   \   000015   E0           MOVX    A,@DPTR
   \   000016   606A         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   000018   EA           MOV     A,R2
   \   000019   240B         ADD     A,#0xb
   \   00001B   F582         MOV     DPL,A
   \   00001D   E4           CLR     A
   \   00001E   3B           ADDC    A,R3
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6401         XRL     A,#0x1
   \   000024   605C         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   000026   EA           MOV     A,R2
   \   000027   2402         ADD     A,#0x2
   \   000029   FC           MOV     R4,A
   \   00002A   E4           CLR     A
   \   00002B   3B           ADDC    A,R3
   \   00002C   FD           MOV     R5,A
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000034   EA           MOV     A,R2
   \   000035   2415         ADD     A,#0x15
   \   000037   F582         MOV     DPL,A
   \   000039   E4           CLR     A
   \   00003A   3B           ADDC    A,R3
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   68           XRL     A,R0
   \   00003F   7003         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_1
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   69           XRL     A,R1
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_1:
   \   000044   703C         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_0
   1179            {
   1180              // the message does not come from a child, drop it
   1181              return;
   1182            }
   1183          
   1184            ieee = inMsg->asdu;
   1185          
   1186            reqTimeout = BUILD_UINT16( inMsg->asdu[Z_EXTADDR_LEN], inMsg->asdu[Z_EXTADDR_LEN+1] );
   1187          
   1188            if ( ( ( reqTimeout < ZDO_MIN_REQ_TIMEOUT ) || ( reqTimeout > ZDO_MAX_REQ_TIMEOUT ) ) ||
   1189                 ( ZSTACK_END_DEVICE_BUILD ) )
   1190            {
   1191              stat = ZDP_INVALID_REQTYPE;
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   7480         MOV     A,#-0x80
   \   00004E   12....       LCALL   ?Subroutine28 & 0xFFFF
   1192            }
   1193            else
   1194            {
   1195              associated_devices_t *pAssoc;
   1196          
   1197              if ( ( ( pAssoc = AssocGetWithExt( ieee ) ) != NULL ) &&
   1198                   ( ( pAssoc->nodeRelation >= CHILD_RFD ) &&
   1199                     ( pAssoc->nodeRelation <= CHILD_RFD_RX_IDLE ) ) )
   1200              {
   1201                pAssoc->timeoutCounter = reqTimeout;
   1202                pAssoc->endDevKaTimeout = reqTimeout;
   1203          
   1204                // Set event to save NV
   1205                ZDApp_NVUpdate();
   1206              }
   1207              else
   1208              {
   1209                stat = ZDP_DEVICE_NOT_FOUND;
   1210              }
   1211          
   1212            }
   1213          
   1214            ZDP_EndDeviceTimeoutRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
   1215                                     inMsg->SecurityUse );
   \                     ??CrossCallReturnLabel_35:
   \   000051   F5..         MOV     ?V0,A
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   7401         MOV     A,#0x1
   \   00005A   12....       LCALL   ?XSTACK_DISP100_8
   \   00005D   88..         MOV     ?V0,R0
   \   00005F   89..         MOV     ?V1,R1
   \   000061   78..         MOV     R0,#?V0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   75..1F       MOV     ?V0,#0x1f
   \   000069   75..80       MOV     ?V1,#-0x80
   \   00006C   78..         MOV     R0,#?V0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   7901         MOV     R1,#0x1
   \   000073   EA           MOV     A,R2
   \   000074   240F         ADD     A,#0xf
   \   000076   FA           MOV     R2,A
   \   000077   5001         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_2
   \   000079   0B           INC     R3
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_2:
   \   00007A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00007D   7405         MOV     A,#0x5
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   1216          }
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_0:
   \   000082                REQUIRE ?Subroutine8
   \   000082                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine154_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   EA           MOV     A,R2
   \   000002   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000005   3B           ADDC    A,R3
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET
   1217          #endif // ZIGBEE_CHILD_AGING
   1218          
   1219          /*********************************************************************
   1220           * Call Back Functions from APS  - API
   1221           */
   1222          
   1223          /*********************************************************************
   1224           * @fn          ZDO_EndDeviceTimeoutCB
   1225           *
   1226           * @brief       This function handles the binding timer for the End
   1227           *              Device Bind command.
   1228           *
   1229           * @param       none
   1230           *
   1231           * @return      none
   1232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1233          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1234          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1235          #if defined ( REFLECTOR )
   1236            byte stat;
   1237            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1238            {
   1239              stat = ZDO_EDBind->status;
   1240          
   1241              // Send the response message to the first sent
   1242              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1243                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C8           XCH     A,R0
   \   000017   2415         ADD     A,#0x15
   \   000019   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   00001C   F8           MOV     R0,A
   \   00001D   90....       MOV     DPTR,#ZDO_EDBind
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C9           XCH     A,R1
   \   000025   2416         ADD     A,#0x16
   \   000027   F582         MOV     DPL,A
   \   000029   E4           CLR     A
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   D0E0         POP     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   90....       MOV     DPTR,#ZDO_EDBind
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2401         ADD     A,#0x1
   \   00003E   FC           MOV     R4,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   3400         ADDC    A,#0x0
   \   000043   FD           MOV     R5,A
   \   000044   90....       MOV     DPTR,#ZDO_EDBind
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F583         MOV     DPH,A
   \   00004D   8982         MOV     DPL,R1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   F0           MOVX    @DPTR,A
   \   000057                ; Setup parameters for call to function ZDP_SendData
   \   000057   E8           MOV     A,R0
   \   000058   F5..         MOV     ?V0,A
   \   00005A   78..         MOV     R0,#?V0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   7402         MOV     A,#0x2
   \   000061   12....       LCALL   ?XSTACK_DISP100_8
   \   000064   88..         MOV     ?V0,R0
   \   000066   89..         MOV     ?V1,R1
   \   000068   78..         MOV     R0,#?V0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   75..20       MOV     ?V0,#0x20
   \   000070   75..80       MOV     ?V1,#-0x80
   \   000073   78..         MOV     R0,#?V0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   7901         MOV     R1,#0x1
   \   00007A   7405         MOV     A,#0x5
   \   00007C   12....       LCALL   ?XSTACK_DISP101_8
   \   00007F   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000082   7405         MOV     A,#0x5
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   1244          
   1245              ZDO_RemoveEndDeviceBind();
   \   000087   90....       MOV     DPTR,#ZDO_EDBind
   \   00008A   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   1246            }
   \                     ??CrossCallReturnLabel_291:
   \   00008D   602E         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   C8           XCH     A,R0
   \   000091   2410         ADD     A,#0x10
   \   000093   F582         MOV     DPL,A
   \   000095   E4           CLR     A
   \   000096   38           ADDC    A,R0
   \   000097   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00009A   6003         JZ      ??ZDO_EndDeviceTimeoutCB_1
   \   00009C                ; Setup parameters for call to function osal_mem_free
   \   00009C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   00009F   90....       MOV     DPTR,#ZDO_EDBind
   \   0000A2   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000A5   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000A8   6003         JZ      ??ZDO_EndDeviceTimeoutCB_2
   \   0000AA                ; Setup parameters for call to function osal_mem_free
   \   0000AA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   0000AD                ; Setup parameters for call to function osal_mem_free
   \   0000AD   90....       MOV     DPTR,#ZDO_EDBind
   \   0000B0   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   0000B3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000B6   90....       MOV     DPTR,#ZDO_EDBind
   \   0000B9   E4           CLR     A
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   F0           MOVX    @DPTR,A
   1247          #endif  // REFLECTOR
   1248          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000BD   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine178_0
   \   000002                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET
   1249          
   1250          /*********************************************************************
   1251           * Optional Management Messages
   1252           */
   1253          
   1254          /*********************************************************************
   1255           * @fn          ZDO_ProcessMgmtLqiReq
   1256           *
   1257           * @brief       This function handles parsing the incoming Management
   1258           *              LQI request and generate the response.
   1259           *
   1260           *   Note:      This function will limit the number of items returned
   1261           *              to ZDO_MAX_LQI_ITEMS items.
   1262           *
   1263           * @param       inMsg - incoming message (request)
   1264           *
   1265           * @return      none
   1266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1267          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1268          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V14,R2
   \   00000C   8B..         MOV     ?V15,R3
   1269            byte x;
   1270            byte index;
   1271            byte numItems;
   1272            byte maxItems;
   1273            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   12....       LCALL   ?Subroutine100 & 0xFFFF
   1274            ZDP_MgmtLqiItem_t* item;
   1275            neighborEntry_t    entry;
   1276            byte aItems;
   1277            associated_devices_t *aDevice;
   1278            AddrMgrEntry_t  nwkEntry;
   1279            uint8 StartIndex = inMsg->asdu[0];
   \                     ??CrossCallReturnLabel_342:
   \   000011   35..         ADDC    A,?V15
   \   000013   12....       LCALL   ?Subroutine52 & 0xFFFF
   1280          
   1281            // Get the number of neighbor items
   1282            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \                     ??CrossCallReturnLabel_84:
   \   000016   799C         MOV     R1,#-0x64
   \   000018   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1283          
   1284            // Get the number of associated items
   1285            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00001B                ; Setup parameters for call to function AssocCount
   \   00001B   7A04         MOV     R2,#0x4
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   12....       LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
   \   000022   EA           MOV     A,R2
   \   000023   F5..         MOV     ?V2,A
   1286          
   1287            // Total number of items
   1288            maxItems += aItems;
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   2A           ADD     A,R2
   \   00002D   F0           MOVX    @DPTR,A
   1289          
   1290            // Start with the supplied index
   1291            if ( maxItems > StartIndex )
   \   00002E   F8           MOV     R0,A
   \   00002F   E5..         MOV     A,?V4
   \   000031   C3           CLR     C
   \   000032   98           SUBB    A,R0
   \   000033   4003         JC      $+5
   \   000035   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1292            {
   1293              numItems = maxItems - StartIndex;
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C3           CLR     C
   \   00003A   95..         SUBB    A,?V4
   \   00003C   F5..         MOV     ?V1,A
   1294          
   1295              // limit the size of the list
   1296              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   00003E   C3           CLR     C
   \   00003F   9404         SUBB    A,#0x4
   \   000041   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1297                numItems = ZDO_MAX_LQI_ITEMS;
   \   000043   75..03       MOV     ?V1,#0x3
   1298          
   1299              // Allocate the memory to build the table
   1300              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1301                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000046                ; Setup parameters for call to function osal_mem_alloc
   \   000046   E5..         MOV     A,?V1
   \   000048   75F01A       MOV     B,#0x1a
   \   00004B   A4           MUL     AB
   \   00004C   FA           MOV     R2,A
   \   00004D   ABF0         MOV     R3,B
   \   00004F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000052   8A..         MOV     ?V10,R2
   \   000054   8B..         MOV     ?V11,R3
   1302          
   1303              if ( table != NULL )
   \   000056   EA           MOV     A,R2
   \   000057   45..         ORL     A,?V11
   \   000059   7003         JNZ     $+5
   \   00005B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1304              {
   1305                x = 0;
   \   00005E   75..00       MOV     ?V3,#0x0
   1306                item = table;
   \   000061   AE..         MOV     R6,?V10
   \   000063   AF..         MOV     R7,?V11
   1307                index = StartIndex;
   \   000065   85....       MOV     ?V0,?V4
   \   000068   8079         SJMP    ??ZDO_ProcessMgmtLqiReq_3
   1308          
   1309                // Loop through associated items and build list
   1310                for ( ; x < numItems; x++ )
   1311                {
   1312                  if ( index < aItems )
   1313                  {
   1314                    // get next associated device
   1315                    aDevice = AssocFindDevice( index++ );
   1316          
   1317                    // set basic fields
   1318                    item->panID   = _NIB.nwkPanId;
   1319                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1320                    item->nwkAddr = aDevice->shortAddr;
   1321                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1322                    item->depth   = 0xFF;
   1323                    item->lqi     = aDevice->linkInfo.rxLqi;
   1324          
   1325                    // set extented address
   1326                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1327                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1328          
   1329                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1330                    {
   1331                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1332                    }
   1333                    else
   1334                    {
   1335                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00006A                ; Setup parameters for call to function osal_memset
   \   00006A   7C08         MOV     R4,#0x8
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   79FF         MOV     R1,#-0x1
   \   000070   AA..         MOV     R2,?V12
   \   000072   AB..         MOV     R3,?V13
   \   000074   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1336                    }
   1337          
   1338                    // use association info to set other fields
   1339                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   000077   E5..         MOV     A,?V6
   \   000079   2404         ADD     A,#0x4
   \   00007B   F8           MOV     R0,A
   \   00007C   E4           CLR     A
   \   00007D   35..         ADDC    A,?V7
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000083   E0           MOVX    A,@DPTR
   \   000084   7023         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1340                    {
   1341                      if (  aDevice->shortAddr == 0 )
   \   000086   85..82       MOV     DPL,?V6
   \   000089   85..83       MOV     DPH,?V7
   \   00008C   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00008F   7004         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   1342                      {
   1343                        item->devType = ZDP_MGMT_DT_COORD;
   \   000091   E4           CLR     A
   \   000092   F0           MOVX    @DPTR,A
   1344                        item->depth = 0;
   \   000093   8008         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1345                      }
   1346                      else
   1347                      {
   1348                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   000095   7401         MOV     A,#0x1
   \   000097   F0           MOVX    @DPTR,A
   1349                        item->depth = _NIB.nodeDepth - 1;
   \   000098   90....       MOV     DPTR,#_NIB + 52
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   14           DEC     A
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   00009D   85..82       MOV     DPL,?V8
   \   0000A0   85..83       MOV     DPH,?V9
   1350                      }
   1351          
   1352                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1353                      item->relation = ZDP_MGMT_REL_PARENT;
   1354                    }
   \   0000A3   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000A6   E4           CLR     A
   \   0000A7   8030         SJMP    ??ZDO_ProcessMgmtLqiReq_9
   1355                    else
   1356                    {
   1357                      // If not parent, then it's a child
   1358                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000A9   90....       MOV     DPTR,#_NIB + 52
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   04           INC     A
   \   0000AE   85..82       MOV     DPL,?V8
   \   0000B1   85..83       MOV     DPH,?V9
   \   0000B4   12....       LCALL   ?Subroutine44 & 0xFFFF
   1359          
   1360                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_67:
   \   0000B7   C3           CLR     C
   \   0000B8   9403         SUBB    A,#0x3
   \   0000BA   8A82         MOV     DPL,R2
   \   0000BC   8B83         MOV     DPH,R3
   \   0000BE   4003         JC      $+5
   \   0000C0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1361                      {
   1362                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000C3   7402         MOV     A,#0x2
   \   0000C5   12....       LCALL   ?Subroutine44 & 0xFFFF
   1363          
   1364                        if ( aDevice->nodeRelation == CHILD_RFD )
   1365                        {
   1366                          item->rxOnIdle = FALSE;
   1367                        }
   1368                        else
   1369                        {
   1370                          item->rxOnIdle = TRUE;
   1371                        }
   1372                      }
   \                     ??CrossCallReturnLabel_68:
   \   0000C8   6401         XRL     A,#0x1
   \   0000CA   7003         JNZ     $+5
   \   0000CC   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1373                      else
   1374                      {
   1375                        item->devType = ZDP_MGMT_DT_ROUTER;
   1376          
   1377                        if ( aDevice->nodeRelation == CHILD_FFD )
   1378                        {
   1379                          item->rxOnIdle = FALSE;
   1380                        }
   1381                        else
   1382                        {
   1383                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   0000CF   12....       LCALL   ?Subroutine113 & 0xFFFF
   1384                        }
   \                     ??CrossCallReturnLabel_190:
   \   0000D2   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0000D4   12....       LCALL   ?Subroutine120 & 0xFFFF
   1385                      }
   1386          
   1387                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??CrossCallReturnLabel_208:
   \   0000D7   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0000D9   F0           MOVX    @DPTR,A
   1388                    }
   1389          
   1390                    item++;
   \   0000DA   EE           MOV     A,R6
   \   0000DB   241A         ADD     A,#0x1a
   \   0000DD   FE           MOV     R6,A
   \   0000DE   5001         JNC     ??ZDO_ProcessMgmtLqiReq_14
   \   0000E0   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0000E1   05..         INC     ?V3
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   0000E3   E5..         MOV     A,?V3
   \   0000E5   C3           CLR     C
   \   0000E6   95..         SUBB    A,?V1
   \   0000E8   4003         JC      $+5
   \   0000EA   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_15 & 0xFFFF
   \   0000ED   E5..         MOV     A,?V0
   \   0000EF   C3           CLR     C
   \   0000F0   95..         SUBB    A,?V2
   \   0000F2   4003         JC      $+5
   \   0000F4   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_16 & 0xFFFF
   \   0000F7                ; Setup parameters for call to function AssocFindDevice
   \   0000F7   AA..         MOV     R2,?V0
   \   0000F9   7B00         MOV     R3,#0x0
   \   0000FB   12....       LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   0000FE   8A..         MOV     ?V6,R2
   \   000100   8B..         MOV     ?V7,R3
   \   000102   05..         INC     ?V0
   \   000104   90....       MOV     DPTR,#_NIB + 33
   \   000107   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00010A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00010D   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000110   EE           MOV     A,R6
   \   000111   2412         ADD     A,#0x12
   \   000113   F582         MOV     DPL,A
   \   000115   E4           CLR     A
   \   000116   3F           ADDC    A,R7
   \   000117   F583         MOV     DPH,A
   \   000119   E8           MOV     A,R0
   \   00011A   F0           MOVX    @DPTR,A
   \   00011B   A3           INC     DPTR
   \   00011C   E9           MOV     A,R1
   \   00011D   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000120   F5..         MOV     ?V8,A
   \   000122   E4           CLR     A
   \   000123   3F           ADDC    A,R7
   \   000124   F5..         MOV     ?V9,A
   \   000126   85..82       MOV     DPL,?V8
   \   000129   F583         MOV     DPH,A
   \   00012B   74FF         MOV     A,#-0x1
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   85..82       MOV     DPL,?V6
   \   000131   85..83       MOV     DPH,?V7
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   C0E0         PUSH    A
   \   000141   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000144   D0E0         POP     A
   \   000146   F0           MOVX    @DPTR,A
   \   000147   7401         MOV     A,#0x1
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   E4           CLR     A
   \   00014D   F0           MOVX    @DPTR,A
   \   00014E   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000151   7402         MOV     A,#0x2
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000159   EE           MOV     A,R6
   \   00015A   240A         ADD     A,#0xa
   \   00015C   F5..         MOV     ?V12,A
   \   00015E   E4           CLR     A
   \   00015F   3F           ADDC    A,R7
   \   000160   F5..         MOV     ?V13,A
   \   000162                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000162   7401         MOV     A,#0x1
   \   000164   12....       LCALL   ?XSTACK_DISP101_8
   \   000167   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00016A   E9           MOV     A,R1
   \   00016B   6401         XRL     A,#0x1
   \   00016D   6003         JZ      $+5
   \   00016F   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   000172                ; Setup parameters for call to function sAddrExtCpy
   \   000172   7404         MOV     A,#0x4
   \   000174   12....       LCALL   ?XSTACK_DISP0_8
   \   000177   AC82         MOV     R4,DPL
   \   000179   AD83         MOV     R5,DPH
   \   00017B   AA..         MOV     R2,?V12
   \   00017D   AB..         MOV     R3,?V13
   \   00017F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000182   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   000185   7401         MOV     A,#0x1
   \   000187   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00018A   6003         JZ      $+5
   \   00018C   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   00018F   12....       LCALL   ?Subroutine113 & 0xFFFF
   1391                  }
   \                     ??CrossCallReturnLabel_191:
   \   000192   E4           CLR     A
   \   000193   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   1392                  else
   1393                  {
   1394                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   000196   E5..         MOV     A,?V2
   \   000198   C3           CLR     C
   \   000199   95..         SUBB    A,?V4
   \   00019B   4005         JC      ??ZDO_ProcessMgmtLqiReq_17
   1395                      // Start with 1st neighbor
   1396                      index = 0;
   \   00019D   75..00       MOV     ?V0,#0x0
   \   0001A0   801C         SJMP    ??ZDO_ProcessMgmtLqiReq_18
   1397                    else
   1398                      // Start with >1st neighbor
   1399                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001A2   E5..         MOV     A,?V4
   \   0001A4   C3           CLR     C
   \   0001A5   95..         SUBB    A,?V2
   \   0001A7   F5..         MOV     ?V0,A
   \   0001A9   8013         SJMP    ??ZDO_ProcessMgmtLqiReq_18
   1400                    break;
   1401                  }
   1402                }
   1403          
   1404                // Loop through neighbor items and finish list
   1405                for ( ; x < numItems; x++ )
   1406                {
   1407                  // Add next neighbor table item
   1408                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1409          
   1410                  // set ZDP_MgmtLqiItem_t fields
   1411                  item->panID    = entry.panId;
   1412                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1413                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1414                  item->nwkAddr  = entry.neighborAddress;
   1415                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1416                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1417                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1418                  item->depth    = 0xFF;
   1419                  item->lqi      = entry.linkInfo.rxLqi;
   1420          
   1421                  if ( item->nwkAddr == 0 )
   1422                  {
   1423                    item->devType = ZDP_MGMT_DT_COORD;
   1424                  }
   1425                  else
   1426                  {
   1427                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0001AB   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   0001AD   F0           MOVX    @DPTR,A
   1428                  }
   1429          
   1430                  item++;
   \   0001AE   EE           MOV     A,R6
   \   0001AF   241A         ADD     A,#0x1a
   \   0001B1   FE           MOV     R6,A
   \   0001B2   5001         JNC     ??ZDO_ProcessMgmtLqiReq_21
   \   0001B4   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   0001B5   05..         INC     ?V3
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001B7   E5..         MOV     A,?V3
   \   0001B9   C3           CLR     C
   \   0001BA   95..         SUBB    A,?V1
   \   0001BC   506F         JNC     ??ZDO_ProcessMgmtLqiReq_2
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001BE                ; Setup parameters for call to function NLME_GetRequest
   \   0001BE   740E         MOV     A,#0xe
   \   0001C0   12....       LCALL   ?XSTACK_DISP102_8
   \   0001C3   AA..         MOV     R2,?V0
   \   0001C5   7B00         MOV     R3,#0x0
   \   0001C7   7987         MOV     R1,#-0x79
   \   0001C9   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0001CC   05..         INC     ?V0
   \   0001CE   7418         MOV     A,#0x18
   \   0001D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D3   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001D6   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001D9                ; Setup parameters for call to function osal_memset
   \   0001D9   7C08         MOV     R4,#0x8
   \   0001DB   7D00         MOV     R5,#0x0
   \   0001DD   79FF         MOV     R1,#-0x1
   \   0001DF   EE           MOV     A,R6
   \   0001E0   240A         ADD     A,#0xa
   \   0001E2   FA           MOV     R2,A
   \   0001E3   E4           CLR     A
   \   0001E4   3F           ADDC    A,R7
   \   0001E5   FB           MOV     R3,A
   \   0001E6   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0001E9   EE           MOV     A,R6
   \   0001EA   2412         ADD     A,#0x12
   \   0001EC   F8           MOV     R0,A
   \   0001ED   E4           CLR     A
   \   0001EE   3F           ADDC    A,R7
   \   0001EF   F9           MOV     R1,A
   \   0001F0   740E         MOV     A,#0xe
   \   0001F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F5   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   0001F8   8882         MOV     DPL,R0
   \   0001FA   8983         MOV     DPH,R1
   \   0001FC   EA           MOV     A,R2
   \   0001FD   F0           MOVX    @DPTR,A
   \   0001FE   A3           INC     DPTR
   \   0001FF   EB           MOV     A,R3
   \   000200   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000203   7403         MOV     A,#0x3
   \   000205   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000208   F582         MOV     DPL,A
   \   00020A   E4           CLR     A
   \   00020B   3F           ADDC    A,R7
   \   00020C   F583         MOV     DPH,A
   \   00020E   74FF         MOV     A,#-0x1
   \   000210   F0           MOVX    @DPTR,A
   \   000211   741D         MOV     A,#0x1d
   \   000213   12....       LCALL   ?XSTACK_DISP0_8
   \   000216   E0           MOVX    A,@DPTR
   \   000217   C0E0         PUSH    A
   \   000219   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00021C   D0E0         POP     A
   \   00021E   F0           MOVX    @DPTR,A
   \   00021F   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000222   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000225   7084         JNZ     ??ZDO_ProcessMgmtLqiReq_19
   \   000227   E4           CLR     A
   \   000228   8083         SJMP    ??ZDO_ProcessMgmtLqiReq_20
   1431                }
   1432              }
   1433            }
   1434            else
   1435            {
   1436              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   00022A   75..00       MOV     ?V1,#0x0
   1437            }
   1438          
   1439            // Send response
   1440            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1441                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00022D                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   00022D   75..00       MOV     ?V2,#0x0
   \   000230   78..         MOV     R0,#?V2
   \   000232   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000235   78..         MOV     R0,#?V10
   \   000237   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023A   78..         MOV     R0,#?V1
   \   00023C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00023F   E5..         MOV     A,?V4
   \   000241   F5..         MOV     ?V1,A
   \   000243   78..         MOV     R0,#?V1
   \   000245   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000248   7405         MOV     A,#0x5
   \   00024A   12....       LCALL   ?XSTACK_DISP0_8
   \   00024D   E0           MOVX    A,@DPTR
   \   00024E   FD           MOV     R5,A
   \   00024F   7C00         MOV     R4,#0x0
   \   000251   E5..         MOV     A,?V14
   \   000253   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000256   35..         ADDC    A,?V15
   \   000258   FB           MOV     R3,A
   \   000259   E5..         MOV     A,?V14
   \   00025B   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00025E   35..         ADDC    A,?V15
   \   000260   F583         MOV     DPH,A
   \   000262   E0           MOVX    A,@DPTR
   \   000263   F9           MOV     R1,A
   \   000264   12....       LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   000267   7405         MOV     A,#0x5
   \   000269   12....       LCALL   ?DEALLOC_XSTACK8
   1442          
   1443            if ( table )
   \   00026C   E5..         MOV     A,?V10
   \   00026E   45..         ORL     A,?V11
   \   000270   6007         JZ      ??ZDO_ProcessMgmtLqiReq_22
   1444            {
   1445              osal_mem_free( table );
   \   000272                ; Setup parameters for call to function osal_mem_free
   \   000272   AA..         MOV     R2,?V10
   \   000274   AB..         MOV     R3,?V11
   \   000276   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1446            }
   1447          }
   \                     ??ZDO_ProcessMgmtLqiReq_22:
   \   000279   7425         MOV     A,#0x25
   \   00027B   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   EE           MOV     A,R6
   \   000001   2419         ADD     A,#0x19
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   EE           MOV     A,R6
   \   000001   2415         ADD     A,#0x15
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000003   49           ORL     A,R1
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E8           MOV     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00000E   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000010   EE           MOV     A,R6
   \   000011   2402         ADD     A,#0x2
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   3F           ADDC    A,R7
   \   000016   FB           MOV     R3,A
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   EE           MOV     A,R6
   \   00000E   2418         ADD     A,#0x18
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000004   7402         MOV     A,#0x2
   \   000006   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2416         ADD     A,#0x16
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000005   F5..         MOV     ?V4,A
   \   000007                ; Setup parameters for call to function NLME_GetRequest
   \   000007                ; Setup parameters for call to function APSME_GetRequest
   \   000007   AC..         MOV     R4,?XSP + 0
   \   000009   AD..         MOV     R5,?XSP + 1
   \   00000B   7A00         MOV     R2,#0x0
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   75..00       MOV     ?V10,#0x0
   \   000003   75..00       MOV     ?V11,#0x0
   \   000006                REQUIRE ??Subroutine171_0
   \   000006                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine172_0
   \   000001                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   85..82       MOV     DPL,?V6
   \   000003   85..83       MOV     DPH,?V7
   \   000006                REQUIRE ??Subroutine174_0
   \   000006                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   2402         ADD     A,#0x2
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000003   22           RET
   1448          
   1449          /*********************************************************************
   1450           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1451           *
   1452           * @brief       This function handles parsing the incoming Management
   1453           *              Network Discover request and starts the request.
   1454           *
   1455           * @param       inMsg - incoming message (request)
   1456           *
   1457           * @return      none
   1458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1459          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1461            NLME_ScanFields_t scan;
   1462            uint8             index;
   1463            uint8             *msg;
   1464          
   1465            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000011   35..         ADDC    A,?V1
   \   000013   12....       LCALL   ?Subroutine70 & 0xFFFF
   1466            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_109:
   \   000016   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000019   EA           MOV     A,R2
   \   00001A   F8           MOV     R0,A
   \   00001B   EB           MOV     A,R3
   \   00001C   F9           MOV     R1,A
   \   00001D   EC           MOV     A,R4
   \   00001E   FA           MOV     R2,A
   \   00001F   ED           MOV     A,R5
   \   000020   FB           MOV     R3,A
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   12....       LCALL   ?XSTORE_R0123
   1467            msg += 4;
   1468            scan.duration = *msg++;
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   C0E0         PUSH    A
   \   000035   7404         MOV     A,#0x4
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   D0E0         POP     A
   \   00003C   12....       LCALL   ?Subroutine30 & 0xFFFF
   1469            index         = *msg;
   \                     ??CrossCallReturnLabel_39:
   \   00003F   F8           MOV     R0,A
   1470            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   000040   7405         MOV     A,#0x5
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7401         MOV     A,#0x1
   \   000047   F0           MOVX    @DPTR,A
   1471            scan.scanApp  = NLME_DISC_SCAN;
   \   000048   7406         MOV     A,#0x6
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7401         MOV     A,#0x1
   \   00004F   F0           MOVX    @DPTR,A
   1472          
   1473            // Save off the information to be used for the response
   1474            zdappMgmtNwkDiscReqInProgress          = true;
   \   000050   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000053   F0           MOVX    @DPTR,A
   1475            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000054   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000057   04           INC     A
   \   000058   12....       LCALL   ?Subroutine33 & 0xFFFF
   1476            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_46:
   \   00005B   FA           MOV     R2,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FB           MOV     R3,A
   \   00005F   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   000062   12....       LCALL   ?Subroutine27 & 0xFFFF
   1477            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_282:
   \   000065   E8           MOV     A,R0
   \   000066   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000069   12....       LCALL   ?Subroutine20 & 0xFFFF
   1478            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \                     ??CrossCallReturnLabel_26:
   \   00006C   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00006F   F0           MOVX    @DPTR,A
   1479          
   1480            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   000070                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000070   AA..         MOV     R2,?XSP + 0
   \   000072   AB..         MOV     R3,?XSP + 1
   \   000074   12....       LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   000077   E9           MOV     A,R1
   \   000078   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1481            {
   1482              NLME_NwkDiscTerm();
   \   00007A                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00007A   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1483          
   1484              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1485            }
   1486          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   00007D   7407         MOV     A,#0x7
   \   00007F   02....       LJMP    ??Subroutine154_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV     R1,#0x4
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
   1487          
   1488          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1489          /*********************************************************************
   1490           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1491           *
   1492           * @brief       This function finishes the processing of the Management
   1493           *              Network Discover Request and generates the response.
   1494           *
   1495           *   Note:      This function will limit the number of items returned
   1496           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1497           *
   1498           * @param       ResultCountSrcAddr - source of the request
   1499           * @param       msg - pointer to incoming message
   1500           * @param       SecurityUse -
   1501           *
   1502           * @return      none
   1503           */
   1504          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1505          {
   1506            byte count, i, ResultCount = 0;
   1507            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1508          
   1509            NetworkList = nwk_getNwkDescList();
   1510          
   1511            // Count the number of nwk descriptors in the list
   1512            pList = nwk_getNwkDescList();
   1513            while (pList)
   1514            {
   1515              ResultCount++;
   1516              pList = pList->nextDesc;
   1517            }
   1518          
   1519            if ( ZSTACK_ROUTER_BUILD )
   1520            {
   1521              // Look for my PanID.
   1522              pList = nwk_getNwkDescList();
   1523              while ( pList )
   1524              {
   1525                if ( pList->panId == _NIB.nwkPanId )
   1526                {
   1527                  break;
   1528                }
   1529          
   1530          
   1531                if ( !pList->nextDesc )
   1532                {
   1533                  break;
   1534                }
   1535                pList = pList->nextDesc;
   1536              }
   1537          
   1538          
   1539              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1540              // prepend it.
   1541              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1542              {
   1543                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1544                if ( newDesc )
   1545                {
   1546                  byte pJoin;
   1547          
   1548                  newDesc->panId = _NIB.nwkPanId;
   1549                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1550                  newDesc->version = NLME_GetProtocolVersion();
   1551                  newDesc->stackProfile = zgStackProfile;
   1552          
   1553                  //Extended PanID
   1554                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1555          
   1556                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1557                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1558                                                     INVALID_NODE_ADDR);
   1559          
   1560                  newDesc->nextDesc = NetworkList;
   1561                  NetworkList = newDesc;
   1562                  ResultCount++;
   1563                }
   1564              }
   1565            }
   1566          
   1567            // Calc the count and apply a max count.
   1568            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1569            {
   1570              count = 0;
   1571            }
   1572            else
   1573            {
   1574              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1575              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1576              {
   1577                count = ZDO_MAX_NWKDISC_ITEMS;
   1578              }
   1579          
   1580              // Move the list pointer up to the start index.
   1581              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1582              {
   1583                NetworkList = NetworkList->nextDesc;
   1584              }
   1585            }
   1586          
   1587            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1588                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1589                                zdappMgmtNwkDiscStartIndex,
   1590                                count,
   1591                                NetworkList,
   1592                                false );
   1593          
   1594            if ( ZSTACK_ROUTER_BUILD )
   1595            {
   1596              if ( newDesc != NULL )
   1597              {
   1598                osal_mem_free( newDesc );
   1599              }
   1600            }
   1601          
   1602            NLME_NwkDiscTerm();
   1603          }
   1604          #endif
   1605          
   1606          /*********************************************************************
   1607           * @fn          ZDO_ProcessMgmtRtgReq
   1608           *
   1609           * @brief       This function finishes the processing of the Management
   1610           *              Routing Request and generates the response.
   1611           *
   1612           *   Note:      This function will limit the number of items returned
   1613           *              to ZDO_MAX_RTG_ITEMS items.
   1614           *
   1615           * @param       inMsg - incoming message (request)
   1616           *
   1617           * @return      none
   1618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1619          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1620          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   1621            byte x;
   1622            byte maxNumItems;
   1623            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1624            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V8,R6
   \   000012   8E..         MOV     ?V9,R6
   1625            rtgItem_t *pList;
   1626            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000017   35..         ADDC    A,?V7
   \   000019   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   00001C   FF           MOV     R7,A
   1627          
   1628            // Get the number of table items
   1629            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00001D                ; Setup parameters for call to function NLME_GetRequest
   \   00001D   AC..         MOV     R4,?XSP + 0
   \   00001F   AD..         MOV     R5,?XSP + 1
   \   000021   7A00         MOV     R2,#0x0
   \   000023   7B00         MOV     R3,#0x0
   \   000025   799D         MOV     R1,#-0x63
   \   000027   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1630          
   1631            if ( maxNumItems > StartIndex )
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   EF           MOV     A,R7
   \   000033   C3           CLR     C
   \   000034   98           SUBB    A,R0
   \   000035   5077         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1632            {
   1633              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C3           CLR     C
   \   000039   9F           SUBB    A,R7
   \   00003A   FE           MOV     R6,A
   1634          
   1635              // limit the size of the list
   1636              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003B   C3           CLR     C
   \   00003C   940B         SUBB    A,#0xb
   \   00003E   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1637              {
   1638                numItems = ZDO_MAX_RTG_ITEMS;
   \   000040   7E0A         MOV     R6,#0xa
   1639              }
   1640          
   1641              // Allocate the memory to build the table
   1642              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   EE           MOV     A,R6
   \   000043   75F007       MOV     B,#0x7
   \   000046   A4           MUL     AB
   \   000047   FA           MOV     R2,A
   \   000048   ABF0         MOV     R3,B
   \   00004A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004D   8A..         MOV     ?V0,R2
   \   00004F   8B..         MOV     ?V1,R3
   \   000051   8A..         MOV     ?V8,R2
   \   000053   8B..         MOV     ?V9,R3
   1643          
   1644              if ( pBuf != NULL )
   \   000055   EA           MOV     A,R2
   \   000056   45..         ORL     A,?V9
   \   000058   6052         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1645              {
   1646                // Convert buffer to list
   1647                pList = (rtgItem_t *)pBuf;
   1648          
   1649                // Loop through items and build list
   1650                for ( x = 0; x < numItems; x++ )
   \   00005A   EE           MOV     A,R6
   \   00005B   6051         JZ      ??ZDO_ProcessMgmtRtgReq_0
   \   00005D   8F..         MOV     ?V2,R7
   \   00005F   75..00       MOV     ?V3,#0x0
   \   000062   8E..         MOV     ?V4,R6
   1651                {
   1652                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   000064                ; Setup parameters for call to function NLME_GetRequest
   \   000064   AC..         MOV     R4,?V0
   \   000066   AD..         MOV     R5,?V1
   \   000068   AA..         MOV     R2,?V2
   \   00006A   AB..         MOV     R3,?V3
   \   00006C   798B         MOV     R1,#-0x75
   \   00006E   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1653          
   1654                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1655                  switch( pList->status )
   \   000071   E5..         MOV     A,?V0
   \   000073   2405         ADD     A,#0x5
   \   000075   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000078   E0           MOVX    A,@DPTR
   \   000079   14           DEC     A
   \   00007A   6008         JZ      ??ZDO_ProcessMgmtRtgReq_4
   \   00007C   14           DEC     A
   \   00007D   6008         JZ      ??ZDO_ProcessMgmtRtgReq_5
   \   00007F   14           DEC     A
   \   000080   6009         JZ      ??ZDO_ProcessMgmtRtgReq_6
   \   000082   800B         SJMP    ??ZDO_ProcessMgmtRtgReq_7
   1656                  {
   1657                    case RT_ACTIVE:
   1658                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000084   E4           CLR     A
   \   000085   800A         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1659                      break;
   1660          
   1661                    case RT_DISC:
   1662                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000087   7401         MOV     A,#0x1
   \   000089   8006         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1663                      break;
   1664          
   1665                    case RT_LINK_FAIL:
   1666                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00008B   7402         MOV     A,#0x2
   \   00008D   8002         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1667                      break;
   1668          
   1669                    case RT_INIT:
   1670                    case RT_REPAIR:
   1671                    default:
   1672                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   00008F   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   000091   F0           MOVX    @DPTR,A
   1673                      break;
   1674                  }
   1675          
   1676                  // Increment pointer to next record
   1677                  pList++;
   \   000092   E5..         MOV     A,?V0
   \   000094   2407         ADD     A,#0x7
   \   000096   F5..         MOV     ?V0,A
   \   000098   5002         JNC     ??ZDO_ProcessMgmtRtgReq_9
   \   00009A   05..         INC     ?V1
   1678                }
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   00009C   05..         INC     ?V2
   \   00009E   E5..         MOV     A,?V2
   \   0000A0   7002         JNZ     ??ZDO_ProcessMgmtRtgReq_10
   \   0000A2   05..         INC     ?V3
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   0000A4   15..         DEC     ?V4
   \   0000A6   E5..         MOV     A,?V4
   \   0000A8   6004         JZ      ??ZDO_ProcessMgmtRtgReq_0
   \   0000AA   80B8         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1679              }
   1680              else
   1681              {
   1682                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000AC   7E00         MOV     R6,#0x0
   1683              }
   1684            }
   1685          
   1686            // Send response
   1687            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1688                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000AE                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000AE   75..00       MOV     ?V0,#0x0
   \   0000B1   78..         MOV     R0,#?V0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B6   78..         MOV     R0,#?V8
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   EE           MOV     A,R6
   \   0000BC   F5..         MOV     ?V0,A
   \   0000BE   78..         MOV     R0,#?V0
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C3   EF           MOV     A,R7
   \   0000C4   F5..         MOV     ?V0,A
   \   0000C6   78..         MOV     R0,#?V0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CB   7405         MOV     A,#0x5
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FD           MOV     R5,A
   \   0000D2   7C00         MOV     R4,#0x0
   \   0000D4   E5..         MOV     A,?V6
   \   0000D6   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   0000D9   35..         ADDC    A,?V7
   \   0000DB   FB           MOV     R3,A
   \   0000DC   E5..         MOV     A,?V6
   \   0000DE   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   0000E1   35..         ADDC    A,?V7
   \   0000E3   F583         MOV     DPH,A
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F9           MOV     R1,A
   \   0000E7   12....       LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   0000EA   7405         MOV     A,#0x5
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   1689          
   1690            if ( pBuf != NULL )
   \   0000EF   E5..         MOV     A,?V8
   \   0000F1   45..         ORL     A,?V9
   \   0000F3   6007         JZ      ??ZDO_ProcessMgmtRtgReq_11
   1691            {
   1692              osal_mem_free( pBuf );
   \   0000F5                ; Setup parameters for call to function osal_mem_free
   \   0000F5   AA..         MOV     R2,?V8
   \   0000F7   AB..         MOV     R3,?V9
   \   0000F9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1693            }
   1694          }
   \                     ??ZDO_ProcessMgmtRtgReq_11:
   \   0000FC   7401         MOV     A,#0x1
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000101                REQUIRE ?Subroutine5
   \   000101                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine168_0
   \   000003                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   35..         ADDC    A,?V1
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine169_0
   \   000002                ; // Fall through to label ??Subroutine169_0
   1695          
   1696          /*********************************************************************
   1697           * @fn          ZDO_ProcessMgmtBindReq
   1698           *
   1699           * @brief       This function finishes the processing of the Management
   1700           *              Bind Request and generates the response.
   1701           *
   1702           *   Note:      This function will limit the number of items returned
   1703           *              to ZDO_MAX_BIND_ITEMS items.
   1704           *
   1705           * @param       inMsg - incoming message (request)
   1706           *
   1707           * @return      none
   1708           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1709          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1710          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V8,R2
   \   00000C   8B..         MOV     ?V9,R3
   1711          #if defined ( REFLECTOR )
   1712            byte x;
   1713            uint16 maxNumItems;
   1714            uint16 numItems;
   1715            uint8 *pBuf = NULL;
   \   00000E   12....       LCALL   ?Subroutine100 & 0xFFFF
   1716            apsBindingItem_t *pList;
   1717            uint8 StartIndex = inMsg->asdu[0];
   \                     ??CrossCallReturnLabel_343:
   \   000011   35..         ADDC    A,?V9
   \   000013   12....       LCALL   ?Subroutine52 & 0xFFFF
   1718            uint8 status;
   1719          
   1720            // Get the number of table items
   1721            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \                     ??CrossCallReturnLabel_85:
   \   000016   79A3         MOV     R1,#-0x5d
   \   000018   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1722          
   1723            if ( maxNumItems > StartIndex )
   \   00001B   A8..         MOV     R0,?V4
   \   00001D   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000020   C3           CLR     C
   \   000021   E8           MOV     A,R0
   \   000022   9A           SUBB    A,R2
   \   000023   E4           CLR     A
   \   000024   9B           SUBB    A,R3
   \   000025   507A         JNC     ??ZDO_ProcessMgmtBindReq_0
   1724            {
   1725              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C3           CLR     C
   \   00002F   98           SUBB    A,R0
   \   000030   FE           MOV     R6,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   9400         SUBB    A,#0x0
   \   000035   FF           MOV     R7,A
   1726            }
   1727            else
   1728            {
   1729              numItems = 0;
   1730            }
   1731          
   1732            // limit the size of the list
   1733            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000036   C3           CLR     C
   \   000037   EE           MOV     A,R6
   \   000038   9404         SUBB    A,#0x4
   \   00003A   EF           MOV     A,R7
   \   00003B   9400         SUBB    A,#0x0
   \   00003D   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1734            {
   1735              numItems = ZDO_MAX_BIND_ITEMS;
   \   00003F   7E03         MOV     R6,#0x3
   \   000041   7F00         MOV     R7,#0x0
   \   000043   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1736            }
   1737          
   1738            // Allocate the memory to build the table
   1739            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000045   EE           MOV     A,R6
   \   000046   4F           ORL     A,R7
   \   000047   6058         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000049                ; Setup parameters for call to function osal_mem_alloc
   \   000049   EE           MOV     A,R6
   \   00004A   FA           MOV     R2,A
   \   00004B   EF           MOV     A,R7
   \   00004C   FB           MOV     R3,A
   \   00004D   EA           MOV     A,R2
   \   00004E   75F015       MOV     B,#0x15
   \   000051   A4           MUL     AB
   \   000052   FA           MOV     R2,A
   \   000053   A8F0         MOV     R0,B
   \   000055   75F015       MOV     B,#0x15
   \   000058   EB           MOV     A,R3
   \   000059   A4           MUL     AB
   \   00005A   28           ADD     A,R0
   \   00005B   FB           MOV     R3,A
   \   00005C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005F   8A..         MOV     ?V10,R2
   \   000061   8B..         MOV     ?V11,R3
   \   000063   EA           MOV     A,R2
   \   000064   45..         ORL     A,?V11
   \   000066   6039         JZ      ??ZDO_ProcessMgmtBindReq_0
   1740            {
   1741              status = ZSuccess;
   \   000068   75..00       MOV     ?V5,#0x0
   1742          
   1743              // Convert buffer to list
   1744              pList = (apsBindingItem_t *)pBuf;
   \   00006B   8A..         MOV     ?V2,R2
   \   00006D   8B..         MOV     ?V3,R3
   1745          
   1746              // Loop through items and build list
   1747              for ( x = 0; x < numItems; x++ )
   \   00006F   75..00       MOV     ?V6,#0x0
   \   000072   85....       MOV     ?V0,?V4
   \   000075   801E         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1748              {
   1749                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   000077                ; Setup parameters for call to function APSME_GetRequest
   \   000077   AC..         MOV     R4,?V2
   \   000079   AD..         MOV     R5,?V3
   \   00007B   E5..         MOV     A,?V6
   \   00007D   25..         ADD     A,?V0
   \   00007F   FA           MOV     R2,A
   \   000080   E4           CLR     A
   \   000081   3400         ADDC    A,#0x0
   \   000083   FB           MOV     R3,A
   \   000084   79A2         MOV     R1,#-0x5e
   \   000086   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1750                pList++;
   \   000089   E5..         MOV     A,?V2
   \   00008B   2415         ADD     A,#0x15
   \   00008D   F5..         MOV     ?V2,A
   \   00008F   5002         JNC     ??ZDO_ProcessMgmtBindReq_5
   \   000091   05..         INC     ?V3
   1751              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   000093   05..         INC     ?V6
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   000095   C3           CLR     C
   \   000096   E5..         MOV     A,?V6
   \   000098   9E           SUBB    A,R6
   \   000099   E4           CLR     A
   \   00009A   9F           SUBB    A,R7
   \   00009B   40DA         JC      ??ZDO_ProcessMgmtBindReq_4
   \   00009D   EE           MOV     A,R6
   \   00009E   F9           MOV     R1,A
   \   00009F   8005         SJMP    ??ZDO_ProcessMgmtBindReq_6
   1752          
   1753            }
   1754            else
   1755            {
   1756              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000A1   75..8B       MOV     ?V5,#-0x75
   1757              numItems = 0;
   \   0000A4   7900         MOV     R1,#0x0
   1758            }
   1759          
   1760            // Send response
   1761            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1762                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000A6                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000A6   75..00       MOV     ?V0,#0x0
   \   0000A9   78..         MOV     R0,#?V0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AE   78..         MOV     R0,#?V10
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   E9           MOV     A,R1
   \   0000B4   F5..         MOV     ?V0,A
   \   0000B6   78..         MOV     R0,#?V0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BB   E5..         MOV     A,?V4
   \   0000BD   F5..         MOV     ?V0,A
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C4   7405         MOV     A,#0x5
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   FD           MOV     R5,A
   \   0000CB   AC..         MOV     R4,?V5
   \   0000CD   E5..         MOV     A,?V8
   \   0000CF   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   0000D2   35..         ADDC    A,?V9
   \   0000D4   FB           MOV     R3,A
   \   0000D5   E5..         MOV     A,?V8
   \   0000D7   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0000DA   35..         ADDC    A,?V9
   \   0000DC   F583         MOV     DPH,A
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   12....       LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   0000E3   7405         MOV     A,#0x5
   \   0000E5   12....       LCALL   ?DEALLOC_XSTACK8
   1763          
   1764            if ( pBuf )
   \   0000E8   E5..         MOV     A,?V10
   \   0000EA   45..         ORL     A,?V11
   \   0000EC   6007         JZ      ??ZDO_ProcessMgmtBindReq_7
   1765            {
   1766              osal_mem_free( pBuf );
   \   0000EE                ; Setup parameters for call to function osal_mem_free
   \   0000EE   AA..         MOV     R2,?V10
   \   0000F0   AB..         MOV     R3,?V11
   \   0000F2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1767            }
   1768          #else
   1769            (void)inMsg;
   1770          #endif
   1771          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   7F0C         MOV     R7,#0xc
   \   0000FC   02....       LJMP    ?BANKED_LEAVE_XDATA
   1772          
   1773          /*********************************************************************
   1774           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1775           *
   1776           * @brief       This function finishes the processing of the Management
   1777           *              Direct Join Request and generates the response.
   1778           *
   1779           * @param       inMsg - incoming message (request)
   1780           *
   1781           * @return      none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1784          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine97 & 0xFFFF
   1785            uint8 *deviceAddr;
   1786            uint8 capInfo;
   1787            uint8 stat;
   1788          
   1789            // Parse the message
   1790            deviceAddr = inMsg->asdu;
   1791            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1792          
   1793            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_335:
   \   00000D   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   00001D   E9           MOV     A,R1
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   F0           MOVX    @DPTR,A
   1794          
   1795            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000025                ; Setup parameters for call to function ZDP_SendData
   \   000025   75..00       MOV     ?V0,#0x0
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP100_8
   \   000032   88..         MOV     ?V0,R0
   \   000034   89..         MOV     ?V1,R1
   \   000036   78..         MOV     R0,#?V0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   75..35       MOV     ?V0,#0x35
   \   00003E   75..80       MOV     ?V1,#-0x80
   \   000041   78..         MOV     R0,#?V0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000049   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00004C   7405         MOV     A,#0x5
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1796          }
   \   000051   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine170_0
   \   000004                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   7901         MOV     R1,#0x1
   \   000002   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000005   FA           MOV     R2,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000003                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET
   1797          
   1798          /*********************************************************************
   1799           * @fn          ZDO_ProcessMgmtLeaveReq
   1800           *
   1801           * @brief       This function processes a Management Leave Request
   1802           *              and generates the response.
   1803           *
   1804           * @param       inMsg - incoming message (request)
   1805           *
   1806           * @return      none
   1807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine158_0
   \   000003                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1808          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1810            NLME_LeaveReq_t req;
   1811            ZStatus_t       status;
   1812            uint8           option;
   1813            uint8 *msg = inMsg->asdu;
   \   00000E   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000011   12....       LCALL   ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000014   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   1814          
   1815            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1816                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_417:
   \   000017                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000017   EE           MOV     A,R6
   \   000018   FA           MOV     R2,A
   \   000019   EF           MOV     A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00001E   E9           MOV     A,R1
   \   00001F   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   000021                ; Setup parameters for call to function NLME_GetExtAddr
   \   000021   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000024   8A..         MOV     ?V2,R2
   \   000026   8B..         MOV     ?V3,R3
   \   000028   AC..         MOV     R4,?V2
   \   00002A   AD..         MOV     R5,?V3
   \   00002C                ; Setup parameters for call to function sAddrExtCmp
   \   00002C   EE           MOV     A,R6
   \   00002D   FA           MOV     R2,A
   \   00002E   EF           MOV     A,R7
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000033   E9           MOV     A,R1
   \   000034   6401         XRL     A,#0x1
   \   000036   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1817            {
   1818              // Remove this device
   1819              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000038   7401         MOV     A,#0x1
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1820            }
   1821            else
   1822            {
   1823              // Remove child device
   1824              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   000042   7401         MOV     A,#0x1
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   EE           MOV     A,R6
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   EF           MOV     A,R7
   1825            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   00004B   12....       LCALL   ?Subroutine17 & 0xFFFF
   1826          
   1827            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_18:
   \   00004E   F8           MOV     R0,A
   1828            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   00004F   A2E6         MOV     C,0xE0 /* A   */.6
   \   000051   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1829            {
   1830              req.removeChildren = TRUE;
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   7401         MOV     A,#0x1
   \   00005A   F0           MOVX    @DPTR,A
   1831            }
   1832          
   1833            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   00005B   E8           MOV     A,R0
   \   00005C   A2E7         MOV     C,0xE0 /* A   */.7
   \   00005E   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1834            {
   1835               req.rejoin = TRUE;
   \   000060   7404         MOV     A,#0x4
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
   1836            }
   1837          
   1838            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000068   7405         MOV     A,#0x5
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
   1839          
   1840            status = NLME_LeaveReq( &req );
   \   00006F                ; Setup parameters for call to function NLME_LeaveReq
   \   00006F   04           INC     A
   \   000070   12....       LCALL   ?XSTACK_DISP101_8
   \   000073   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000076   E9           MOV     A,R1
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   F0           MOVX    @DPTR,A
   1841          
   1842            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1843            {
   1844              // Stop polling and get ready to reset
   1845              NLME_SetPollRate( 0 );
   \   00007E                ; Setup parameters for call to function NLME_SetPollRate
   \   00007E   7A00         MOV     R2,#0x0
   \   000080   7B00         MOV     R3,#0x0
   \   000082   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1846            }
   1847          
   1848            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000085                ; Setup parameters for call to function ZDP_SendData
   \   000085   75..00       MOV     ?V2,#0x0
   \   000088   78..         MOV     R0,#?V2
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008D   7401         MOV     A,#0x1
   \   00008F   12....       LCALL   ?XSTACK_DISP100_8
   \   000092   88..         MOV     ?V2,R0
   \   000094   89..         MOV     ?V3,R1
   \   000096   78..         MOV     R0,#?V2
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   75..34       MOV     ?V2,#0x34
   \   00009E   75..80       MOV     ?V3,#-0x80
   \   0000A1   78..         MOV     R0,#?V2
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A6   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0000A9   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000AC   7405         MOV     A,#0x5
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   1849          }
   \   0000B1   7406         MOV     A,#0x6
   \   0000B3   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1850          
   1851          
   1852          /*********************************************************************
   1853           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1854           *
   1855           * @brief       This function processes a Management Permit Join Request
   1856           *              and generates the response.
   1857           *
   1858           * @param       inMsg - incoming message (request)
   1859           *
   1860           * @return      none
   1861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1862          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1863          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine97 & 0xFFFF
   1864            uint8 stat;
   1865            uint8 duration;
   1866            uint8 tcsig;
   1867          
   1868            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1869            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1870          
   1871            // Set the network layer permit join duration
   1872            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_336:
   \   00000D   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   12....       LCALL   ?Subroutine25 & 0xFFFF
   1873          
   1874            // Handle the Trust Center Significance
   1875            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1876            {
   1877              if ( tcsig == TRUE )
   1878              {
   1879                ZDSecMgrPermitJoining( duration );
   1880              }
   1881            }
   1882          
   1883            // Send a response if unicast
   1884            if ( !inMsg->wasBroadcast )
   \                     ??CrossCallReturnLabel_33:
   \   00001E   702C         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1885            {
   1886              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000020                ; Setup parameters for call to function ZDP_SendData
   \   000020   75..00       MOV     ?V0,#0x0
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP100_8
   \   00002D   88..         MOV     ?V0,R0
   \   00002F   89..         MOV     ?V1,R1
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..36       MOV     ?V0,#0x36
   \   000039   75..80       MOV     ?V1,#-0x80
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   12....       LCALL   ?Subroutine92 & 0xFFFF
   1887            }
   \                     ??CrossCallReturnLabel_148:
   \   000044   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000047   7405         MOV     A,#0x5
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
   1888          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00004C   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
   1889          
   1890          /*
   1891           * This function stub allows the next higher layer to be notified of
   1892           * a permit joining timeout.
   1893           */
   1894          /*********************************************************************
   1895           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1896           *
   1897           * @brief       This function stub allows the next higher layer to be
   1898           *              notified of a permit joining timeout. Currently, this
   1899           *              directly bypasses the APS layer.
   1900           *
   1901           * @param       none
   1902           *
   1903           * @return      none
   1904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1905          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1906          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1907            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1908            // Currently, only the ZDSecMgr needs to be notified
   1909            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1910            {
   1911              ZDSecMgrPermitJoiningTimeout();
   1912            }
   1913            #endif
   1914          }
   \   000000   02....       LJMP    ?BRET
   1915          
   1916          /*********************************************************************
   1917           * @fn          ZDO_ProcessUserDescReq
   1918           *
   1919           * @brief       This function finishes the processing of the User
   1920           *              Descriptor Request and generates the response.
   1921           *
   1922           * @param       inMsg - incoming message (request)
   1923           *
   1924           * @return      none
   1925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1926          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1927          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1928            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   39           ADDC    A,R1
   \   000015   F5..         MOV     ?V1,A
   1929            UserDescriptorFormat_t userDesc;
   1930          
   1931            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1932                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000017   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   65..         XRL     A,?V0
   \   00001D   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000023   7052         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   A8..         MOV     R0,?XSP + 0
   \   000027   A9..         MOV     R1,?XSP + 1
   \   000029   88..         MOV     ?V2,R0
   \   00002B   89..         MOV     ?V3,R1
   \   00002D   78..         MOV     R0,#?V2
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   75..11       MOV     ?V2,#0x11
   \   000035   75..00       MOV     ?V3,#0x0
   \   000038   78..         MOV     R0,#?V2
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV     R4,#0x0
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A81         MOV     R2,#-0x7f
   \   000043   7B00         MOV     R3,#0x0
   \   000045   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000048   7404         MOV     A,#0x4
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   E9           MOV     A,R1
   \   00004E   7027         JNZ     ??ZDO_ProcessUserDescReq_1
   1933            {
   1934              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   000050                ; Setup parameters for call to function ZDP_UserDescRsp
   \   000050   75..00       MOV     ?V2,#0x0
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   7401         MOV     A,#0x1
   \   00005A   12....       LCALL   ?XSTACK_DISP100_8
   \   00005D   88..         MOV     ?V2,R0
   \   00005F   89..         MOV     ?V3,R1
   \   000061   78..         MOV     R0,#?V2
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   AC..         MOV     R4,?V0
   \   000068   AD..         MOV     R5,?V1
   \   00006A   12....       LCALL   ?Subroutine90 & 0xFFFF
   1935            }
   \                     ??CrossCallReturnLabel_143:
   \   00006D   12....       LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   000070   7403         MOV     A,#0x3
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   \   000075   8021         SJMP    ??ZDO_ProcessUserDescReq_2
   1936            else
   1937            {
   1938              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1939                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000077                ; Setup parameters for call to function ZDP_GenericRsp
   \   000077   75..11       MOV     ?V2,#0x11
   \   00007A   75..80       MOV     ?V3,#-0x80
   \   00007D   78..         MOV     R0,#?V2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   12....       LCALL   ?Subroutine101 & 0xFFFF
   1940            }
   \                     ??CrossCallReturnLabel_373:
   \   00008A   FD           MOV     R5,A
   \   00008B   7C84         MOV     R4,#-0x7c
   \   00008D   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000090   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000093   7404         MOV     A,#0x4
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   1941          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   000098   7411         MOV     A,#0x11
   \   00009A   02....       LJMP    ?Subroutine2 & 0xFFFF
   1942          
   1943          /*********************************************************************
   1944           * @fn          ZDO_ProcessUserDescSet
   1945           *
   1946           * @brief       This function finishes the processing of the User
   1947           *              Descriptor Set and generates the response.
   1948           *
   1949           * @param       inMsg - incoming message (request)
   1950           *
   1951           * @return      none
   1952           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1953          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1954          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1955            uint8 *msg;
   1956            uint16 aoi;
   1957            UserDescriptorFormat_t userDesc;
   1958            uint8 outMsg[3];
   1959            uint8 status;
   1960          
   1961            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000011   35..         ADDC    A,?V3
   \   000013   12....       LCALL   ?Subroutine59 & 0xFFFF
   1962            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_94:
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   CA           XCH     A,R2
   \   000019   FB           MOV     R3,A
   \   00001A   EC           MOV     A,R4
   \   00001B   2A           ADD     A,R2
   \   00001C   FE           MOV     R6,A
   \   00001D   E4           CLR     A
   \   00001E   3B           ADDC    A,R3
   \   00001F   FF           MOV     R7,A
   1963          
   1964            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000020   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6E           XRL     A,R6
   \   000025   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00002A   6003         JZ      $+5
   \   00002C   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1965            {
   1966              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FA           MOV     R2,A
   \   000037   9410         SUBB    A,#0x10
   \   000039   5004         JNC     ??ZDO_ProcessUserDescSet_2
   \   00003B   8A..         MOV     ?V0,R2
   \   00003D   8003         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   00003F   75..10       MOV     ?V0,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000042   7404         MOV     A,#0x4
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E5..         MOV     A,?V0
   \   000049   12....       LCALL   ?Subroutine32 & 0xFFFF
   1967              msg ++;  // increment one for the length field
   1968          
   1969              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_43:
   \   00004C   A982         MOV     R1,DPL
   \   00004E   AA83         MOV     R2,DPH
   \   000050   89..         MOV     ?V4,R1
   \   000052   8A..         MOV     ?V5,R2
   \   000054   75..00       MOV     ?V6,#0x0
   \   000057   78..         MOV     R0,#?V4
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005C   7407         MOV     A,#0x7
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FC           MOV     R4,A
   \   000063   7D00         MOV     R5,#0x0
   \   000065   7408         MOV     A,#0x8
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   AA82         MOV     R2,DPL
   \   00006C   AB83         MOV     R3,DPH
   \   00006E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   1970              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000076                ; Setup parameters for call to function osal_nv_write
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?XSTACK_DISP100_8
   \   00007B   88..         MOV     ?V4,R0
   \   00007D   89..         MOV     ?V5,R1
   \   00007F   78..         MOV     R0,#?V4
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   75..11       MOV     ?V4,#0x11
   \   000087   75..00       MOV     ?V5,#0x0
   \   00008A   78..         MOV     R0,#?V4
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008F   7C00         MOV     R4,#0x0
   \   000091   7D00         MOV     R5,#0x0
   \   000093   7A81         MOV     R2,#-0x7f
   \   000095   7B00         MOV     R3,#0x0
   \   000097   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00009A   7404         MOV     A,#0x4
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   1971              if ( userDesc.len != 0 )
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000A8   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1972              {
   1973                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   D2E4         SETB    0xE0 /* A   */.4
   \   0000AD   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1974              }
   1975              else
   1976              {
   1977                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000B2   F0           MOVX    @DPTR,A
   1978              }
   1979          
   1980              status = ZDP_SUCCESS;
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   E4           CLR     A
   \   0000BA   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   1981            }
   1982            else
   1983            {
   1984              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000BC   85..82       MOV     DPL,?XSP + 0
   \   0000BF   85..83       MOV     DPH,?XSP + 1
   \   0000C2   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000C4   F0           MOVX    @DPTR,A
   1985            }
   1986          
   1987            outMsg[0] = status;
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C0E0         PUSH    A
   \   0000C8   7401         MOV     A,#0x1
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   D0E0         POP     A
   \   0000CF   F0           MOVX    @DPTR,A
   1988            outMsg[1] = LO_UINT16( aoi );
   \   0000D0   7402         MOV     A,#0x2
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   EE           MOV     A,R6
   \   0000D6   F0           MOVX    @DPTR,A
   1989            outMsg[2] = LO_UINT16( aoi );
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   EE           MOV     A,R6
   \   0000DD   F0           MOVX    @DPTR,A
   1990          
   1991            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1992                         inMsg->SecurityUse );
   \   0000DE                ; Setup parameters for call to function ZDP_SendData
   \   0000DE   E5..         MOV     A,?V2
   \   0000E0   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0000E3   35..         ADDC    A,?V3
   \   0000E5   F583         MOV     DPH,A
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F5..         MOV     ?V1,A
   \   0000EA   78..         MOV     R0,#?V1
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EF   7402         MOV     A,#0x2
   \   0000F1   12....       LCALL   ?XSTACK_DISP100_8
   \   0000F4   88..         MOV     ?V4,R0
   \   0000F6   89..         MOV     ?V5,R1
   \   0000F8   78..         MOV     R0,#?V4
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FD   75..14       MOV     ?V4,#0x14
   \   000100   75..80       MOV     ?V5,#-0x80
   \   000103   78..         MOV     R0,#?V4
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   7903         MOV     R1,#0x3
   \   00010A   E5..         MOV     A,?V2
   \   00010C   2402         ADD     A,#0x2
   \   00010E   FC           MOV     R4,A
   \   00010F   E4           CLR     A
   \   000110   35..         ADDC    A,?V3
   \   000112   FD           MOV     R5,A
   \   000113   E5..         MOV     A,?V2
   \   000115   240F         ADD     A,#0xf
   \   000117   FA           MOV     R2,A
   \   000118   E4           CLR     A
   \   000119   35..         ADDC    A,?V3
   \   00011B   FB           MOV     R3,A
   \   00011C   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00011F   7405         MOV     A,#0x5
   \   000121   12....       LCALL   ?DEALLOC_XSTACK8
   1993          }
   \   000124   7415         MOV     A,#0x15
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \   000129   7F07         MOV     R7,#0x7
   \   00012B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   1994          
   1995          /*********************************************************************
   1996           * @fn          ZDO_ProcessDeviceAnnce
   1997           *
   1998           * @brief       This function processes a device annouce message.
   1999           *
   2000           * @param       inMsg - incoming message
   2001           *
   2002           * @return      none
   2003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004                REQUIRE ??Subroutine165_0
   \   000004                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2004          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   2005          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2006            ZDO_DeviceAnnce_t Annce;
   2007            AddrMgrEntry_t addrEntry;
   2008            uint8 parentExt[Z_EXTADDR_LEN];
   2009          
   2010            // Parse incoming message
   2011            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000A                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000A   AC..         MOV     R4,?XSP + 0
   \   00000C   AD..         MOV     R5,?XSP + 1
   \   00000E   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2012          
   2013            if ( ZSTACK_END_DEVICE_BUILD )
   2014            {
   2015              // Make sure the message didn't come from myself - end device only
   2016              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV     A,R1
   \   000021   601D         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   000023                ; Setup parameters for call to function NLME_GetShortAddr
   \   000023   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000026   8A..         MOV     ?V0,R2
   \   000028   8B..         MOV     ?V1,R3
   \   00002A   A8..         MOV     R0,?V0
   \   00002C   A9..         MOV     R1,?V1
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   E0           MOVX    A,@DPTR
   \   000035   68           XRL     A,R0
   \   000036   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   00003B   7003         JNZ     $+5
   \   00003D   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   2017              {
   2018                return;
   2019              }
   2020            }
   2021          
   2022          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2023            // Clean up the neighbor table
   2024            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000040                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000040   12....       LCALL   `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   2025          
   2026            // If address conflict is detected, no need to update the address manager
   2027            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000043                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00004B   12....       LCALL   `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   00004E   E9           MOV     A,R1
   \   00004F   6401         XRL     A,#0x1
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   2028            {
   2029              return;
   2030            }
   2031          #endif
   2032          
   2033          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2034            // Check for parent's address
   2035            NLME_GetCoordExtAddr( parentExt );
   \   000056                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000056   7418         MOV     A,#0x18
   \   000058   12....       LCALL   ?XSTACK_DISP101_8
   \   00005B   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   2036            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   00005E                ; Setup parameters for call to function sAddrExtCmp
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   AC82         MOV     R4,DPL
   \   000065   AD83         MOV     R5,DPH
   \   000067   7418         MOV     A,#0x18
   \   000069   12....       LCALL   ?XSTACK_DISP101_8
   \   00006C   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00006F   E9           MOV     A,R1
   \   000070   6032         JZ      ??ZDO_ProcessDeviceAnnce_3
   2037            {
   2038              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000072                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000072   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000075   8A..         MOV     ?V0,R2
   \   000077   8B..         MOV     ?V1,R3
   \   000079   A8..         MOV     R0,?V0
   \   00007B   A9..         MOV     R1,?V1
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   E0           MOVX    A,@DPTR
   \   000084   68           XRL     A,R0
   \   000085   7003         JNZ     ??ZDO_ProcessDeviceAnnce_4
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   00008A   6018         JZ      ??ZDO_ProcessDeviceAnnce_3
   2039              {
   2040                // Set the Parent's MAC's new short address
   2041                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   00008C   85..82       MOV     DPL,?XSP + 0
   \   00008F   85..83       MOV     DPH,?XSP + 1
   \   000092   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000095   90....       MOV     DPTR,#_NIB + 23
   \   000098   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   2042                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_441:
   \   00009B                ; Setup parameters for call to function ZMacSetReq
   \   00009B   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   00009D   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   00009F   794B         MOV     R1,#0x4b
   \   0000A1   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2043              }
   2044            }
   2045          
   2046            if ( ZSTACK_ROUTER_BUILD )
   2047            {
   2048              // If the device annce comes from a end device child that has moved
   2049              // to another parent, remove it from associated device list
   2050          
   2051              // If the dev annce is coming from other device's children,
   2052              // (The dev annce from its own children shall be unicast to itself,
   2053              // So check the mac destination address)
   2054              // Remove it from the associated device list. If it is not
   2055              // a child, no action will be taken in AssocRemove() anyway.
   2056              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   2057              {
   2058                associated_devices_t *dev_ptr;
   2059          
   2060                // If it's an end device child
   2061                dev_ptr = AssocGetWithExt( Annce.extAddr );
   2062                if ( dev_ptr )
   2063                {
   2064                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2065                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   2066                  {
   2067                    AssocRemove( Annce.extAddr );
   2068                  }
   2069                }
   2070          
   2071          #if defined ( ZIGBEE_CHILD_AGING )
   2072                // Remove the address from the SrcMatch table,
   2073                // just in case the device was aged out by Child Management Table process
   2074                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2075                     ( zgChildAgingEnable == TRUE ) )
   2076                {
   2077                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   2078                }
   2079          #endif // ZIGBEE_CHILD_AGING
   2080              }
   2081          
   2082              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   2083              {
   2084                // If an associated device is found with matched extended Address,
   2085                // update its short address
   2086                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   2087                {
   2088                  // Set event to save NV
   2089                  ZDApp_NVUpdate();
   2090                }
   2091              }
   2092            }
   2093          
   2094            // Update the neighbor table
   2095            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000A4                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   0000AC   12....       LCALL   `??nwkNeighborUpdateNwkAddr::?relay`; Banked call to: nwkNeighborUpdateNwkAddr
   2096          
   2097            // Assume that the device has moved, remove existing routing entries
   2098            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   0000AF                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000AF   7900         MOV     R1,#0x0
   \   0000B1   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   0000B4   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2099          
   2100          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   2101          
   2102            // Fill in the extended address in address manager if we don't have it already.
   2103            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000B7   740B         MOV     A,#0xb
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   E4           CLR     A
   \   0000BD   12....       LCALL   ?Subroutine18 & 0xFFFF
   2104            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_21:
   \   0000C0   F8           MOV     R0,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F9           MOV     R1,A
   \   0000C4   740C         MOV     A,#0xc
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   2105            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_442:
   \   0000CC                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0000CC   740B         MOV     A,#0xb
   \   0000CE   12....       LCALL   ?XSTACK_DISP101_8
   \   0000D1   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0000D4   E9           MOV     A,R1
   \   0000D5   603F         JZ      ??ZDO_ProcessDeviceAnnce_5
   2106            {
   2107              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   0000D7                ; Setup parameters for call to function osal_memset
   \   0000D7   7C08         MOV     R4,#0x8
   \   0000D9   7D00         MOV     R5,#0x0
   \   0000DB   7900         MOV     R1,#0x0
   \   0000DD   7418         MOV     A,#0x18
   \   0000DF   12....       LCALL   ?XSTACK_DISP101_8
   \   0000E2   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2108              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   0000E5                ; Setup parameters for call to function sAddrExtCmp
   \   0000E5   740E         MOV     A,#0xe
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   AC82         MOV     R4,DPL
   \   0000EC   AD83         MOV     R5,DPH
   \   0000EE   7418         MOV     A,#0x18
   \   0000F0   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F3   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   0000F6   E9           MOV     A,R1
   \   0000F7   601D         JZ      ??ZDO_ProcessDeviceAnnce_5
   2109              {
   2110                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   0000F9                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0000F9   7402         MOV     A,#0x2
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   AC82         MOV     R4,DPL
   \   000100   AD83         MOV     R5,DPH
   \   000102   740E         MOV     A,#0xe
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   AA82         MOV     R2,DPL
   \   000109   AB83         MOV     R3,DPH
   \   00010B   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2111                AddrMgrEntryUpdate( &addrEntry );
   \   00010E                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00010E   740B         MOV     A,#0xb
   \   000110   12....       LCALL   ?XSTACK_DISP101_8
   \   000113   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2112              }
   2113            }
   2114          
   2115            // Update the short address in address manager if it's been changed
   2116            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   000116                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000116   7402         MOV     A,#0x2
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   AC82         MOV     R4,DPL
   \   00011D   AD83         MOV     R5,DPH
   \   00011F   740E         MOV     A,#0xe
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   AA82         MOV     R2,DPL
   \   000126   AB83         MOV     R3,DPH
   \   000128   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2117            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   00012B                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00012B   740B         MOV     A,#0xb
   \   00012D   12....       LCALL   ?XSTACK_DISP101_8
   \   000130   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000133   E9           MOV     A,R1
   \   000134   602E         JZ      ??ZDO_ProcessDeviceAnnce_2
   2118            {
   2119              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   000136   740C         MOV     A,#0xc
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   00013E   85..82       MOV     DPL,?XSP + 0
   \   000141   85..83       MOV     DPH,?XSP + 1
   \   000144   E0           MOVX    A,@DPTR
   \   000145   68           XRL     A,R0
   \   000146   7003         JNZ     ??ZDO_ProcessDeviceAnnce_6
   \   000148   A3           INC     DPTR
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   00014B   6017         JZ      ??ZDO_ProcessDeviceAnnce_2
   2120              {
   2121                addrEntry.nwkAddr = Annce.nwkAddr;
   \   00014D   85..82       MOV     DPL,?XSP + 0
   \   000150   85..83       MOV     DPH,?XSP + 1
   \   000153   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   2122                AddrMgrEntryUpdate( &addrEntry );
   \                     ??CrossCallReturnLabel_443:
   \   00015C                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00015C   740B         MOV     A,#0xb
   \   00015E   12....       LCALL   ?XSTACK_DISP101_8
   \   000161   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2123              }
   2124            }
   2125          }
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   000164   7420         MOV     A,#0x20
   \   000166   02....       LJMP    ??Subroutine154_0 & 0xFFFF
   2126          
   2127          /*********************************************************************
   2128           * @fn          ZDO_BuildSimpleDescBuf
   2129           *
   2130           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2131           *
   2132           * @param       buf  - pointer to a byte array big enough for data.
   2133           * @param       desc - SimpleDescriptionFormat_t *
   2134           *
   2135           * @return      none
   2136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2137          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2139            byte cnt;
   2140            uint16 *ptr;
   2141          
   2142            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   00000C   F0           MOVX    @DPTR,A
   2143            *buf++ = HI_UINT16( desc->AppProfId );
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   A3           INC     DPTR
   \   000012   A882         MOV     R0,DPL
   \   000014   A983         MOV     R1,DPH
   \   000016   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000019   12....       LCALL   ?Subroutine24 & 0xFFFF
   2144            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_31:
   \   00001C   F0           MOVX    @DPTR,A
   2145            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   00001D   EC           MOV     A,R4
   \   00001E   2403         ADD     A,#0x3
   \   000020   F8           MOV     R0,A
   \   000021   E4           CLR     A
   \   000022   3D           ADDC    A,R5
   \   000023   F9           MOV     R1,A
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ?Subroutine24 & 0xFFFF
   2146            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_32:
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
   2147          
   2148            *buf++ = (byte)(desc->AppDevVer << 4);
   \   000033   8C82         MOV     DPL,R4
   \   000035   8D83         MOV     DPH,R5
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C4           SWAP    A
   \   00003E   54F0         ANL     A,#0xf0
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   F0           MOVX    @DPTR,A
   2149          
   2150            *buf++ = desc->AppNumInClusters;
   \   00004A   EC           MOV     A,R4
   \   00004B   2406         ADD     A,#0x6
   \   00004D   F8           MOV     R0,A
   \   00004E   E4           CLR     A
   \   00004F   3D           ADDC    A,R5
   \   000050   F9           MOV     R1,A
   \   000051   88..         MOV     ?V2,R0
   \   000053   89..         MOV     ?V3,R1
   \   000055   8882         MOV     DPL,R0
   \   000057   F583         MOV     DPH,A
   \   000059   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   F0           MOVX    @DPTR,A
   \   000063   EA           MOV     A,R2
   \   000064   2407         ADD     A,#0x7
   \   000066   FA           MOV     R2,A
   \   000067   5001         JNC     ??ZDO_BuildSimpleDescBuf_0
   \   000069   0B           INC     R3
   2151            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   00006A   8C82         MOV     DPL,R4
   \   00006C   8D83         MOV     DPH,R5
   \   00006E   12....       LCALL   ?Subroutine88 & 0xFFFF
   2152            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_138:
   \   000071   8018         SJMP    ??ZDO_BuildSimpleDescBuf_1
   2153            {
   2154              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   000073   12....       LCALL   ?Subroutine39 & 0xFFFF
   2155              *buf++ = LO_UINT16( *ptr );
   2156            }
   \                     ??CrossCallReturnLabel_348:
   \   000076   8882         MOV     DPL,R0
   \   000078   8983         MOV     DPH,R1
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   EA           MOV     A,R2
   \   00007C   2402         ADD     A,#0x2
   \   00007E   FA           MOV     R2,A
   \   00007F   5001         JNC     ??ZDO_BuildSimpleDescBuf_3
   \   000081   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   000082   EE           MOV     A,R6
   \   000083   2402         ADD     A,#0x2
   \   000085   FE           MOV     R6,A
   \   000086   5001         JNC     ??ZDO_BuildSimpleDescBuf_4
   \   000088   0F           INC     R7
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   000089   05..         INC     ?V0
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   00008B   8A82         MOV     DPL,R2
   \   00008D   8B83         MOV     DPH,R3
   \   00008F   A3           INC     DPTR
   \   000090   A882         MOV     R0,DPL
   \   000092   A983         MOV     R1,DPH
   \   000094   85..82       MOV     DPL,?V2
   \   000097   85..83       MOV     DPH,?V3
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F5..         MOV     ?V1,A
   \   00009D   E5..         MOV     A,?V0
   \   00009F   C3           CLR     C
   \   0000A0   95..         SUBB    A,?V1
   \   0000A2   40CF         JC      ??ZDO_BuildSimpleDescBuf_2
   2157          
   2158            *buf++ = desc->AppNumOutClusters;
   \   0000A4   EC           MOV     A,R4
   \   0000A5   2409         ADD     A,#0x9
   \   0000A7   FE           MOV     R6,A
   \   0000A8   E4           CLR     A
   \   0000A9   3D           ADDC    A,R5
   \   0000AA   FF           MOV     R7,A
   \   0000AB   8E..         MOV     ?V2,R6
   \   0000AD   8F..         MOV     ?V3,R7
   \   0000AF   8E82         MOV     DPL,R6
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   E8           MOV     A,R0
   \   0000B8   FA           MOV     R2,A
   \   0000B9   E9           MOV     A,R1
   \   0000BA   FB           MOV     R3,A
   2159            ptr = desc->pAppOutClusterList;
   \   0000BB   8C82         MOV     DPL,R4
   \   0000BD   8D83         MOV     DPH,R5
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   12....       LCALL   ?Subroutine88 & 0xFFFF
   2160            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_139:
   \   0000C5   8019         SJMP    ??ZDO_BuildSimpleDescBuf_5
   2161            {
   2162              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   0000C7   12....       LCALL   ?Subroutine39 & 0xFFFF
   2163              *buf++ = LO_UINT16( *ptr );
   2164            }
   \                     ??CrossCallReturnLabel_349:
   \   0000CA   8A82         MOV     DPL,R2
   \   0000CC   8B83         MOV     DPH,R3
   \   0000CE   A3           INC     DPTR
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   EA           MOV     A,R2
   \   0000D1   2402         ADD     A,#0x2
   \   0000D3   FA           MOV     R2,A
   \   0000D4   5001         JNC     ??ZDO_BuildSimpleDescBuf_7
   \   0000D6   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   0000D7   EE           MOV     A,R6
   \   0000D8   2402         ADD     A,#0x2
   \   0000DA   FE           MOV     R6,A
   \   0000DB   5001         JNC     ??ZDO_BuildSimpleDescBuf_8
   \   0000DD   0F           INC     R7
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000DE   05..         INC     ?V0
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000E0   85..82       MOV     DPL,?V2
   \   0000E3   85..83       MOV     DPH,?V3
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F8           MOV     R0,A
   \   0000E8   E5..         MOV     A,?V0
   \   0000EA   C3           CLR     C
   \   0000EB   98           SUBB    A,R0
   \   0000EC   40D9         JC      ??ZDO_BuildSimpleDescBuf_6
   2165          }
   \   0000EE   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A                REQUIRE ??Subroutine173_0
   \   00000A                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine186_0
   \   000001                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
   2166          
   2167          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2168          /*********************************************************************
   2169           * @fn      ZDO_MatchEndDeviceBind()
   2170           *
   2171           * @brief
   2172           *
   2173           *   Called to match end device binding requests
   2174           *
   2175           * @param  bindReq  - binding request information
   2176           * @param  SecurityUse - Security enable/disable
   2177           *
   2178           * @return  none
   2179           */
   2180          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   2181          {
   2182            zAddrType_t dstAddr;
   2183            uint8 sendRsp = FALSE;
   2184            uint8 status;
   2185          
   2186            // Is this the first request?
   2187            if ( matchED == NULL )
   2188            {
   2189              // Create match info structure
   2190              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   2191              if ( matchED )
   2192              {
   2193                // Clear the structure
   2194                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   2195          
   2196                // Copy the first request's information
   2197                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   2198                {
   2199                  status = ZDP_NO_ENTRY;
   2200                  sendRsp = TRUE;
   2201                }
   2202              }
   2203              else
   2204              {
   2205                status = ZDP_NO_ENTRY;
   2206                sendRsp = TRUE;
   2207              }
   2208          
   2209              if ( !sendRsp )
   2210              {
   2211                // Set into the correct state
   2212                matchED->state = ZDMATCH_WAIT_REQ;
   2213          
   2214                // Setup the timeout
   2215                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2216              }
   2217            }
   2218            else
   2219            {
   2220                matchED->state = ZDMATCH_SENDING_BINDS;
   2221          
   2222                // Copy the 2nd request's information
   2223                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   2224                {
   2225                  status = ZDP_NO_ENTRY;
   2226                  sendRsp = TRUE;
   2227                }
   2228          
   2229                // Make a source match for ed1
   2230                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2231                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2232                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   2233                if ( matchED->ed1numMatched )
   2234                {
   2235                  // Save the match list
   2236                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   2237                  if ( matchED->ed1Matched )
   2238                  {
   2239                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   2240                  }
   2241                  else
   2242                  {
   2243                    // Allocation error, stop
   2244                    status = ZDP_NO_ENTRY;
   2245                    sendRsp = TRUE;
   2246                  }
   2247                }
   2248          
   2249                // Make a source match for ed2
   2250                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2251                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2252                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   2253                if ( matchED->ed2numMatched )
   2254                {
   2255                  // Save the match list
   2256                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   2257                  if ( matchED->ed2Matched )
   2258                  {
   2259                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   2260                  }
   2261                  else
   2262                  {
   2263                    // Allocation error, stop
   2264                    status = ZDP_NO_ENTRY;
   2265                    sendRsp = TRUE;
   2266                  }
   2267                }
   2268          
   2269                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   2270                {
   2271                  // Do the first unbind/bind state
   2272                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   2273                }
   2274                else
   2275                {
   2276                  status = ZDP_NO_MATCH;
   2277                  sendRsp = TRUE;
   2278                }
   2279            }
   2280          
   2281            if ( sendRsp )
   2282            {
   2283              // send response to this requester
   2284              dstAddr.addrMode = Addr16Bit;
   2285              dstAddr.addr.shortAddr = bindReq->srcAddr;
   2286              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   2287          
   2288              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2289              {
   2290                // send response to first requester
   2291                dstAddr.addrMode = Addr16Bit;
   2292                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2293                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2294              }
   2295          
   2296              // Process ended - release memory used
   2297              ZDO_RemoveMatchMemory();
   2298            }
   2299          }
   2300          
   2301          /*********************************************************************
   2302           * @fn      ZDO_RemoveMatchMemory()
   2303           *
   2304           * @brief   Called to clear the memory used for the end device bind.
   2305           *
   2306           * @param  none
   2307           *
   2308           * @return  none
   2309           */
   2310          static void ZDO_RemoveMatchMemory( void )
   2311          {
   2312            if ( matchED != NULL )
   2313            {
   2314              if ( matchED->ed2Matched != NULL )
   2315              {
   2316                osal_mem_free( matchED->ed2Matched );
   2317              }
   2318              if ( matchED->ed1Matched != NULL )
   2319              {
   2320                osal_mem_free( matchED->ed1Matched );
   2321              }
   2322              if ( matchED->ed1.inClusters != NULL )
   2323              {
   2324                osal_mem_free( matchED->ed1.inClusters );
   2325              }
   2326              if ( matchED->ed1.outClusters != NULL )
   2327              {
   2328                osal_mem_free( matchED->ed1.outClusters );
   2329              }
   2330              if ( matchED->ed2.inClusters != NULL )
   2331              {
   2332                osal_mem_free( matchED->ed2.inClusters );
   2333              }
   2334              if ( matchED->ed2.outClusters != NULL )
   2335              {
   2336                osal_mem_free( matchED->ed2.outClusters );
   2337              }
   2338          
   2339              osal_mem_free( matchED );
   2340              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   2341            }
   2342          }
   2343          
   2344          /*********************************************************************
   2345           * @fn      ZDO_CopyMatchInfo()
   2346           *
   2347           * @brief   Called to copy memory used for the end device bind.
   2348           *
   2349           * @param  srcReq - source information
   2350           * @param  dstReq - destination location
   2351           *
   2352           * @return  TRUE if copy was successful.
   2353           */
   2354          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   2355          {
   2356            uint8 allOK = TRUE;
   2357          
   2358            // Copy bind information into the match info structure
   2359            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   2360          
   2361            // Initialize the destination cluster pointers
   2362            destReq->inClusters = NULL;
   2363            destReq->outClusters = NULL;
   2364          
   2365            // Copy input cluster IDs
   2366            if ( srcReq->numInClusters )
   2367            {
   2368              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   2369              if ( destReq->inClusters )
   2370              {
   2371                // Copy the clusters
   2372                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2373                                (srcReq->numInClusters * sizeof ( uint16 )) );
   2374              }
   2375              else
   2376              {
   2377                allOK = FALSE;
   2378              }
   2379            }
   2380          
   2381            // Copy output cluster IDs
   2382            if ( srcReq->numOutClusters )
   2383            {
   2384              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   2385              if ( destReq->outClusters )
   2386              {
   2387                // Copy the clusters
   2388                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2389                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   2390              }
   2391              else
   2392              {
   2393                allOK = FALSE;
   2394              }
   2395            }
   2396          
   2397            if ( allOK == FALSE )
   2398            {
   2399              if ( destReq->inClusters != NULL )
   2400              {
   2401                osal_mem_free( destReq->inClusters );
   2402              }
   2403              if ( destReq->outClusters != NULL )
   2404              {
   2405                osal_mem_free( destReq->outClusters );
   2406              }
   2407            }
   2408          
   2409            return ( allOK );
   2410          }
   2411          
   2412          /*********************************************************************
   2413           * @fn      ZDMatchSendState()
   2414           *
   2415           * @brief   State machine for the End device match message algorithm.
   2416           *
   2417           * @param  reason - state of algoritm
   2418           * @param  status - initial message status
   2419           * @param  TransSeq - next transaction sequence number
   2420           *
   2421           * @return  FALSE if error and we are not currently matching, TRUE
   2422           *          if success.
   2423           */
   2424          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   2425          {
   2426            uint8 *dstIEEEAddr = NULL;
   2427            uint8 dstEP = 0xFF;
   2428            zAddrType_t dstAddr;
   2429            zAddrType_t destinationAddr;
   2430            uint16 msgType;
   2431            uint16 clusterID = 0xFFFF;
   2432            ZDEndDeviceBind_t *ed = NULL;
   2433            uint8 rspStatus = ZDP_SUCCESS;
   2434          
   2435            if ( matchED == NULL )
   2436            {
   2437              return ( FALSE );
   2438            }
   2439          
   2440            // Check sequence number
   2441            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   2442            {
   2443              if ( TransSeq != matchED->transSeq )
   2444              {
   2445                return( FALSE ); // ignore the message
   2446              }
   2447            }
   2448          
   2449            // turn off timer
   2450            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   2451          
   2452            if ( reason == ZDMATCH_REASON_TIMEOUT )
   2453            {
   2454              rspStatus = ZDP_TIMEOUT;    // The process will stop
   2455            }
   2456          
   2457            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   2458            {
   2459              matchED->sending = ZDMATCH_SENDING_UNBIND;
   2460          
   2461              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   2462              {
   2463                rspStatus = status;
   2464              }
   2465            }
   2466            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   2467            {
   2468              if ( status == ZDP_SUCCESS )
   2469              {
   2470                matchED->sending = ZDMATCH_SENDING_UNBIND;
   2471              }
   2472              else
   2473              {
   2474                matchED->sending = ZDMATCH_SENDING_BIND;
   2475              }
   2476            }
   2477          
   2478            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   2479            {
   2480              // Move to the next cluster ID
   2481              if ( matchED->ed1numMatched )
   2482              {
   2483                matchED->ed1numMatched--;
   2484              }
   2485              else if ( matchED->ed2numMatched )
   2486              {
   2487                matchED->ed2numMatched--;
   2488              }
   2489            }
   2490          
   2491            // What message do we send now
   2492            if ( matchED->ed1numMatched )
   2493            {
   2494              ed = &(matchED->ed1);
   2495              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   2496              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2497              dstEP = matchED->ed2.endpoint;
   2498            }
   2499            else if ( matchED->ed2numMatched )
   2500            {
   2501              ed = &(matchED->ed2);
   2502              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   2503              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2504              dstEP = matchED->ed1.endpoint;
   2505            }
   2506          
   2507            dstAddr.addrMode = Addr16Bit;
   2508          
   2509            // Send the next message
   2510            if ( (rspStatus == ZDP_SUCCESS) && ed )
   2511            {
   2512              // Send unbind/bind message to source
   2513              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   2514              {
   2515                msgType = Unbind_req;
   2516              }
   2517              else
   2518              {
   2519                msgType = Bind_req;
   2520              }
   2521          
   2522              dstAddr.addr.shortAddr = ed->srcAddr;
   2523          
   2524              // Save off the transaction sequence number
   2525              matchED->transSeq = ZDP_TransID;
   2526          
   2527              destinationAddr.addrMode = Addr64Bit;
   2528              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   2529          
   2530              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2531                  &destinationAddr, dstEP, ed->SecurityUse );
   2532          
   2533              // Set timeout for response
   2534              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2535            }
   2536            else
   2537            {
   2538              // Send the response messages to requesting devices
   2539              // send response to first requester
   2540              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2541              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   2542          
   2543              // send response to second requester
   2544              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2545              {
   2546                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   2547                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2548              }
   2549          
   2550              // Process ended - release memory used
   2551              ZDO_RemoveMatchMemory();
   2552            }
   2553          
   2554            return ( TRUE );
   2555          }
   2556          
   2557          /*********************************************************************
   2558           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2559           *
   2560           * @brief   End device bind timeout.
   2561           *
   2562           * @param  none
   2563           *
   2564           * @return  none
   2565           */
   2566          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   2567          {
   2568            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   2569          }
   2570          #endif // ZG_BUILD_COORDINATOR_TYPE
   2571          
   2572          /*********************************************************************
   2573           * ZDO MESSAGE PARSING API FUNCTIONS
   2574           */
   2575          
   2576          /*********************************************************************
   2577           * @fn          ZDO_ParseEndDeviceBindReq
   2578           *
   2579           * @brief       This function parses the End_Device_Bind_req message.
   2580           *
   2581           *     NOTE:  The clusters lists in bindReq are allocated in this
   2582           *            function and must be freed by that calling function.
   2583           *
   2584           * @param       inMsg  - incoming message (request)
   2585           * @param       bindReq - pointer to place to parse message to
   2586           *
   2587           * @return      none
   2588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2589          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2590          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2591            uint8 *msg;
   2592          
   2593            // Parse the message
   2594            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   00000D   3B           ADDC    A,R3
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   12....       LCALL   ?Subroutine37 & 0xFFFF
   2595            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_56:
   \   000018   A3           INC     DPTR
   \   000019   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E8           MOV     A,R0
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   E9           MOV     A,R1
   \   000026   12....       LCALL   ?Subroutine28 & 0xFFFF
   2596            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_36:
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
   2597            msg = inMsg->asdu;
   \   00002F   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000032   F5..         MOV     ?V2,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V3,A
   2598          
   2599            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   000038   85..82       MOV     DPL,?V2
   \   00003B   F583         MOV     DPH,A
   \   00003D   12....       LCALL   ??Subroutine176_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   12....       LCALL   ?Subroutine41 & 0xFFFF
   2600            msg += 2;
   \                     ??CrossCallReturnLabel_63:
   \   00004B   F5..         MOV     ?V2,A
   \   00004D   5002         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   00004F   05..         INC     ?V3
   2601          
   2602            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   000051                ; Setup parameters for call to function sAddrExtCpy
   \   000051   FC           MOV     R4,A
   \   000052   AD..         MOV     R5,?V3
   \   000054   EE           MOV     A,R6
   \   000055   2406         ADD     A,#0x6
   \   000057   FA           MOV     R2,A
   \   000058   E4           CLR     A
   \   000059   3F           ADDC    A,R7
   \   00005A   FB           MOV     R3,A
   \   00005B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2603            msg += Z_EXTADDR_LEN;
   2604          
   2605            bindReq->endpoint = *msg++;
   \   00005E   85..82       MOV     DPL,?V2
   \   000061   85..83       MOV     DPH,?V3
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   C0E0         PUSH    A
   \   00006F   EE           MOV     A,R6
   \   000070   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000073   3F           ADDC    A,R7
   \   000074   F583         MOV     DPH,A
   \   000076   D0E0         POP     A
   \   000078   F0           MOVX    @DPTR,A
   \   000079   E5..         MOV     A,?V2
   \   00007B   2409         ADD     A,#0x9
   \   00007D   F5..         MOV     ?V2,A
   \   00007F   5002         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   000081   05..         INC     ?V3
   2606            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000083   F582         MOV     DPL,A
   \   000085   85..83       MOV     DPH,?V3
   \   000088   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00008B   EE           MOV     A,R6
   \   00008C   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00008F   3F           ADDC    A,R7
   \   000090   12....       LCALL   ?Subroutine42 & 0xFFFF
   2607            msg += 2;
   2608          
   2609            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_445:
   \   000093   EE           MOV     A,R6
   \   000094   2412         ADD     A,#0x12
   \   000096   F5..         MOV     ?V4,A
   \   000098   E4           CLR     A
   \   000099   3F           ADDC    A,R7
   \   00009A   F5..         MOV     ?V5,A
   \   00009C   85..82       MOV     DPL,?V4
   \   00009F   F583         MOV     DPH,A
   \   0000A1   E4           CLR     A
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   F0           MOVX    @DPTR,A
   2610            bindReq->outClusters = NULL;
   \   0000A5   EE           MOV     A,R6
   \   0000A6   2415         ADD     A,#0x15
   \   0000A8   F5..         MOV     ?V6,A
   \   0000AA   E4           CLR     A
   \   0000AB   3F           ADDC    A,R7
   \   0000AC   F5..         MOV     ?V7,A
   \   0000AE   85..82       MOV     DPL,?V6
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   E4           CLR     A
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   12....       LCALL   ?Subroutine34 & 0xFFFF
   2611          
   2612            if ((bindReq->numInClusters = *msg++) &&
   2613                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_48:
   \   0000B9   FA           MOV     R2,A
   \   0000BA   EE           MOV     A,R6
   \   0000BB   2411         ADD     A,#0x11
   \   0000BD   F5..         MOV     ?V0,A
   \   0000BF   E4           CLR     A
   \   0000C0   3F           ADDC    A,R7
   \   0000C1   F5..         MOV     ?V1,A
   \   0000C3   EA           MOV     A,R2
   \   0000C4   85..82       MOV     DPL,?V0
   \   0000C7   85..83       MOV     DPH,?V1
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   E5..         MOV     A,?V2
   \   0000CD   2403         ADD     A,#0x3
   \   0000CF   F5..         MOV     ?V2,A
   \   0000D1   5002         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   0000D3   05..         INC     ?V3
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000D5   EA           MOV     A,R2
   \   0000D6   6034         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   0000D8                ; Setup parameters for call to function osal_mem_alloc
   \   0000D8   2A           ADD     A,R2
   \   0000D9   FA           MOV     R2,A
   \   0000DA   E4           CLR     A
   \   0000DB   33           RLC     A
   \   0000DC   FB           MOV     R3,A
   \   0000DD   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E0   8A..         MOV     ?V8,R2
   \   0000E2   8B..         MOV     ?V9,R3
   \   0000E4   AC..         MOV     R4,?V8
   \   0000E6   AD..         MOV     R5,?V9
   \   0000E8   85..82       MOV     DPL,?V4
   \   0000EB   85..83       MOV     DPH,?V5
   \   0000EE   EC           MOV     A,R4
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   ED           MOV     A,R5
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   EC           MOV     A,R4
   \   0000F4   4D           ORL     A,R5
   \   0000F5   6015         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2614            {
   2615              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000F7                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000F7   AA..         MOV     R2,?V2
   \   0000F9   AB..         MOV     R3,?V3
   \   0000FB   85..82       MOV     DPL,?V0
   \   0000FE   85..83       MOV     DPH,?V1
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F9           MOV     R1,A
   \   000103   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000106   8A..         MOV     ?V2,R2
   \   000108   8B..         MOV     ?V3,R3
   \   00010A   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2616            }
   2617            else
   2618            {
   2619              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   00010C   85..82       MOV     DPL,?V0
   \   00010F   85..83       MOV     DPH,?V1
   \   000112   E4           CLR     A
   \   000113   F0           MOVX    @DPTR,A
   2620            }
   2621          
   2622            if ((bindReq->numOutClusters = *msg++) &&
   2623                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   000114   85..82       MOV     DPL,?V2
   \   000117   85..83       MOV     DPH,?V3
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FA           MOV     R2,A
   \   00011C   EE           MOV     A,R6
   \   00011D   2414         ADD     A,#0x14
   \   00011F   F8           MOV     R0,A
   \   000120   E4           CLR     A
   \   000121   3F           ADDC    A,R7
   \   000122   F9           MOV     R1,A
   \   000123   E8           MOV     A,R0
   \   000124   FE           MOV     R6,A
   \   000125   E9           MOV     A,R1
   \   000126   FF           MOV     R7,A
   \   000127   EA           MOV     A,R2
   \   000128   8E82         MOV     DPL,R6
   \   00012A   8F83         MOV     DPH,R7
   \   00012C   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00012F   8582..       MOV     ?V2,DPL
   \   000132   8583..       MOV     ?V3,DPH
   \   000135   602E         JZ      ??ZDO_ParseEndDeviceBindReq_5
   \   000137                ; Setup parameters for call to function osal_mem_alloc
   \   000137   2A           ADD     A,R2
   \   000138   FA           MOV     R2,A
   \   000139   E4           CLR     A
   \   00013A   33           RLC     A
   \   00013B   FB           MOV     R3,A
   \   00013C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00013F   8A..         MOV     ?V0,R2
   \   000141   8B..         MOV     ?V1,R3
   \   000143   AC..         MOV     R4,?V0
   \   000145   AD..         MOV     R5,?V1
   \   000147   85..82       MOV     DPL,?V6
   \   00014A   85..83       MOV     DPH,?V7
   \   00014D   EC           MOV     A,R4
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   A3           INC     DPTR
   \   000150   ED           MOV     A,R5
   \   000151   F0           MOVX    @DPTR,A
   \   000152   EC           MOV     A,R4
   \   000153   4D           ORL     A,R5
   \   000154   600F         JZ      ??ZDO_ParseEndDeviceBindReq_5
   2624            {
   2625              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   000156                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000156   AA..         MOV     R2,?V2
   \   000158   AB..         MOV     R3,?V3
   \   00015A   8E82         MOV     DPL,R6
   \   00015C   8F83         MOV     DPH,R7
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F9           MOV     R1,A
   \   000160   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000163   8006         SJMP    ??ZDO_ParseEndDeviceBindReq_6
   2626            }
   2627            else
   2628            {
   2629              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   000165   8E82         MOV     DPL,R6
   \   000167   8F83         MOV     DPH,R7
   \   000169   E4           CLR     A
   \   00016A   F0           MOVX    @DPTR,A
   2630            }
   2631          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   00016B   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000003   3B           ADDC    A,R3
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E5..         MOV     A,?V2
   \   000006   2402         ADD     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine187_0
   \   000002                ; // Fall through to label ??Subroutine187_0
   2632          
   2633          /*********************************************************************
   2634           * @fn          ZDO_ParseBindUnbindReq
   2635           *
   2636           * @brief       This function parses the Bind_req or Unbind_req message.
   2637           *
   2638           * @param       inMsg  - incoming message (request)
   2639           * @param       pReq - place to put parsed information
   2640           *
   2641           * @return      none
   2642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2643          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2645            uint8 *msg;
   2646          
   2647            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V1,A
   2648            osal_cpyExtAddr( pReq->srcAddress, msg );
   \   000012                ; Setup parameters for call to function sAddrExtCpy
   \   000012   AC..         MOV     R4,?V0
   \   000014   FD           MOV     R5,A
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2649            msg += Z_EXTADDR_LEN;
   2650            pReq->srcEndpoint = *msg++;
   \   00001C   85..82       MOV     DPL,?V0
   \   00001F   85..83       MOV     DPH,?V1
   \   000022   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000025   E5..         MOV     A,?V0
   \   000027   2409         ADD     A,#0x9
   \   000029   F5..         MOV     ?V0,A
   \   00002B   5002         JNC     ??ZDO_ParseBindUnbindReq_0
   \   00002D   05..         INC     ?V1
   2651            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   00002F   F582         MOV     DPL,A
   \   000031   85..83       MOV     DPH,?V1
   \   000034   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000037   12....       LCALL   ?Subroutine33 & 0xFFFF
   2652            msg += 2;
   2653            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_47:
   \   00003A   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00003D   E5..         MOV     A,?V0
   \   00003F   2403         ADD     A,#0x3
   \   000041   F5..         MOV     ?V0,A
   \   000043   5002         JNC     ??ZDO_ParseBindUnbindReq_1
   \   000045   05..         INC     ?V1
   2654            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000047   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   00004A   701F         JNZ     ??ZDO_ParseBindUnbindReq_2
   2655            {
   2656              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   00004C                ; Setup parameters for call to function sAddrExtCpy
   \   00004C   AC..         MOV     R4,?V0
   \   00004E   AD..         MOV     R5,?V1
   \   000050   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2657              msg += Z_EXTADDR_LEN;
   2658              pReq->dstEndpoint = *msg;
   \   000053   85..82       MOV     DPL,?V0
   \   000056   85..83       MOV     DPH,?V1
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   C0E0         PUSH    A
   \   000064   12....       LCALL   ?Subroutine109 & 0xFFFF
   2659            }
   \                     ??CrossCallReturnLabel_184:
   \   000067   D0E0         POP     A
   \   000069   800C         SJMP    ??ZDO_ParseBindUnbindReq_3
   2660            else
   2661            {
   2662              // copy group address
   2663              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   12....       LCALL   ?Subroutine77 & 0xFFFF
   2664            }
   \                     ??CrossCallReturnLabel_125:
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   000077   F0           MOVX    @DPTR,A
   2665          }
   \   000078   02....       LJMP    ??Subroutine155_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   7403         MOV     A,#0x3
   \   000009   68           XRL     A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000004   E8           MOV     A,R0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   E9           MOV     A,R1
   \   000013   22           RET
   2666          
   2667          /*********************************************************************
   2668           * @fn      ZDO_ParseAddrRsp
   2669           *
   2670           * @brief   Turns the inMsg (incoming message) into the out parsed
   2671           *          structure.
   2672           *
   2673           * @param   inMsg - incoming message
   2674           *
   2675           * @return  pointer to parsed structures.  This structure was
   2676           *          allocated using osal_mem_alloc, so it must be freed
   2677           *          by the calling function [osal_mem_free()].
   2678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   E5..         MOV     A,?V0
   \   000002   240C         ADD     A,#0xc
   \   000004                REQUIRE ??Subroutine167_0
   \   000004                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2679          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2680          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2681            ZDO_NwkIEEEAddrResp_t *rsp;
   2682            uint8 *msg;
   2683            byte cnt = 0;
   \   000009   75..00       MOV     ?V2,#0x0
   2684          
   2685            // Calculate the number of items in the list
   2686            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   EE           MOV     A,R6
   \   00000D   2410         ADD     A,#0x10
   \   00000F   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000012   C3           CLR     C
   \   000013   940C         SUBB    A,#0xc
   \   000015   400D         JC      ??ZDO_ParseAddrRsp_0
   2687            {
   2688              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   000017   12....       LCALL   ?Subroutine96 & 0xFFFF
   2689            }
   \                     ??CrossCallReturnLabel_155:
   \   00001A   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00001D   240B         ADD     A,#0xb
   \   00001F   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000022   F5..         MOV     ?V2,A
   2690            else
   2691            {
   2692              cnt = 0;
   2693            }
   2694          
   2695            // Make buffer
   2696            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   A8..         MOV     R0,?V2
   \   000026   E8           MOV     A,R0
   \   000027   28           ADD     A,R0
   \   000028   F8           MOV     R0,A
   \   000029   E4           CLR     A
   \   00002A   33           RLC     A
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   240D         ADD     A,#0xd
   \   00002F   FA           MOV     R2,A
   \   000030   E4           CLR     A
   \   000031   39           ADDC    A,R1
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000036   8A..         MOV     ?V0,R2
   \   000038   8B..         MOV     ?V1,R3
   2697          
   2698            if ( rsp )
   \   00003A   EA           MOV     A,R2
   \   00003B   45..         ORL     A,?V1
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2699            {
   2700              msg = inMsg->asdu;
   \   000042   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000045   12....       LCALL   ??Subroutine184_0 & 0xFFFF
   2701          
   2702              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_416:
   \   000048   F8           MOV     R0,A
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   12....       LCALL   ?Subroutine13 & 0xFFFF
   2703              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_9:
   \   000050   707A         JNZ     ??ZDO_ParseAddrRsp_1
   2704              {
   2705                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000052                ; Setup parameters for call to function sAddrExtCpy
   \   000052   EE           MOV     A,R6
   \   000053   FC           MOV     R4,A
   \   000054   EF           MOV     A,R7
   \   000055   FD           MOV     R5,A
   \   000056   EA           MOV     A,R2
   \   000057   2403         ADD     A,#0x3
   \   000059   FA           MOV     R2,A
   \   00005A   E4           CLR     A
   \   00005B   35..         ADDC    A,?V1
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2706                msg += Z_EXTADDR_LEN;
   \   000061   EE           MOV     A,R6
   \   000062   2408         ADD     A,#0x8
   \   000064   FE           MOV     R6,A
   \   000065   5001         JNC     ??ZDO_ParseAddrRsp_2
   \   000067   0F           INC     R7
   2707                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   000068   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   A3           INC     DPTR
   \   000072   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   2708          
   2709                msg += 2;
   2710                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_429:
   \   000075   E5..         MOV     A,?V0
   \   000077   240B         ADD     A,#0xb
   \   000079   F8           MOV     R0,A
   \   00007A   E4           CLR     A
   \   00007B   35..         ADDC    A,?V1
   \   00007D   F9           MOV     R1,A
   \   00007E   E8           MOV     A,R0
   \   00007F   FA           MOV     R2,A
   \   000080   E9           MOV     A,R1
   \   000081   FB           MOV     R3,A
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
   2711          
   2712                // StartIndex field is only present if NumAssocDev field is non-zero.
   2713                if ( cnt > 0 )
   \   000088   E5..         MOV     A,?V2
   \   00008A   6040         JZ      ??ZDO_ParseAddrRsp_1
   2714                {
   2715                  uint16 *pList = &(rsp->devList[0]);
   \   00008C   E5..         MOV     A,?V0
   \   00008E   240D         ADD     A,#0xd
   \   000090   F8           MOV     R0,A
   \   000091   E4           CLR     A
   \   000092   35..         ADDC    A,?V1
   \   000094   F9           MOV     R1,A
   2716                  byte n = cnt;
   2717          
   2718                  rsp->numAssocDevs = *msg++;
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   A3           INC     DPTR
   \   00009A   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   00009D   12....       LCALL   ?Subroutine16 & 0xFFFF
   2719                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_15:
   \   0000A0   C0E0         PUSH    A
   \   0000A2   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   0000A5   D0E0         POP     A
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   EE           MOV     A,R6
   \   0000A9   2404         ADD     A,#0x4
   \   0000AB   FE           MOV     R6,A
   \   0000AC   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   0000AE   0F           INC     R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000AF   85....       MOV     ?V3,?V2
   2720          
   2721                  while ( n != 0 )
   2722                  {
   2723                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000B2   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   0000B5   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   0000B8   E8           MOV     A,R0
   \   0000B9   2402         ADD     A,#0x2
   \   0000BB   F8           MOV     R0,A
   \   0000BC   5001         JNC     ??ZDO_ParseAddrRsp_5
   \   0000BE   09           INC     R1
   2724                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000BF   EE           MOV     A,R6
   \   0000C0   2402         ADD     A,#0x2
   \   0000C2   FE           MOV     R6,A
   \   0000C3   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   0000C5   0F           INC     R7
   2725                    n--;
   2726                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000C6   15..         DEC     ?V3
   \   0000C8   E5..         MOV     A,?V3
   \   0000CA   70E6         JNZ     ??ZDO_ParseAddrRsp_4
   2727                }
   2728              }
   2729            }
   2730          
   2731            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000CC   AA..         MOV     R2,?V0
   \   0000CE   AB..         MOV     R3,?V1
   \   0000D0                REQUIRE ?Subroutine3
   \   0000D0                ; // Fall through to label ?Subroutine3
   2732          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine176_0
   \   000004                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   EC           MOV     A,R4
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
   \   00000E   22           RET
   2733          
   2734          /*********************************************************************
   2735           * @fn          ZDO_ParseNodeDescRsp
   2736           *
   2737           * @brief       This function parses the Node_Desc_rsp message.
   2738           *
   2739           * @param       inMsg - incoming message
   2740           * @param       pNDRsp - place to parse the message into
   2741           *
   2742           * @return      none
   2743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2744          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2745          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2746            uint8 *msg;
   2747          
   2748            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine9 & 0xFFFF
   2749          
   2750            pNDRsp->status = *msg++;
   2751            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2752          
   2753            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2754            {
   2755              msg += 2;
   2756              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   E8           MOV     A,R0
   \   00000E   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000011   39           ADDC    A,R1
   \   000012   FB           MOV     R3,A
   \   000013   EC           MOV     A,R4
   \   000014   2403         ADD     A,#0x3
   \   000016   FE           MOV     R6,A
   \   000017   E4           CLR     A
   \   000018   3D           ADDC    A,R5
   \   000019   FF           MOV     R7,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   5407         ANL     A,#0x7
   \   000021   F5..         MOV     ?V0,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E0           MOVX    A,@DPTR
   \   000028   54F8         ANL     A,#0xf8
   \   00002A   45..         ORL     A,?V0
   \   00002C   12....       LCALL   ?Subroutine40 & 0xFFFF
   2757          
   2758              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_60:
   \   00002F   A2E3         MOV     C,0xE0 /* A   */.3
   \   000031   E4           CLR     A
   \   000032   33           RLC     A
   \   000033   F5..         MOV     ?V0,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   A2E3         MOV     C,0xE0 /* A   */.3
   \   000038   8F83         MOV     DPH,R7
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   92E3         MOV     0xE0 /* A   */.3,C
   \   00003F   12....       LCALL   ?Subroutine40 & 0xFFFF
   2759              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_61:
   \   000042   A2E4         MOV     C,0xE0 /* A   */.4
   \   000044   E4           CLR     A
   \   000045   33           RLC     A
   \   000046   F5..         MOV     ?V1,A
   \   000048   E0           MOVX    A,@DPTR
   \   000049   A2E4         MOV     C,0xE0 /* A   */.4
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   92E4         MOV     0xE0 /* A   */.4,C
   \   000052   F0           MOVX    @DPTR,A
   2760          
   2761              msg++;  // Reserved bits.
   2762              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000053   E8           MOV     A,R0
   \   000054   2403         ADD     A,#0x3
   \   000056   0A           INC     R2
   \   000057   E4           CLR     A
   \   000058   39           ADDC    A,R1
   \   000059   FB           MOV     R3,A
   \   00005A   EC           MOV     A,R4
   \   00005B   2404         ADD     A,#0x4
   \   00005D   0E           INC     R6
   \   00005E   E4           CLR     A
   \   00005F   3D           ADDC    A,R5
   \   000060   FF           MOV     R7,A
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   E0           MOVX    A,@DPTR
   \   000066   54F8         ANL     A,#0xf8
   \   000068   F5..         MOV     ?V2,A
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   5407         ANL     A,#0x7
   \   000071   45..         ORL     A,?V2
   \   000073   F5..         MOV     ?V2,A
   \   000075   12....       LCALL   ?Subroutine40 & 0xFFFF
   2763              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_62:
   \   000078   5407         ANL     A,#0x7
   \   00007A   FA           MOV     R2,A
   \   00007B   74F8         MOV     A,#-0x8
   \   00007D   55..         ANL     A,?V2
   \   00007F   4A           ORL     A,R2
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   12....       LCALL   ?Subroutine31 & 0xFFFF
   2764              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_41:
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   12....       LCALL   ?Subroutine32 & 0xFFFF
   2765              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_44:
   \   000093   A3           INC     DPTR
   \   000094   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000097   12....       LCALL   ?Subroutine29 & 0xFFFF
   2766              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_37:
   \   00009A   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00009D   12....       LCALL   ?Subroutine29 & 0xFFFF
   2767              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_38:
   \   0000A0   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   0000A3   12....       LCALL   ?Subroutine19 & 0xFFFF
   2768              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_23:
   \   0000A6   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0000A9   12....       LCALL   ?Subroutine19 & 0xFFFF
   2769              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_24:
   \   0000AC   A3           INC     DPTR
   \   0000AD   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   E8           MOV     A,R0
   \   0000BB   240A         ADD     A,#0xa
   \   0000BD   F8           MOV     R0,A
   \   0000BE   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   0000C0   09           INC     R1
   2770              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000C1   8882         MOV     DPL,R0
   \   0000C3   8983         MOV     DPH,R1
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   FE           MOV     R6,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FB           MOV     R3,A
   \   0000CA   EE           MOV     A,R6
   \   0000CB   FA           MOV     R2,A
   \   0000CC   EC           MOV     A,R4
   \   0000CD   240B         ADD     A,#0xb
   \   0000CF   F582         MOV     DPL,A
   \   0000D1   E4           CLR     A
   \   0000D2   3D           ADDC    A,R5
   \   0000D3   F583         MOV     DPH,A
   \   0000D5   12....       LCALL   ?Subroutine27 & 0xFFFF
   2771              msg += 2;
   2772              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_283:
   \   0000D8   8882         MOV     DPL,R0
   \   0000DA   8983         MOV     DPH,R1
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   C0E0         PUSH    A
   \   0000E1   EC           MOV     A,R4
   \   0000E2   240D         ADD     A,#0xd
   \   0000E4   F582         MOV     DPL,A
   \   0000E6   E4           CLR     A
   \   0000E7   3D           ADDC    A,R5
   \   0000E8   F583         MOV     DPH,A
   \   0000EA   D0E0         POP     A
   \   0000EC   12....       LCALL   ?Subroutine32 & 0xFFFF
   2773              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   2774              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   2775            }
   \                     ??CrossCallReturnLabel_45:
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   C0E0         PUSH    A
   \   0000F2   EC           MOV     A,R4
   \   0000F3   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0000F6   3D           ADDC    A,R5
   \   0000F7   F583         MOV     DPH,A
   \   0000F9   D0E0         POP     A
   \   0000FB   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000FE   C0E0         PUSH    A
   \   000100   EC           MOV     A,R4
   \   000101   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000104   3D           ADDC    A,R5
   \   000105   F583         MOV     DPH,A
   \   000107   D0E0         POP     A
   \   000109   F0           MOVX    @DPTR,A
   2776          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   00010A   02....       LJMP    ??Subroutine158_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000003   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   A3           INC     DPTR
   \   000010   A882         MOV     R0,DPL
   \   000012   A983         MOV     R1,DPH
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FB           MOV     R3,A
   \   000019   EE           MOV     A,R6
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   EB           MOV     A,R3
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   E0           MOVX    A,@DPTR
   \   000028   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine189_0
   \   000001                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000003   3B           ADDC    A,R3
   \   000004   22           RET
   2777          
   2778          /*********************************************************************
   2779           * @fn          ZDO_ParsePowerDescRsp
   2780           *
   2781           * @brief       This function parses the Power_Desc_rsp message.
   2782           *
   2783           * @param       inMsg  - incoming message
   2784           * @param       pNPRsp - place to parse the message into
   2785           *
   2786           * @return      none
   2787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2788          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2790            uint8 *msg;
   2791          
   2792            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000008   12....       LCALL   ?Subroutine78 & 0xFFFF
   2793            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_127:
   \   00000B   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   00000E   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000011   AA82         MOV     R2,DPL
   \   000013   AB83         MOV     R3,DPH
   2794            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000015   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000018   A3           INC     DPTR
   \   000019   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   2795          
   2796            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_430:
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6003         JZ      $+5
   \   000023   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2797            {
   2798              msg += 2;
   2799              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   000026   EA           MOV     A,R2
   \   000027   2402         ADD     A,#0x2
   \   000029   F8           MOV     R0,A
   \   00002A   E4           CLR     A
   \   00002B   3B           ADDC    A,R3
   \   00002C   F9           MOV     R1,A
   \   00002D   E8           MOV     A,R0
   \   00002E   FE           MOV     R6,A
   \   00002F   E9           MOV     A,R1
   \   000030   FF           MOV     R7,A
   \   000031   EC           MOV     A,R4
   \   000032   2403         ADD     A,#0x3
   \   000034   E4           CLR     A
   \   000035   3D           ADDC    A,R5
   \   000036   0C           INC     R4
   \   000037   0C           INC     R4
   \   000038   0C           INC     R4
   \   000039   FD           MOV     R5,A
   \   00003A   8C82         MOV     DPL,R4
   \   00003C   8D83         MOV     DPH,R5
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   540F         ANL     A,#0xf
   \   000041   F5..         MOV     ?V2,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V3,A
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   C4           SWAP    A
   \   00004D   540F         ANL     A,#0xf
   \   00004F   F5..         MOV     ?V0,A
   \   000051   75..00       MOV     ?V1,#0x0
   \   000054   7404         MOV     A,#0x4
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?S_SHL
   \   00005B   E5..         MOV     A,?V2
   \   00005D   45..         ORL     A,?V0
   \   00005F   A9..         MOV     R1,?V3
   \   000061   8C82         MOV     DPL,R4
   \   000063   8D83         MOV     DPH,R5
   \   000065   12....       LCALL   ?Subroutine22 & 0xFFFF
   2800              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_27:
   \   000068   E5..         MOV     A,?V0
   \   00006A   48           ORL     A,R0
   \   00006B   F5..         MOV     ?V0,A
   \   00006D   8C82         MOV     DPL,R4
   \   00006F   8D83         MOV     DPH,R5
   \   000071   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   2801              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_431:
   \   000074   EA           MOV     A,R2
   \   000075   2403         ADD     A,#0x3
   \   000077   E4           CLR     A
   \   000078   3B           ADDC    A,R3
   \   000079   0E           INC     R6
   \   00007A   FF           MOV     R7,A
   \   00007B   E5..         MOV     A,?V0
   \   00007D   F5..         MOV     ?V2,A
   \   00007F   E9           MOV     A,R1
   \   000080   540F         ANL     A,#0xf
   \   000082   F5..         MOV     ?V3,A
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   E0           MOVX    A,@DPTR
   \   000089   C4           SWAP    A
   \   00008A   540F         ANL     A,#0xf
   \   00008C   F5..         MOV     ?V0,A
   \   00008E   740C         MOV     A,#0xc
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?S_SHL
   \   000095   E5..         MOV     A,?V3
   \   000097   45..         ORL     A,?V1
   \   000099   F9           MOV     R1,A
   \   00009A   8C82         MOV     DPL,R4
   \   00009C   8D83         MOV     DPH,R5
   \   00009E   E5..         MOV     A,?V2
   \   0000A0   12....       LCALL   ?Subroutine22 & 0xFFFF
   2802              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2803            }
   \                     ??CrossCallReturnLabel_28:
   \   0000A3   EA           MOV     A,R2
   \   0000A4   2404         ADD     A,#0x4
   \   0000A6   8C82         MOV     DPL,R4
   \   0000A8   8D83         MOV     DPH,R5
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   54F0         ANL     A,#0xf0
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   E8           MOV     A,R0
   \   0000B0   F9           MOV     R1,A
   \   0000B1   8C82         MOV     DPL,R4
   \   0000B3   8D83         MOV     DPH,R5
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   49           ORL     A,R1
   \   0000B8   F0           MOVX    @DPTR,A
   2804          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   0000B9   02....       LJMP    ??Subroutine158_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   540F         ANL     A,#0xf
   \   000009   F8           MOV     R0,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000003   22           RET
   2805          
   2806          /*********************************************************************
   2807           * @fn          ZDO_ParseSimpleDescRsp
   2808           *
   2809           * @brief       This function parse the Simple_Desc_rsp message.
   2810           *
   2811           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2812           *         in the SimpleDescriptionFormat_t structure are allocated
   2813           *         and the calling function needs to free [osal_msg_free()]
   2814           *         these buffers.
   2815           *
   2816           * @param       inMsg  - incoming message
   2817           * @param       pSimpleDescRsp - place to parse the message into
   2818           *
   2819           * @return      none
   2820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2821          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2822          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2823            uint8 *msg;
   2824          
   2825            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine9 & 0xFFFF
   2826            pSimpleDescRsp->status = *msg++;
   2827            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2828            msg += sizeof ( uint16 );
   2829            msg++; // Skip past the length field.
   2830          
   2831            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7011         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2832            {
   2833              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   FC           MOV     R4,A
   \   00000E   5001         JNC     ??ZDO_ParseSimpleDescRsp_1
   \   000010   0D           INC     R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000011   E8           MOV     A,R0
   \   000012   2403         ADD     A,#0x3
   \   000014   FA           MOV     R2,A
   \   000015   E4           CLR     A
   \   000016   39           ADDC    A,R1
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   2834            }
   2835          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001B                REQUIRE ?Subroutine6
   \   00001B                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   2836          
   2837          /*********************************************************************
   2838           * @fn          ZDO_ParseEPListRsp
   2839           *
   2840           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2841           *
   2842           * @param       inMsg  - incoming message
   2843           *
   2844           * @return      none
   2845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2846          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2847          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2848            ZDO_ActiveEndpointRsp_t *pRsp;
   2849            uint8 *msg;
   2850            uint8 Status;
   2851            uint8 cnt;
   2852          
   2853            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine75 & 0xFFFF
   2854            Status = *msg++;
   \                     ??CrossCallReturnLabel_121:
   \   000008   F5..         MOV     ?V5,A
   \   00000A   A3           INC     DPTR
   \   00000B   8582..       MOV     ?V2,DPL
   \   00000E   8583..       MOV     ?V3,DPH
   2855            cnt = msg[2];
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V4,A
   2856          
   2857            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000016   F5..         MOV     ?V0,A
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   FB           MOV     R3,A
   \   00001E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV     ?V6,R2
   \   000023   8B..         MOV     ?V7,R3
   \   000025   AE..         MOV     R6,?V6
   \   000027   AF..         MOV     R7,?V7
   2858            if ( pRsp )
   \   000029   EE           MOV     A,R6
   \   00002A   4F           ORL     A,R7
   \   00002B   6047         JZ      ??ZDO_ParseEPListRsp_0
   2859            {
   2860              pRsp->status = Status;
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   E5..         MOV     A,?V5
   \   000033   F0           MOVX    @DPTR,A
   2861              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000034   85..82       MOV     DPL,?V2
   \   000037   85..83       MOV     DPH,?V3
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   2862              msg += sizeof( uint16 );
   2863              pRsp->cnt = cnt;
   \                     ??CrossCallReturnLabel_432:
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E5..         MOV     A,?V4
   \   00004F   12....       LCALL   ?Subroutine35 & 0xFFFF
   2864              msg++; // pass cnt
   2865              osal_memcpy( pRsp->epList, msg, cnt );
   2866            }
   \                     ??CrossCallReturnLabel_50:
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A982         MOV     R1,DPL
   \   000056   AA83         MOV     R2,DPH
   \   000058   89..         MOV     ?V4,R1
   \   00005A   8A..         MOV     ?V5,R2
   \   00005C   88..         MOV     ?V6,R0
   \   00005E   78..         MOV     R0,#?V4
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   AC..         MOV     R4,?V0
   \   000065   7D00         MOV     R5,#0x0
   \   000067   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   00006A   3F           ADDC    A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   2867          
   2868            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000074   EE           MOV     A,R6
   \   000075   FA           MOV     R2,A
   \   000076   EF           MOV     A,R7
   \   000077   FB           MOV     R3,A
   \   000078   80..         SJMP    ??Subroutine180_0
   2869          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine182_0
   \   000001                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   2404         ADD     A,#0x4
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   F5..         MOV     ?V2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   85..82       MOV     DPL,?V2
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET
   2870          
   2871          /*********************************************************************
   2872           * @fn          ZDO_ParseServerDiscRsp
   2873           *
   2874           * @brief       Parse the Server_Discovery_rsp message.
   2875           *
   2876           * @param       inMsg - incoming message.
   2877           * @param       pRsp - place to put the parsed information.
   2878           *
   2879           * @return      none
   2880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2881          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2882          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2883            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F583         MOV     DPH,A
   \   000016   8A82         MOV     DPL,R2
   \   000018   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   00001B   12....       LCALL   ?Subroutine44 & 0xFFFF
   2884            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_69:
   \   00001E   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   00002C   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   2885          }
   \                     ??CrossCallReturnLabel_433:
   \   00002F   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   2886          
   2887          /*********************************************************************
   2888           * @fn          ZDO_ParseMgmtLqiRsp
   2889           *
   2890           * @brief       This function parses the incoming Management
   2891           *              LQI response
   2892           *
   2893           * @param       inMsg - incoming message
   2894           *
   2895           * @return      a pointer to parsed response structure (NULL if not allocated).
   2896           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2897           *          by the calling function [osal_mem_free()].
   2898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   FC           MOV     R4,A
   \   000001   EF           MOV     A,R7
   \   000002   FD           MOV     R5,A
   \   000003   E5..         MOV     A,?V0
   \   000005                REQUIRE ??Subroutine177_0
   \   000005                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   AA..         MOV     R2,?V2
   \   000002   AB..         MOV     R3,?V3
   \   000004                REQUIRE ??Subroutine180_0
   \   000004                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2899          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2900          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2901            ZDO_MgmtLqiRsp_t *pRsp;
   2902            uint8 status;
   2903            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   2904            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V6,#0x0
   2905            uint8 neighborLqiEntries = 0;
   \   00000B   12....       LCALL   ?Subroutine46 & 0xFFFF
   2906            uint8 *msg;
   2907          
   2908            msg = inMsg->asdu;
   2909          
   2910            status = *msg++;
   \                     ??CrossCallReturnLabel_412:
   \   00000E   F5..         MOV     ?V7,A
   \   000010   A3           INC     DPTR
   \   000011   AE82         MOV     R6,DPL
   \   000013   AF83         MOV     R7,DPH
   2911            if ( status == ZSuccess )
   \   000015   7017         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2912            {
   2913              neighborLqiEntries = *msg++;
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V5,A
   2914              startIndex = *msg++;
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V4,A
   2915              neighborLqiCount = *msg++;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V6,A
   \   000027   EE           MOV     A,R6
   \   000028   2403         ADD     A,#0x3
   \   00002A   FE           MOV     R6,A
   \   00002B   5001         JNC     ??ZDO_ParseMgmtLqiRsp_0
   \   00002D   0F           INC     R7
   2916            }
   2917          
   2918            // Allocate a buffer big enough to handle the list.
   2919            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2920                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00002E                ; Setup parameters for call to function osal_mem_alloc
   \   00002E   E5..         MOV     A,?V6
   \   000030   75F01A       MOV     B,#0x1a
   \   000033   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000036   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV     ?V2,R2
   \   00003B   8B..         MOV     ?V3,R3
   2921            if ( pRsp )
   \   00003D   EA           MOV     A,R2
   \   00003E   45..         ORL     A,?V3
   \   000040   7003         JNZ     $+5
   \   000042   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   2922            {
   2923              uint8 x;
   2924              ZDP_MgmtLqiItem_t *pList = pRsp->list;
   \   000045   12....       LCALL   ?Subroutine115 & 0xFFFF
   2925              pRsp->status = status;
   \                     ??CrossCallReturnLabel_195:
   \   000048   12....       LCALL   ?Subroutine10 & 0xFFFF
   2926              pRsp->neighborLqiEntries = neighborLqiEntries;
   2927              pRsp->startIndex = startIndex;
   2928              pRsp->neighborLqiCount = neighborLqiCount;
   2929          
   2930              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_2:
   \   00004B   7003         JNZ     $+5
   \   00004D   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   \   000050   F5..         MOV     ?V4,A
   2931              {
   2932                uint8 tmp;
   2933          
   2934                pList->panID = 0; // This isn't in the record, why is it in the structure?
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000052   85..82       MOV     DPL,?V0
   \   000055   85..83       MOV     DPH,?V1
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   F0           MOVX    @DPTR,A
   2935                osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
   \   00005C                ; Setup parameters for call to function sAddrExtCpy
   \   00005C   EE           MOV     A,R6
   \   00005D   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000060   35..         ADDC    A,?V1
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2936                msg += Z_EXTADDR_LEN;
   \   000066   EE           MOV     A,R6
   \   000067   2408         ADD     A,#0x8
   \   000069   FE           MOV     R6,A
   \   00006A   5001         JNC     ??ZDO_ParseMgmtLqiRsp_3
   \   00006C   0F           INC     R7
   2937          
   2938                osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   00006D                ; Setup parameters for call to function sAddrExtCpy
   \   00006D   FC           MOV     R4,A
   \   00006E   EF           MOV     A,R7
   \   00006F   FD           MOV     R5,A
   \   000070   E5..         MOV     A,?V0
   \   000072   240A         ADD     A,#0xa
   \   000074   FA           MOV     R2,A
   \   000075   E4           CLR     A
   \   000076   35..         ADDC    A,?V1
   \   000078   FB           MOV     R3,A
   \   000079   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2939                msg += Z_EXTADDR_LEN;
   \   00007C   EE           MOV     A,R6
   \   00007D   2408         ADD     A,#0x8
   \   00007F   FE           MOV     R6,A
   \   000080   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   000082   0F           INC     R7
   2940          
   2941                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00008A   E5..         MOV     A,?V0
   \   00008C   2412         ADD     A,#0x12
   \   00008E   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000091   E8           MOV     A,R0
   \   000092   12....       LCALL   ?Subroutine21 & 0xFFFF
   2942                msg += 2;
   2943          
   2944                tmp = *msg++;
   \                     ??CrossCallReturnLabel_391:
   \   000095   F8           MOV     R0,A
   2945                pList->devType = tmp & 0x03;
   \   000096   7403         MOV     A,#0x3
   \   000098   58           ANL     A,R0
   \   000099   C0E0         PUSH    A
   \   00009B   E5..         MOV     A,?V0
   \   00009D   2414         ADD     A,#0x14
   \   00009F   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   0000A2   D0E0         POP     A
   \   0000A4   F0           MOVX    @DPTR,A
   2946                pList->rxOnIdle = (tmp >> 2) & 0x03;
   \   0000A5   E8           MOV     A,R0
   \   0000A6   13           RRC     A
   \   0000A7   13           RRC     A
   \   0000A8   543F         ANL     A,#0x3f
   \   0000AA   5403         ANL     A,#0x3
   \   0000AC   C0E0         PUSH    A
   \   0000AE   E5..         MOV     A,?V0
   \   0000B0   2415         ADD     A,#0x15
   \   0000B2   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   0000B5   D0E0         POP     A
   \   0000B7   F0           MOVX    @DPTR,A
   2947                pList->relation = (tmp >> 4) & 0x07;
   \   0000B8   E8           MOV     A,R0
   \   0000B9   C4           SWAP    A
   \   0000BA   540F         ANL     A,#0xf
   \   0000BC   5407         ANL     A,#0x7
   \   0000BE   C0E0         PUSH    A
   \   0000C0   E5..         MOV     A,?V0
   \   0000C2   2416         ADD     A,#0x16
   \   0000C4   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   0000C7   D0E0         POP     A
   \   0000C9   12....       LCALL   ?Subroutine16 & 0xFFFF
   2948          
   2949                pList->permit = (*msg++) & 0x03;
   \                     ??CrossCallReturnLabel_16:
   \   0000CC   5403         ANL     A,#0x3
   \   0000CE   C0E0         PUSH    A
   \   0000D0   E5..         MOV     A,?V0
   \   0000D2   2417         ADD     A,#0x17
   \   0000D4   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   0000D7   D0E0         POP     A
   \   0000D9   12....       LCALL   ?Subroutine123 & 0xFFFF
   2950          
   2951                pList->depth = *msg++;
   \                     ??CrossCallReturnLabel_215:
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   C0E0         PUSH    A
   \   0000E0   E5..         MOV     A,?V0
   \   0000E2   2418         ADD     A,#0x18
   \   0000E4   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   0000E7   D0E0         POP     A
   \   0000E9   12....       LCALL   ?Subroutine30 & 0xFFFF
   2952          
   2953                pList->lqi = *msg++;
   \                     ??CrossCallReturnLabel_40:
   \   0000EC   C0E0         PUSH    A
   \   0000EE   E5..         MOV     A,?V0
   \   0000F0   2419         ADD     A,#0x19
   \   0000F2   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   0000F5   D0E0         POP     A
   \   0000F7   F0           MOVX    @DPTR,A
   \   0000F8   EE           MOV     A,R6
   \   0000F9   2406         ADD     A,#0x6
   \   0000FB   FE           MOV     R6,A
   \   0000FC   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   0000FE   0F           INC     R7
   2954                pList++;
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   0000FF   E5..         MOV     A,?V0
   \   000101   241A         ADD     A,#0x1a
   \   000103   F5..         MOV     ?V0,A
   \   000105   5002         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   000107   05..         INC     ?V1
   2955              }
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   000109   15..         DEC     ?V4
   \   00010B   E5..         MOV     A,?V4
   \   00010D   6003         JZ      $+5
   \   00010F   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   2956            }
   2957          
   2958            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   000112   02....       LJMP    ?Subroutine7 & 0xFFFF
   2959          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003                REQUIRE ??Subroutine181_0
   \   000003                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V3
   \   000008   F5..         MOV     ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   A4           MUL     AB
   \   000001   A9F0         MOV     R1,B
   \   000003   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000006   39           ADDC    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   75..00       MOV     ?V5,#0x0
   \   000003                REQUIRE ??Subroutine183_0
   \   000003                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000003                REQUIRE ??Subroutine184_0
   \   000003                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E5..         MOV     A,?V7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V5
   \   00000A   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00000D   A3           INC     DPTR
   \   00000E   E5..         MOV     A,?V4
   \   000010   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000013   E5..         MOV     A,?V6
   \   000015   F0           MOVX    @DPTR,A
   \   000016   22           RET
   2960          
   2961          /*********************************************************************
   2962           * @fn          ZDO_ParseMgmNwkDiscRsp
   2963           *
   2964           * @brief       This function parses the incoming Management
   2965           *              Network Discover response.
   2966           *
   2967           * @param       inMsg - incoming message
   2968           *
   2969           * @return      pointer to parsed response.  This structure was
   2970           *          allocated using osal_mem_alloc, so it must be freed
   2971           *          by the calling function [osal_mem_free()].
   2972           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2973          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2974          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2975            ZDO_MgmNwkDiscRsp_t *pRsp;
   2976            uint8 status;
   2977            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2978            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0,#0x0
   2979            uint8 networkListCount = 0;
   \   00000B   12....       LCALL   ?Subroutine46 & 0xFFFF
   2980            uint8 *msg;
   2981          
   2982            msg = inMsg->asdu;
   2983            status = *msg++;
   \                     ??CrossCallReturnLabel_413:
   \   00000E   F5..         MOV     ?V4,A
   \   000010   A3           INC     DPTR
   \   000011   AE82         MOV     R6,DPL
   \   000013   AF83         MOV     R7,DPH
   2984          
   2985            if ( status == ZSuccess )
   \   000015   700C         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2986            {
   2987              networkCount = *msg++;
   \   000017   12....       LCALL   ?Subroutine57 & 0xFFFF
   2988              startIndex = *msg++;
   2989              networkListCount = *msg++;
   2990            }
   \                     ??CrossCallReturnLabel_90:
   \   00001A   F5..         MOV     ?V5,A
   \   00001C   EE           MOV     A,R6
   \   00001D   2403         ADD     A,#0x3
   \   00001F   FE           MOV     R6,A
   \   000020   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_0
   \   000022   0F           INC     R7
   2991          
   2992            // Allocate a buffer big enough to handle the list.
   2993            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2994                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000023                ; Setup parameters for call to function osal_mem_alloc
   \   000023   85....       MOV     ?V2,?V5
   \   000026   75..00       MOV     ?V3,#0x0
   \   000029   7404         MOV     A,#0x4
   \   00002B   78..         MOV     R0,#?V2
   \   00002D   12....       LCALL   ?S_SHL
   \   000030   E5..         MOV     A,?V2
   \   000032   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000035   35..         ADDC    A,?V3
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV     ?V2,R2
   \   00003D   8B..         MOV     ?V3,R3
   2995            if ( pRsp )
   \   00003F   EA           MOV     A,R2
   \   000040   45..         ORL     A,?V3
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2996            {
   2997              uint8 x;
   2998              mgmtNwkDiscItem_t *pList;
   2999          
   3000              pRsp->status = status;
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   E5..         MOV     A,?V4
   \   00004D   12....       LCALL   ?Subroutine12 & 0xFFFF
   3001              pRsp->networkCount = networkCount;
   3002              pRsp->startIndex = startIndex;
   3003              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_6:
   \   000050   E5..         MOV     A,?V5
   \   000052   F0           MOVX    @DPTR,A
   3004              pList = pRsp->list;
   \   000053   12....       LCALL   ?Subroutine115 & 0xFFFF
   3005          
   3006              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_196:
   \   000056   E5..         MOV     A,?V5
   \   000058   7003         JNZ     $+5
   \   00005A   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   \   00005D   F5..         MOV     ?V4,A
   3007              {
   3008                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   00005F                ; Setup parameters for call to function sAddrExtCpy
   \   00005F   EE           MOV     A,R6
   \   000060   FC           MOV     R4,A
   \   000061   EF           MOV     A,R7
   \   000062   FD           MOV     R5,A
   \   000063   AA..         MOV     R2,?V0
   \   000065   AB..         MOV     R3,?V1
   \   000067   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3009                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   00006A   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00006D   A3           INC     DPTR
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   12....       LCALL   ?Subroutine17 & 0xFFFF
   3010                msg += Z_EXTADDR_LEN;
   3011          
   3012                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_19:
   \   000074   85..82       MOV     DPL,?V0
   \   000077   85..83       MOV     DPH,?V1
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   F0           MOVX    @DPTR,A
   3013                pList->stackProfile = (*msg) & 0x0F;
   \   000085   EE           MOV     A,R6
   \   000086   2409         ADD     A,#0x9
   \   000088   F8           MOV     R0,A
   \   000089   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00008C   C0E0         PUSH    A
   \   00008E   E5..         MOV     A,?V0
   \   000090   240B         ADD     A,#0xb
   \   000092   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000095   D0E0         POP     A
   \   000097   12....       LCALL   ?Subroutine38 & 0xFFFF
   3014                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_58:
   \   00009A   C0E0         PUSH    A
   \   00009C   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   00009F   D0E0         POP     A
   \   0000A1   F0           MOVX    @DPTR,A
   3015                pList->beaconOrder = (*msg) & 0x0F;
   \   0000A2   EE           MOV     A,R6
   \   0000A3   240A         ADD     A,#0xa
   \   0000A5   08           INC     R0
   \   0000A6   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0000A9   C0E0         PUSH    A
   \   0000AB   E5..         MOV     A,?V0
   \   0000AD   240D         ADD     A,#0xd
   \   0000AF   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   0000B2   D0E0         POP     A
   \   0000B4   12....       LCALL   ?Subroutine38 & 0xFFFF
   3016                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_59:
   \   0000B7   C0E0         PUSH    A
   \   0000B9   E5..         MOV     A,?V0
   \   0000BB   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000BE   12....       LCALL   ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   0000C1   D0E0         POP     A
   \   0000C3   12....       LCALL   ?Subroutine25 & 0xFFFF
   3017                pList->permitJoining = *msg++;
   \                     ??CrossCallReturnLabel_34:
   \   0000C6   C0E0         PUSH    A
   \   0000C8   E5..         MOV     A,?V0
   \   0000CA   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000CD   12....       LCALL   ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   0000D0   D0E0         POP     A
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   EE           MOV     A,R6
   \   0000D4   240C         ADD     A,#0xc
   \   0000D6   FE           MOV     R6,A
   \   0000D7   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_3
   \   0000D9   0F           INC     R7
   3018                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   0000DA   E5..         MOV     A,?V0
   \   0000DC   2410         ADD     A,#0x10
   \   0000DE   F5..         MOV     ?V0,A
   \   0000E0   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000E2   05..         INC     ?V1
   3019              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000E4   15..         DEC     ?V4
   \   0000E6   E5..         MOV     A,?V4
   \   0000E8   6003         JZ      $+5
   \   0000EA   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   3020            }
   3021          
   3022            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000ED   02....       LJMP    ?Subroutine7 & 0xFFFF
   3023          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E4           CLR     A
   \   000001   3F           ADDC    A,R7
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   540F         ANL     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   C4           SWAP    A
   \   000004   540F         ANL     A,#0xf
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V1,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V1
   \   000004   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V0
   \   00000A   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000007   85..82       MOV     DPL,?V0
   \   00000A   85..83       MOV     DPH,?V1
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   22           RET
   3024          
   3025          /*********************************************************************
   3026           * @fn          ZDO_ParseMgmtRtgRsp
   3027           *
   3028           * @brief       This function parses the incoming Management
   3029           *              Routing response.
   3030           *
   3031           * @param       inMsg - incoming message
   3032           *
   3033           * @return      a pointer to parsed response structure (NULL if not allocated).
   3034           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3035           *          by the calling function [osal_mem_free()].
   3036           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3037          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3038          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3039            ZDO_MgmtRtgRsp_t *pRsp;
   3040            uint8 status;
   3041            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   3042            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0,#0x0
   3043            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V2,#0x0
   3044            uint8 *msg;
   3045          
   3046            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   3047          
   3048            status = *msg++;
   \                     ??CrossCallReturnLabel_414:
   \   000011   F5..         MOV     ?V3,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   3049            if ( status == ZSuccess )
   \   000018   700C         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   3050            {
   3051              rtgCount = *msg++;
   \   00001A   12....       LCALL   ?Subroutine57 & 0xFFFF
   3052              startIndex = *msg++;
   3053              rtgListCount = *msg++;
   3054            }
   \                     ??CrossCallReturnLabel_91:
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   EE           MOV     A,R6
   \   000020   2403         ADD     A,#0x3
   \   000022   FE           MOV     R6,A
   \   000023   5001         JNC     ??ZDO_ParseMgmtRtgRsp_0
   \   000025   0F           INC     R7
   3055          
   3056            // Allocate a buffer big enough to handle the list
   3057            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3058                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   E5..         MOV     A,?V2
   \   000028   75F007       MOV     B,#0x7
   \   00002B   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00002E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3059            if ( pRsp )
   \   000031   EA           MOV     A,R2
   \   000032   4B           ORL     A,R3
   \   000033   606A         JZ      ??ZDO_ParseMgmtRtgRsp_1
   3060            {
   3061              uint8 x;
   3062              rtgItem_t *pList = pRsp->list;
   \   000035   EA           MOV     A,R2
   \   000036   2404         ADD     A,#0x4
   \   000038   F8           MOV     R0,A
   \   000039   E4           CLR     A
   \   00003A   3B           ADDC    A,R3
   \   00003B   F9           MOV     R1,A
   3063              pRsp->status = status;
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   E5..         MOV     A,?V3
   \   000042   12....       LCALL   ?Subroutine12 & 0xFFFF
   3064              pRsp->rtgCount = rtgCount;
   3065              pRsp->startIndex = startIndex;
   3066              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_7:
   \   000045   E5..         MOV     A,?V2
   \   000047   F0           MOVX    @DPTR,A
   3067          
   3068              for ( x = 0; x < rtgListCount; x++ )
   \   000048   6055         JZ      ??ZDO_ParseMgmtRtgRsp_1
   \   00004A   F5..         MOV     ?V0,A
   3069              {
   3070                uint8 statOpt;
   3071          
   3072                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   E0           MOVX    A,@DPTR
   \   000051   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   ED           MOV     A,R5
   \   000057   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   3073                msg += 2;
   3074                statOpt = *msg++;
   \                     ??CrossCallReturnLabel_393:
   \   00005A   FC           MOV     R4,A
   \   00005B   EE           MOV     A,R6
   \   00005C   2403         ADD     A,#0x3
   \   00005E   FE           MOV     R6,A
   \   00005F   5001         JNC     ??ZDO_ParseMgmtRtgRsp_3
   \   000061   0F           INC     R7
   3075                pList->status = (statOpt & 0x07);
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000062   7407         MOV     A,#0x7
   \   000064   5C           ANL     A,R4
   \   000065   8882         MOV     DPL,R0
   \   000067   8983         MOV     DPH,R1
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   F0           MOVX    @DPTR,A
   3076                pList->options = ((statOpt >> 3) & 0x07);
   \   00006F   EC           MOV     A,R4
   \   000070   13           RRC     A
   \   000071   13           RRC     A
   \   000072   13           RRC     A
   \   000073   541F         ANL     A,#0x1f
   \   000075   5407         ANL     A,#0x7
   \   000077   8882         MOV     DPL,R0
   \   000079   8983         MOV     DPH,R1
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   3077                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_350:
   \   000084   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   ED           MOV     A,R5
   \   00008C   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   3078                msg += 2;
   \                     ??CrossCallReturnLabel_457:
   \   00008F   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   000091   0F           INC     R7
   3079                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000092   E8           MOV     A,R0
   \   000093   2407         ADD     A,#0x7
   \   000095   F8           MOV     R0,A
   \   000096   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   000098   09           INC     R1
   3080              }
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   000099   15..         DEC     ?V0
   \   00009B   E5..         MOV     A,?V0
   \   00009D   70AD         JNZ     ??ZDO_ParseMgmtRtgRsp_2
   3081            }
   3082          
   3083            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   00009F   02....       LJMP    ?Subroutine3 & 0xFFFF
   3084          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F5..         MOV     ?V2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   E5..         MOV     A,?V2
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2402         ADD     A,#0x2
   \   000004   FE           MOV     R6,A
   \   000005   22           RET
   3085          
   3086          /*********************************************************************
   3087           * @fn          ZDO_ParseMgmtBindRsp
   3088           *
   3089           * @brief       This function parses the incoming Management
   3090           *              Binding response.
   3091           *
   3092           * @param       inMsg - pointer to message to parse
   3093           *
   3094           * @return      a pointer to parsed response structure (NULL if not allocated).
   3095           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3096           *          by the calling function [osal_mem_free()].
   3097           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3098          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3099          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3100            ZDO_MgmtBindRsp_t *pRsp;
   3101            uint8 status;
   3102            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V5,#0x0
   3103            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V4,#0x0
   3104            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V6,#0x0
   3105            uint8 *msg;
   3106          
   3107            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine75 & 0xFFFF
   3108          
   3109            status = *msg++;
   \                     ??CrossCallReturnLabel_122:
   \   000011   F5..         MOV     ?V7,A
   \   000013   A3           INC     DPTR
   \   000014   8582..       MOV     ?V2,DPL
   \   000017   8583..       MOV     ?V3,DPH
   3110            if ( status == ZSuccess )
   \   00001A   701C         JNZ     ??ZDO_ParseMgmtBindRsp_0
   3111            {
   3112              bindingCount = *msg++;
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V5,A
   3113              startIndex = *msg++;
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V4,A
   3114              bindingListCount = *msg++;
   \   000023   85..82       MOV     DPL,?V2
   \   000026   85..83       MOV     DPH,?V3
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V6,A
   \   00002E   E5..         MOV     A,?V2
   \   000030   2403         ADD     A,#0x3
   \   000032   F5..         MOV     ?V2,A
   \   000034   5002         JNC     ??ZDO_ParseMgmtBindRsp_0
   \   000036   05..         INC     ?V3
   3115            }
   3116          
   3117            // Allocate a buffer big enough to handle the list
   3118            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3119                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   E5..         MOV     A,?V6
   \   00003A   75F015       MOV     B,#0x15
   \   00003D   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000040   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000043   8A..         MOV     ?V0,R2
   \   000045   8B..         MOV     ?V1,R3
   3120            if ( pRsp )
   \   000047   EA           MOV     A,R2
   \   000048   45..         ORL     A,?V1
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   3121            {
   3122              uint8 x;
   3123              apsBindingItem_t *pList = pRsp->list;
   \   00004F   EA           MOV     A,R2
   \   000050   2404         ADD     A,#0x4
   \   000052   FE           MOV     R6,A
   \   000053   E4           CLR     A
   \   000054   35..         ADDC    A,?V1
   \   000056   FF           MOV     R7,A
   3124              pRsp->status = status;
   \   000057   12....       LCALL   ?Subroutine10 & 0xFFFF
   3125              pRsp->bindingCount = bindingCount;
   3126              pRsp->startIndex = startIndex;
   3127              pRsp->bindingListCount = bindingListCount;
   3128          
   3129              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_3:
   \   00005A   7003         JNZ     $+5
   \   00005C   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   \   00005F   F5..         MOV     ?V4,A
   3130              {
   3131                osal_cpyExtAddr( pList->srcAddr, msg );
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   000061                ; Setup parameters for call to function sAddrExtCpy
   \   000061   AC..         MOV     R4,?V2
   \   000063   AD..         MOV     R5,?V3
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3132                msg += Z_EXTADDR_LEN;
   3133                pList->srcEP = *msg++;
   \   00006C   85..82       MOV     DPL,?V2
   \   00006F   85..83       MOV     DPH,?V3
   \   000072   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000075   E5..         MOV     A,?V2
   \   000077   2409         ADD     A,#0x9
   \   000079   F5..         MOV     ?V2,A
   \   00007B   5002         JNC     ??ZDO_ParseMgmtBindRsp_3
   \   00007D   05..         INC     ?V3
   3134          
   3135                // Get the Cluster ID
   3136          
   3137                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00007F   F582         MOV     DPL,A
   \   000081   85..83       MOV     DPH,?V3
   \   000084   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000087   12....       LCALL   ?Subroutine34 & 0xFFFF
   3138                msg += 2;
   3139                pList->dstAddr.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_49:
   \   00008A   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00008D   E5..         MOV     A,?V2
   \   00008F   2403         ADD     A,#0x3
   \   000091   F5..         MOV     ?V2,A
   \   000093   5002         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   000095   05..         INC     ?V3
   3140                if ( pList->dstAddr.addrMode == Addr64Bit )
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000097   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00009A   7024         JNZ     ??ZDO_ParseMgmtBindRsp_5
   3141                {
   3142                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   \   00009C                ; Setup parameters for call to function sAddrExtCpy
   \   00009C   AC..         MOV     R4,?V2
   \   00009E   AD..         MOV     R5,?V3
   \   0000A0   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3143                  msg += Z_EXTADDR_LEN;
   3144                  pList->dstEP = *msg++;
   \   0000A3   85..82       MOV     DPL,?V2
   \   0000A6   85..83       MOV     DPH,?V3
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   C0E0         PUSH    A
   \   0000B4   12....       LCALL   ?Subroutine109 & 0xFFFF
   3145                }
   \                     ??CrossCallReturnLabel_185:
   \   0000B7   D0E0         POP     A
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   E5..         MOV     A,?V2
   \   0000BC   2409         ADD     A,#0x9
   \   0000BE   800C         SJMP    ??CrossCallReturnLabel_64
   3146                else
   3147                {
   3148                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   0000C0   85..82       MOV     DPL,?V2
   \   0000C3   85..83       MOV     DPH,?V3
   \   0000C6   12....       LCALL   ?Subroutine77 & 0xFFFF
   3149                  msg += 2;
   3150                }
   \                     ??CrossCallReturnLabel_126:
   \   0000C9   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000CC   F5..         MOV     ?V2,A
   \   0000CE   5002         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   0000D0   05..         INC     ?V3
   3151          
   3152                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   0000D2   EE           MOV     A,R6
   \   0000D3   2415         ADD     A,#0x15
   \   0000D5   FE           MOV     R6,A
   \   0000D6   5001         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   0000D8   0F           INC     R7
   3153              }
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   0000D9   15..         DEC     ?V4
   \   0000DB   E5..         MOV     A,?V4
   \   0000DD   7082         JNZ     ??ZDO_ParseMgmtBindRsp_2
   3154            }
   3155          
   3156            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000DF   AA..         MOV     R2,?V0
   \   0000E1   AB..         MOV     R3,?V1
   \   0000E3   02....       LJMP    ?Subroutine5 & 0xFFFF
   3157          }
   3158          
   3159          /*********************************************************************
   3160           * @fn          ZDO_ParseUserDescRsp
   3161           *
   3162           * @brief       This function parses the incoming User
   3163           *              Descriptor Response.
   3164           *
   3165           * @param       inMsg - incoming response message
   3166           *
   3167           * @return      a pointer to parsed response structure (NULL if not allocated).
   3168           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3169           *          by the calling function [osal_mem_free()].
   3170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3171          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3173            ZDO_UserDescRsp_t *pRsp;
   3174            uint8 *msg;
   3175            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   3176          
   3177            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00000B   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   00000E   88..         MOV     ?V2,R0
   \   000010   89..         MOV     ?V3,R1
   3178          
   3179            if ( msg[0] == ZSuccess )
   \   000012   8882         MOV     DPL,R0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   3180            {
   3181              descLen = msg[3];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V4,A
   3182            }
   3183          
   3184            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001F   AE..         MOV     R6,?V4
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V0,R2
   \   00002C   8B..         MOV     ?V1,R3
   3185            if ( pRsp )
   \   00002E   EA           MOV     A,R2
   \   00002F   45..         ORL     A,?V1
   \   000031   6053         JZ      ??ZDO_ParseUserDescRsp_1
   3186            {
   3187              pRsp->status = msg[0];
   \   000033   85..82       MOV     DPL,?V2
   \   000036   85..83       MOV     DPH,?V3
   \   000039   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   00003C   12....       LCALL   ?Subroutine35 & 0xFFFF
   3188              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_51:
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FA           MOV     R2,A
   \   000041   85..82       MOV     DPL,?V2
   \   000044   85..83       MOV     DPH,?V3
   \   000047   A3           INC     DPTR
   \   000048   12....       LCALL   ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   00004B   85..82       MOV     DPL,?V0
   \   00004E   8B83         MOV     DPH,R3
   \   000050   A3           INC     DPTR
   \   000051   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   3189              pRsp->length = descLen;
   \                     ??CrossCallReturnLabel_434:
   \   000054   85..82       MOV     DPL,?V0
   \   000057   8B83         MOV     DPH,R3
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   EE           MOV     A,R6
   \   00005D   F0           MOVX    @DPTR,A
   3190              if ( descLen )
   \   00005E   6026         JZ      ??ZDO_ParseUserDescRsp_1
   3191              {
   3192                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000060                ; Setup parameters for call to function osal_memcpy
   \   000060   E5..         MOV     A,?V2
   \   000062   2404         ADD     A,#0x4
   \   000064   F5..         MOV     ?V4,A
   \   000066   E4           CLR     A
   \   000067   35..         ADDC    A,?V3
   \   000069   F5..         MOV     ?V5,A
   \   00006B   88..         MOV     ?V6,R0
   \   00006D   78..         MOV     R0,#?V4
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000072   EE           MOV     A,R6
   \   000073   FC           MOV     R4,A
   \   000074   7D00         MOV     R5,#0x0
   \   000076   E5..         MOV     A,?V0
   \   000078   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   3193              }
   3194            }
   \                     ??CrossCallReturnLabel_400:
   \   00007B   35..         ADDC    A,?V1
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000081   7403         MOV     A,#0x3
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
   3195          
   3196            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000086   AA..         MOV     R2,?V0
   \   000088   AB..         MOV     R3,?V1
   \   00008A   02....       LJMP    ??Subroutine180_0 & 0xFFFF
   3197          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000003   F583         MOV     DPH,A
   \   000005   22           RET
   3198          
   3199          /*********************************************************************
   3200           * @fn          ZDO_ParseSimpleDescBuf
   3201           *
   3202           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3203           *
   3204           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3205           * @param       desc - SimpleDescriptionFormat_t *
   3206           *
   3207           *              This routine allocates storage for the cluster IDs because
   3208           *              they are 16-bit and need to be aligned to be properly processed.
   3209           *              This routine returns non-zero if an allocation fails.
   3210           *
   3211           *              NOTE: This means that the caller or user of the input structure
   3212           *                    is responsible for freeing the memory
   3213           *
   3214           * @return      0: success
   3215           *              1: failure due to malloc failure.
   3216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3217          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3219            uint8 num, i;
   3220          
   3221            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000014   12....       LCALL   ?Subroutine13 & 0xFFFF
   3222            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_10:
   \   000017   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   E9           MOV     A,R1
   \   00001D   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   3223            buf += 2;
   \                     ??CrossCallReturnLabel_458:
   \   000020   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   000022   0F           INC     R7
   3224            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   12....       LCALL   ?Subroutine21 & 0xFFFF
   3225            buf += 2;
   3226            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_392:
   \   00002F   C4           SWAP    A
   \   000030   540F         ANL     A,#0xf
   3227          
   3228            desc->Reserved = 0;
   \   000032   8C82         MOV     DPL,R4
   \   000034   8D83         MOV     DPH,R5
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   12....       LCALL   ?Subroutine16 & 0xFFFF
   3229            buf++;
   3230          
   3231            // move in input cluster list (if any). allocate aligned memory.
   3232            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_17:
   \   00003E   F5..         MOV     ?V4,A
   \   000040   EE           MOV     A,R6
   \   000041   2404         ADD     A,#0x4
   \   000043   FE           MOV     R6,A
   \   000044   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000046   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000047   8C82         MOV     DPL,R4
   \   000049   8D83         MOV     DPH,R5
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E5..         MOV     A,?V4
   \   000053   F0           MOVX    @DPTR,A
   3233            if ( num )
   \   000054   6037         JZ      ??ZDO_ParseSimpleDescBuf_2
   3234            {
   3235              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000059   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005C   8A..         MOV     ?V2,R2
   \   00005E   8B..         MOV     ?V3,R3
   \   000060   A8..         MOV     R0,?V2
   \   000062   A9..         MOV     R1,?V3
   \   000064   E5..         MOV     A,?V0
   \   000066   2407         ADD     A,#0x7
   \   000068   F5..         MOV     ?V2,A
   \   00006A   E4           CLR     A
   \   00006B   35..         ADDC    A,?V1
   \   00006D   85..82       MOV     DPL,?V2
   \   000070   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000073   E8           MOV     A,R0
   \   000074   49           ORL     A,R1
   \   000075   6079         JZ      ??ZDO_ParseSimpleDescBuf_3
   \   000077   85....       MOV     ?V5,?V4
   3236              {
   3237                // malloc failed. we're done.
   3238                return 1;
   3239              }
   3240              for (i=0; i<num; ++i)
   3241              {
   3242                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   00007A   12....       LCALL   ?Subroutine26 & 0xFFFF
   3243                buf += 2;
   3244              }
   \                     ??CrossCallReturnLabel_455:
   \   00007D   5001         JNC     ??ZDO_ParseSimpleDescBuf_5
   \   00007F   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000080   E8           MOV     A,R0
   \   000081   2402         ADD     A,#0x2
   \   000083   F8           MOV     R0,A
   \   000084   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   000086   09           INC     R1
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000087   15..         DEC     ?V5
   \   000089   E5..         MOV     A,?V5
   \   00008B   70ED         JNZ     ??ZDO_ParseSimpleDescBuf_4
   3245            }
   3246          
   3247            // move in output cluster list (if any). allocate aligned memory.
   3248            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F5..         MOV     ?V2,A
   \   000094   A3           INC     DPTR
   \   000095   AE82         MOV     R6,DPL
   \   000097   AF83         MOV     R7,DPH
   \   000099   85..82       MOV     DPL,?V0
   \   00009C   85..83       MOV     DPH,?V1
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   F0           MOVX    @DPTR,A
   3249            if (num)
   \   0000A9   605F         JZ      ??ZDO_ParseSimpleDescBuf_7
   3250            {
   3251              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000AB                ; Setup parameters for call to function osal_mem_alloc
   \   0000AB   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   0000AE   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B1   8A..         MOV     ?V6,R2
   \   0000B3   8B..         MOV     ?V7,R3
   \   0000B5   A8..         MOV     R0,?V6
   \   0000B7   A9..         MOV     R1,?V7
   \   0000B9   85..82       MOV     DPL,?V0
   \   0000BC   85..83       MOV     DPH,?V1
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   0000CC   E8           MOV     A,R0
   \   0000CD   49           ORL     A,R1
   \   0000CE   7024         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3252              {
   3253                // malloc failed. free input cluster list memory if there is any
   3254                if ( desc->pAppInClusterList != NULL )
   \   0000D0   E5..         MOV     A,?V0
   \   0000D2   2407         ADD     A,#0x7
   \   0000D4   F5..         MOV     ?V2,A
   \   0000D6   E4           CLR     A
   \   0000D7   35..         ADDC    A,?V1
   \   0000D9   F5..         MOV     ?V3,A
   \   0000DB   85..82       MOV     DPL,?V2
   \   0000DE   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000E1   600D         JZ      ??ZDO_ParseSimpleDescBuf_3
   3255                {
   3256                  osal_mem_free(desc->pAppInClusterList);
   \   0000E3                ; Setup parameters for call to function osal_mem_free
   \   0000E3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3257          
   3258                  desc->pAppInClusterList = NULL;
   \   0000E6   85..82       MOV     DPL,?V2
   \   0000E9   85..83       MOV     DPH,?V3
   \   0000EC   E4           CLR     A
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   F0           MOVX    @DPTR,A
   3259                }
   3260                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000F0   7901         MOV     R1,#0x1
   \   0000F2   8018         SJMP    ??ZDO_ParseSimpleDescBuf_9
   3261              }
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   0000F4   85....       MOV     ?V0,?V2
   3262              for (i=0; i<num; ++i)
   3263              {
   3264                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   0000F7   12....       LCALL   ?Subroutine26 & 0xFFFF
   3265                buf += 2;
   3266              }
   \                     ??CrossCallReturnLabel_456:
   \   0000FA   5001         JNC     ??ZDO_ParseSimpleDescBuf_11
   \   0000FC   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   0000FD   E8           MOV     A,R0
   \   0000FE   2402         ADD     A,#0x2
   \   000100   F8           MOV     R0,A
   \   000101   5001         JNC     ??ZDO_ParseSimpleDescBuf_12
   \   000103   09           INC     R1
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   000104   15..         DEC     ?V0
   \   000106   E5..         MOV     A,?V0
   \   000108   70ED         JNZ     ??ZDO_ParseSimpleDescBuf_10
   3267            }
   3268            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   00010A   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   00010C   02....       LJMP    ??Subroutine180_0 & 0xFFFF
   3269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002                REQUIRE ??Subroutine190_0
   \   000002                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   EB           MOV     A,R3
   \   000006                REQUIRE ??Subroutine191_0
   \   000006                ; // Fall through to label ??Subroutine191_0
   3270          
   3271          /*********************************************************************
   3272           * @fn          ZDO_ParseDeviceAnnce
   3273           *
   3274           * @brief       Parse a Device Announce message.
   3275           *
   3276           * @param       inMsg - Incoming message
   3277           * @param       pAnnce - place to put the parsed information
   3278           *
   3279           * @return      none
   3280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3281          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3283            uint8 *msg;
   3284          
   3285            // Parse incoming message
   3286            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00000C   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00000F   FF           MOV     R7,A
   3287            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000010   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000013   8C82         MOV     DPL,R4
   \   000015   8D83         MOV     DPH,R5
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   E9           MOV     A,R1
   \   00001A   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   3288            msg += 2;
   \                     ??CrossCallReturnLabel_459:
   \   00001D   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   00001F   0F           INC     R7
   3289            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   000020                ; Setup parameters for call to function sAddrExtCpy
   \   000020   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000023   35..         ADDC    A,?V1
   \   000025   FB           MOV     R3,A
   \   000026   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3290            msg += Z_EXTADDR_LEN;
   3291            pAnnce->capabilities = *msg;
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
   3292          }
   \   000038   02....       LJMP    ??Subroutine155_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   85..82       MOV     DPL,?V0
   \   000009   85..83       MOV     DPH,?V1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET
   3293          
   3294          /*********************************************************************
   3295           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3296           *
   3297           * @brief       This function handles parsing of the incoming Management
   3298           *              Network Update notify.
   3299           *
   3300           * @param       inMsg - incoming message (request)
   3301           *
   3302           * @return      a pointer to parsed response structure (NULL if not allocated).
   3303           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3304           *          by the calling function [osal_mem_free()].
   3305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3306          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   3308            uint8 status;
   3309            uint32 scannedChannels = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   \   000008   75..00       MOV     ?V5,#0x0
   \   00000B   75..00       MOV     ?V6,#0x0
   \   00000E   75..00       MOV     ?V7,#0x0
   3310            uint16 totalTransmissions = 0;
   \   000011   75..00       MOV     ?V0,#0x0
   \   000014   75..00       MOV     ?V1,#0x0
   3311            uint16 transmissionFailures = 0;
   \   000017   75..00       MOV     ?V2,#0x0
   \   00001A   75..00       MOV     ?V3,#0x0
   3312            uint8 listCount = 0;
   \   00001D   75..00       MOV     ?V10,#0x0
   3313            uint8 *msg = inMsg->asdu;
   \   000020   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000023   F5..         MOV     ?V8,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   3314            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3315          
   3316            status = *msg++;
   \   000027   85..82       MOV     DPL,?V8
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V11,A
   \   00002F   A3           INC     DPTR
   \   000030   8582..       MOV     ?V8,DPL
   \   000033   8583..       MOV     ?V9,DPH
   3317            if ( status == ZSuccess )
   \   000036   704C         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3318            {
   3319              scannedChannels = osal_build_uint32( msg, 4 );
   \   000038                ; Setup parameters for call to function osal_build_uint32
   \   000038   7904         MOV     R1,#0x4
   \   00003A   AA..         MOV     R2,?V8
   \   00003C   AB..         MOV     R3,?V9
   \   00003E   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000041   8A..         MOV     ?V4,R2
   \   000043   8B..         MOV     ?V5,R3
   \   000045   8C..         MOV     ?V6,R4
   \   000047   8D..         MOV     ?V7,R5
   3320              msg += 4;
   \   000049   E5..         MOV     A,?V8
   \   00004B   2404         ADD     A,#0x4
   \   00004D   F5..         MOV     ?V8,A
   \   00004F   5002         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000051   05..         INC     ?V9
   3321              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000053   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000056   F5..         MOV     ?V0,A
   \   000058   E4           CLR     A
   \   000059   39           ADDC    A,R1
   \   00005A   F5..         MOV     ?V1,A
   3322              msg += 2;
   \   00005C   E5..         MOV     A,?V8
   \   00005E   2402         ADD     A,#0x2
   \   000060   F5..         MOV     ?V8,A
   \   000062   5002         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   000064   05..         INC     ?V9
   3323              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   000066   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   000069   F5..         MOV     ?V2,A
   \   00006B   E4           CLR     A
   \   00006C   39           ADDC    A,R1
   \   00006D   F5..         MOV     ?V3,A
   3324              msg += 2;
   3325              listCount = *msg++;
   \   00006F   85..82       MOV     DPL,?V8
   \   000072   85..83       MOV     DPH,?V9
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F5..         MOV     ?V10,A
   \   00007A   E5..         MOV     A,?V8
   \   00007C   2403         ADD     A,#0x3
   \   00007E   F5..         MOV     ?V8,A
   \   000080   5002         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_0
   \   000082   05..         INC     ?V9
   3326            }
   3327          
   3328            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000084   AE..         MOV     R6,?V10
   \   000086                ; Setup parameters for call to function osal_mem_alloc
   \   000086   EE           MOV     A,R6
   \   000087   240A         ADD     A,#0xa
   \   000089   FA           MOV     R2,A
   \   00008A   E4           CLR     A
   \   00008B   3400         ADDC    A,#0x0
   \   00008D   FB           MOV     R3,A
   \   00008E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000091   8A..         MOV     ?V14,R2
   \   000093   8B..         MOV     ?V15,R3
   3329          
   3330            if ( pRsp )
   \   000095   EA           MOV     A,R2
   \   000096   45..         ORL     A,?V15
   \   000098   604A         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_3
   3331            {
   3332              pRsp->status = status;
   \   00009A   8A82         MOV     DPL,R2
   \   00009C   8B83         MOV     DPH,R3
   \   00009E   E5..         MOV     A,?V11
   \   0000A0   F0           MOVX    @DPTR,A
   3333              pRsp->scannedChannels = scannedChannels;
   \   0000A1   A3           INC     DPTR
   \   0000A2   78..         MOV     R0,#?V4
   \   0000A4   12....       LCALL   ?L_MOV_TO_X
   3334              pRsp->totalTransmissions = totalTransmissions;
   \   0000A7   8A82         MOV     DPL,R2
   \   0000A9   8B83         MOV     DPH,R3
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   E5..         MOV     A,?V0
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E5..         MOV     A,?V1
   \   0000B6   12....       LCALL   ?Subroutine23 & 0xFFFF
   3335              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_29:
   \   0000B9   E5..         MOV     A,?V2
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E5..         MOV     A,?V3
   \   0000BF   12....       LCALL   ?Subroutine23 & 0xFFFF
   3336              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_30:
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   EE           MOV     A,R6
   \   0000C5   F0           MOVX    @DPTR,A
   3337          
   3338              // Allocate a buffer big enough to handle the list.
   3339              if ( listCount > 0 )
   \   0000C6   601C         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_3
   3340              {
   3341                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0000C8                ; Setup parameters for call to function osal_memcpy
   \   0000C8   75..00       MOV     ?V10,#0x0
   \   0000CB   78..         MOV     R0,#?V8
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D0   EE           MOV     A,R6
   \   0000D1   FC           MOV     R4,A
   \   0000D2   7D00         MOV     R5,#0x0
   \   0000D4   EA           MOV     A,R2
   \   0000D5   240A         ADD     A,#0xa
   \   0000D7   FA           MOV     R2,A
   \   0000D8   E4           CLR     A
   \   0000D9   35..         ADDC    A,?V15
   \   0000DB   FB           MOV     R3,A
   \   0000DC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000DF   7403         MOV     A,#0x3
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   3342              }
   3343            }
   3344          
   3345            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000E4   AA..         MOV     R2,?V14
   \   0000E6   AB..         MOV     R3,?V15
   \   0000E8   02....       LJMP    ??Subroutine159_0 & 0xFFFF
   3346          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   F582         MOV     DPL,A
   \   000002   85..83       MOV     DPH,?V9
   \   000005   E0           MOVX    A,@DPTR
   \   000006                REQUIRE ??Subroutine192_0
   \   000006                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
   3347          
   3348          /*********************************************************************
   3349           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3350           *
   3351           * @brief       This function handles parsing the incoming Management
   3352           *              Network Update request and starts the request (if needed).
   3353           *
   3354           * @param       inMsg - incoming message (request)
   3355           * @param       pReq - pointer to place to parse message to
   3356           *
   3357           * @return      none
   3358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3359          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3360          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3361            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00000C   12....       LCALL   ?Subroutine70 & 0xFFFF
   3362          
   3363            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_110:
   \   00000F   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000012   EA           MOV     A,R2
   \   000013   F8           MOV     R0,A
   \   000014   EB           MOV     A,R3
   \   000015   F9           MOV     R1,A
   \   000016   EC           MOV     A,R4
   \   000017   FA           MOV     R2,A
   \   000018   ED           MOV     A,R5
   \   000019   FB           MOV     R3,A
   \   00001A   85..82       MOV     DPL,?V0
   \   00001D   85..83       MOV     DPH,?V1
   \   000020   12....       LCALL   ?XSTORE_R0123
   3364            msg += 4;
   3365            pReq->scanDuration = *msg++;
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FA           MOV     R2,A
   \   00002D   E5..         MOV     A,?V0
   \   00002F   2404         ADD     A,#0x4
   \   000031   F8           MOV     R0,A
   \   000032   E4           CLR     A
   \   000033   35..         ADDC    A,?V1
   \   000035   F9           MOV     R1,A
   \   000036   EA           MOV     A,R2
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   F0           MOVX    @DPTR,A
   3366          
   3367            if ( pReq->scanDuration <= 0x05 )
   \   00003C   C3           CLR     C
   \   00003D   9406         SUBB    A,#0x6
   \   00003F   5009         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3368            {
   3369              // Request is to scan over channelMask
   3370              pReq->scanCount = *msg;
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ?Subroutine130 & 0xFFFF
   3371            }
   \                     ??CrossCallReturnLabel_223:
   \   000048   8027         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3372            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   00004A   74FE         MOV     A,#-0x2
   \   00004C   6A           XRL     A,R2
   \   00004D   6005         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   6A           XRL     A,R2
   \   000052   701E         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3373            {
   3374              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3375              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   EE           MOV     A,R6
   \   00005D   2406         ADD     A,#0x6
   \   00005F   FE           MOV     R6,A
   \   000060   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_4
   \   000062   0F           INC     R7
   3376          
   3377              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F4           CPL     A
   \   000069   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3378              {
   3379                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00006B   12....       LCALL   ?Subroutine55 & 0xFFFF
   3380              }
   3381            }
   \                     ??CrossCallReturnLabel_89:
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000071   F0           MOVX    @DPTR,A
   3382          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000072   02....       LJMP    ??Subroutine155_0 & 0xFFFF
   3383          
   3384          /*********************************************************************
   3385           * @fn          ZDO_ParseEndDeviceTimeoutRsp
   3386           *
   3387           * @brief       Parse the End_Device_Timeout_rsp message.
   3388           *
   3389           * @param       inMsg - incoming message.
   3390           * @param       pRsp - place to put the parsed information.
   3391           *
   3392           * @return      none
   3393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3394          void ZDO_ParseEndDeviceTimeoutRsp( zdoIncomingMsg_t *inMsg, uint16 *pRsp )
   \                     ZDO_ParseEndDeviceTimeoutRsp:
   3395          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3396            *pRsp = inMsg->asdu[0];
   \   000004   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000007   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   3397          }
   \   000012   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdpExternalStateTaskID>`:
   \   000000   FFFF         DW -1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdoSendStateChangeMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessEndDeviceTimeoutReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessEndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceTimeoutRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceTimeoutRsp
   3398          
   3399          /*********************************************************************
   3400          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      0     15   ZDO_AnyClusterMatches
      1     14   ZDO_BuildSimpleDescBuf
      0     52   ZDO_ConvertOTAClusters
      1     17   ZDO_EndDeviceTimeoutCB
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_DeviceJoiningInit
        2      0   -> sAddrExtCpy
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     52   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     19   ZDO_ParseEPListRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      1     18   ZDO_ParseEndDeviceBindReq
        0     18   -> ZDO_ConvertOTAClusters
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      2      0   ZDO_ParseEndDeviceTimeoutRsp
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     18   ZDO_ParseMgmtBindRsp
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     27   ZDO_ParseMgmtNwkUpdateNotify
        0     24   -> osal_build_uint32
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      2     12   ZDO_ParseNodeDescRsp
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     25   ZDO_ParseSimpleDescBuf
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     19   ZDO_ParseUserDescRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      1     36   ZDO_ProcessBindUnbindReq
        0     32   -> APSME_BindRequest
        0     31   -> APSME_LookupNwkAddr
        0     32   -> APSME_UnBindRequest
        0     31   -> NLME_GetExtAddr
        0     31   -> ZDApp_GetEmptyPendingBindReq
        0     31   -> ZDApp_NVUpdate
        0     31   -> ZDP_NwkAddrReq
        0     36   -> ZDP_SendData
        0     31   -> bindAddrIndexGet
        0     34   -> osal_memcpy
        0     35   -> osal_start_timerEx
        0     31   -> sAddrExtCmp
        0     31   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupExt
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetExtAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> nwkNeighborUpdateNwkAddr
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      0     16   ZDO_ProcessEndDeviceTimeoutReq
        0     16   -> ZDP_SendData
      1     49   ZDO_ProcessMatchDescReq
        0     42   -> NLME_IsAddressBroadcast
        0     42   -> ZDO_ConvertOTAClusters
        0     49   -> ZDP_EPRsp
        0     42   -> osal_mem_alloc
        0     42   -> osal_mem_free
        0     45   -> osal_memcpy
        0     42   -> osal_msg_allocate
        0     42   -> osal_msg_send
      0     27   ZDO_ProcessMgmtBindReq
        0     22   -> APSME_GetRequest
        0     27   -> ZDP_MgmtBindRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     18   -> NLME_SetPollRate
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     66   ZDO_ProcessMgmtLqiReq
        0     61   -> AddrMgrEntryLookupNwk
        0     61   -> AssocCount
        0     61   -> AssocFindDevice
        0     61   -> NLME_GetRequest
        0     66   -> ZDP_MgmtLqiRsp
        0     61   -> osal_mem_alloc
        0     61   -> osal_mem_free
        0     61   -> osal_memset
        0     61   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
      0     24   ZDO_ProcessMgmtRtgReq
        0     19   -> NLME_GetRequest
        0     24   -> ZDP_MgmtRtgRsp
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     41   ZDO_ProcessUserDescSet
        0     41   -> ZDP_SendData
        0     39   -> osal_memcpy
        0     40   -> osal_nv_write
      0     25   ZDO_StartDevice
        0     21   -> NLME_NetworkDiscoveryRequest
        0     21   -> NLME_OrphanJoinRequest
        0     21   -> nwk_ScanJoiningOrphan
        0     25   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      1     12   ZDO_UpdateNwkStatus
        0     12   -> NLME_GetExtAddr
        0     12   -> NLME_GetShortAddr
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_find
        0     12   -> osal_msg_send
        0     12   -> osal_set_event
        0     12   -> zdoSendStateChangeMsg
      1     22   zdoSendStateChangeMsg
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_find
        0     10   -> osal_msg_send
        0     10   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for zdpExternalStateTaskID>
       3  ??Subroutine154_0
       5  ??Subroutine155_0
       1  ??Subroutine156_0
       9  ??Subroutine157_0
       5  ??Subroutine158_0
       5  ??Subroutine159_0
       8  ??Subroutine160_0
       6  ??Subroutine161_0
       5  ??Subroutine162_0
       5  ??Subroutine163_0
       5  ??Subroutine164_0
       6  ??Subroutine165_0
       4  ??Subroutine166_0
       3  ??Subroutine167_0
       5  ??Subroutine168_0
       4  ??Subroutine169_0
       4  ??Subroutine170_0
       4  ??Subroutine171_0
       6  ??Subroutine172_0
       5  ??Subroutine173_0
       4  ??Subroutine174_0
       8  ??Subroutine175_0
       4  ??Subroutine176_0
       5  ??Subroutine177_0
       6  ??Subroutine178_0
       8  ??Subroutine179_0
       5  ??Subroutine180_0
       7  ??Subroutine181_0
       5  ??Subroutine182_0
       3  ??Subroutine183_0
       9  ??Subroutine184_0
       6  ??Subroutine185_0
       6  ??Subroutine186_0
       1  ??Subroutine187_0
       5  ??Subroutine188_0
       6  ??Subroutine189_0
      10  ??Subroutine190_0
       6  ??Subroutine191_0
       5  ??Subroutine192_0
       7  ?Subroutine0
       2  ?Subroutine1
      23  ?Subroutine10
       6  ?Subroutine100
       3  ?Subroutine101
      11  ?Subroutine102
       6  ?Subroutine103
      11  ?Subroutine104
       4  ?Subroutine105
       8  ?Subroutine106
       7  ?Subroutine107
      12  ?Subroutine108
      10  ?Subroutine109
      10  ?Subroutine11
      13  ?Subroutine110
       4  ?Subroutine111
      11  ?Subroutine112
       4  ?Subroutine113
       9  ?Subroutine114
      11  ?Subroutine115
      10  ?Subroutine116
       9  ?Subroutine117
       7  ?Subroutine118
      13  ?Subroutine119
      14  ?Subroutine12
      11  ?Subroutine120
       6  ?Subroutine121
       7  ?Subroutine122
       4  ?Subroutine123
       6  ?Subroutine124
       4  ?Subroutine125
       9  ?Subroutine126
      16  ?Subroutine127
      10  ?Subroutine128
       7  ?Subroutine129
       9  ?Subroutine13
      18  ?Subroutine130
       8  ?Subroutine131
       4  ?Subroutine132
      15  ?Subroutine133
       5  ?Subroutine134
       6  ?Subroutine135
       1  ?Subroutine136
       2  ?Subroutine137
       2  ?Subroutine138
      19  ?Subroutine139
      17  ?Subroutine14
       6  ?Subroutine140
      11  ?Subroutine141
       8  ?Subroutine142
       5  ?Subroutine143
       6  ?Subroutine144
       3  ?Subroutine145
      10  ?Subroutine146
       1  ?Subroutine147
       9  ?Subroutine148
       9  ?Subroutine149
      24  ?Subroutine15
      13  ?Subroutine150
       6  ?Subroutine151
       8  ?Subroutine152
       1  ?Subroutine153
       5  ?Subroutine16
       8  ?Subroutine17
       9  ?Subroutine18
       8  ?Subroutine19
       3  ?Subroutine2
      14  ?Subroutine20
       3  ?Subroutine21
      11  ?Subroutine22
       8  ?Subroutine23
      11  ?Subroutine24
      12  ?Subroutine25
       6  ?Subroutine26
       1  ?Subroutine27
      10  ?Subroutine28
       4  ?Subroutine29
       5  ?Subroutine3
       5  ?Subroutine30
       6  ?Subroutine31
       4  ?Subroutine32
      11  ?Subroutine33
       6  ?Subroutine34
       4  ?Subroutine35
      10  ?Subroutine36
       4  ?Subroutine37
       7  ?Subroutine38
      10  ?Subroutine39
       3  ?Subroutine4
       7  ?Subroutine40
       9  ?Subroutine41
       2  ?Subroutine42
       6  ?Subroutine43
       4  ?Subroutine44
      14  ?Subroutine45
       3  ?Subroutine46
      17  ?Subroutine47
       8  ?Subroutine48
      20  ?Subroutine49
       5  ?Subroutine5
      15  ?Subroutine50
       4  ?Subroutine51
      16  ?Subroutine52
       2  ?Subroutine53
      14  ?Subroutine54
      21  ?Subroutine55
       1  ?Subroutine56
      15  ?Subroutine57
      23  ?Subroutine58
       7  ?Subroutine59
       5  ?Subroutine6
       2  ?Subroutine60
       5  ?Subroutine61
       2  ?Subroutine62
       9  ?Subroutine63
       9  ?Subroutine64
       6  ?Subroutine65
       6  ?Subroutine66
       8  ?Subroutine67
       4  ?Subroutine68
       6  ?Subroutine69
       4  ?Subroutine7
      10  ?Subroutine70
      16  ?Subroutine71
       6  ?Subroutine72
       5  ?Subroutine73
      12  ?Subroutine74
      14  ?Subroutine75
      11  ?Subroutine76
      11  ?Subroutine77
       8  ?Subroutine78
       4  ?Subroutine79
       5  ?Subroutine8
       4  ?Subroutine80
      10  ?Subroutine81
      10  ?Subroutine82
       1  ?Subroutine83
       7  ?Subroutine84
       1  ?Subroutine85
       6  ?Subroutine86
       6  ?Subroutine87
      14  ?Subroutine88
      12  ?Subroutine89
      41  ?Subroutine9
       4  ?Subroutine90
      21  ?Subroutine91
      10  ?Subroutine92
       5  ?Subroutine93
       4  ?Subroutine94
       7  ?Subroutine95
       4  ?Subroutine96
       4  ?Subroutine97
       6  ?Subroutine98
       4  ?Subroutine99
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
      52  ZDOBuildBuf
     104  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     241  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
      43  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
       2  ZDO_EDBind
     192  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      28  ZDO_Init
       6  ZDO_Init::?relay
     208  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
     123  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
      59  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     122  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     366  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
      21  ZDO_ParseEndDeviceTimeoutRsp
       6  ZDO_ParseEndDeviceTimeoutRsp::?relay
     240  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     230  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     277  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     235  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     117  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     162  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     269  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     188  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
      50  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     271  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
      27  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     141  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     120  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     541  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     361  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
     130  ZDO_ProcessEndDeviceTimeoutReq
       6  ZDO_ProcessEndDeviceTimeoutReq::?relay
    1238  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     255  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
      84  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     182  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
     638  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     130  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
      79  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     257  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
      72  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
      72  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
      67  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     133  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     157  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     302  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     198  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      51  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
     143  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  __Constant_3e8
       4  apsChannelMask
       2  matchED
       1  scanCnt
      72  zdoSendStateChangeMsg
       6  zdoSendStateChangeMsg::?relay
       2  zdpExternalStateTaskID

 
 10 487 bytes in segment BANKED_CODE
    276 bytes in segment BANK_RELAYS
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
      4 bytes in segment XDATA_ROM_C
     61 bytes in segment XDATA_Z
 
 10 765 bytes of CODE  memory
      0 bytes of CONST memory (+ 4 bytes shared)
     63 bytes of XDATA memory

Errors: none
Warnings: 1
