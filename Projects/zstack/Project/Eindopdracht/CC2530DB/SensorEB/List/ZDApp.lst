###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                16/Mar/2016  12:50:23
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDApp.c -D
#        NWK_AUTO_POLL -D HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\ZDApp.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\ZDApp.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2014-06-03 18:29:46 -0700 (Tue, 03 Jun 2014) $
      4            Revision:       $Revision: 38789 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          // Init ZDO, but hold and wait for application to start the joining or
     91          // forming network
     92          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     93          
     94          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     95            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     96          #endif
     97          
     98          #if !defined( BEACON_REQUEST_DELAY )
     99            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    100          #endif
    101          
    102          #if !defined( BEACON_REQ_DELAY_MASK )
    103            #define BEACON_REQ_DELAY_MASK       0x007F
    104          #endif
    105          
    106          #define MAX_RESUME_RETRY            3
    107          
    108          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    109          
    110          // Beacon Order Settings (see NLMEDE.h)
    111          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    112          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    113          
    114          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    115          // Additional counts to add to the frame counter when restoring from NV
    116          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    117          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    118          #endif
    119          
    120          // Leave control bits
    121          #define ZDAPP_LEAVE_CTRL_INIT 0
    122          #define ZDAPP_LEAVE_CTRL_SET  1
    123          #define ZDAPP_LEAVE_CTRL_RA   2
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          
    129          #if !defined ZDO_NV_SAVE_RFDs
    130          #define ZDO_NV_SAVE_RFDs  TRUE
    131          #endif
    132          
    133          // Delay time before updating NWK NV data to force fewer writes during high activity.
    134          #if ZDO_NV_SAVE_RFDs
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    136          #else
    137          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    138          #endif
    139          
    140          // Timeout value to process New Devices
    141          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    142          
    143          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    144          #if !defined MAX_PENDING_BIND_REQ
    145          #define MAX_PENDING_BIND_REQ 3
    146          #endif
    147          #endif
    148          
    149          /******************************************************************************
    150           * TYPEDEFS
    151           */
    152          typedef struct
    153          {
    154            void   *next;
    155            uint16 shortAddr;
    156            uint16 timeDelta;
    157          } ZDAppNewDevice_t;
    158          
    159          /*********************************************************************
    160           * GLOBAL VARIABLES
    161           */
    162          
    163          #if defined( LCD_SUPPORTED )
    164            uint8 MatchRsps = 0;
    165          #endif
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          
    181          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    185          
    186          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    188          #endif
    189          
    190          /*********************************************************************
    191           * EXTERNAL VARIABLES
    192           */
    193          
    194          /*********************************************************************
    195           * EXTERNAL FUNCTIONS
    196           */
    197          
    198          /*********************************************************************
    199           * LOCAL FUNCTIONS
    200           */
    201          
    202          void ZDApp_NetworkStartEvt( void );
    203          void ZDApp_DeviceAuthEvt( void );
    204          void ZDApp_SaveNetworkStateEvt( void );
    205          
    206          uint8 ZDApp_ReadNetworkRestoreState( void );
    207          uint8 ZDApp_RestoreNetworkState( void );
    208          void ZDAppDetermineDeviceType( void );
    209          void ZDApp_InitUserDesc( void );
    210          void ZDAppCheckForHoldKey( void );
    211          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    212          void ZDApp_ProcessNetworkJoin( void );
    213          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    214          uint8 ZDApp_RestoreNwkKey( void );
    215          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    216          
    217          void ZDApp_SecInit( uint8 state );
    218          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    219          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    220          
    221          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    222          
    223          void ZDApp_ResetTimerStart( uint16 delay );
    224          void ZDApp_ResetTimerCancel( void );
    225          void ZDApp_LeaveCtrlInit( void );
    226          void ZDApp_LeaveCtrlSet( uint8 ra );
    227          uint8 ZDApp_LeaveCtrlBypass( void );
    228          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    229          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    230                                  uint8 removeChildren );
    231          void ZDApp_NodeProfileSync( uint8 stackProfile );
    232          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    233          void ZDApp_RegisterCBs( void );
    234          void ZDApp_InitZdoCBFunc(void);
    235          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    236          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    237          void ZDApp_InitPendingBind( void );
    238          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    239          void ZDApp_AgeOutPendingBindEntry( void );
    240          #endif
    241          
    242          /*********************************************************************
    243           * LOCAL VARIABLES
    244           */
    245          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    246          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    247          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    248          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    249          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    250          
    251          #if defined( HOLD_AUTO_START )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    252            devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    253          #else
    254            devStates_t devState = DEV_INIT;
    255          #endif
    256          
    257          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    260                                  // to parent. Set to make the device do an Orphan scan.
    261          #else
    262            // Set the default to coodinator
    263            devStartModes_t devStartMode = MODE_HARD;
    264          #endif
    265          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    266          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    267          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    268          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    269          {
    270            ZDO_EP,
    271            &ZDAppTaskID,
    272            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    273            (afNetworkLatencyReq_t)0            // No Network Latency req
    274          };
    275          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    276          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    277          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    278          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    279          
    280          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    281          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    282          
    283          /*********************************************************************
    284           * @fn      ZDApp_Init
    285           *
    286           * @brief   ZDApp Initialization function.
    287           *
    288           * @param   task_id - ZDApp Task ID
    289           *
    290           * @return  None
    291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    292          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    293          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    294            // Save the task ID
    295            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    296          
    297            // Initialize the ZDO global device short address storage
    298            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    299            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    300            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    301          
    302            // Check for manual "Hold Auto Start"
    303            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function HalKeyRead
   \   00001C   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   00001F   E9           MOV     A,R1
   \   000020   90....       MOV     DPTR,#zdappHoldKeys
   \   000023   F0           MOVX    @DPTR,A
   \   000024   6401         XRL     A,#0x1
   \   000026   7005         JNZ     ??ZDApp_Init_0
   \   000028   90....       MOV     DPTR,#devState
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    304          
    305            // Initialize ZDO items and setup the device - type of device to create.
    306            ZDO_Init();
   \                     ??ZDApp_Init_0:
   \   00002D                ; Setup parameters for call to function ZDO_Init
   \   00002D   12....       LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
    307          
    308            // Register the endpoint description with the AF
    309            // This task doesn't have a Simple description, but we still need
    310            // to register the endpoint.
    311            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000030                ; Setup parameters for call to function afRegister
   \   000030   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000032   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000034   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    312          
    313          #if defined( ZDO_USERDESC_RESPONSE )
    314            ZDApp_InitUserDesc();
    315          #endif // ZDO_USERDESC_RESPONSE
    316          
    317            // Start the device?
    318            if ( devState != DEV_HOLD )
   \   000037   90....       MOV     DPTR,#devState
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6009         JZ      ??ZDApp_Init_1
    319            {
    320              ZDOInitDevice( 0 );
   \   00003D                ; Setup parameters for call to function ZDOInitDevice
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000044   8014         SJMP    ??ZDApp_Init_2
    321            }
    322            else
    323            {
    324              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_1:
   \   000046                ; Setup parameters for call to function ZDOInitDevice
   \   000046   7AFF         MOV     R2,#-0x1
   \   000048   7BFF         MOV     R3,#-0x1
   \   00004A   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
    325              // Blink LED to indicate HOLD_START
    326              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   00004D                ; Setup parameters for call to function HalLedBlink
   \   00004D   7CF4         MOV     R4,#-0xc
   \   00004F   7D01         MOV     R5,#0x1
   \   000051   7B32         MOV     R3,#0x32
   \   000053   7A00         MOV     R2,#0x0
   \   000055   7908         MOV     R1,#0x8
   \   000057   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    327            }
    328          
    329            // Initialize the ZDO callback function pointers zdoCBFunc[]
    330            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_2:
   \   00005A   78..         MOV     R0,#zdoCBFunc & 0xff
   \   00005C   79..         MOV     R1,#(zdoCBFunc >> 8) & 0xff
   \                     ??ZDApp_Init_3:
   \   00005E   8882         MOV     DPL,R0
   \   000060   8983         MOV     DPH,R1
   \   000062   E4           CLR     A
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   F0           MOVX    @DPTR,A
   \   000066   E8           MOV     A,R0
   \   000067   2402         ADD     A,#0x2
   \   000069   F8           MOV     R0,A
   \   00006A   5001         JNC     ??ZDApp_Init_4
   \   00006C   09           INC     R1
   \                     ??ZDApp_Init_4:
   \   00006D   64..         XRL     A,#(zdoCBFunc + 18) & 0xff
   \   00006F   7003         JNZ     ??ZDApp_Init_5
   \   000071   E9           MOV     A,R1
   \   000072   64..         XRL     A,#((zdoCBFunc + 18) >> 8) & 0xff
   \                     ??ZDApp_Init_5:
   \   000074   70E8         JNZ     ??ZDApp_Init_3
    331          
    332            ZDApp_RegisterCBs();
   \   000076                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000076   12....       LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    333          
    334          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    335          #if defined ( REFLECTOR )
    336            ZDApp_InitPendingBind();
   \   000079                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000079   12....       LCALL   `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
    337          #endif
    338          #endif
    339          } /* ZDApp_Init() */
   \   00007C   02....       LJMP    ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    340          
    341          /*********************************************************************
    342           * @fn          ZDApp_SecInit
    343           *
    344           * @brief       ZDApp initialize security.
    345           *
    346           * @param       state - device initialization state
    347           *
    348           * @return      none
    349           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    350          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    351          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    352            uint8 zgPreConfigKey[SEC_KEY_LEN];
    353          
    354            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    355            {
    356              // Set the Trust Center bit
    357              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    358            }
    359          
    360            // Initialize ZigBee Device Security Manager
    361            ZDSecMgrInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrInit
   \   000005   12....       LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    362          
    363            if ( ZG_SECURE_ENABLED )
    364            {
    365              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    366              {
    367                nwkFrameCounter = 0;
    368          
    369                if( _NIB.nwkKeyLoaded == FALSE )
    370                {
    371                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    372                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    373                  {
    374                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
    375                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
    376                      SSP_SwitchNwkKey( 0 );
    377          
    378                      // clear local copy of key
    379                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    380                  }
    381                }
    382              }
    383          
    384              // clean the new devices list when Security module is initialized
    385              if ( ZDApp_NewDeviceList != NULL )
    386              {
    387                ZDAppNewDevice_t *pNewDeviceNext;
    388          
    389                while ( ZDApp_NewDeviceList )
    390                {
    391                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    392                  osal_mem_free( ZDApp_NewDeviceList );
    393                  ZDApp_NewDeviceList = pNewDeviceNext;
    394                }
    395              }
    396            }
    397          }
   \   000008   02....       LJMP    ??Subroutine54_0 & 0xFFFF
    398          
    399          /*********************************************************************
    400           * @fn      ZDApp_event_loop()
    401           *
    402           * @brief   Main event loop for Zigbee device objects task. This function
    403           *          should be called at periodic intervals.
    404           *
    405           * @param   task_id - Task ID
    406           * @param   events  - Bitmap of events
    407           *
    408           * @return  none
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    412            uint8 *msg_ptr;
    413          
    414            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7032         JNZ     ??ZDApp_event_loop_0
    415            {
    416              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    417              {
    418                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    419          
    420                // Release the memory
    421                osal_msg_deallocate( msg_ptr );
    422              }
    423          
    424              // Return unprocessed events
    425              return (events ^ SYS_EVENT_MSG);
    426            }
    427          
    428            if ( events & ZDO_NETWORK_INIT )
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   5045         JNC     ??ZDApp_event_loop_1
    429            {
    430              // Initialize apps and start the network
    431              devState = DEV_INIT;
   \   000012   90....       MOV     DPTR,#devState
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ??Subroutine45_0 & 0xFFFF
    432              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_64:
   \   00001A   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    433          
    434              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    435                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   00001D                ; Setup parameters for call to function ZDO_StartDevice
   \   00001D   7C0F         MOV     R4,#0xf
   \   00001F   7B0F         MOV     R3,#0xf
   \   000021   90....       MOV     DPTR,#devStartMode
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FA           MOV     R2,A
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   5407         ANL     A,#0x7
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    436          
    437              // Return unprocessed events
    438              return (events ^ ZDO_NETWORK_INIT);
   \   000030   EE           MOV     A,R6
   \   000031   6401         XRL     A,#0x1
   \   000033   8050         SJMP    ??ZDApp_event_loop_2
    439            }
   \                     ??ZDApp_event_loop_3:
   \   000035                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000035   12....       LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000038                ; Setup parameters for call to function osal_msg_deallocate
   \   000038   AA..         MOV     R2,?V0
   \   00003A   AB..         MOV     R3,?V1
   \   00003C   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003F                ; Setup parameters for call to function osal_msg_receive
   \   00003F   90....       MOV     DPTR,#ZDAppTaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000047   8A..         MOV     ?V0,R2
   \   000049   8B..         MOV     ?V1,R3
   \   00004B   EA           MOV     A,R2
   \   00004C   45..         ORL     A,?V1
   \   00004E   70E5         JNZ     ??ZDApp_event_loop_3
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   EF           MOV     A,R7
   \   000053   6480         XRL     A,#0x80
   \   000055   8063         SJMP    ??ZDApp_event_loop_4
    440          
    441            if ( ZSTACK_ROUTER_BUILD )
    442            {
    443              if ( events & ZDO_NETWORK_START )
    444              {
    445                ZDApp_NetworkStartEvt();
    446          
    447                // Return unprocessed events
    448                return (events ^ ZDO_NETWORK_START);
    449              }
    450          
    451              if ( events & ZDO_ROUTER_START )
    452              {
    453                if ( nwkStatus == ZSuccess )
    454                {
    455                  if ( devState == DEV_END_DEVICE )
    456                    devState = DEV_ROUTER;
    457          
    458                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    459                }
    460                else
    461                {
    462                  // remain as end device
    463                }
    464                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    465          
    466                // Return unprocessed events
    467                return (events ^ ZDO_ROUTER_START);
    468              }
    469            }
    470          
    471            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_1:
   \   000057   5410         ANL     A,#0x10
   \   000059   602E         JZ      ??ZDApp_event_loop_5
    472            {
    473              ZDO_UpdateNwkStatus( devState );
   \   00005B                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   00005B   90....       MOV     DPTR,#devState
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   12....       LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    474          
    475              // At start up, do one MTO route discovery if the device is a concentrator
    476              if ( zgConcentratorEnable == TRUE )
   \   000063   90....       MOV     DPTR,#zgConcentratorEnable
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6401         XRL     A,#0x1
   \   000069   7017         JNZ     ??ZDApp_event_loop_6
    477              {
    478                // Start next event
    479                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   00006B                ; Setup parameters for call to function osal_start_timerEx
   \   00006B   90....       MOV     DPTR,#__Constant_64
   \   00006E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000071   7A00         MOV     R2,#0x0
   \   000073   7B08         MOV     R3,#0x8
   \   000075   90....       MOV     DPTR,#NWK_TaskID
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F9           MOV     R1,A
   \   00007A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
    480              }
    481          
    482              // Return unprocessed events
    483              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_6:
   \   000082   EE           MOV     A,R6
   \   000083   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   000085   FA           MOV     R2,A
   \   000086   EF           MOV     A,R7
   \   000087   8031         SJMP    ??ZDApp_event_loop_4
    484            }
    485          
    486            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_5:
   \   000089   EE           MOV     A,R6
   \   00008A   5408         ANL     A,#0x8
   \   00008C   6006         JZ      ??ZDApp_event_loop_7
    487            {
    488              // User defined logic
    489          
    490              // Return unprocessed events
    491              return (events ^ ZDO_COMMAND_CNF);
   \   00008E   EE           MOV     A,R6
   \   00008F   6408         XRL     A,#0x8
   \   000091   FA           MOV     R2,A
   \   000092   802D         SJMP    ??ZDApp_event_loop_8
    492            }
    493          
    494            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_7:
   \   000094   EF           MOV     A,R7
   \   000095   5401         ANL     A,#0x1
   \   000097   6005         JZ      ??ZDApp_event_loop_9
    495            {
    496              ZDApp_SaveNetworkStateEvt();
    497          
    498              // Return unprocessed events
    499              return (events ^ ZDO_NWK_UPDATE_NV);
   \   000099   EF           MOV     A,R7
   \   00009A   6401         XRL     A,#0x1
   \   00009C   801C         SJMP    ??ZDApp_event_loop_4
    500            }
    501          
    502            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_9:
   \   00009E   EE           MOV     A,R6
   \   00009F   5404         ANL     A,#0x4
   \   0000A1   600A         JZ      ??ZDApp_event_loop_10
    503            {
    504          #ifdef ZBA_FALLBACK_NWKKEY
    505              if ( devState == DEV_END_DEVICE_UNAUTH )
    506              {
    507                ZDSecMgrFallbackNwkKey();
    508              }
    509              else
    510          #endif
    511              {
    512                // Set the NV startup option to force a "new" join.
    513                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000A3                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000A3   7A02         MOV     R2,#0x2
   \   0000A5   79FF         MOV     R1,#-0x1
   \   0000A7   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    514          
    515                // The device has been in the UNAUTH state, so reset
    516                // Note: there will be no return from this call
    517                SystemResetSoft();
   \   0000AA                ; Setup parameters for call to function Onboard_soft_reset
   \   0000AA   12....       LCALL   Onboard_soft_reset & 0xFFFF
    518              }
    519            }
    520          
    521          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    522            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_10:
   \   0000AD   EF           MOV     A,R7
   \   0000AE   5410         ANL     A,#0x10
   \   0000B0   600B         JZ      ??ZDApp_event_loop_11
    523            {
    524          #if defined ( REFLECTOR )
    525              ZDApp_AgeOutPendingBindEntry();
   \   0000B2                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   0000B2   12....       LCALL   `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
    526          #endif
    527              // Return unprocessed events
    528              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   0000B5   EE           MOV     A,R6
   \   0000B6   FA           MOV     R2,A
   \   0000B7   EF           MOV     A,R7
   \   0000B8   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_4:
   \   0000BA   FB           MOV     R3,A
   \   0000BB   8004         SJMP    ??ZDApp_event_loop_8
    529            }
    530          #endif
    531          
    532            if ( ZG_SECURE_ENABLED )
    533            {
    534              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    535            }
    536            else
    537            {
    538              // Discard or make more handlers
    539              return 0;
   \                     ??ZDApp_event_loop_11:
   \   0000BD   7A00         MOV     R2,#0x0
   \   0000BF   7B00         MOV     R3,#0x0
    540            }
   \                     ??ZDApp_event_loop_8:
   \   0000C1   02....       LJMP    ??Subroutine52_0 & 0xFFFF
    541          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001   7A10         MOV     R2,#0x10
   \   000003   7B00         MOV     R3,#0x0
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    542          
    543          /*********************************************************************
    544           * @fn      ZDApp_ProcessSecEvent()
    545           *
    546           * @brief   Process incoming security events.
    547           *
    548           * @param   task_id - Task ID
    549           * @param   events  - Bitmap of events
    550           *
    551           * @return  none
    552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    553          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    554          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    555            (void)task_id;  // Intentionally unreferenced parameter
    556          
    557            if ( ZSTACK_ROUTER_BUILD )
    558            {
    559              if ( events & ZDO_NEW_DEVICE )
    560              {
    561                // process the new device event
    562                if ( ZDApp_NewDeviceList )
    563                {
    564                  ZDAppNewDevice_t *pNewDevice;
    565                  uint16 timeDelta;
    566          
    567                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
    568          
    569                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    570                  osal_mem_free( ZDApp_NewDeviceList );
    571                  ZDApp_NewDeviceList = pNewDevice;
    572          
    573                  if ( pNewDevice )
    574                  {
    575                    timeDelta = pNewDevice->timeDelta;
    576                    pNewDevice = pNewDevice->next;
    577          
    578                    while ( pNewDevice )
    579                    {
    580                      pNewDevice->timeDelta -= timeDelta;
    581                      pNewDevice = pNewDevice->next;
    582                    }
    583          
    584                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
    585                  }
    586                }
    587          
    588                // Return unprocessed events
    589                return (events ^ ZDO_NEW_DEVICE);
    590              }
    591            }
    592          
    593            if ( events & ZDO_DEVICE_AUTH )
   \   00000E   EE           MOV     A,R6
   \   00000F   5480         ANL     A,#0x80
   \   000011   600A         JZ      ??ZDApp_ProcessSecEvent_0
    594            {
    595              ZDApp_DeviceAuthEvt();
   \   000013                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   000013   12....       LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    596          
    597              // Return unprocessed events
    598              return (events ^ ZDO_DEVICE_AUTH);
   \   000016   EE           MOV     A,R6
   \   000017   6480         XRL     A,#0x80
   \   000019   FA           MOV     R2,A
   \   00001A   EF           MOV     A,R7
   \   00001B   8058         SJMP    ??ZDApp_ProcessSecEvent_1
    599            }
    600          
    601            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   00001D   EF           MOV     A,R7
   \   00001E   5402         ANL     A,#0x2
   \   000020   603C         JZ      ??ZDApp_ProcessSecEvent_2
    602            {
    603              ZDApp_SaveNwkKey();
   \   000022                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   000022   AA..         MOV     R2,?XSP + 0
   \   000024   AB..         MOV     R3,?XSP + 1
   \   000026   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   \   000029                ; Setup parameters for call to function osal_nv_write
   \   000029   A8..         MOV     R0,?XSP + 0
   \   00002B   A9..         MOV     R1,?XSP + 1
   \   00002D   88..         MOV     ?V0,R0
   \   00002F   89..         MOV     ?V1,R1
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..15       MOV     ?V0,#0x15
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A82         MOV     R2,#-0x7e
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000054   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    604          
    605              // Return unprocessed events
    606              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059   EF           MOV     A,R7
   \   00005A   6402         XRL     A,#0x2
   \   00005C   8017         SJMP    ??ZDApp_ProcessSecEvent_1
    607            }
    608          
    609            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   00005E   EF           MOV     A,R7
   \   00005F   5408         ANL     A,#0x8
   \   000061   6005         JZ      ??ZDApp_ProcessSecEvent_3
    610            {
    611          #if defined (NV_RESTORE)
    612              ZDSecMgrSaveApsLinkKey();
    613          #endif // (NV_RESTORE)
    614          
    615              // Return unprocessed events
    616              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   000063   EF           MOV     A,R7
   \   000064   6408         XRL     A,#0x8
   \   000066   800D         SJMP    ??ZDApp_ProcessSecEvent_1
    617            }
    618          
    619            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000068   EF           MOV     A,R7
   \   000069   5404         ANL     A,#0x4
   \   00006B   600B         JZ      ??ZDApp_ProcessSecEvent_4
    620            {
    621              ZDSecMgrSaveTCLinkKey();
   \   00006D                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   00006D   12....       LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    622          
    623              // Return unprocessed events
    624              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   000070   EE           MOV     A,R6
   \   000071   FA           MOV     R2,A
   \   000072   EF           MOV     A,R7
   \   000073   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000075   FB           MOV     R3,A
   \   000076   8004         SJMP    ??ZDApp_ProcessSecEvent_5
    625            }
    626          
    627            // Discard or make more handlers
    628            return 0;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_5:
   \   00007C   02....       LJMP    ?Subroutine8 & 0xFFFF
    629          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine48_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    630          
    631          /*********************************************************************
    632           * Application Functions
    633           */
    634          
    635          /*********************************************************************
    636           * @fn      ZDOInitDevice
    637           *
    638           * @brief   Start the device in the network.  This function will read
    639           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    640           *   restore the network state of the device.
    641           *
    642           * @param   startDelay - timeDelay to start device (in milliseconds).
    643           *                       There is a jitter added to this delay:
    644           *                       ((NWK_START_DELAY + startDelay)
    645           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    646           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    647           *                       this function will hold the network init. Application
    648           *                       can start the device.
    649           *
    650           * NOTE:    If the application would like to force a "new" join, the
    651           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    652           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    653           *          this function. "new" join means to not restore the network
    654           *          state of the device. Use zgWriteStartupOptions() to set these
    655           *          options.
    656           *
    657           * @return
    658           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    659           *          restored.
    660           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    661           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    662           *          it could mean that there was no network state to restore.
    663           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    664           *          with the rejoin option set to TRUE.  So, the device was not
    665           *          started in the network (one time only).  The next time this
    666           *          function is called it will start.
    667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    668          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    669          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    670            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    671            uint16 extendedDelay = 0;
    672          
    673            if ( devState == DEV_HOLD )
   \   000009   90....       MOV     DPTR,#devState
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7005         JNZ     ??ZDOInitDevice_0
    674            {
    675              // Initialize the RAM items table, in case an NV item has been updated.
    676              zgInitItems( FALSE );
   \   00000F                ; Setup parameters for call to function zgInitItems
   \   00000F   7900         MOV     R1,#0x0
   \   000011   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    677            }
    678          
    679            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000014                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000014   12....       LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    680            //devtag.071807.todo - fix this temporary solution
    681            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000017   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   90....       MOV     DPTR,#_NIB + 14
   \   00001E   F0           MOVX    @DPTR,A
    682          
    683          #if defined ( NV_RESTORE )
    684            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    685            // while booting to skip past NV Restore.
    686            if ( zdappHoldKeys == SW_BYPASS_NV )
    687            {
    688              zdappHoldKeys = 0;   // Only once
    689              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    690            }
    691            else
    692            {
    693              // Determine if NV should be restored
    694              networkStateNV = ZDApp_ReadNetworkRestoreState();
    695            }
    696          
    697            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    698            {
    699              networkStateNV = ZDApp_RestoreNetworkState();
    700            }
    701            else
    702            {
    703              // Wipe out the network state in NV
    704              NLME_InitNV();
    705              NLME_SetDefaultNV();
    706              // clear NWK key values
    707              ZDSecMgrClearNVKeyValues();
    708            }
    709          #endif
    710          
    711            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    712            {
    713              ZDAppDetermineDeviceType();
   \   00001F                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00001F   12....       LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    714          
    715              // Only delay if joining network - not restoring network state
    716              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    717                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000022                ; Setup parameters for call to function osal_rand
   \   000022   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000025   EA           MOV     A,R2
   \   000026   547F         ANL     A,#0x7f
   \   000028   F8           MOV     R0,A
   \   000029   E5..         MOV     A,?V0
   \   00002B   28           ADD     A,R0
   \   00002C   F8           MOV     R0,A
   \   00002D   E4           CLR     A
   \   00002E   35..         ADDC    A,?V1
   \   000030   F9           MOV     R1,A
   \   000031   E8           MOV     A,R0
   \   000032   2464         ADD     A,#0x64
   \   000034   FE           MOV     R6,A
   \   000035   E4           CLR     A
   \   000036   39           ADDC    A,R1
   \   000037   FF           MOV     R7,A
    718            }
    719          
    720            // Initialize the security for type of device
    721            ZDApp_SecInit( networkStateNV );
   \   000038                ; Setup parameters for call to function ZDSecMgrInit
   \   000038   7901         MOV     R1,#0x1
   \   00003A   12....       LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    722          
    723            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   00003D   74FF         MOV     A,#-0x1
   \   00003F   65..         XRL     A,?V0
   \   000041   7004         JNZ     ??ZDOInitDevice_1
   \   000043   74FF         MOV     A,#-0x1
   \   000045   65..         XRL     A,?V1
   \                     ??ZDOInitDevice_1:
   \   000047   7003         JNZ     $+5
   \   000049   02....       LJMP    ??ZDOInitDevice_2 & 0xFFFF
    724            {
    725              devState = DEV_INIT;    // Remove the Hold state
   \   00004C   90....       MOV     DPTR,#devState
   \   00004F   7401         MOV     A,#0x1
   \   000051   F0           MOVX    @DPTR,A
    726          
    727              // Initialize leave control logic
    728              ZDApp_LeaveCtrlInit();
   \   000052                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000052   12....       LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    729          
    730              // Check leave control reset settings
    731              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   000055   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000058   E0           MOVX    A,@DPTR
   \   000059   A2E0         MOV     C,0xE0 /* A   */.0
   \   00005B   502A         JNC     ??ZDOInitDevice_3
   \   00005D   A2E1         MOV     C,0xE0 /* A   */.1
   \   00005F   4005         JC      ??ZDOInitDevice_4
   \   000061   90....       MOV     DPTR,#devState
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   \                     ??ZDOInitDevice_4:
   \   000066   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   75..01       MOV     ?V0,#0x1
   \   00006F   75..00       MOV     ?V1,#0x0
   \   000072   78..         MOV     R0,#?V0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   7C00         MOV     R4,#0x0
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   7A85         MOV     R2,#-0x7b
   \   00007D   7B00         MOV     R3,#0x0
   \   00007F   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000082   7404         MOV     A,#0x4
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
    732          
    733              // Leave may make the hold state come back
    734              if ( devState == DEV_HOLD )
   \                     ??ZDOInitDevice_3:
   \   000087   90....       MOV     DPTR,#devState
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   7017         JNZ     ??ZDOInitDevice_5
    735              {
    736                // Set the NV startup option to force a "new" join.
    737                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00008D                ; Setup parameters for call to function zgWriteStartupOptions
   \   00008D   7A02         MOV     R2,#0x2
   \   00008F   79FF         MOV     R1,#-0x1
   \   000091   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    738          
    739                // Notify the applications
    740                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000094                ; Setup parameters for call to function osal_set_event
   \   000094   7A10         MOV     R2,#0x10
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#ZDAppTaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    741          
    742                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   0000A0   7902         MOV     R1,#0x2
   \   0000A2   803B         SJMP    ??ZDOInitDevice_6
    743              }
    744          
    745              // Trigger the network start
    746              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_5:
   \   0000A4   EE           MOV     A,R6
   \   0000A5   4F           ORL     A,R7
   \   0000A6   6021         JZ      ??ZDOInitDevice_7
   \   0000A8                ; Setup parameters for call to function osal_start_timerEx
   \   0000A8   8E..         MOV     ?V0,R6
   \   0000AA   8F..         MOV     ?V1,R7
   \   0000AC   E4           CLR     A
   \   0000AD   F5..         MOV     ?V2,A
   \   0000AF   F5..         MOV     ?V3,A
   \   0000B1   78..         MOV     R0,#?V0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000B6   7A01         MOV     R2,#0x1
   \   0000B8   7B00         MOV     R3,#0x0
   \   0000BA   90....       MOV     DPTR,#ZDAppTaskID
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F9           MOV     R1,A
   \   0000BF   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000C2   7404         MOV     A,#0x4
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C7   800C         SJMP    ??ZDOInitDevice_2
   \                     ??ZDOInitDevice_7:
   \   0000C9                ; Setup parameters for call to function osal_set_event
   \   0000C9   7A01         MOV     R2,#0x1
   \   0000CB   7B00         MOV     R3,#0x0
   \   0000CD   90....       MOV     DPTR,#ZDAppTaskID
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F9           MOV     R1,A
   \   0000D2   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    747            }
    748          
    749            // set broadcast address mask to support broadcast filtering
    750            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_2:
   \   0000D5                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0000D5   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F9           MOV     R1,A
   \   0000DA   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    751          
    752            return ( networkStateNV );
   \   0000DD   7901         MOV     R1,#0x1
   \                     ??ZDOInitDevice_6:
   \   0000DF   02....       LJMP    ??Subroutine52_0 & 0xFFFF
    753          }
    754          
    755          /*********************************************************************
    756           * @fn      ZDApp_ReadNetworkRestoreState
    757           *
    758           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    759           *          or not to restore the network state.
    760           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    761           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    762           *
    763           * @param   none
    764           *
    765           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    766           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    767           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    768           *          ZCD_NV_STARTUP_OPTION
    769           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    770          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    771          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    772            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    773          
    774            // Look for the New Network State option.
    775            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000E   5002         JNC     ??ZDApp_ReadNetworkRestoreState_0
    776            {
    777              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV     R6,#0x1
    778            }
    779          
    780            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV     A,R6
   \   000013   F9           MOV     R1,A
   \   000014   02....       LJMP    ??Subroutine54_0 & 0xFFFF
    781          }
    782          
    783          /*********************************************************************
    784           * @fn      ZDAppDetermineDeviceType()
    785           *
    786           * @brief   Determines the type of device to start.
    787           *
    788           *          Looks at zgDeviceLogicalType and determines what type of
    789           *          device to start.  The types are:
    790           *            ZG_DEVICETYPE_COORDINATOR
    791           *            ZG_DEVICETYPE_ROUTER
    792           *            ZG_DEVICETYPE_ENDDEVICE
    793           *
    794           * @param   none
    795           *
    796           * @return  none
    797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    798          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    799          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    800            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    801            {
    802              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    803              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   8030         SJMP    ??ZDAppDetermineDeviceType_1
    804            }
    805            else
    806            {
    807              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700B         JNZ     ??ZDAppDetermineDeviceType_2
    808                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   4401         ORL     A,#0x1
   \   000025   800E         SJMP    ??ZDAppDetermineDeviceType_3
    809              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6402         XRL     A,#0x2
   \   00002A   700A         JNZ     ??ZDAppDetermineDeviceType_4
    810                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   54F8         ANL     A,#0xf8
   \   000032   F0           MOVX    @DPTR,A
   \   000033   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000035   F0           MOVX    @DPTR,A
    811          
    812              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    813              // The device shall do rejoin the network. Otherwise, do normal join
    814              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000036                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000036   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000038   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003A   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003D   E9           MOV     A,R1
   \   00003E   90....       MOV     DPTR,#devStartMode
   \   000041   7003         JNZ     ??ZDAppDetermineDeviceType_5
    815              {
    816                devStartMode = MODE_JOIN;     // Assume joining
   \   000043   E4           CLR     A
   \   000044   8002         SJMP    ??ZDAppDetermineDeviceType_1
    817              }
    818              else
    819              {
    820                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000046   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000048   F0           MOVX    @DPTR,A
    821              }
    822            }
    823          }
   \   000049   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    824          
    825          /*********************************************************************
    826           * @fn      ZDApp_NetworkStartEvt()
    827           *
    828           * @brief   Process the Network Start Event
    829           *
    830           * @param   none
    831           *
    832           * @return  none
    833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    834          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    835          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    836            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    837            {
    838              // Successfully started a ZigBee network
    839              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    840              {
    841                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    842              }
    843          
    844              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    845              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802E         SJMP    ??ZDApp_NetworkStartEvt_2
    846            }
    847            else
    848            {
    849              // Try again with a higher energy threshold
    850              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00001F   E9           MOV     A,R1
   \   000020   7900         MOV     R1,#0x0
   \   000022   2410         ADD     A,#0x10
   \   000024   5001         JNC     ??ZDApp_NetworkStartEvt_3
   \   000026   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000027   C3           CLR     C
   \   000028   94FF         SUBB    A,#-0x1
   \   00002A   E9           MOV     A,R1
   \   00002B   9400         SUBB    A,#0x0
   \   00002D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00002F   65D0         XRL     A,PSW
   \   000031   33           RLC     A
   \   000032   5010         JNC     ??ZDApp_NetworkStartEvt_4
    851              {
    852                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000034                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000034   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000037   E9           MOV     A,R1
   \   000038   F8           MOV     R0,A
   \   000039                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000039   7410         MOV     A,#0x10
   \   00003B   29           ADD     A,R1
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    853                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000040                ; Setup parameters for call to function osal_set_event
   \   000040   7A01         MOV     R2,#0x1
   \   000042   8008         SJMP    ??ZDApp_NetworkStartEvt_5
    854              }
    855              else
    856              {
    857                // Failed to start network. Enter a dormant state (until user intervenes)
    858                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000044   90....       MOV     DPTR,#devState
   \   000047   7401         MOV     A,#0x1
   \   000049   F0           MOVX    @DPTR,A
    859                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00004A                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00004A   7A10         MOV     R2,#0x10
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   90....       MOV     DPTR,#ZDAppTaskID
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    860              }
    861            }
    862          }
   \   000056   02....       LJMP    ?Subroutine3 & 0xFFFF
    863          
    864          /*********************************************************************
    865           * @fn      ZDApp_DeviceAuthEvt()
    866           *
    867           * @brief   Process the Device Authentic Event
    868           *
    869           * @param   none
    870           *
    871           * @return  none
    872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    873          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    874          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    875            // received authentication from trust center
    876            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6405         XRL     A,#0x5
   \   000010   6003         JZ      $+5
   \   000012   02....       LJMP    ??ZDApp_DeviceAuthEvt_0 & 0xFFFF
    877            {
    878              // Stop the reset timer so it doesn't reset
    879              ZDApp_ResetTimerCancel();
   \   000015                ; Setup parameters for call to function osal_stop_timerEx
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7B00         MOV     R3,#0x0
   \   000019   90....       MOV     DPTR,#ZDAppTaskID
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000021                ; Setup parameters for call to function osal_clear_event
   \   000021   7A04         MOV     R2,#0x4
   \   000023   7B00         MOV     R3,#0x0
   \   000025   90....       MOV     DPTR,#ZDAppTaskID
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
    880          
    881              devState = DEV_END_DEVICE;
   \   00002D   12....       LCALL   ?Subroutine11 & 0xFFFF
    882              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_62:
   \   000030   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    883          
    884              // Set the Power Manager Device
    885          #if defined ( POWER_SAVING )
    886              osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000033                ; Setup parameters for call to function osal_pwrmgr_device
   \   000033   7901         MOV     R1,#0x1
   \   000035   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    887          #endif
    888          
    889              if ( ZSTACK_ROUTER_BUILD )
    890              {
    891                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
    892                {
    893                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    894                  NLME_StartRouterRequest( 0, 0, false );
    895                }
    896              }
    897          
    898              // Notify to save info into NV
    899              ZDApp_NVUpdate();
    900          
    901              // Save off the security
    902              ZDApp_SaveNwkKey();
   \   000038                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   000038   AA..         MOV     R2,?XSP + 0
   \   00003A   AB..         MOV     R3,?XSP + 1
   \   00003C   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   \   00003F                ; Setup parameters for call to function osal_nv_write
   \   00003F   A8..         MOV     R0,?XSP + 0
   \   000041   A9..         MOV     R1,?XSP + 1
   \   000043   88..         MOV     ?V0,R0
   \   000045   89..         MOV     ?V1,R1
   \   000047   78..         MOV     R0,#?V0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..15       MOV     ?V0,#0x15
   \   00004F   75..00       MOV     ?V1,#0x0
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   7C00         MOV     R4,#0x0
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7A82         MOV     R2,#-0x7e
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000062   7404         MOV     A,#0x4
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   \   000067   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00006A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    903          
    904              ZDApp_AnnounceNewAddress();
   \   00006D                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00006D   7A00         MOV     R2,#0x0
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   \   000074                ; Setup parameters for call to function NLME_GetExtAddr
   \   000074   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000077   8A..         MOV     ?V0,R2
   \   000079   8B..         MOV     ?V1,R3
   \   00007B   AE..         MOV     R6,?V0
   \   00007D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00007D   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000080                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000080   75..00       MOV     ?V0,#0x0
   \   000083   78..         MOV     R0,#?V0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000088   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00008B   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00008E   7401         MOV     A,#0x1
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000093   7A00         MOV     R2,#0x0
   \   000095   7B00         MOV     R3,#0x0
   \   000097   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
    905          
    906              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    907                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    908          #if defined ( ZIGBEE_CHILD_AGING )
    909                    && (zgChildAgingEnable == TRUE)
    910          #endif // ZIGBEE_CHILD_AGING
    911                       ) )
   \   00009A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000A0   5008         JNC     ??ZDApp_DeviceAuthEvt_1
   \   0000A2   90....       MOV     DPTR,#zgChildAgingEnable
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6401         XRL     A,#0x1
   \   0000A8   7009         JNZ     ??ZDApp_DeviceAuthEvt_0
    912              {
    913                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   0000AA                ; Setup parameters for call to function NLME_SetPollRate
   \   0000AA   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   0000AD   12....       LCALL   ??Subroutine56_0 & 0xFFFF
    914              }
    915            }
   \                     ??CrossCallReturnLabel_83:
   \   0000B0   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    916            else
    917            {
    918              ZDApp_NVUpdate();
    919            }
    920          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   0000B3   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   7406         MOV     A,#0x6
   \   000005                REQUIRE ??Subroutine45_0
   \   000005                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    921          
    922          /*********************************************************************
    923           * @fn      ZDApp_SaveNetworkStateEvt()
    924           *
    925           * @brief   Process the Save the Network State Event
    926           *
    927           * @param   none
    928           *
    929           * @return  none
    930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    931          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    932          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    933          #if defined ( NV_RESTORE )
    934           #if defined ( NV_TURN_OFF_RADIO )
    935            // Turn off the radio's receiver during an NV update
    936            uint8 RxOnIdle;
    937            uint8 x = false;
    938            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    939            ZMacSetReq( ZMacRxOnIdle, &x );
    940           #endif
    941          
    942            // Update the Network State in NV
    943            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    944                           NWK_NV_DEVICELIST_ENABLE |
    945                           NWK_NV_BINDING_ENABLE    |
    946                           NWK_NV_ADDRMGR_ENABLE );
    947          
    948            // Reset the NV startup option to resume from NV by
    949            // clearing the "New" join option.
    950            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    951          
    952           #if defined ( NV_TURN_OFF_RADIO )
    953            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    954           #endif
    955          #endif // NV_RESTORE
    956          }
   \   000000   02....       LJMP    ?BRET
    957          
    958          #if defined ( NV_RESTORE )
    959          /*********************************************************************
    960           * @fn      ZDApp_RestoreNetworkState()
    961           *
    962           * @brief   This function will restore the network state of the
    963           *          device if the network state is stored in NV.
    964           *
    965           * @param   none
    966           *
    967           * @return
    968           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    969           *          restored.
    970           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    971           *          This could mean that zgStartupOption said to not restore, or
    972           *          it could mean that there was no network state to restore.
    973           *
    974           */
    975          uint8 ZDApp_RestoreNetworkState( void )
    976          {
    977            uint8 nvStat;
    978          
    979            // Initialize NWK NV items
    980            nvStat = NLME_InitNV();
    981          
    982            if ( nvStat != NV_OPER_FAILED )
    983            {
    984              if ( NLME_RestoreFromNV() )
    985              {
    986                // Are we a coordinator
    987                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
    988                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
    989                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
    990                devStartMode = MODE_RESUME;
    991                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    992              }
    993              else
    994                nvStat = NV_ITEM_UNINIT;
    995          
    996              if ( ZG_SECURE_ENABLED )
    997              {
    998                nwkFrameCounterChanges = 0;
    999          
   1000                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1001                {
   1002                  ZDApp_RestoreNwkKey();
   1003                }
   1004              }
   1005          
   1006              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1007              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1008              // other than default.
   1009            }
   1010          
   1011            if ( nvStat == ZSUCCESS )
   1012              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   1013            else
   1014              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   1015          }
   1016          #endif // NV_RESTORE
   1017          
   1018          /*********************************************************************
   1019           * @fn      ZDApp_InitUserDesc()
   1020           *
   1021           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1022           *          when needed.  If you want to initialize the User descriptor to
   1023           *          something other than all zero, do it here.
   1024           *
   1025           * @param   none
   1026           *
   1027           * @return  none
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1030          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1031            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1032          
   1033            // Initialize the User Descriptor, the descriptor is read from NV
   1034            // when needed.  If you want to initialize the User descriptor to something
   1035            // other than all zero, do it here.
   1036            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1037            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1038                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   7033         JNZ     ??ZDApp_InitUserDesc_0
   1039            {
   1040              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1041                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV     ?V0,#0x11
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV     R4,#0x0
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A81         MOV     R2,#-0x7f
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   7010         JNZ     ??ZDApp_InitUserDesc_0
   1042              {
   1043                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6007         JZ      ??ZDApp_InitUserDesc_0
   1044                {
   1045                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX    A,@DPTR
   \   000067   D2E4         SETB    0xE0 /* A   */.4
   \   000069   F0           MOVX    @DPTR,A
   1046                }
   1047              }
   1048            }
   1049          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV     A,#0x11
   \   00006C   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   1050          
   1051          /*********************************************************************
   1052           * @fn      ZDAppCheckForHoldKey()
   1053           *
   1054           * @brief   Check for key to set the device into Hold Auto Start
   1055           *
   1056           * @param   none
   1057           *
   1058           * @return  none
   1059           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1060          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1061          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1062          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1063          
   1064            // Get Keypad directly to see if a HOLD is needed
   1065            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX    @DPTR,A
   1066          
   1067            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1068            // while booting to avoid starting up the device.
   1069            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL     A,#0x1
   \   00000E   7005         JNZ     ??ZDAppCheckForHoldKey_0
   1070            {
   1071              // Change the device state to HOLD on start up
   1072              devState = DEV_HOLD;
   \   000010   90....       MOV     DPTR,#devState
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1073            }
   1074          #endif // HAL_KEY
   1075          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000015   02....       LJMP    ?Subroutine3 & 0xFFFF
   1076          
   1077          /*********************************************************************
   1078           * @fn      ZDApp_ProcessOSALMsg()
   1079           *
   1080           * @brief   Process the incoming task message.
   1081           *
   1082           * @param   msgPtr - message to process
   1083           *
   1084           * @return  none
   1085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1086          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1087          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1088            // Data Confirmation message fields
   1089            uint8 sentEP;       // This should always be 0
   1090            uint8 sentStatus;
   1091            afDataConfirm_t *afDataConfirm;
   1092            uint8 tmp;
   1093          
   1094            switch ( msgPtr->event )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   6023         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC     A
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD     A,#-0x17
   \   000020   6007         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD     A,#0x47
   \   000024   6009         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000026   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1095            {
   1096              // Incoming ZDO Message
   1097              case AF_INCOMING_MSG_CMD:
   1098                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000029                ; Setup parameters for call to function ZDP_IncomingData
   \   000029   12....       LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1099                break;
   \   00002C   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1100          
   1101              case ZDO_CB_MSG:
   1102                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00002F                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00002F   12....       LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1103                break;
   \   000032   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1104          
   1105              case AF_DATA_CONFIRM_CMD:
   1106                // This message is received as a confirmation of a data packet sent.
   1107                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1108                // The message fields are defined in AF.h
   1109                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1110                sentEP = afDataConfirm->endpoint;
   1111                sentStatus = afDataConfirm->hdr.status;
   1112          
   1113                // Action taken when confirmation is received.
   1114          #if defined ( ZIGBEE_FREQ_AGILITY )
   1115                if ( pZDNwkMgr_ProcessDataConfirm )
   1116                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1117          #endif
   1118                (void)sentEP;
   1119                (void)sentStatus;
   1120                break;
   1121          
   1122              case ZDO_NWK_DISC_CNF:
   1123                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000035   90....       MOV     DPTR,#devState
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6402         XRL     A,#0x2
   \   00003B   6003         JZ      $+5
   \   00003D   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1124                  break;
   1125          
   1126                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000040   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   6008         JZ      ??ZDApp_ProcessOSALMsg_6
   \   000048   E0           MOVX    A,@DPTR
   \   000049   6402         XRL     A,#0x2
   \   00004B   6003         JZ      $+5
   \   00004D   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1127                {
   1128                  // Process the network discovery scan results and choose a parent
   1129                  // device to join/rejoin itself
   1130                  networkDesc_t *pChosenNwk;
   1131                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000050                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000050   12....       LCALL   `??ZDApp_NwkDescListProcessing::?relay`; Banked call to: ZDApp_NwkDescListProcessing
   \   000053   8A..         MOV     ?V0,R2
   \   000055   8B..         MOV     ?V1,R3
   \   000057   AE..         MOV     R6,?V0
   \   000059   AF..         MOV     R7,?V1
   \   00005B   EE           MOV     A,R6
   \   00005C   4F           ORL     A,R7
   \   00005D   7003         JNZ     $+5
   \   00005F   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   000062   90....       MOV     DPTR,#zdoDiscCounter
   \   000065   E0           MOVX    A,@DPTR
   \   000066   C3           CLR     C
   \   000067   9403         SUBB    A,#0x3
   \   000069   5003         JNC     $+5
   \   00006B   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1132                  {
   1133                    if ( devStartMode == MODE_JOIN )
   \   00006E   90....       MOV     DPTR,#devStartMode
   \   000071   E0           MOVX    A,@DPTR
   \   000072   7079         JNZ     ??ZDApp_ProcessOSALMsg_8
   1134                    {
   1135                      devState = DEV_NWK_JOINING;
   \   000074   90....       MOV     DPTR,#devState
   \   000077   7403         MOV     A,#0x3
   \   000079   12....       LCALL   ?Subroutine13 & 0xFFFF
   1136          
   1137                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \                     ??CrossCallReturnLabel_6:
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1138          
   1139                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1140                                             pChosenNwk->logicalChannel,
   1141                                             ZDO_Config_Node_Descriptor.CapabilityFlags,
   1142                                             pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   000081                ; Setup parameters for call to function NLME_JoinRequest
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F5..         MOV     ?V0,A
   \   000092   78..         MOV     R0,#?V0
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A5   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F5..         MOV     ?V0,A
   \   0000AB   78..         MOV     R0,#?V0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   8E82         MOV     DPL,R6
   \   0000B2   8F83         MOV     DPH,R7
   \   0000B4   A3           INC     DPTR
   \   0000B5   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FC           MOV     R4,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   FD           MOV     R5,A
   \   0000BD   EE           MOV     A,R6
   \   0000BE   240B         ADD     A,#0xb
   \   0000C0   FA           MOV     R2,A
   \   0000C1   E4           CLR     A
   \   0000C2   3F           ADDC    A,R7
   \   0000C3   FB           MOV     R3,A
   \   0000C4   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   0000C7   7404         MOV     A,#0x4
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CC   E9           MOV     A,R1
   \   0000CD   7003         JNZ     $+5
   \   0000CF   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   1143                      {
   1144                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1145                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000D2                ; Setup parameters for call to function osal_rand
   \   0000D2   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000D5   12....       LCALL   ?Subroutine33 & 0xFFFF
   1146                      }
   1147                    } // if ( devStartMode == MODE_JOIN )
   \                     ??CrossCallReturnLabel_38:
   \   0000D8   5001         JNC     ??ZDApp_ProcessOSALMsg_10
   \   0000DA   09           INC     R1
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0000DB   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0000DE                ; Setup parameters for call to function osal_set_event
   \   0000DE   7A01         MOV     R2,#0x1
   \   0000E0   7B00         MOV     R3,#0x0
   \   0000E2   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F9           MOV     R1,A
   \   0000E7   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000EA   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   1148                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   0000ED   6403         XRL     A,#0x3
   \   0000EF   6003         JZ      $+5
   \   0000F1   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   1149                    {
   1150                      ZStatus_t rejoinStatus;
   1151          
   1152                      devState = DEV_NWK_REJOIN;
   \   0000F4   90....       MOV     DPTR,#devState
   \   0000F7   7404         MOV     A,#0x4
   \   0000F9   F0           MOVX    @DPTR,A
   1153          
   1154                      // Before trying to do rejoin, check if the device has a valid short address
   1155                      // If not, generate a random short address for itself
   1156                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000FA   90....       MOV     DPTR,#_NIB + 20
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   64FE         XRL     A,#0xfe
   \   000100   7003         JNZ     ??ZDApp_ProcessOSALMsg_13
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   000105   7067         JNZ     ??ZDApp_ProcessOSALMsg_14
   1157                      {
   1158                        uint16 commNwkAddr;
   1159          
   1160                        // Verify if the Network address has been commissioned by external tool
   1161                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1162                                             sizeof(commNwkAddr),
   1163                                             (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1164                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   000107                ; Setup parameters for call to function osal_nv_read
   \   000107   7401         MOV     A,#0x1
   \   000109   12....       LCALL   ?XSTACK_DISP100_8
   \   00010C   88..         MOV     ?V0,R0
   \   00010E   89..         MOV     ?V1,R1
   \   000110   78..         MOV     R0,#?V0
   \   000112   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000115   75..02       MOV     ?V0,#0x2
   \   000118   75..00       MOV     ?V1,#0x0
   \   00011B   78..         MOV     R0,#?V0
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000120   7C00         MOV     R4,#0x0
   \   000122   7D00         MOV     R5,#0x0
   \   000124   7A49         MOV     R2,#0x49
   \   000126   7B00         MOV     R3,#0x0
   \   000128   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00012B   7404         MOV     A,#0x4
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   E9           MOV     A,R1
   \   000131   7027         JNZ     ??ZDApp_ProcessOSALMsg_15
   \   000133   7401         MOV     A,#0x1
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   E0           MOVX    A,@DPTR
   \   000139   64FE         XRL     A,#0xfe
   \   00013B   7003         JNZ     ??ZDApp_ProcessOSALMsg_16
   \   00013D   A3           INC     DPTR
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   000140   6018         JZ      ??ZDApp_ProcessOSALMsg_15
   1165                        {
   1166                          _NIB.nwkDevAddress = commNwkAddr;
   \   000142   7401         MOV     A,#0x1
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00014A   90....       MOV     DPTR,#_NIB + 20
   \   00014D   E8           MOV     A,R0
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   A3           INC     DPTR
   \   000150   E9           MOV     A,R1
   \   000151   F0           MOVX    @DPTR,A
   1167          
   1168                          // clear Allocate address bit because device has a commissioned address
   1169                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \   000152   90....       MOV     DPTR,#_NIB + 14
   \   000155   E0           MOVX    A,@DPTR
   \   000156   C2E7         CLR     0xE0 /* A   */.7
   \   000158   800A         SJMP    ??ZDApp_ProcessOSALMsg_17
   1170                        }
   1171                        else
   1172                        {
   1173                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   00015A                ; Setup parameters for call to function osal_rand
   \   00015A   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00015D   90....       MOV     DPTR,#_NIB + 20
   \   000160   EA           MOV     A,R2
   \   000161   F0           MOVX    @DPTR,A
   \   000162   A3           INC     DPTR
   \   000163   EB           MOV     A,R3
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   000164   F0           MOVX    @DPTR,A
   1174                        }
   1175          
   1176                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   000165                ; Setup parameters for call to function ZMacSetReq
   \   000165   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   000167   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   000169   7953         MOV     R1,#0x53
   \   00016B   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1177                      }
   1178          
   1179                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1180                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   00016E   90....       MOV     DPTR,#_NIB + 33
   \   000171   E0           MOVX    A,@DPTR
   \   000172   64FE         XRL     A,#0xfe
   \   000174   7003         JNZ     ??ZDApp_ProcessOSALMsg_18
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   000179   7014         JNZ     ??ZDApp_ProcessOSALMsg_19
   1181                      {
   1182                        _NIB.nwkPanId = pChosenNwk->panId;
   \   00017B   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00017E   90....       MOV     DPTR,#_NIB + 33
   \   000181   E8           MOV     A,R0
   \   000182   F0           MOVX    @DPTR,A
   \   000183   A3           INC     DPTR
   \   000184   E9           MOV     A,R1
   \   000185   F0           MOVX    @DPTR,A
   1183                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   000186                ; Setup parameters for call to function ZMacSetReq
   \   000186   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   000188   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   00018A   7950         MOV     R1,#0x50
   \   00018C   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1184                      }
   1185          
   1186                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   00018F   85..82       MOV     DPL,?XSP + 0
   \   000192   85..83       MOV     DPH,?XSP + 1
   \   000195   7401         MOV     A,#0x1
   \   000197   F0           MOVX    @DPTR,A
   1187                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   000198                ; Setup parameters for call to function ZMacSetReq
   \   000198   AA..         MOV     R2,?XSP + 0
   \   00019A   AB..         MOV     R3,?XSP + 1
   \   00019C   7952         MOV     R1,#0x52
   \   00019E   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1188          
   1189                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1190                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == TRUE ) )
   1191                      {
   1192                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   1193                      }
   1194                      else
   1195                      {
   1196                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   1197                      }
   1198          
   1199                      if ( rejoinStatus != ZSuccess )
   \   0001A1                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   0001A1   8E82         MOV     DPL,R6
   \   0001A3   8F83         MOV     DPH,R7
   \   0001A5   A3           INC     DPTR
   \   0001A6   A3           INC     DPTR
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F9           MOV     R1,A
   \   0001A9   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001AB   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001AD   12....       LCALL   `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \   0001B0   E9           MOV     A,R1
   \   0001B1   602D         JZ      ??ZDApp_ProcessOSALMsg_9
   1200                      {
   1201                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY +
   1202                                          ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001B3                ; Setup parameters for call to function osal_rand
   \   0001B3   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001B6   12....       LCALL   ?Subroutine33 & 0xFFFF
   1203                      }
   1204                    } // else if ( devStartMode == MODE_REJOIN )
   \                     ??CrossCallReturnLabel_39:
   \   0001B9   5001         JNC     ??ZDApp_ProcessOSALMsg_11
   \   0001BB   09           INC     R1
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0001BC   7003         JNZ     $+5
   \   0001BE   02....       LJMP    ??ZDApp_ProcessOSALMsg_12 & 0xFFFF
   \   0001C1                ; Setup parameters for call to function osal_start_timerEx
   \   0001C1   88..         MOV     ?V0,R0
   \   0001C3   89..         MOV     ?V1,R1
   \   0001C5   E4           CLR     A
   \   0001C6   F5..         MOV     ?V2,A
   \   0001C8   F5..         MOV     ?V3,A
   \   0001CA   78..         MOV     R0,#?V0
   \   0001CC   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0001CF   7A01         MOV     R2,#0x1
   \   0001D1   7B00         MOV     R3,#0x0
   \   0001D3   90....       MOV     DPTR,#ZDAppTaskID
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   F9           MOV     R1,A
   \   0001D8   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001DB   7404         MOV     A,#0x4
   \   0001DD   12....       LCALL   ?DEALLOC_XSTACK8
   1205          
   1206                    // The receiver is on, turn network layer polling off.
   1207                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   0001E0   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   A2E3         MOV     C,0xE0 /* A   */.3
   \   0001E6   4003         JC      $+5
   \   0001E8   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1208                    {
   1209                      // for an End Device with NO Child Table Management process or for a Router
   1210                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1211          #if defined ( ZIGBEE_CHILD_AGING )
   1212                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   0001EB   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   600D         JZ      ??ZDApp_ProcessOSALMsg_20
   \   0001F1   6401         XRL     A,#0x1
   \   0001F3   6009         JZ      ??ZDApp_ProcessOSALMsg_20
   \   0001F5   90....       MOV     DPTR,#zgChildAgingEnable
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   6003         JZ      $+5
   \   0001FB   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1213          #else
   1214                           (ZG_DEVICE_ENDDEVICE_TYPE) )
   1215          #endif // ZIGBEE_CHILD_AGING
   1216                      {
   1217                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   0001FE                ; Setup parameters for call to function NLME_SetPollRate
   \   0001FE   7A00         MOV     R2,#0x0
   \   000200   7B00         MOV     R3,#0x0
   \   000202   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1218                        NLME_SetQueuedPollRate( 0 );
   \   000205                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000205   7A00         MOV     R2,#0x0
   \   000207   7B00         MOV     R3,#0x0
   \   000209   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1219                        NLME_SetResponseRate( 0 );
   \   00020C                ; Setup parameters for call to function NLME_SetResponseRate
   \   00020C   7A00         MOV     R2,#0x0
   \   00020E   7B00         MOV     R3,#0x0
   \   000210   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   000213   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1220                      }
   1221                    }
   1222                    else
   1223                    {
   1224                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1225                      {
   1226                        ZDApp_SavedPollRate = zgPollRate;
   1227                        NLME_SetPollRate( zgRejoinPollRate );
   1228                      }
   1229                    }
   1230                  }
   1231                  else
   1232                  {
   1233                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000216   90....       MOV     DPTR,#continueJoining
   \   000219   E0           MOVX    A,@DPTR
   \   00021A   7003         JNZ     $+5
   \   00021C   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1234                    {
   1235              #if defined ( MANAGED_SCAN )
   1236                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1237              #else
   1238                      zdoDiscCounter++;
   \   00021F   90....       MOV     DPTR,#zdoDiscCounter
   \   000222   E0           MOVX    A,@DPTR
   \   000223   04           INC     A
   \   000224   F0           MOVX    @DPTR,A
   1239                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1240                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000225                ; Setup parameters for call to function osal_rand
   \   000225   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000228   EA           MOV     A,R2
   \   000229   7900         MOV     R1,#0x0
   \   00022B   2464         ADD     A,#0x64
   \   00022D   F8           MOV     R0,A
   \   00022E   5001         JNC     ??ZDApp_ProcessOSALMsg_21
   \   000230   09           INC     R1
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   000231   49           ORL     A,R1
   \   000232   605F         JZ      ??ZDApp_ProcessOSALMsg_22
   \   000234                ; Setup parameters for call to function osal_start_timerEx
   \   000234   88..         MOV     ?V0,R0
   \   000236   89..         MOV     ?V1,R1
   \   000238   E4           CLR     A
   \   000239   F5..         MOV     ?V2,A
   \   00023B   F5..         MOV     ?V3,A
   \   00023D   78..         MOV     R0,#?V0
   \   00023F   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000242   7A01         MOV     R2,#0x1
   \   000244   7B00         MOV     R3,#0x0
   \   000246   90....       MOV     DPTR,#ZDAppTaskID
   \   000249   E0           MOVX    A,@DPTR
   \   00024A   F9           MOV     R1,A
   \   00024B   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00024E   7404         MOV     A,#0x4
   \   000250   12....       LCALL   ?DEALLOC_XSTACK8
   \   000253   804A         SJMP    ??ZDApp_ProcessOSALMsg_5
   1241              #endif
   1242                    }
   1243                  }
   1244                }
   1245                break;
   1246          
   1247              case ZDO_NWK_JOIN_IND:
   1248                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000255   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000258   E0           MOVX    A,@DPTR
   \   000259   6401         XRL     A,#0x1
   \   00025B   6005         JZ      ??ZDApp_ProcessOSALMsg_23
   \   00025D   E0           MOVX    A,@DPTR
   \   00025E   6402         XRL     A,#0x2
   \   000260   703D         JNZ     ??ZDApp_ProcessOSALMsg_5
   1249                {
   1250                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_23:
   \   000262                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000262   12....       LCALL   `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   000265   8038         SJMP    ??ZDApp_ProcessOSALMsg_5
   1251                }
   1252                break;
   1253          
   1254              case ZDO_NWK_JOIN_REQ:
   1255                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000267   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   6401         XRL     A,#0x1
   \   00026D   6005         JZ      ??ZDApp_ProcessOSALMsg_24
   \   00026F   E0           MOVX    A,@DPTR
   \   000270   6402         XRL     A,#0x2
   \   000272   702B         JNZ     ??ZDApp_ProcessOSALMsg_5
   1256                {
   1257                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_24:
   \   000274   90....       MOV     DPTR,#retryCnt
   \   000277   E4           CLR     A
   \   000278   F0           MOVX    @DPTR,A
   1258                  devStartMode = MODE_RESUME;
   \   000279   90....       MOV     DPTR,#devStartMode
   \   00027C   04           INC     A
   \   00027D   F0           MOVX    @DPTR,A
   1259                  _tmpRejoinState = true;
   \   00027E   90....       MOV     DPTR,#_tmpRejoinState
   \   000281   F0           MOVX    @DPTR,A
   1260                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000282                ; Setup parameters for call to function sAddrExtCpy
   \   000282   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000284   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000286   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000288   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00028A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1261                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   00028D   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000290   7402         MOV     A,#0x2
   \   000292   F0           MOVX    @DPTR,A
   1262                  ZDApp_NetworkInit( 0 );
   \   000293                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   000293   7A01         MOV     R2,#0x1
   \   000295   7B00         MOV     R3,#0x0
   \   000297   90....       MOV     DPTR,#ZDAppTaskID
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   F9           MOV     R1,A
   \   00029C   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1263                }
   1264                break;
   1265          
   1266              default:
   1267                if ( ZG_SECURE_ENABLED )
   1268                  ZDApp_ProcessSecMsg( msgPtr );
   1269                break;
   1270            }
   1271          
   1272          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   00029F   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   8E82         MOV     DPL,R6
   \   000004   8F83         MOV     DPH,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EA           MOV     A,R2
   \   000001   547F         ANL     A,#0x7f
   \   000003   7900         MOV     R1,#0x0
   \   000005   2464         ADD     A,#0x64
   \   000007   F8           MOV     R0,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7403         MOV     A,#0x3
   \   000002                REQUIRE ??Subroutine51_0
   \   000002                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine57_0
   \   000004                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
   1273          
   1274          /*********************************************************************
   1275           * @fn      ZDApp_ProcessMsgCBs()
   1276           *
   1277           * @brief   Process response messages
   1278           *
   1279           * @param   none
   1280           *
   1281           * @return  none
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1285            switch ( inMsg->clusterID )
   \   00000E   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000011   F5..         MOV     ?V2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V3,A
   \   000017   78..         MOV     R0,#?V2
   \   000019   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   00001C   0200         DW        2
   \   00001E   2100         DW        33
   \   000020   2200         DW        34
   \   000022   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000024   0080         DW        32768
   \   000026   0180         DW        32769
   \   000028   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   00002A   0000         DW        0
   \   00002C   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1286            {
   1287          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1288              case NWK_addr_rsp:
   1289              case IEEE_addr_rsp:
   1290                {
   1291                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1292          
   1293                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00002E                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002E   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000031   8A..         MOV     ?V2,R2
   \   000033   8B..         MOV     ?V3,R3
   \   000035   AE..         MOV     R6,?V2
   \   000037   AF..         MOV     R7,?V3
   1294                  if ( pAddrRsp )
   \   000039   EE           MOV     A,R6
   \   00003A   4F           ORL     A,R7
   \   00003B   6048         JZ      ??ZDApp_ProcessMsgCBs_2
   1295                  {
   1296                    if ( pAddrRsp->status == ZSuccess )
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   E0           MOVX    A,@DPTR
   \   000042   700D         JNZ     ??ZDApp_ProcessMsgCBs_3
   1297                    {
   1298                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000044                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000044   EE           MOV     A,R6
   \   000045   2403         ADD     A,#0x3
   \   000047   FC           MOV     R4,A
   \   000048   E4           CLR     A
   \   000049   3F           ADDC    A,R7
   \   00004A   FD           MOV     R5,A
   \   00004B   12....       LCALL   ?Subroutine27 & 0xFFFF
   1299                    }
   \                     ??CrossCallReturnLabel_87:
   \   00004E   12....       LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1300          
   1301          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1302                    // look for pending bind entry for NWK_addr_rsp Only
   1303                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   000051   85..82       MOV     DPL,?V0
   \   000054   85..83       MOV     DPH,?V1
   \   000057   E0           MOVX    A,@DPTR
   \   000058   7004         JNZ     ??ZDApp_ProcessMsgCBs_4
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   00005E   700A         JNZ     ??ZDApp_ProcessMsgCBs_5
   1304                    {
   1305          #if defined ( REFLECTOR )
   1306                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   000060                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   000060   EE           MOV     A,R6
   \   000061   2403         ADD     A,#0x3
   \   000063   FA           MOV     R2,A
   \   000064   E4           CLR     A
   \   000065   3F           ADDC    A,R7
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
   1307          #endif
   1308                    }
   1309          #endif
   1310          
   1311                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   EE           MOV     A,R6
   \   00006B   FA           MOV     R2,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000071   8012         SJMP    ??ZDApp_ProcessMsgCBs_2
   1312                  }
   1313                }
   1314                break;
   1315          #endif
   1316          
   1317          #if defined ( REFLECTOR )
   1318              case Bind_req:
   1319              case Unbind_req:
   1320                {
   1321                  ZDO_BindUnbindReq_t bindReq;
   1322                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000073                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000073   AC..         MOV     R4,?XSP + 0
   \   000075   AD..         MOV     R5,?XSP + 1
   \   000077   12....       LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1323                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00007A                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00007A   AC..         MOV     R4,?XSP + 0
   \   00007C   AD..         MOV     R5,?XSP + 1
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1324                }
   1325                break;
   1326          #endif
   1327          
   1328          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1329              case Bind_rsp:
   1330              case Unbind_rsp:
   1331                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1332                {
   1333                  ZDMatchSendState(
   1334                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1335                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1336                }
   1337                break;
   1338          
   1339              case End_Device_Bind_req:
   1340                if (ZG_DEVICE_COORDINATOR_TYPE)
   1341                {
   1342                  ZDEndDeviceBind_t bindReq;
   1343                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1344                  ZDO_MatchEndDeviceBind( &bindReq );
   1345          
   1346                  // Freeing the cluster lists - if allocated.
   1347                  if ( bindReq.numInClusters )
   1348                    osal_mem_free( bindReq.inClusters );
   1349                  if ( bindReq.numOutClusters )
   1350                    osal_mem_free( bindReq.outClusters );
   1351                }
   1352                break;
   1353          #endif
   1354            }
   1355          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000085   7415         MOV     A,#0x15
   \   000087   02....       LJMP    ??Subroutine51_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F9           MOV     R1,A
   \   000007   88..         MOV     ?V0,R0
   \   000009   89..         MOV     ?V1,R1
   \   00000B   8882         MOV     DPL,R0
   \   00000D   F583         MOV     DPH,A
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine56_0
   \   000001                ; // Fall through to label ??Subroutine56_0
   1356          
   1357          /*********************************************************************
   1358           * @fn      ZDApp_RegisterCBs()
   1359           *
   1360           * @brief   Process response messages
   1361           *
   1362           * @param   none
   1363           *
   1364           * @return  none
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1367          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1368          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1369            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1370          #endif
   1371          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1372            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1373          #endif
   1374          #if ZG_BUILD_COORDINATOR_TYPE
   1375            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1376            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1377            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1378          #endif
   1379          #if defined ( REFLECTOR )
   1380            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1381            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1382          #endif
   1383          }
   \   000034   02....       LJMP    ?Subroutine3 & 0xFFFF
   1384          
   1385          /*********************************************************************
   1386           * @fn      ZDApp_ProcessSecMsg()
   1387           *
   1388           * @brief   Process the incoming security message.
   1389           *
   1390           * @param   msgPtr - message to process
   1391           *
   1392           * @return  none
   1393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1394          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1395          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1396            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FC         ADD     A,#-0x4
   \   00000B   6006         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD     A,#-0x4
   \   00000F   6014         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP    ??ZDApp_ProcessSecMsg_2
   1397            {
   1398              case ZDO_TRANSPORT_KEY_IND:
   1399                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   6005         JZ      ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6402         XRL     A,#0x2
   \   00001E   7015         JNZ     ??ZDApp_ProcessSecMsg_2
   1400                {
   1401                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL   `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000023   8010         SJMP    ??ZDApp_ProcessSecMsg_2
   1402                }
   1403                break;
   1404          
   1405              case ZDO_UPDATE_DEVICE_IND:
   1406                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1407                {
   1408                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1409                }
   1410                break;
   1411          
   1412              case ZDO_REMOVE_DEVICE_IND:
   1413                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1414                {
   1415                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1416                }
   1417                break;
   1418          
   1419              case ZDO_REQUEST_KEY_IND:
   1420                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1421                {
   1422                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1423                  {
   1424                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1425                  }
   1426                }
   1427                break;
   1428          
   1429              case ZDO_SWITCH_KEY_IND:
   1430                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6401         XRL     A,#0x1
   \   00002B   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   7003         JNZ     ??ZDApp_ProcessSecMsg_2
   1431                {
   1432                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL   `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1433                }
   1434                break;
   1435          
   1436              default:
   1437                // Unsupported messages
   1438                break;
   1439            }
   1440          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP    ?Subroutine3 & 0xFFFF
   1441          
   1442          /*********************************************************************
   1443           * @fn      ZDApp_ProcessNetworkJoin()
   1444           *
   1445           * @brief
   1446           *
   1447           *   Save off the Network key information.
   1448           *
   1449           * @param   none
   1450           *
   1451           * @return  none
   1452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1453          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1454          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1455            if ( (devState == DEV_NWK_JOINING) ||
   1456                ((devState == DEV_NWK_ORPHAN)  &&
   1457                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1458            {
   1459              // Result of a Join attempt by this device.
   1460              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   704F         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1461              {
   1462                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV     R2,#0x10
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1463          
   1464          #if defined ( POWER_SAVING )
   1465                osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000039                ; Setup parameters for call to function osal_pwrmgr_device
   \   000039   7901         MOV     R1,#0x1
   \   00003B   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1466          #endif
   1467          
   1468                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1469                {
   1470                  // wait for auth from trust center
   1471                  devState = DEV_END_DEVICE_UNAUTH;
   1472          
   1473                  // Start the reset timer for MAX UNAUTH time
   1474                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1475                }
   1476                else
   1477                {
   1478                  if ( ZSTACK_ROUTER_BUILD )
   1479                  {
   1480                    if ( devState == DEV_NWK_ORPHAN
   1481                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1482                    {
   1483                      // Change NIB state to router for restore
   1484                      _NIB.nwkState = NWK_ROUTER;
   1485                    }
   1486                  }
   1487          
   1488                  if ( devState == DEV_NWK_JOINING )
   \   00003E   90....       MOV     DPTR,#devState
   \   000041   E0           MOVX    A,@DPTR
   \   000042   6403         XRL     A,#0x3
   \   000044   702D         JNZ     ??ZDApp_ProcessNetworkJoin_4
   1489                  {
   1490                    ZDApp_AnnounceNewAddress();
   \   000046                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000046   7A00         MOV     R2,#0x0
   \   000048   7B00         MOV     R3,#0x0
   \   00004A   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   \   00004D                ; Setup parameters for call to function NLME_GetExtAddr
   \   00004D   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000050   8A..         MOV     ?V0,R2
   \   000052   8B..         MOV     ?V1,R3
   \   000054   AE..         MOV     R6,?V0
   \   000056                ; Setup parameters for call to function NLME_GetShortAddr
   \   000056   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000059                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000059   75..00       MOV     ?V0,#0x0
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000064   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000067   7401         MOV     A,#0x1
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00006C   7A00         MOV     R2,#0x0
   \   00006E   7B00         MOV     R3,#0x0
   \   000070   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   1491                  }
   1492          
   1493                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000073   90....       MOV     DPTR,#devState
   \   000076   7406         MOV     A,#0x6
   \   000078   F0           MOVX    @DPTR,A
   1494                  if ( ZSTACK_ROUTER_BUILD )
   \   000079   02....       LJMP    ??ZDApp_ProcessNetworkJoin_5 & 0xFFFF
   1495                  {
   1496                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1497                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1498                    {
   1499                      NLME_StartRouterRequest( 0, 0, false );
   1500                    }
   1501                  }
   1502                }
   1503              }
   1504              else
   1505              {
   1506                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00007C   90....       MOV     DPTR,#devStartMode
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   6401         XRL     A,#0x1
   \   000082   7031         JNZ     ??ZDApp_ProcessNetworkJoin_6
   \   000084   90....       MOV     DPTR,#retryCnt
   \   000087   E0           MOVX    A,@DPTR
   \   000088   04           INC     A
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   C3           CLR     C
   \   00008B   9403         SUBB    A,#0x3
   \   00008D   4026         JC      ??ZDApp_ProcessNetworkJoin_6
   1507                {
   1508                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00008F   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000092   7003         JNZ     ??ZDApp_ProcessNetworkJoin_7
   \   000094   74FF         MOV     A,#-0x1
   \   000096   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000097   600A         JZ      ??ZDApp_ProcessNetworkJoin_8
   \   000099   74FE         MOV     A,#-0x2
   \   00009B   68           XRL     A,R0
   \   00009C   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   00009E   74FF         MOV     A,#-0x1
   \   0000A0   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   0000A1   7006         JNZ     ??ZDApp_ProcessNetworkJoin_10
   1509                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   0000A3   90....       MOV     DPTR,#devStartMode
   \   0000A6   E4           CLR     A
   \   0000A7   800B         SJMP    ??ZDApp_ProcessNetworkJoin_11
   1510                  else
   1511                  {
   1512                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000A9   90....       MOV     DPTR,#devStartMode
   \   0000AC   7403         MOV     A,#0x3
   \   0000AE   F0           MOVX    @DPTR,A
   1513                    _tmpRejoinState = true;
   \   0000AF   90....       MOV     DPTR,#_tmpRejoinState
   \   0000B2   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000B4   F0           MOVX    @DPTR,A
   1514                  }
   1515                }
   1516          
   1517                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1518                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   0000B5                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000B5   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000B8   8A..         MOV     ?V0,R2
   \   0000BA   8B..         MOV     ?V1,R3
   \   0000BC   74FE         MOV     A,#-0x2
   \   0000BE   65..         XRL     A,?V0
   \   0000C0   7004         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   0000C2   74FF         MOV     A,#-0x1
   \   0000C4   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000C6   700D         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   0000C8   90....       MOV     DPTR,#_NIB + 20
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   64FE         XRL     A,#0xfe
   \   0000CE   7003         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000D3   601D         JZ      ??ZDApp_ProcessNetworkJoin_15
   1519                {
   1520                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000D5   85..82       MOV     DPL,?XSP + 0
   \   0000D8   85..83       MOV     DPH,?XSP + 1
   \   0000DB   74FE         MOV     A,#-0x2
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   04           INC     A
   \   0000E0   F0           MOVX    @DPTR,A
   1521                  // Invalidate nwk addr so end device does not use in its data reqs.
   1522                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000E1   90....       MOV     DPTR,#_NIB + 20
   \   0000E4   14           DEC     A
   \   0000E5   F0           MOVX    @DPTR,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   04           INC     A
   \   0000E8   F0           MOVX    @DPTR,A
   1523                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000E9                ; Setup parameters for call to function ZMacSetReq
   \   0000E9   AA..         MOV     R2,?XSP + 0
   \   0000EB   AB..         MOV     R3,?XSP + 1
   \   0000ED   7953         MOV     R1,#0x53
   \   0000EF   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1524                }
   1525          
   1526                // Clear the neighbor Table and network discovery tables.
   1527                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000F2                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000F2   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1528                NLME_NwkDiscTerm();
   \   0000F5                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000F5   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1529          
   1530                zdoDiscCounter = 1;
   \   0000F8   90....       MOV     DPTR,#zdoDiscCounter
   \   0000FB   7401         MOV     A,#0x1
   \   0000FD   F0           MOVX    @DPTR,A
   1531          
   1532                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1533                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000FE                ; Setup parameters for call to function osal_rand
   \   0000FE   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000101   12....       LCALL   ?Subroutine33 & 0xFFFF
   1534              }
   1535            }
   \                     ??CrossCallReturnLabel_40:
   \   000104   5001         JNC     ??ZDApp_ProcessNetworkJoin_16
   \   000106   09           INC     R1
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   000107   02....       LJMP    ??ZDApp_ProcessNetworkJoin_17 & 0xFFFF
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00010A                ; Setup parameters for call to function osal_set_event
   \   00010A   7A01         MOV     R2,#0x1
   \   00010C   02....       LJMP    ??ZDApp_ProcessNetworkJoin_19 & 0xFFFF
   1536            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   6404         XRL     A,#0x4
   \   000112   6003         JZ      $+5
   \   000114   02....       LJMP    ??ZDApp_ProcessNetworkJoin_20 & 0xFFFF
   1537            {
   1538              // results of an orphaning attempt by this device
   1539              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000117   90....       MOV     DPTR,#nwkStatus
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   705E         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1540              {
   1541                // Verify NWK key is available before sending Device_annce
   1542                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1543                {
   1544                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1545          
   1546                  // wait for auth from trust center
   1547                  devState = DEV_END_DEVICE_UNAUTH;
   1548          
   1549                  // Start the reset timer for MAX UNAUTH time
   1550                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1551                }
   1552                else
   1553                {
   1554          
   1555                  devState = DEV_END_DEVICE;
   \   00011D   12....       LCALL   ?Subroutine11 & 0xFFFF
   1556                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_63:
   \   000120   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1557                  // setup Power Manager Device
   1558          #if defined ( POWER_SAVING )
   1559                  osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000123                ; Setup parameters for call to function osal_pwrmgr_device
   \   000123   7901         MOV     R1,#0x1
   \   000125   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1560          #endif
   1561          
   1562                  // The receiver is on, turn network layer polling off.
   1563                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000128   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   A2E3         MOV     C,0xE0 /* A   */.3
   \   00012E   501B         JNC     ??ZDApp_ProcessNetworkJoin_22
   1564                  {
   1565          #if defined ( ZIGBEE_CHILD_AGING )
   1566                    // if Child Table Management process is not enabled
   1567                    if ( zgChildAgingEnable == FALSE )
   \   000130   90....       MOV     DPTR,#zgChildAgingEnable
   \   000133   E0           MOVX    A,@DPTR
   \   000134   7015         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1568          #endif // ZIGBEE_CHILD_AGING
   1569                    {
   1570                      NLME_SetPollRate( 0 );
   \   000136                ; Setup parameters for call to function NLME_SetPollRate
   \   000136   7A00         MOV     R2,#0x0
   \   000138   7B00         MOV     R3,#0x0
   \   00013A   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1571                      NLME_SetQueuedPollRate( 0 );
   \   00013D                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00013D   7A00         MOV     R2,#0x0
   \   00013F   7B00         MOV     R3,#0x0
   \   000141   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1572                      NLME_SetResponseRate( 0 );
   \   000144                ; Setup parameters for call to function NLME_SetResponseRate
   \   000144   7A00         MOV     R2,#0x0
   \   000146   7B00         MOV     R3,#0x0
   \   000148   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1573                    }
   1574                  }
   1575          
   1576                  if ( ZSTACK_ROUTER_BUILD )
   1577                  {
   1578                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1579                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1580                    {
   1581                      NLME_StartRouterRequest( 0, 0, false );
   1582                    }
   1583                  }
   1584          
   1585                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   00014B                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00014B   7A00         MOV     R2,#0x0
   \   00014D   7B00         MOV     R3,#0x0
   \   00014F   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   \   000152                ; Setup parameters for call to function NLME_GetExtAddr
   \   000152   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000155   8A..         MOV     ?V0,R2
   \   000157   8B..         MOV     ?V1,R3
   \   000159   AE..         MOV     R6,?V0
   \   00015B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00015B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00015E                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00015E   75..00       MOV     ?V0,#0x0
   \   000161   78..         MOV     R0,#?V0
   \   000163   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000166   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000169   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00016C   7401         MOV     A,#0x1
   \   00016E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000171                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000171   7A00         MOV     R2,#0x0
   \   000173   7B00         MOV     R3,#0x0
   \   000175   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   1586                }
   1587              }
   \   000178   02....       LJMP    ??ZDApp_ProcessNetworkJoin_5 & 0xFFFF
   1588              else
   1589              {
   1590                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   00017B   90....       MOV     DPTR,#devStartMode
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   6401         XRL     A,#0x1
   \   000181   7039         JNZ     ??ZDApp_ProcessNetworkJoin_23
   1591                {
   1592                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000183   90....       MOV     DPTR,#retryCnt
   \   000186   E0           MOVX    A,@DPTR
   \   000187   04           INC     A
   \   000188   F0           MOVX    @DPTR,A
   \   000189   C3           CLR     C
   \   00018A   9404         SUBB    A,#0x4
   \   00018C   5021         JNC     ??ZDApp_ProcessNetworkJoin_24
   1593                  {
   1594                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00018E   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000191   7003         JNZ     ??ZDApp_ProcessNetworkJoin_25
   \   000193   74FF         MOV     A,#-0x1
   \   000195   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   000196   601F         JZ      ??ZDApp_ProcessNetworkJoin_26
   \   000198   74FE         MOV     A,#-0x2
   \   00019A   68           XRL     A,R0
   \   00019B   7003         JNZ     ??ZDApp_ProcessNetworkJoin_27
   \   00019D   74FF         MOV     A,#-0x1
   \   00019F   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   0001A0   6015         JZ      ??ZDApp_ProcessNetworkJoin_26
   1595                      devStartMode = MODE_JOIN;
   1596                    else
   1597                    {
   1598                      devStartMode = MODE_REJOIN;
   \   0001A2   90....       MOV     DPTR,#devStartMode
   \   0001A5   7403         MOV     A,#0x3
   \   0001A7   F0           MOVX    @DPTR,A
   1599                      _tmpRejoinState = true;
   \   0001A8   90....       MOV     DPTR,#_tmpRejoinState
   \   0001AB   7401         MOV     A,#0x1
   \   0001AD   800C         SJMP    ??ZDApp_ProcessNetworkJoin_28
   1600                    }
   1601                  }
   1602                  // Do a normal join to the network after certain times of rejoin retries
   1603                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   0001AF   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   6401         XRL     A,#0x1
   \   0001B5   7005         JNZ     ??ZDApp_ProcessNetworkJoin_23
   1604                  {
   1605                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   0001B7   90....       MOV     DPTR,#devStartMode
   \   0001BA   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   0001BB   F0           MOVX    @DPTR,A
   1606                  }
   1607                }
   1608          
   1609                // Clear the neighbor Table and network discovery tables.
   1610                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   0001BC                ; Setup parameters for call to function nwkNeighborInitTable
   \   0001BC   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1611                NLME_NwkDiscTerm();
   \   0001BF                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001BF   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1612          
   1613                // setup a retry for later...
   1614                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1615                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   0001C2                ; Setup parameters for call to function osal_rand
   \   0001C2   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001C5   12....       LCALL   ?Subroutine33 & 0xFFFF
   1616              }
   1617            }
   \                     ??CrossCallReturnLabel_41:
   \   0001C8   5001         JNC     ??ZDApp_ProcessNetworkJoin_17
   \   0001CA   09           INC     R1
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   0001CB   7003         JNZ     $+5
   \   0001CD   02....       LJMP    ??ZDApp_ProcessNetworkJoin_18 & 0xFFFF
   \   0001D0                ; Setup parameters for call to function osal_start_timerEx
   \   0001D0   88..         MOV     ?V0,R0
   \   0001D2   89..         MOV     ?V1,R1
   \   0001D4   E4           CLR     A
   \   0001D5   F5..         MOV     ?V2,A
   \   0001D7   F5..         MOV     ?V3,A
   \   0001D9   78..         MOV     R0,#?V0
   \   0001DB   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0001DE   7A01         MOV     R2,#0x1
   \   0001E0   7B00         MOV     R3,#0x0
   \   0001E2   90....       MOV     DPTR,#ZDAppTaskID
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   F9           MOV     R1,A
   \   0001E7   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001EA   7404         MOV     A,#0x4
   \   0001EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001EF   8041         SJMP    ??ZDApp_ProcessNetworkJoin_5
   1618          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1619            else
   1620            {
   1621              // Assume from address conflict
   1622              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   0001F1   90....       MOV     DPTR,#_NIB + 96
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   6402         XRL     A,#0x2
   \   0001F7   7039         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1623              {
   1624                // Notify the network
   1625                ZDApp_AnnounceNewAddress();
   \   0001F9                ; Setup parameters for call to function APSME_HoldDataRequests
   \   0001F9   7A00         MOV     R2,#0x0
   \   0001FB   7B00         MOV     R3,#0x0
   \   0001FD   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   \   000200                ; Setup parameters for call to function NLME_GetExtAddr
   \   000200   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000203   8A..         MOV     ?V0,R2
   \   000205   8B..         MOV     ?V1,R3
   \   000207   AE..         MOV     R6,?V0
   \   000209                ; Setup parameters for call to function NLME_GetShortAddr
   \   000209   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00020C                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00020C   75..00       MOV     ?V0,#0x0
   \   00020F   78..         MOV     R0,#?V0
   \   000211   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000214   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000217   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00021A   7401         MOV     A,#0x1
   \   00021C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00021F                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00021F   7A00         MOV     R2,#0x0
   \   000221   7B00         MOV     R3,#0x0
   \   000223   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   1626          
   1627                // Notify apps
   1628                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000226                ; Setup parameters for call to function osal_set_event
   \   000226   7A10         MOV     R2,#0x10
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000228   7B00         MOV     R3,#0x0
   \   00022A   90....       MOV     DPTR,#ZDAppTaskID
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   F9           MOV     R1,A
   \   00022F   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1629              }
   1630            }
   1631          #endif
   1632          }
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000232   7402         MOV     A,#0x2
   \   000234   02....       LJMP    ??Subroutine51_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   90....       MOV     DPTR,#_NIB + 33
   \   000003   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000006   74FF         MOV     A,#-0x1
   \   000008   68           XRL     A,R0
   \   000009   22           RET
   1633          
   1634          /*********************************************************************
   1635           * @fn      ZDApp_SaveNwkKey()
   1636           *
   1637           * @brief   Save off the Network key information.
   1638           *
   1639           * @param   none
   1640           *
   1641           * @return  none
   1642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007                ; Setup parameters for call to function osal_memset
   \   000007                ; Setup parameters for call to function osal_memset
   \   000007                ; Setup parameters for call to function osal_memset
   \   000007   7C15         MOV     R4,#0x15
   \   000009   FD           MOV     R5,A
   \   00000A   F9           MOV     R1,A
   \   00000B   AA..         MOV     R2,?XSP + 0
   \   00000D   AB..         MOV     R3,?XSP + 1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1643          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1645            nwkActiveKeyItems keyItems;
   1646          
   1647            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1648          
   1649            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1650                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV     R0,?XSP + 0
   \   000013   A9..         MOV     R1,?XSP + 1
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV     ?V0,#0x15
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A82         MOV     R2,#-0x7e
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   1651          
   1652            nwkFrameCounterChanges = 0;
   \   000039   12....       LCALL   ?Subroutine10 & 0xFFFF
   1653          
   1654            // Clear copy in RAM before return.
   1655            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \                     ??CrossCallReturnLabel_2:
   \   00003C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1656          
   1657          }
   \   00003F                REQUIRE ?Subroutine8
   \   00003F                ; // Fall through to label ?Subroutine8
   1658          
   1659          /*********************************************************************
   1660           * @fn      ZDApp_ForceConcentratorChange()
   1661           *
   1662           * @brief   Force a network concentrator change by resetting
   1663           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1664           *          from NV and set nwk event.
   1665           *
   1666           * @param   none
   1667           *
   1668           * @return  none
   1669           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1670          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1671          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1672            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   1673            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002E   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A33         MOV     R2,#0x33
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1674          
   1675            if ( zgConcentratorEnable == TRUE )
   \   000051   90....       MOV     DPTR,#zgConcentratorEnable
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6401         XRL     A,#0x1
   \   000057   7019         JNZ     ??ZDApp_ForceConcentratorChange_0
   1676            {
   1677              // Start next event
   1678              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV     DPTR,#__Constant_64
   \   00005C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B08         MOV     R3,#0x8
   \   000063   90....       MOV     DPTR,#NWK_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   800C         SJMP    ??ZDApp_ForceConcentratorChange_1
   1679            }
   1680            else
   1681            {
   1682              // Stop the next event
   1683              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000072                ; Setup parameters for call to function osal_stop_timerEx
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B08         MOV     R3,#0x8
   \   000076   90....       MOV     DPTR,#NWK_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1684            }
   1685          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   00007E   80..         SJMP    ??Subroutine49_0
   1686          
   1687          /*********************************************************************
   1688           * @fn      ZDApp_ResetNwkKey()
   1689           *
   1690           * @brief   Reset the Network key information in NV.
   1691           *
   1692           * @param   none
   1693           *
   1694           * @return  none
   1695           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1696          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1697          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1698            nwkActiveKeyItems keyItems;
   1699          
   1700            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1701            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1702                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   1703          }
   \   00003F   02....       LJMP    ?Subroutine8 & 0xFFFF
   1704          
   1705          /*********************************************************************
   1706           * @fn      ZDApp_RestoreNwkKey()
   1707           *
   1708           * @brief
   1709           *
   1710           *   Save off the Network key information.
   1711           *
   1712           * @param   none
   1713           *
   1714           * @return  true if restored from NV, false if not
   1715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1716          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1717          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1718            nwkActiveKeyItems keyItems;
   1719            uint8 ret = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1720          
   1721            // Restore the key information
   1722            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1723                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   A8..         MOV     R0,?XSP + 0
   \   00000E   A9..         MOV     R1,?XSP + 1
   \   000010   88..         MOV     ?V0,R0
   \   000012   89..         MOV     ?V1,R1
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..15       MOV     ?V0,#0x15
   \   00001C   8E..         MOV     ?V1,R6
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7C00         MOV     R4,#0x0
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7A82         MOV     R2,#-0x7e
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   E9           MOV     A,R1
   \   000034   6003         JZ      $+5
   \   000036   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1724            {
   1725              uint8 nullKey[SEC_KEY_LEN];
   1726          
   1727              // initialize default value to compare to
   1728              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   000039                ; Setup parameters for call to function osal_memset
   \   000039   7C10         MOV     R4,#0x10
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   7415         MOV     A,#0x15
   \   000041   12....       LCALL   ?XSTACK_DISP101_8
   \   000044   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1729          
   1730              // if stored key is different than default value, then a key has been established
   1731              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000047                ; Setup parameters for call to function osal_memcmp
   \   000047   7415         MOV     A,#0x15
   \   000049   12....       LCALL   ?XSTACK_DISP100_8
   \   00004C   88..         MOV     ?V0,R0
   \   00004E   89..         MOV     ?V1,R1
   \   000050   8E..         MOV     ?V2,R6
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000057   7C10         MOV     R4,#0x10
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   A982         MOV     R1,DPL
   \   000062   AA83         MOV     R2,DPH
   \   000064   7B00         MOV     R3,#0x0
   \   000066   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   E9           MOV     A,R1
   \   00006F   705B         JNZ     ??ZDApp_RestoreNwkKey_0
   1732              {
   1733                // Increment the frame counter stored in NV
   1734                keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1735                                           NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000071   90....       MOV     DPTR,#__Constant_4e2
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?L_MOV_X
   \   000079   7411         MOV     A,#0x11
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?L_ADD_TO_X
   1736          
   1737                nwkFrameCounter = keyItems.frameCounter;
   \   000083   7411         MOV     A,#0x11
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?XLOAD_R0123
   \   00008B   90....       MOV     DPTR,#nwkFrameCounter
   \   00008E   12....       LCALL   ?XSTORE_R0123
   1738          
   1739                // Save the updated Frame Counter right away
   1740                osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1741                               (void *)&keyItems );
   \   000091                ; Setup parameters for call to function osal_nv_write
   \   000091   A8..         MOV     R0,?XSP + 0
   \   000093   A9..         MOV     R1,?XSP + 1
   \   000095   88..         MOV     ?V0,R0
   \   000097   89..         MOV     ?V1,R1
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   75..15       MOV     ?V0,#0x15
   \   0000A1   8E..         MOV     ?V1,R6
   \   0000A3   78..         MOV     R0,#?V0
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   7C00         MOV     R4,#0x0
   \   0000AA   7D00         MOV     R5,#0x0
   \   0000AC   7A82         MOV     R2,#-0x7e
   \   0000AE   7B00         MOV     R3,#0x0
   \   0000B0   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   1742          
   1743                nwkFrameCounterChanges = 0;
   \   0000B8   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000BB   E4           CLR     A
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   F0           MOVX    @DPTR,A
   1744          
   1745                ret = TRUE;
   \   0000BF   7E01         MOV     R6,#0x1
   1746          
   1747                // Clear copy in RAM before return.
   1748                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C1                ; Setup parameters for call to function osal_memset
   \   0000C1   7C15         MOV     R4,#0x15
   \   0000C3   FD           MOV     R5,A
   \   0000C4   F9           MOV     R1,A
   \   0000C5   AA..         MOV     R2,?XSP + 0
   \   0000C7   AB..         MOV     R3,?XSP + 1
   \   0000C9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1749              }
   1750            }
   1751          
   1752            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   F9           MOV     R1,A
   \   0000CE   7425         MOV     A,#0x25
   \   0000D0   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   1753          }
   1754          
   1755          /*********************************************************************
   1756           * @fn      ZDApp_ResetTimerStart
   1757           *
   1758           * @brief   Start the reset timer.
   1759           *
   1760           * @param   delay - delay time(ms) before reset
   1761           *
   1762           * @return  none
   1763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1764          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1765          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1766            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   701B         JNZ     ??ZDApp_ResetTimerStart_0
   1767            {
   1768              // Start the rest timer
   1769              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1770            }
   1771          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   1772          
   1773          /*********************************************************************
   1774           * @fn      ZDApp_ResetTimerCancel
   1775           *
   1776           * @brief   Cancel the reset timer.
   1777           *
   1778           * @param   none
   1779           *
   1780           * @return  none
   1781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1782          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1783          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1784            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1785            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   1786          }
   \   00001C   02....       LJMP    ?Subroutine3 & 0xFFFF
   1787          
   1788          /*********************************************************************
   1789           * @fn      ZDApp_LeaveCtrlInit
   1790           *
   1791           * @brief   Initialize the leave control logic.
   1792           *
   1793           * @param   none
   1794           *
   1795           * @return  none
   1796           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1797          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1798          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1799            uint8 status;
   1800          
   1801          
   1802            // Initialize control state
   1803            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   12....       LCALL   ?Subroutine12 & 0xFFFF
   1804          
   1805            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1806                                        sizeof(ZDApp_LeaveCtrl),
   1807                                        &ZDApp_LeaveCtrl );
   1808          
   1809            if ( status == ZSUCCESS )
   \                     ??CrossCallReturnLabel_4:
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   7C01         MOV     R4,#0x1
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   7A85         MOV     R2,#-0x7b
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   E9           MOV     A,R1
   \   00001C   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1810            {
   1811              // Read saved control
   1812              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1813                            0,
   1814                            sizeof( uint8 ),
   1815                            &ZDApp_LeaveCtrl);
   \   00001E                ; Setup parameters for call to function osal_nv_read
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0,#0x1
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A85         MOV     R2,#-0x7b
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   1816            }
   1817          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   00003E   02....       LJMP    ??Subroutine49_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_nv_write
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_write
   \   000005   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000008   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   22           RET
   1818          
   1819          /*********************************************************************
   1820           * @fn      ZDApp_LeaveCtrlSet
   1821           *
   1822           * @brief   Set the leave control logic.
   1823           *
   1824           * @param   ra - reassociate flag
   1825           *
   1826           * @return  none
   1827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0,#0x1
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine48_0
   \   000023                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1828          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1829          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1830            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1831          
   1832            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1833            {
   1834              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1835            }
   1836          
   1837            // Write the leave control
   1838            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1839                           0,
   1840                           sizeof( uint8 ),
   1841                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine2 & 0xFFFF
   1842          }
   1843          
   1844          /*********************************************************************
   1845           * @fn      ZDApp_LeaveCtrlReset
   1846           *
   1847           * @brief   Re-initialize the leave control logic.
   1848           *
   1849           * @param   none
   1850           *
   1851           * @return  none
   1852           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1853          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1854          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1855            // Set leave control to initialized state
   1856            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1857          
   1858            // Write initialized control
   1859            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1860                          0,
   1861                          sizeof( uint8 ),
   1862                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine2 & 0xFFFF
   1863          }
   1864          
   1865          /*********************************************************************
   1866           * @fn      ZDApp_LeaveCtrlBypass
   1867           *
   1868           * @brief   Check if NV restore should be skipped during a leave reset.
   1869           *
   1870           * @param   none
   1871           *
   1872           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1873           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1874          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1875          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1876            uint8 bypass;
   1877          
   1878            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1879            {
   1880              bypass = TRUE;
   1881            }
   1882            else
   1883            {
   1884              bypass = FALSE;
   1885            }
   1886          
   1887            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   02....       LJMP    ?Subroutine3 & 0xFFFF
   1888          }
   1889          
   1890          /*********************************************************************
   1891           * @fn      ZDApp_LeaveCtrlStartup
   1892           *
   1893           * @brief   Check for startup conditions during a leave reset.
   1894           *
   1895           * @param   state      - devState_t determined by leave control logic
   1896           * @param   startDelay - startup delay
   1897           *
   1898           * @return  none
   1899           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1900          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1901          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1902            *startDelay = 0;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   1903          
   1904            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000D   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000010   E0           MOVX    A,@DPTR
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5037         JNC     ??ZDApp_LeaveCtrlStartup_0
   1905            {
   1906              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1907              {
   1908                *startDelay = LEAVE_RESET_DELAY;
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   7488         MOV     A,#-0x78
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   7413         MOV     A,#0x13
   \   000023   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1909              }
   1910              else
   1911              {
   1912                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   00002A   F0           MOVX    @DPTR,A
   1913              }
   1914          
   1915              // Reset leave control logic
   1916              ZDApp_LeaveCtrlReset();
   \   00002B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..01       MOV     ?V0,#0x1
   \   000034   75..00       MOV     ?V1,#0x0
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV     R4,#0x0
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7A85         MOV     R2,#-0x7b
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000047   7404         MOV     A,#0x4
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
   1917            }
   1918          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00004C   02....       LJMP    ??Subroutine49_0 & 0xFFFF
   1919          
   1920          /*********************************************************************
   1921           * @fn      ZDApp_LeaveReset
   1922           *
   1923           * @brief   Setup a device reset due to a leave indication/confirm.
   1924           *
   1925           * @param   ra - reassociate flag
   1926           *
   1927           * @return  none
   1928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1929          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1930          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1931            ZDApp_LeaveCtrlSet( ra );
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveReset_0
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   \                     ??ZDApp_LeaveReset_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000016   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..01       MOV     ?V0,#0x1
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A85         MOV     R2,#-0x7b
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   1932          
   1933            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   000039                ; Setup parameters for call to function osal_get_timeoutEx
   \   000039   7A04         MOV     R2,#0x4
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   90....       MOV     DPTR,#ZDAppTaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000045   EA           MOV     A,R2
   \   000046   4B           ORL     A,R3
   \   000047   4C           ORL     A,R4
   \   000048   4D           ORL     A,R5
   \   000049   7017         JNZ     ??ZDApp_LeaveReset_1
   \   00004B                ; Setup parameters for call to function osal_start_timerEx
   \   00004B   90....       MOV     DPTR,#__Constant_1388
   \   00004E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000051   7A04         MOV     R2,#0x4
   \   000053   7B00         MOV     R3,#0x0
   \   000055   90....       MOV     DPTR,#ZDAppTaskID
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
   \   00005A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   1934          }
   \                     ??ZDApp_LeaveReset_1:
   \   000062   02....       LJMP    ??Subroutine49_0 & 0xFFFF
   1935          
   1936          /*********************************************************************
   1937           * @fn      ZDApp_LeaveUpdate
   1938           *
   1939           * @brief   Update local device data related to leaving device.
   1940           *
   1941           * @param   nwkAddr        - NWK address of leaving device
   1942           * @param   extAddr        - EXT address of leaving device
   1943           * @param   removeChildren - remove children of leaving device
   1944           *
   1945           * @return  none
   1946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1947          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1948                                  uint8 removeChildren )
   1949          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1950            // Remove Apps Key for leaving device
   1951            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   1952          
   1953            // Clear SECURITY bit from Address Manager
   1954            ZDSecMgrAddrClear( extAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   1955          
   1956            if ( pbindRemoveDev )
   \   000020   90....       MOV     DPTR,#pbindRemoveDev
   \   000023   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000026   6032         JZ      ??ZDApp_LeaveUpdate_0
   1957            {
   1958              zAddrType_t devAddr;
   1959          
   1960              // Remove bind entry and all related data
   1961              devAddr.addrMode = Addr64Bit;
   \   000028   7408         MOV     A,#0x8
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7403         MOV     A,#0x3
   \   00002F   F0           MOVX    @DPTR,A
   1962              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   8E..         MOV     ?V4,R6
   \   000032   8F..         MOV     ?V5,R7
   \   000034   75..00       MOV     ?V6,#0x0
   \   000037   78..         MOV     R0,#?V4
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003C   7C08         MOV     R4,#0x8
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?XSTACK_DISP101_8
   \   000045   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   1963          
   1964              pbindRemoveDev(&devAddr);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   AA..         MOV     R2,?XSP + 0
   \   00004F   AB..         MOV     R3,?XSP + 1
   \   000051   90....       MOV     DPTR,#pbindRemoveDev
   \   000054   12....       LCALL   ?Subroutine25 & 0xFFFF
   1965            }
   \                     ??CrossCallReturnLabel_70:
   \   000057   12....       LCALL   ?CALL_IND
   1966          
   1967            // Remove if child
   1968            if ( ZSTACK_ROUTER_BUILD )
   1969            {
   1970              // Router shall notify the Trust Center that a child device has left the network
   1971              if ( AssocIsChild( nwkAddr ) == TRUE )
   1972              {
   1973                  APSME_UpdateDeviceReq_t req;
   1974          
   1975                  // forward authorization to the Trust Center
   1976                  req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   1977                  req.devAddr    = nwkAddr;
   1978                  req.devExtAddr = extAddr;
   1979                  req.status = APSME_UD_DEVICE_LEFT;
   1980          
   1981                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1982                  {
   1983                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1984                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1985                    // with legacy Coordinator devices which can only handle one or the other.
   1986                    if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   1987                    {
   1988                      req.apsSecure = FALSE;
   1989          
   1990                      // send and APSME_UPDATE_DEVICE request to the trust center
   1991                      APSME_UpdateDeviceReq( &req );
   1992                    }
   1993          
   1994                    // send the message APS encrypted
   1995                    req.apsSecure = TRUE;
   1996          
   1997                    // send and APSME_UPDATE_DEVICE request to the trust center
   1998                    APSME_UpdateDeviceReq( &req );
   1999                  }
   2000                  else
   2001                  {
   2002                    req.apsSecure = FALSE;
   2003          
   2004                    // send and APSME_UPDATE_DEVICE request to the trust center
   2005                    APSME_UpdateDeviceReq( &req );
   2006                  }
   2007              }
   2008          
   2009              NLME_RemoveChild( extAddr, removeChildren );
   2010            }
   2011          
   2012            // Remove Routing table related entry
   2013            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005A                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   AA..         MOV     R2,?V0
   \   00005E   AB..         MOV     R3,?V1
   \   000060   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2014          
   2015            // Remove entry from neighborTable
   2016            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   000063                ; Setup parameters for call to function nwkNeighborRemove
   \   000063   90....       MOV     DPTR,#_NIB + 33
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FC           MOV     R4,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FD           MOV     R5,A
   \   00006B   AA..         MOV     R2,?V0
   \   00006D   AB..         MOV     R3,?V1
   \   00006F   12....       LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2017          
   2018            // Schedule to save data to NV
   2019            ZDApp_NwkWriteNVRequest();
   2020          }
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   7F07         MOV     R7,#0x7
   \   000079   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET
   2021          
   2022          /*********************************************************************
   2023           * @fn      ZDApp_NetworkDiscoveryReq
   2024           *
   2025           * @brief   Request a network discovery.
   2026           *
   2027           * @param  scanChannels -
   2028           * @param  scanDuration -
   2029           *
   2030           * @return  ZStatus_t
   2031           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2032          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2033          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2034            // Setup optional filters - tbd
   2035          
   2036            // Request NLME network discovery
   2037            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   2038          }
   2039          
   2040          /*********************************************************************
   2041           * @fn      ZDApp_JoinReq
   2042           *
   2043           * @brief   Request the device to join a parent in a network.
   2044           *
   2045           * @param   channel -
   2046           * @param   panID -
   2047           *
   2048           * @return  ZStatus_t
   2049           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2050          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2051                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2052          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   2053            // Sync up the node with the stack profile (In the case where a pro device
   2054            // joins a non-pro network, or verse versa)
   2055            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV     A,#0xf
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2056          
   2057            // Request NLME Join Request
   2058            return NLME_JoinRequest(extendedPanID, panID,channel,
   2059                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2060                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV     A,#0xe
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V3,A
   \   000021   78..         MOV     R0,#?V3
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV     A,#0xd
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV     R1,?V2
   \   00003B   AC..         MOV     R4,?V0
   \   00003D   AD..         MOV     R5,?V1
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   7404         MOV     A,#0x4
   \   000048   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   2061          
   2062          }
   2063          
   2064          /*********************************************************************
   2065           * @fn      ZDApp_DeviceConfigured
   2066           *
   2067           * @brief   Check to see if the local device is configured (i.e., part
   2068           *          of a network).
   2069           *
   2070           * @param   none
   2071           *
   2072           * @return  TRUE if configured. FALSE, otherwise.
   2073           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2074          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2075          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2076            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   2077          
   2078            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2079                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   A8..         MOV     R0,?XSP + 0
   \   000018   A9..         MOV     R1,?XSP + 1
   \   00001A   88..         MOV     ?V0,R0
   \   00001C   89..         MOV     ?V1,R1
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV     ?V0,#0x2
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C14         MOV     R4,#0x14
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A21         MOV     R2,#0x21
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   2080          
   2081            // Does the NIB have anything more than default?
   2082            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FE         XRL     A,#0xfe
   \   000047   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV     R1,#0x0
   \   000050   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054                REQUIRE ?Subroutine9
   \   000054                ; // Fall through to label ?Subroutine9
   2083          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine48_0 & 0xFFFF
   2084          
   2085          /*********************************************************************
   2086           * CALLBACK FUNCTIONS
   2087           */
   2088          
   2089          
   2090          /*********************************************************************
   2091           * @fn      ZDApp_SendEventMsg()
   2092           *
   2093           * @brief
   2094           *
   2095           *   Sends a Network Join message
   2096           *
   2097           * @param  cmd - command ID
   2098           * @param  len - length (in bytes) of the buf field
   2099           * @param  buf - buffer for the rest of the message.
   2100           *
   2101           * @return  none
   2102           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2103          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2104          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V6,R1
   \   000007   8A..         MOV     ?V5,R2
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   2105            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V4,A
   \   000013   AE..         MOV     R6,?V5
   \   000015                ; Setup parameters for call to function osal_msg_allocate
   \   000015   7B00         MOV     R3,#0x0
   \   000017   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001A   8A..         MOV     ?V0,R2
   \   00001C   8B..         MOV     ?V1,R3
   \   00001E   EA           MOV     A,R2
   \   00001F   45..         ORL     A,?V1
   \   000021   6035         JZ      ??ZDApp_SendEventMsg_0
   \   000023   EE           MOV     A,R6
   \   000024   6020         JZ      ??ZDApp_SendEventMsg_1
   \   000026   E5..         MOV     A,?V2
   \   000028   45..         ORL     A,?V3
   \   00002A   601A         JZ      ??ZDApp_SendEventMsg_1
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   85....       MOV     ?V8,?V2
   \   00002F   85....       MOV     ?V9,?V3
   \   000032   75..00       MOV     ?V10,#0x0
   \   000035   78..         MOV     R0,#?V8
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003A   EE           MOV     A,R6
   \   00003B   FC           MOV     R4,A
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000041   7403         MOV     A,#0x3
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDApp_SendEventMsg_1:
   \   000046   85..82       MOV     DPL,?V0
   \   000049   85..83       MOV     DPH,?V1
   \   00004C   E5..         MOV     A,?V6
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F                ; Setup parameters for call to function osal_msg_send
   \   00004F   AA..         MOV     R2,?V0
   \   000051   AB..         MOV     R3,?V1
   \   000053   A9..         MOV     R1,?V4
   \   000055   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2106          }
   \                     ??ZDApp_SendEventMsg_0:
   \   000058                REQUIRE ?Subroutine5
   \   000058                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0B         MOV     R7,#0xb
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   2107          
   2108          /*********************************************************************
   2109           * @fn      ZDApp_SendMsg()
   2110           *
   2111           * @brief   Sends a OSAL message
   2112           *
   2113           * @param  taskID - Where to send the message
   2114           * @param  cmd - command ID
   2115           * @param  len - length (in bytes) of the buf field
   2116           * @param  buf - buffer for the rest of the message.
   2117           *
   2118           * @return  none
   2119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2120          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2121          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   2122            osal_event_hdr_t *msgPtr;
   2123          
   2124            // Send the address to the task
   2125            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   AE..         MOV     R6,?V5
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   EE           MOV     A,R6
   \   000012   FA           MOV     R2,A
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV     ?V0,R2
   \   00001A   8B..         MOV     ?V1,R3
   2126            if ( msgPtr )
   \   00001C   EA           MOV     A,R2
   \   00001D   45..         ORL     A,?V1
   \   00001F   6035         JZ      ??ZDApp_SendMsg_0
   2127            {
   2128              if ( (len > 0) && (buf != NULL) )
   \   000021   EE           MOV     A,R6
   \   000022   6020         JZ      ??ZDApp_SendMsg_1
   \   000024   E5..         MOV     A,?V2
   \   000026   45..         ORL     A,?V3
   \   000028   601A         JZ      ??ZDApp_SendMsg_1
   2129                osal_memcpy( msgPtr, buf, len );
   \   00002A                ; Setup parameters for call to function osal_memcpy
   \   00002A   85....       MOV     ?V8,?V2
   \   00002D   85....       MOV     ?V9,?V3
   \   000030   75..00       MOV     ?V10,#0x0
   \   000033   78..         MOV     R0,#?V8
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   2130          
   2131              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000044   85..82       MOV     DPL,?V0
   \   000047   85..83       MOV     DPH,?V1
   \   00004A   E5..         MOV     A,?V6
   \   00004C   F0           MOVX    @DPTR,A
   2132              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004D                ; Setup parameters for call to function osal_msg_send
   \   00004D   AA..         MOV     R2,?V0
   \   00004F   AB..         MOV     R3,?V1
   \   000051   A9..         MOV     R1,?V4
   \   000053   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2133            }
   2134          }
   \                     ??ZDApp_SendMsg_0:
   \   000056   80..         SJMP    ?Subroutine5
   2135          
   2136          /*********************************************************************
   2137           * Call Back Functions from NWK  - API
   2138           */
   2139          
   2140          /*********************************************************************
   2141           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2142           *
   2143           * @brief       This function returns a choice of PAN to join.
   2144           *
   2145           * @param       status - return status of the nwk discovery confirm
   2146           *
   2147           * @return      ZStatus_t
   2148           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2149          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2150          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   2151            osal_event_hdr_t msg;
   2152          
   2153            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2154            // Send ZDO_MGMT_NWK_DISC_RSP back
   2155          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2156            if ( zdappMgmtNwkDiscReqInProgress )
   2157            {
   2158              zdappMgmtNwkDiscReqInProgress = false;
   2159              ZDO_FinishProcessingMgmtNwkDiscReq();
   2160            }
   2161            else
   2162          #endif
   2163            {
   2164              // Pass the confirm to another task if it registers the callback
   2165              // Otherwise, pass the confirm to ZDApp.
   2166              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000012   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000015   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000018   6009         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2167              {
   2168                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   00001A                ; Setup parameters for indirect call
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   ?CALL_IND
   \   000021   804D         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2169              }
   2170              else
   2171              {
   2172                // Otherwise, send scan confirm to ZDApp task to proceed
   2173                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
   2174                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   00002A   90....       MOV     DPTR,#ZDAppTaskID
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V3,A
   \   000030                ; Setup parameters for call to function osal_msg_allocate
   \   000030   7A02         MOV     R2,#0x2
   \   000032   7B00         MOV     R3,#0x0
   \   000034   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000037   8A..         MOV     ?V0,R2
   \   000039   8B..         MOV     ?V1,R3
   \   00003B   AE..         MOV     R6,?V0
   \   00003D   AF..         MOV     R7,?V1
   \   00003F   EE           MOV     A,R6
   \   000040   4F           ORL     A,R7
   \   000041   602D         JZ      ??ZDO_NetworkDiscoveryConfirmCB_1
   \   000043                ; Setup parameters for call to function osal_memcpy
   \   000043   7401         MOV     A,#0x1
   \   000045   12....       LCALL   ?XSTACK_DISP100_8
   \   000048   88..         MOV     ?V0,R0
   \   00004A   89..         MOV     ?V1,R1
   \   00004C   75..00       MOV     ?V2,#0x0
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000054   7C02         MOV     R4,#0x2
   \   000056   7D00         MOV     R5,#0x0
   \   000058   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00005B   7403         MOV     A,#0x3
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   7401         MOV     A,#0x1
   \   000066   F0           MOVX    @DPTR,A
   \   000067                ; Setup parameters for call to function osal_msg_send
   \   000067   EE           MOV     A,R6
   \   000068   FA           MOV     R2,A
   \   000069   EF           MOV     A,R7
   \   00006A   FB           MOV     R3,A
   \   00006B   A9..         MOV     R1,?V3
   \   00006D   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2175              }
   2176            }
   2177            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000070   7900         MOV     R1,#0x0
   \   000072   02....       LJMP    ?Subroutine1 & 0xFFFF
   2178          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   4583         ORL     A,DPH
   \   00000B   22           RET
   2179          
   2180          /*********************************************************************
   2181           * @fn          ZDApp_NwkDescListProcessing
   2182           *
   2183           * @brief       This function process the network discovery result and select
   2184           *              a parent device to join itself.
   2185           *
   2186           * @param       none
   2187           *
   2188           * @return      ZStatus_t
   2189           */
   2190          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2191          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2192          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2193            networkDesc_t *pNwkDesc;
   2194            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2195            uint8 stackProfile;
   2196            uint8 stackProfilePro;
   2197            uint8 selected;
   2198          
   2199            // Count the number of nwk descriptors in the list
   2200            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_77
   2201            while (pNwkDesc)
   2202            {
   2203              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V1
   2204              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine23 & 0xFFFF
   2205            }
   \                     ??CrossCallReturnLabel_77:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2206          
   2207            // process discovery results
   2208            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0,#0x0
   2209            selected = FALSE;
   2210          
   2211          
   2212            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V2,#0x0
   2213            {
   2214              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV     ?V4,R2
   \   000029   8B..         MOV     ?V5,R3
   \   00002B   AE..         MOV     R6,?V4
   \   00002D   AF..         MOV     R7,?V5
   2215              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V3,#0x0
   \   000032   8019         SJMP    ??CrossCallReturnLabel_78
   2216              {
   2217                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2218                {
   2219                  // If the extended Pan ID is commissioned to a non zero value
   2220                  // Only join the Pan that has match EPID
   2221                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2222                    continue;
   2223          
   2224                }
   2225                else if ( zgConfigPANID != 0xFFFF )
   2226                {
   2227                  // PAN Id is preconfigured. check if it matches
   2228                  if ( pNwkDesc->panId != zgConfigPANID )
   2229                    continue;
   2230                }
   2231          
   2232                // check that network is allowing joining
   2233                if ( ZSTACK_ROUTER_BUILD )
   2234                {
   2235                  if ( stackProfilePro == FALSE )
   2236                  {
   2237                    if ( !pNwkDesc->routerCapacity )
   2238                    {
   2239                      continue;
   2240                    }
   2241                  }
   2242                  else
   2243                  {
   2244                    if ( !pNwkDesc->deviceCapacity )
   2245                    {
   2246                      continue;
   2247                    }
   2248                  }
   2249                }
   2250                else if ( ZSTACK_END_DEVICE_BUILD )
   2251                {
   2252                  if ( !pNwkDesc->deviceCapacity )
   2253                  {
   2254                    continue;
   2255                  }
   2256                }
   2257          
   2258                // check version of zigbee protocol
   2259                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2260                  continue;
   2261          
   2262                // check version of stack profile
   2263                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2264                {
   2265                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2266                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7008         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV     A,#0x1
   \   00003B   68           XRL     A,R0
   \   00003C   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2267                  {
   2268                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV     ?V0,#0x1
   2269                  }
   2270          
   2271                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV     A,?V2
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC     ?V3
   \   00004A   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00004D   E5..         MOV     A,?V3
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V1
   \   000052   507D         JNC     ??ZDApp_NwkDescListProcessing_7
   \   000054                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000054   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000056   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000058   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005B   E9           MOV     A,R1
   \   00005C   6401         XRL     A,#0x1
   \   00005E   7013         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000060                ; Setup parameters for call to function sAddrExtCmp
   \   000060   EE           MOV     A,R6
   \   000061   240B         ADD     A,#0xb
   \   000063   FC           MOV     R4,A
   \   000064   E4           CLR     A
   \   000065   3F           ADDC    A,R7
   \   000066   FD           MOV     R5,A
   \   000067   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000069   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006B   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00006E   E9           MOV     A,R1
   \   00006F   701D         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   000071   80D5         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000073   90....       MOV     DPTR,#zgConfigPANID
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F4           CPL     A
   \   000078   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   00007D   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   00007F   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000082   90....       MOV     DPTR,#zgConfigPANID
   \   000085   E0           MOVX    A,@DPTR
   \   000086   68           XRL     A,R0
   \   000087   7003         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00008C   70BA         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   60AF         JZ      ??ZDApp_NwkDescListProcessing_6
   \   000099   8E82         MOV     DPL,R6
   \   00009B   8F83         MOV     DPH,R7
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F8           MOV     R0,A
   \   0000A4   90....       MOV     DPTR,#_NIB + 17
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   68           XRL     A,R0
   \   0000A9   709D         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F8           MOV     R0,A
   \   0000B7   90....       MOV     DPTR,#zgStackProfile
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   68           XRL     A,R0
   \   0000BC   602F         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   6401         XRL     A,#0x1
   \   0000C1   6003         JZ      $+5
   \   0000C3   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   68           XRL     A,R0
   \   0000C9   6003         JZ      $+5
   \   0000CB   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000CE   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2272                  {
   2273                    continue;
   2274                  }
   2275                }
   2276          
   2277                break;
   2278              }
   2279          
   2280              if (i < ResultCount)
   2281              {
   2282                selected = TRUE;
   2283                break;
   2284              }
   2285          
   2286              // break if selected or stack profile pro wasn't found
   2287              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000D1   E5..         MOV     A,?V0
   \   0000D3   600C         JZ      ??ZDApp_NwkDescListProcessing_12
   2288              {
   2289                break;
   2290              }
   2291            }
   \   0000D5   05..         INC     ?V2
   \   0000D7   E5..         MOV     A,?V2
   \   0000D9   C3           CLR     C
   \   0000DA   9402         SUBB    A,#0x2
   \   0000DC   5003         JNC     $+5
   \   0000DE   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2292          
   2293            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000E1   E5..         MOV     A,?V1
   \   0000E3   65..         XRL     A,?V3
   \   0000E5   7006         JNZ     ??ZDApp_NwkDescListProcessing_5
   2294            {
   2295              return (NULL);   // couldn't find appropriate PAN to join !
   \   0000E7   7A00         MOV     R2,#0x0
   \   0000E9   7B00         MOV     R3,#0x0
   \   0000EB   8004         SJMP    ??ZDApp_NwkDescListProcessing_13
   2296            }
   2297            else
   2298            {
   2299              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   0000ED   EE           MOV     A,R6
   \   0000EE   FA           MOV     R2,A
   \   0000EF   EF           MOV     A,R7
   \   0000F0   FB           MOV     R3,A
   2300            }
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000F1   02....       LJMP    ?Subroutine6 & 0xFFFF
   2301          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009                REQUIRE ??Subroutine53_0
   \   000009                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
   2302          
   2303          /*********************************************************************
   2304           * @fn          ZDO_NetworkFormationConfirmCB
   2305           *
   2306           * @brief       This function reports the results of the request to
   2307           *              initialize a coordinator in a network.
   2308           *
   2309           * @param       Status - Result of NLME_NetworkFormationRequest()
   2310           *
   2311           * @return      none
   2312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2313          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2314          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2315            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2316          
   2317            if ( Status == ZSUCCESS )
   \   00000A   7019         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2318            {
   2319              // LED on shows Coordinator started
   2320              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2321          
   2322              // LED off forgets HOLD_AUTO_START
   2323              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2324          
   2325          #if defined ( ZBIT )
   2326              SIM_SetColor(0xd0ffd0);
   2327          #endif
   2328          
   2329              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2330              {
   2331                // Began with HOLD_AUTO_START
   2332                devState = DEV_COORD_STARTING;
   \   000020   7408         MOV     A,#0x8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2333              }
   2334            }
   2335          #if defined(BLINK_LEDS)
   2336            else
   2337            {
   2338              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7904         MOV     R1,#0x4
   \   000029   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2339            }
   2340          #endif
   2341          
   2342            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002C                ; Setup parameters for call to function osal_set_event
   \   00002C   7A02         MOV     R2,#0x2
   \   00002E   02....       LJMP    ?Subroutine0 & 0xFFFF
   2343          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A                REQUIRE ??Subroutine54_0
   \   00000A                ; // Fall through to label ??Subroutine54_0
   2344          
   2345          /****************************************************************************
   2346           * @fn          ZDApp_beaconIndProcessing
   2347           *
   2348           * @brief       This function processes the incoming beacon indication.
   2349           *
   2350           *              When another task (MT or App) is registered to process
   2351           *              beacon indication themselves, this function will parse the
   2352           *              beacon payload and pass the beacon descriptor to that task
   2353           *              If no other tasks registered, this function will process
   2354           *              the beacon payload and generate the network descriptor link
   2355           *              list.
   2356           *
   2357           * @param
   2358           *
   2359           * @return      none
   2360           *
   2361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2362          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2363          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2364            // Pass the beacon Indication to another task if it registers the callback
   2365            // Otherwise, process the beacon notification here.
   2366            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00000F   6006         JZ      ??ZDO_beaconNotifyIndCB_0
   2367            {
   2368              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ?CALL_IND
   \   000014   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2369            }
   2370            else
   2371            {
   2372              networkDesc_t *pNwkDesc;
   2373              networkDesc_t *pLastNwkDesc;
   2374              uint8 found = false;
   2375          
   2376              // Add the network to the Network Descriptor List
   2377              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV     DPTR,#NwkDescList
   \   00001A   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   2378              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_74:
   \   00001D   90....       MOV     DPTR,#NwkDescList
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V3,A
   \   000027   EA           MOV     A,R2
   \   000028   2404         ADD     A,#0x4
   \   00002A   F8           MOV     R0,A
   \   00002B   E4           CLR     A
   \   00002C   35..         ADDC    A,?V1
   \   00002E   F9           MOV     R1,A
   \   00002F   EA           MOV     A,R2
   \   000030   2402         ADD     A,#0x2
   \   000032   FA           MOV     R2,A
   \   000033   E4           CLR     A
   \   000034   35..         ADDC    A,?V1
   \   000036   FB           MOV     R3,A
   \   000037   802D         SJMP    ??CrossCallReturnLabel_79
   2379              while (pNwkDesc)
   2380              {
   2381                if ((pNwkDesc->panId == pBeacon->panID) &&
   2382                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FC           MOV     R4,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FD           MOV     R5,A
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6C           XRL     A,R4
   \   000048   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   6D           XRL     A,R5
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00004D   7010         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FC           MOV     R4,A
   \   000057   8882         MOV     DPL,R0
   \   000059   8983         MOV     DPH,R1
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6C           XRL     A,R4
   \   00005D   605F         JZ      ??ZDO_beaconNotifyIndCB_5
   2383                {
   2384                  found = true;
   2385                  break;
   2386                }
   2387                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   00005F   8E..         MOV     ?V2,R6
   \   000061   8F..         MOV     ?V3,R7
   2388                pNwkDesc = pNwkDesc->nextDesc;
   \   000063   12....       LCALL   ?Subroutine23 & 0xFFFF
   2389              }
   \                     ??CrossCallReturnLabel_79:
   \   000066   EE           MOV     A,R6
   \   000067   4F           ORL     A,R7
   \   000068   70CF         JNZ     ??ZDO_beaconNotifyIndCB_2
   2390          
   2391              // If no existing descriptor found, make a new one and add to the list
   2392              if (found == false)
   2393              {
   2394                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00006A                ; Setup parameters for call to function osal_mem_alloc
   \   00006A   7A16         MOV     R2,#0x16
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000071   8A..         MOV     ?V4,R2
   \   000073   8B..         MOV     ?V5,R3
   \   000075   AE..         MOV     R6,?V4
   \   000077   AF..         MOV     R7,?V5
   2395                if ( !pNwkDesc )
   \   000079   EE           MOV     A,R6
   \   00007A   4F           ORL     A,R7
   \   00007B   7003         JNZ     $+5
   \   00007D   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2396                {
   2397                  // Memory alloc failed, discard this beacon
   2398                  return;
   2399                }
   2400          
   2401                // Clear the network descriptor
   2402                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000080                ; Setup parameters for call to function osal_memset
   \   000080   7C16         MOV     R4,#0x16
   \   000082   7D00         MOV     R5,#0x0
   \   000084   7900         MOV     R1,#0x0
   \   000086   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2403          
   2404                // Initialize the descriptor
   2405                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   74FE         MOV     A,#-0x2
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   04           INC     A
   \   000099   12....       LCALL   ?Subroutine13 & 0xFFFF
   2406                pNwkDesc->chosenRouterDepth = 0xFF;
   \                     ??CrossCallReturnLabel_7:
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   F0           MOVX    @DPTR,A
   2407          
   2408                // Save new entry into the descriptor list
   2409                if ( !NwkDescList )
   \   0000A1   90....       MOV     DPTR,#NwkDescList
   \   0000A4   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000A7   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2410                {
   2411                  NwkDescList = pNwkDesc;
   \   0000A9   90....       MOV     DPTR,#NwkDescList
   \   0000AC   800B         SJMP    ??ZDO_beaconNotifyIndCB_7
   2412                }
   2413                else
   2414                {
   2415                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000AE   E5..         MOV     A,?V2
   \   0000B0   2414         ADD     A,#0x14
   \   0000B2   F582         MOV     DPL,A
   \   0000B4   E4           CLR     A
   \   0000B5   35..         ADDC    A,?V3
   \   0000B7   F583         MOV     DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000B9   EE           MOV     A,R6
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   EF           MOV     A,R7
   \   0000BD   F0           MOVX    @DPTR,A
   2416                }
   2417              }
   2418          
   2419              // Update the descriptor with the incoming beacon
   2420              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000BE   85..82       MOV     DPL,?V0
   \   0000C1   85..83       MOV     DPH,?V1
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   F0           MOVX    @DPTR,A
   2421              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000D4   E5..         MOV     A,?V0
   \   0000D6   2408         ADD     A,#0x8
   \   0000D8   F8           MOV     R0,A
   \   0000D9   E4           CLR     A
   \   0000DA   35..         ADDC    A,?V1
   \   0000DC   F9           MOV     R1,A
   \   0000DD   8882         MOV     DPL,R0
   \   0000DF   8983         MOV     DPH,R1
   \   0000E1   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000E4   12....       LCALL   ?Subroutine15 & 0xFFFF
   2422              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_8:
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   8E82         MOV     DPL,R6
   \   0000EC   8F83         MOV     DPH,R7
   \   0000EE   12....       LCALL   ?Subroutine15 & 0xFFFF
   2423              pNwkDesc->panId          = pBeacon->panID;
   \                     ??CrossCallReturnLabel_9:
   \   0000F1   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000F4   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   2424              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_112:
   \   0000F7   E5..         MOV     A,?V0
   \   0000F9   240C         ADD     A,#0xc
   \   0000FB   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   C0E0         PUSH    A
   \   000101   EE           MOV     A,R6
   \   000102   2413         ADD     A,#0x13
   \   000104   F582         MOV     DPL,A
   \   000106   E4           CLR     A
   \   000107   3F           ADDC    A,R7
   \   000108   F583         MOV     DPH,A
   \   00010A   D0E0         POP     A
   \   00010C   F0           MOVX    @DPTR,A
   2425          
   2426              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2427              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   00010D   EE           MOV     A,R6
   \   00010E   240B         ADD     A,#0xb
   \   000110   FA           MOV     R2,A
   \   000111   E4           CLR     A
   \   000112   3F           ADDC    A,R7
   \   000113   FB           MOV     R3,A
   \   000114   8882         MOV     DPL,R0
   \   000116   8983         MOV     DPH,R1
   \   000118   E0           MOVX    A,@DPTR
   \   000119   6401         XRL     A,#0x1
   \   00011B   600E         JZ      ??ZDO_beaconNotifyIndCB_8
   2428              {
   2429                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   00011D                ; Setup parameters for call to function sAddrExtCpy
   \   00011D   E5..         MOV     A,?V0
   \   00011F   240D         ADD     A,#0xd
   \   000121   FC           MOV     R4,A
   \   000122   E4           CLR     A
   \   000123   35..         ADDC    A,?V1
   \   000125   FD           MOV     R5,A
   \   000126   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000129   8009         SJMP    ??ZDO_beaconNotifyIndCB_9
   2430              }
   2431              else
   2432              {
   2433                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   00012B                ; Setup parameters for call to function osal_memset
   \   00012B   7C08         MOV     R4,#0x8
   \   00012D   7D00         MOV     R5,#0x0
   \   00012F   79FF         MOV     R1,#-0x1
   \   000131   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2434              }
   2435          
   2436              // check if this device is a better choice to join...
   2437              // ...dont bother checking assocPermit flag is doing a rejoin
   2438              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2439                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   000134   E5..         MOV     A,?V0
   \   000136   240A         ADD     A,#0xa
   \   000138   F8           MOV     R0,A
   \   000139   E4           CLR     A
   \   00013A   35..         ADDC    A,?V1
   \   00013C   F9           MOV     R1,A
   \   00013D   8882         MOV     DPL,R0
   \   00013F   8983         MOV     DPH,R1
   \   000141   E0           MOVX    A,@DPTR
   \   000142   FB           MOV     R3,A
   \   000143   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   000146   E0           MOVX    A,@DPTR
   \   000147   C3           CLR     C
   \   000148   9B           SUBB    A,R3
   \   000149   4003         JC      $+5
   \   00014B   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   00014E   85..82       MOV     DPL,?V0
   \   000151   85..83       MOV     DPH,?V1
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   6401         XRL     A,#0x1
   \   00015C   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   00015E   90....       MOV     DPTR,#_tmpRejoinState
   \   000161   E0           MOVX    A,@DPTR
   \   000162   7003         JNZ     $+5
   \   000164   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2440              {
   2441                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000167   C2F0         CLR     B.0
   2442                uint8 capacity = FALSE;
   2443          
   2444                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   000169   90....       MOV     DPTR,#_NIB + 96
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   6402         XRL     A,#0x2
   \   00016F   7022         JNZ     ??ZDO_beaconNotifyIndCB_11
   \   000171   8E82         MOV     DPL,R6
   \   000173   8F83         MOV     DPH,R7
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   FA           MOV     R2,A
   \   000180   C3           CLR     C
   \   000181   9B           SUBB    A,R3
   \   000182   500B         JNC     ??ZDO_beaconNotifyIndCB_12
   \   000184   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000187   E0           MOVX    A,@DPTR
   \   000188   C3           CLR     C
   \   000189   9414         SUBB    A,#0x14
   \   00018B   401E         JC      ??ZDO_beaconNotifyIndCB_13
   \   00018D   801E         SJMP    ??ZDO_beaconNotifyIndCB_14
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   00018F   EA           MOV     A,R2
   \   000190   6B           XRL     A,R3
   \   000191   7051         JNZ     ??ZDO_beaconNotifyIndCB_15
   2445                {
   2446                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2447                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2448                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2449                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   2450                  {
   2451                    selected = TRUE;
   2452                  }
   2453                }
   2454                else
   2455                {
   2456                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   000193   8E82         MOV     DPL,R6
   \   000195   8F83         MOV     DPH,R7
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   FA           MOV     R2,A
   \   0001A3   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   C3           CLR     C
   \   0001A8   9A           SUBB    A,R2
   \   0001A9   5039         JNC     ??ZDO_beaconNotifyIndCB_15
   2457                  {
   2458                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001AB   D2F0         SETB    B.0
   2459                  }
   2460                }
   2461          
   2462                if ( ZSTACK_ROUTER_BUILD )
   2463                {
   2464                  capacity = pBeacon->routerCapacity;
   2465                }
   2466                else if ( ZSTACK_END_DEVICE_BUILD )
   2467                {
   2468                  capacity = pBeacon->deviceCapacity;
   2469                }
   2470          
   2471                if ( (capacity) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   0001AD   85..82       MOV     DPL,?V0
   \   0001B0   85..83       MOV     DPH,?V1
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   6042         JZ      ??ZDO_beaconNotifyIndCB_16
   \   0001BD   A2F0         MOV     C,B.0
   \   0001BF   5033         JNC     ??ZDO_beaconNotifyIndCB_17
   2472                {
   2473                  // this is the new chosen router for joining...
   2474                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001C1   85..82       MOV     DPL,?V0
   \   0001C4   85..83       MOV     DPH,?V1
   \   0001C7   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   2475                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_113:
   \   0001D4   8882         MOV     DPL,R0
   \   0001D6   8983         MOV     DPH,R1
   \   0001D8   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001DB   F0           MOVX    @DPTR,A
   2476                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   0001DC   12....       LCALL   ?Subroutine36 & 0xFFFF
   2477                }
   \                     ??CrossCallReturnLabel_98:
   \   0001DF   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001E2   A3           INC     DPTR
   \   0001E3   F0           MOVX    @DPTR,A
   2478          
   2479                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0001E4   85..82       MOV     DPL,?V0
   \   0001E7   85..83       MOV     DPH,?V1
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   600B         JZ      ??ZDO_beaconNotifyIndCB_16
   2480                  pNwkDesc->deviceCapacity = 1;
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   0001F4   8E82         MOV     DPL,R6
   \   0001F6   8F83         MOV     DPH,R7
   \   0001F8   A3           INC     DPTR
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   7401         MOV     A,#0x1
   \   0001FE   F0           MOVX    @DPTR,A
   2481          
   2482                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   0001FF   85..82       MOV     DPL,?V0
   \   000202   85..83       MOV     DPH,?V1
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   E0           MOVX    A,@DPTR
   \   00020C   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2483                  pNwkDesc->routerCapacity = 1;
   \   00020E   8E82         MOV     DPL,R6
   \   000210   8F83         MOV     DPH,R7
   \   000212   A3           INC     DPTR
   \   000213   A3           INC     DPTR
   \   000214   A3           INC     DPTR
   \   000215   7401         MOV     A,#0x1
   \   000217   F0           MOVX    @DPTR,A
   2484              }
   2485            }
   2486          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000218   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?V0
   \   000006   85..83       MOV     DPH,?V1
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E5..         MOV     A,?V0
   \   000002   240B         ADD     A,#0xb
   \   000004                REQUIRE ??Subroutine58_0
   \   000004                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V1
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
   2487          
   2488          /*********************************************************************
   2489           * @fn          ZDO_StartRouterConfirmCB
   2490           *
   2491           * @brief       This function reports the results of the request to
   2492           *              start functioning as a router in a network.
   2493           *
   2494           * @param       Status - Result of NLME_StartRouterRequest()
   2495           *
   2496           * @return      none
   2497           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2498          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2499          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2500            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2501          
   2502            if ( Status == ZSUCCESS )
   \   00000A   7019         JNZ     ??ZDO_StartRouterConfirmCB_0
   2503            {
   2504              // LED on shows Router started
   2505              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2506              // LED off forgets HOLD_AUTO_START
   2507              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2508              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700C         JNZ     ??ZDO_StartRouterConfirmCB_1
   2509              {
   2510                // Began with HOLD_AUTO_START
   2511                devState = DEV_END_DEVICE;
   \   000020   7406         MOV     A,#0x6
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   2512              }
   2513            }
   2514          #if defined(BLINK_LEDS)
   2515            else
   2516            {
   2517              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7904         MOV     R1,#0x4
   \   000029   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2518            }
   2519          #endif
   2520          
   2521            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00002C                ; Setup parameters for call to function osal_set_event
   \   00002C   7A20         MOV     R2,#0x20
   \   00002E   02....       LJMP    ?Subroutine0 & 0xFFFF
   2522          }
   2523          
   2524          /*********************************************************************
   2525           * @fn          ZDO_JoinConfirmCB
   2526           *
   2527           * @brief       This function allows the next higher layer to be notified
   2528           *              of the results of its request to join itself or another
   2529           *              device to a network.
   2530           *
   2531           * @param       Status - Result of NLME_JoinRequest()
   2532           *
   2533           * @return      none
   2534           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2535          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2536          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   2537            (void)PanId;  // remove if this parameter is used.
   2538          
   2539            nwkStatus = (byte)Status;
   \   00000C   E9           MOV     A,R1
   \   00000D   90....       MOV     DPTR,#nwkStatus
   \   000010   F0           MOVX    @DPTR,A
   2540          
   2541            if ( Status == ZSUCCESS )
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDO_JoinConfirmCB_0 & 0xFFFF
   2542            {
   2543              if ( ZSTACK_END_DEVICE_BUILD
   2544                || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2545              {
   2546                neighborEntry_t *pItem;
   2547          
   2548                // We don't need the neighbor table entries.
   2549                // Clear the neighbor Table to remove beacon information
   2550                nwkNeighborInitTable();
   \   000016                ; Setup parameters for call to function nwkNeighborInitTable
   \   000016   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2551          
   2552                // Force a neighbor table entry for the parent
   2553                pItem = nwkNeighborFindEmptySlot();
   \   000019                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000019   12....       LCALL   `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   00001C   8A..         MOV     ?V2,R2
   \   00001E   8B..         MOV     ?V3,R3
   \   000020   AE..         MOV     R6,?V2
   \   000022   AF..         MOV     R7,?V3
   2554                if ( pItem != NULL )
   \   000024   EE           MOV     A,R6
   \   000025   4F           ORL     A,R7
   \   000026   605E         JZ      ??ZDO_JoinConfirmCB_1
   2555                {
   2556                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000028                ; Setup parameters for call to function osal_memset
   \   000028   7C17         MOV     R4,#0x17
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2557                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   000031   90....       MOV     DPTR,#_NIB + 23
   \   000034   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000037   E8           MOV     A,R0
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   E9           MOV     A,R1
   \   00003B   F0           MOVX    @DPTR,A
   2558                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \   00003C                ; Setup parameters for call to function sAddrExtCpy
   \   00003C   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   00003E   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   000040   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000043   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2559                  pItem->panId = _NIB. nwkPanId;
   \   000046   90....       MOV     DPTR,#_NIB + 33
   \   000049   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E8           MOV     A,R0
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E9           MOV     A,R1
   \   00005A   F0           MOVX    @DPTR,A
   2560                  pItem->linkInfo.rxLqi = DEF_LQI;
   \   00005B   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00005E   74AA         MOV     A,#-0x56
   \   000060   F0           MOVX    @DPTR,A
   2561                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   000061   90....       MOV     DPTR,#gLINK_DOWN_TRIGGER
   \   000064   E4           CLR     A
   \   000065   93           MOVC    A,@A+DPTR
   \   000066   7900         MOV     R1,#0x0
   \   000068   2401         ADD     A,#0x1
   \   00006A   F8           MOV     R0,A
   \   00006B   5001         JNC     ??ZDO_JoinConfirmCB_2
   \   00006D   09           INC     R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   00006E   7A02         MOV     R2,#0x2
   \   000070   7B00         MOV     R3,#0x0
   \   000072   12....       LCALL   ?S_DIV_MOD
   \   000075   EE           MOV     A,R6
   \   000076   240D         ADD     A,#0xd
   \   000078   F582         MOV     DPL,A
   \   00007A   E4           CLR     A
   \   00007B   3F           ADDC    A,R7
   \   00007C   F583         MOV     DPH,A
   \   00007E   E8           MOV     A,R0
   \   00007F   F0           MOVX    @DPTR,A
   2562                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   000080   12....       LCALL   ?Subroutine41 & 0xFFFF
   2563                }
   2564              }
   \                     ??CrossCallReturnLabel_56:
   \   000083   7401         MOV     A,#0x1
   \   000085   F0           MOVX    @DPTR,A
   2565          
   2566              // LED on shows device joined
   2567              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \                     ??ZDO_JoinConfirmCB_1:
   \   000086                ; Setup parameters for call to function HalLedSet
   \   000086   7A01         MOV     R2,#0x1
   \   000088   7904         MOV     R1,#0x4
   \   00008A   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2568              // LED off forgets HOLD_AUTO_START
   2569              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   00008D                ; Setup parameters for call to function HalLedSet
   \   00008D   7A00         MOV     R2,#0x0
   \   00008F   7908         MOV     R1,#0x8
   \   000091   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2570              if ( (devState == DEV_HOLD) )
   \   000094   90....       MOV     DPTR,#devState
   \   000097   E0           MOVX    A,@DPTR
   \   000098   700C         JNZ     ??ZDO_JoinConfirmCB_3
   2571              {
   2572                // Began with HOLD_AUTO_START
   2573                devState = DEV_NWK_JOINING;
   \   00009A   7403         MOV     A,#0x3
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   8007         SJMP    ??ZDO_JoinConfirmCB_3
   2574              }
   2575          
   2576              if ( !ZG_SECURE_ENABLED )
   2577              {
   2578                // Notify to save info into NV
   2579                ZDApp_NVUpdate();
   2580              }
   2581            }
   2582            else
   2583            {
   2584          #if defined(BLINK_LEDS)
   2585              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   00009F                ; Setup parameters for call to function HalLedSet
   \   00009F   7A04         MOV     R2,#0x4
   \   0000A1   7904         MOV     R1,#0x4
   \   0000A3   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2586          #endif
   2587            }
   2588          
   2589            // Pass the join confirm to higher layer if callback registered
   2590            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000A6   90....       MOV     DPTR,#zdoCBFunc + 8
   \   0000A9   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000AC   6030         JZ      ??ZDO_JoinConfirmCB_4
   2591            {
   2592              zdoJoinCnf_t joinCnf;
   2593          
   2594              joinCnf.status = Status;
   \   0000AE   85..82       MOV     DPL,?XSP + 0
   \   0000B1   85..83       MOV     DPH,?XSP + 1
   \   0000B4   E5..         MOV     A,?V0
   \   0000B6   F0           MOVX    @DPTR,A
   2595              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   0000B7   90....       MOV     DPTR,#_NIB + 20
   \   0000BA   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000BD   7401         MOV     A,#0x1
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   2596              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_114:
   \   0000C5   90....       MOV     DPTR,#_NIB + 23
   \   0000C8   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000CB   7403         MOV     A,#0x3
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   2597          
   2598              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_115:
   \   0000D3                ; Setup parameters for indirect call
   \   0000D3   AA..         MOV     R2,?XSP + 0
   \   0000D5   AB..         MOV     R3,?XSP + 1
   \   0000D7   8882         MOV     DPL,R0
   \   0000D9   8983         MOV     DPH,R1
   \   0000DB   12....       LCALL   ?CALL_IND
   2599            }
   2600          
   2601            // Notify ZDApp
   2602            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_4:
   \   0000DE   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   FE           MOV     R6,A
   \   0000E3                ; Setup parameters for call to function osal_msg_allocate
   \   0000E3   7A02         MOV     R2,#0x2
   \   0000E5   7B00         MOV     R3,#0x0
   \   0000E7   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0000EA   8A82         MOV     DPL,R2
   \   0000EC   8B83         MOV     DPH,R3
   \   0000EE   E582         MOV     A,DPL
   \   0000F0   4583         ORL     A,DPH
   \   0000F2   6008         JZ      ??ZDO_JoinConfirmCB_5
   \   0000F4   7402         MOV     A,#0x2
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7                ; Setup parameters for call to function osal_msg_send
   \   0000F7   EE           MOV     A,R6
   \   0000F8   F9           MOV     R1,A
   \   0000F9   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2603          
   2604          }
   \                     ??ZDO_JoinConfirmCB_5:
   \   0000FC   7405         MOV     A,#0x5
   \   0000FE   80..         SJMP    ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2605          
   2606          /*********************************************************************
   2607           * @fn          ZDO_PermitJoinCB
   2608           *
   2609           * @brief      This function is called when there is a change in the
   2610           *             device's permit join status.
   2611           *
   2612           * @param       duration - the new duration
   2613           *
   2614           * @return      none
   2615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2616          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2617          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2618            // Pass the Permit Join status to higher layer if callback registered
   2619            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000017   6007         JZ      ??ZDO_PermitJoinCB_0
   2620            {
   2621              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   2622            }
   2623          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV     A,#0x1
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   02....       LJMP    ?Subroutine3 & 0xFFFF
   2624          
   2625          /*********************************************************************
   2626           * @fn          ZDO_AddrChangeIndicationCB
   2627           *
   2628           * @brief       This function notifies the application that this
   2629           *              device's address has changed.  Could happen in
   2630           *              a network with stochastic addressing (PRO).
   2631           *
   2632           * @param       newAddr - the new address
   2633           *
   2634           * @return      none
   2635           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2636          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2637          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2638            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2639            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   2640          
   2641            // Notify to save info into NV
   2642            ZDApp_NVUpdate();
   2643          
   2644            // Notify the applications
   2645            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_75:
   \   00000F                ; Setup parameters for call to function osal_set_event
   \   00000F   7A10         MOV     R2,#0x10
   \   000011   7B00         MOV     R3,#0x0
   \   000013   90....       MOV     DPTR,#ZDAppTaskID
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001B   8049         SJMP    ??CrossCallReturnLabel_76
   2646          
   2647            while (pItem != NULL)
   2648            {
   2649              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   00001D   EE           MOV     A,R6
   \   00001E   2402         ADD     A,#0x2
   \   000020   F8           MOV     R0,A
   \   000021   E4           CLR     A
   \   000022   3F           ADDC    A,R7
   \   000023   F9           MOV     R1,A
   \   000024   88..         MOV     ?V2,R0
   \   000026   89..         MOV     ?V3,R1
   \   000028   8882         MOV     DPL,R0
   \   00002A   F583         MOV     DPH,A
   \   00002C   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   602D         JZ      ??ZDO_AddrChangeIndicationCB_1
   2650              {
   2651                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000032                ; Setup parameters for call to function osal_msg_allocate
   \   000032   7A04         MOV     R2,#0x4
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2652                if (pZDOAddrChangeMsg != NULL)
   \   000039   EA           MOV     A,R2
   \   00003A   4B           ORL     A,R3
   \   00003B   6022         JZ      ??ZDO_AddrChangeIndicationCB_1
   2653                {
   2654                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   74D6         MOV     A,#-0x2a
   \   000043   F0           MOVX    @DPTR,A
   2655                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E5..         MOV     A,?V0
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E5..         MOV     A,?V1
   \   00004C   F0           MOVX    @DPTR,A
   2656                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \   00004D                ; Setup parameters for call to function osal_msg_send
   \   00004D   85..82       MOV     DPL,?V2
   \   000050   85..83       MOV     DPH,?V3
   \   000053   12....       LCALL   ?Subroutine25 & 0xFFFF
   2657                }
   2658              }
   \                     ??CrossCallReturnLabel_72:
   \   000056   A3           INC     DPTR
   \   000057   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2659              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   2660            }
   \                     ??CrossCallReturnLabel_76:
   \   000066   EE           MOV     A,R6
   \   000067   4F           ORL     A,R7
   \   000068   70B3         JNZ     ??ZDO_AddrChangeIndicationCB_0
   2661          
   2662            // Send out a device announce
   2663            ZDApp_AnnounceNewAddress();
   \   00006A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00006A   7A00         MOV     R2,#0x0
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   \   000071                ; Setup parameters for call to function NLME_GetExtAddr
   \   000071   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000074   8A..         MOV     ?V0,R2
   \   000076   8B..         MOV     ?V1,R3
   \   000078   AE..         MOV     R6,?V0
   \   00007A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00007A   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00007D                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00007D   75..00       MOV     ?V0,#0x0
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000088   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00008B   7401         MOV     A,#0x1
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000090                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000090   7A00         MOV     R2,#0x0
   \   000092   7B00         MOV     R3,#0x0
   \   000094   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2664          }
   \   000097                REQUIRE ?Subroutine6
   \   000097                ; // Fall through to label ?Subroutine6
   2665          
   2666          /*********************************************************************
   2667           * @fn          ZDO_JoinIndicationCB
   2668           *
   2669           * @brief       This function allows the next higher layer of a
   2670           *              coordinator to be notified of a remote join request.
   2671           *
   2672           * @param       ShortAddress - 16-bit address
   2673           * @param       ExtendedAddress - IEEE (64-bit) address
   2674           * @param       CapabilityFlags - Association Capability Flags
   2675           * @param       type - of joining -
   2676           *                          NWK_ASSOC_JOIN
   2677           *                          NWK_ASSOC_REJOIN_UNSECURE
   2678           *                          NWK_ASSOC_REJOIN_SECURE
   2679           *
   2680           * @return      ZStatus_t
   2681           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2682          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2683                                          uint8 CapabilityFlags, uint8 type)
   2684          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2685            (void)ExtendedAddress;
   2686          #if ZDO_NV_SAVE_RFDs
   2687            (void)CapabilityFlags;
   2688          
   2689          #else  // if !ZDO_NV_SAVE_RFDs
   2690            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2691          #endif
   2692            {
   2693              ZDApp_NVUpdate();  // Notify to save info into NV.
   2694            }
   2695          
   2696            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2697            {
   2698              if ( type == NWK_ASSOC_JOIN ||
   2699                   type == NWK_ASSOC_REJOIN_UNSECURE ||
   2700                   type == NWK_ASSOC_REJOIN_SECURE )
   2701              {
   2702                uint16 timeToFire;
   2703                ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2704          
   2705                pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   2706          
   2707                if ( pNewDevice == NULL )
   2708                {
   2709                  // Memory alloc failed
   2710                  return ZMemError;
   2711                }
   2712          
   2713                // Add the new device to the New Device List
   2714                if ( ZDApp_NewDeviceList == NULL )
   2715                {
   2716                  // The list is empty, add the first element
   2717                  ZDApp_NewDeviceList = pNewDevice;
   2718                }
   2719                else
   2720                {
   2721                  pDeviceList = ZDApp_NewDeviceList;
   2722          
   2723                  // Walk the list to last element
   2724                  while ( pDeviceList->next )
   2725                  {
   2726                    pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   2727                  }
   2728          
   2729                  // Add new device at the end
   2730                  pDeviceList->next = pNewDevice;
   2731                }
   2732          
   2733                // get the remaining time of the timer
   2734                timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   2735          
   2736                pNewDevice->next = NULL;
   2737                pNewDevice->shortAddr = ShortAddress;
   2738                pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   2739          
   2740                // Start the timer only if there is no pending timer
   2741                if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   2742                {
   2743                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   2744                }
   2745              }
   2746            }
   2747          
   2748            return ZSuccess;
   \   000000                REQUIRE ?Subroutine4
   \   000000                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   2749          }
   2750          
   2751          /*********************************************************************
   2752           * @fn          ZDO_ConcentratorIndicationCB
   2753           *
   2754           * @brief       This function allows the next higher layer of a
   2755           *              device to be notified of existence of the concentrator.
   2756           *
   2757           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2758           * @param       extAddr - pointer to extended Address
   2759           *                        NULL if not available
   2760           * @param       pktCost - PktCost from RREQ
   2761           *
   2762           * @return      void
   2763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2764          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2765          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2766            zdoConcentratorInd_t conInd;
   2767          
   2768            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   2769            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_118:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2770            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2771          
   2772            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000024   6007         JZ      ??ZDO_ConcentratorIndicationCB_0
   2773            {
   2774              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ?CALL_IND
   2775            }
   2776          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D                REQUIRE ?Subroutine7
   \   00002D                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7405         MOV     A,#0x5
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   80..         SJMP    ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine60_0
   \   000006                ; // Fall through to label ??Subroutine60_0
   2777          
   2778          /*********************************************************************
   2779           * @fn          ZDO_LeaveCnf
   2780           *
   2781           * @brief       This function allows the next higher layer to be
   2782           *              notified of the results of its request for this or
   2783           *              a child device to leave the network.
   2784           *
   2785           * @param       cnf - NLME_LeaveCnf_t
   2786           *
   2787           * @return      none
   2788           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2789          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2790          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2791            // Check for this device
   2792            if ( osal_ExtAddrEqual( cnf->extAddr,
   2793                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000017   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV     A,R1
   \   00001B   6401         XRL     A,#0x1
   \   00001D   7070         JNZ     ??ZDO_LeaveCnf_0
   2794            {
   2795              // Pass the leave confirm to higher layer if callback registered
   2796              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2797                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000025   600E         JZ      ??ZDO_LeaveCnf_1
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   ?CALL_IND
   \   00002E   8B..         MOV     ?V1,R3
   \   000030   EA           MOV     A,R2
   \   000031   45..         ORL     A,?V1
   \   000033   705A         JNZ     ??ZDO_LeaveCnf_0
   2798              {
   2799                // Prepare to leave with reset
   2800                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000035   EE           MOV     A,R6
   \   000036   240B         ADD     A,#0xb
   \   000038   12....       LCALL   ?Subroutine21 & 0xFFFF
   2801              }
   2802            }
   \                     ??CrossCallReturnLabel_81:
   \   00003B   7003         JNZ     ??ZDO_LeaveCnf_2
   \   00003D   7403         MOV     A,#0x3
   \   00003F   F0           MOVX    @DPTR,A
   \                     ??ZDO_LeaveCnf_2:
   \   000040                ; Setup parameters for call to function osal_nv_write
   \   000040   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000043   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..01       MOV     ?V0,#0x1
   \   00004E   75..00       MOV     ?V1,#0x0
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   7C00         MOV     R4,#0x0
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7A85         MOV     R2,#-0x7b
   \   00005C   7B00         MOV     R3,#0x0
   \   00005E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000061   7404         MOV     A,#0x4
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
   \   000066                ; Setup parameters for call to function osal_get_timeoutEx
   \   000066   7A04         MOV     R2,#0x4
   \   000068   7B00         MOV     R3,#0x0
   \   00006A   90....       MOV     DPTR,#ZDAppTaskID
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000072   EA           MOV     A,R2
   \   000073   4B           ORL     A,R3
   \   000074   4C           ORL     A,R4
   \   000075   4D           ORL     A,R5
   \   000076   7017         JNZ     ??ZDO_LeaveCnf_0
   \   000078                ; Setup parameters for call to function osal_start_timerEx
   \   000078   90....       MOV     DPTR,#__Constant_1388
   \   00007B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00007E   7A04         MOV     R2,#0x4
   \   000080   7B00         MOV     R3,#0x0
   \   000082   90....       MOV     DPTR,#ZDAppTaskID
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00008A   7404         MOV     A,#0x4
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   2803            else if ( ZSTACK_ROUTER_BUILD )
   2804            {
   2805              // Remove device address(optionally descendents) from data
   2806              ZDApp_LeaveUpdate( cnf->dstAddr,
   2807                                 cnf->extAddr,
   2808                                 cnf->removeChildren );
   2809            }
   2810          }
   \                     ??ZDO_LeaveCnf_0:
   \   00008F   02....       LJMP    ??Subroutine49_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine55_0
   \   000006                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000005   7401         MOV     A,#0x1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   68           XRL     A,R0
   \   000009   22           RET
   2811          
   2812          /*********************************************************************
   2813           * @fn          ZDO_LeaveInd
   2814           *
   2815           * @brief       This function allows the next higher layer of a
   2816           *              device to be notified of a remote leave request or
   2817           *              indication.
   2818           *
   2819           * @param       ind - NLME_LeaveInd_t
   2820           *
   2821           * @return      none
   2822           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2823          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2824          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2825            uint8 leave;
   2826          
   2827          
   2828            // Parent is requesting the leave - NWK layer filters out illegal
   2829            // requests
   2830            if ( ind->request == TRUE )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   6003         JZ      $+5
   \   000021   02....       LJMP    ??ZDO_LeaveInd_0 & 0xFFFF
   2831            {
   2832              // Only respond if we are not rejoining the network
   2833              if ( ind->rejoin == FALSE )
   \   000024   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000027   7015         JNZ     ??ZDO_LeaveInd_1
   2834              {
   2835                // Notify network of leave
   2836                NLME_LeaveRsp_t rsp;
   2837                rsp.rejoin = ind->rejoin;
   \   000029   7401         MOV     A,#0x1
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
   2838          
   2839                if ( ZSTACK_ROUTER_BUILD )
   2840                {
   2841                  rsp.removeChildren = ind->removeChildren;
   2842                }
   2843                else if ( ZSTACK_END_DEVICE_BUILD )
   2844                {
   2845                  rsp.removeChildren = 0;
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   F0           MOVX    @DPTR,A
   2846                }
   2847          
   2848                NLME_LeaveRsp( &rsp );
   \   000037                ; Setup parameters for call to function NLME_LeaveRsp
   \   000037   AA..         MOV     R2,?XSP + 0
   \   000039   AB..         MOV     R3,?XSP + 1
   \   00003B   12....       LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   2849              }
   2850          
   2851              if ( ZSTACK_END_DEVICE_BUILD )
   2852              {
   2853                // Stop polling and get ready to reset
   2854                NLME_SetPollRate( 0 );
   \                     ??ZDO_LeaveInd_1:
   \   00003E                ; Setup parameters for call to function NLME_SetPollRate
   \   00003E   7A00         MOV     R2,#0x0
   \   000040   7B00         MOV     R3,#0x0
   \   000042   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2855              }
   2856          
   2857              // Prepare to leave with reset
   2858              ZDApp_LeaveReset( ind->rejoin );
   \   000045   85..82       MOV     DPL,?V0
   \   000048   85..83       MOV     DPH,?V1
   \   00004B   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   2859            }
   \                     ??CrossCallReturnLabel_80:
   \   00004E   7003         JNZ     ??ZDO_LeaveInd_2
   \   000050   7403         MOV     A,#0x3
   \   000052   F0           MOVX    @DPTR,A
   \                     ??ZDO_LeaveInd_2:
   \   000053                ; Setup parameters for call to function osal_nv_write
   \   000053   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000056   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..01       MOV     ?V0,#0x1
   \   000061   75..00       MOV     ?V1,#0x0
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV     R4,#0x0
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   7A85         MOV     R2,#-0x7b
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079                ; Setup parameters for call to function osal_get_timeoutEx
   \   000079   7A04         MOV     R2,#0x4
   \   00007B   7B00         MOV     R3,#0x0
   \   00007D   90....       MOV     DPTR,#ZDAppTaskID
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000085   EA           MOV     A,R2
   \   000086   4B           ORL     A,R3
   \   000087   4C           ORL     A,R4
   \   000088   4D           ORL     A,R5
   \   000089   6003         JZ      $+5
   \   00008B   02....       LJMP    ??ZDO_LeaveInd_3 & 0xFFFF
   \                     ??ZDO_LeaveInd_4:
   \   00008E                ; Setup parameters for call to function osal_start_timerEx
   \   00008E   90....       MOV     DPTR,#__Constant_1388
   \   000091   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000094   7A04         MOV     R2,#0x4
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#ZDAppTaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000A0   7404         MOV     A,#0x4
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   8079         SJMP    ??ZDO_LeaveInd_3
   2860            else
   2861            {
   2862              leave = FALSE;
   2863          
   2864              // Check if this device needs to leave as a child or descendent
   2865              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   0000A7                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   0000A7   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   0000AA   8A..         MOV     ?V0,R2
   \   0000AC   8B..         MOV     ?V1,R3
   \   0000AE   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000B1   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000B4   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000B7   E5..         MOV     A,?V0
   \   0000B9   6A           XRL     A,R2
   \   0000BA   7003         JNZ     ??ZDO_LeaveInd_5
   \   0000BC   E5..         MOV     A,?V1
   \   0000BE   6B           XRL     A,R3
   \                     ??ZDO_LeaveInd_5:
   \   0000BF   7055         JNZ     ??ZDO_LeaveInd_6
   2866              {
   2867                if ( ( ind->removeChildren == TRUE               ) ||
   2868                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2869                       NODETYPE_DEVICE                           )    )
   \   0000C1   7401         MOV     A,#0x1
   \   0000C3   69           XRL     A,R1
   \   0000C4   600A         JZ      ??ZDO_LeaveInd_7
   \   0000C6   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   5407         ANL     A,#0x7
   \   0000CC   6402         XRL     A,#0x2
   \   0000CE   7046         JNZ     ??ZDO_LeaveInd_6
   2870                {
   2871                  leave = TRUE;
   2872                }
   2873              }
   2874              else if ( ind->removeChildren == TRUE )
   2875              {
   2876                // Check NWK address allocation algorithm
   2877                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2878              }
   2879          
   2880              if ( leave == TRUE )
   2881              {
   2882                // Prepare to leave with reset
   2883                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_7:
   \   0000D0   EE           MOV     A,R6
   \   0000D1   240C         ADD     A,#0xc
   \   0000D3   12....       LCALL   ?Subroutine21 & 0xFFFF
   2884              }
   \                     ??CrossCallReturnLabel_82:
   \   0000D6   7003         JNZ     ??ZDO_LeaveInd_8
   \   0000D8   7403         MOV     A,#0x3
   \   0000DA   F0           MOVX    @DPTR,A
   \                     ??ZDO_LeaveInd_8:
   \   0000DB                ; Setup parameters for call to function osal_nv_write
   \   0000DB   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   0000DE   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   0000E1   78..         MOV     R0,#?V0
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   75..01       MOV     ?V0,#0x1
   \   0000E9   75..00       MOV     ?V1,#0x0
   \   0000EC   78..         MOV     R0,#?V0
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F1   7C00         MOV     R4,#0x0
   \   0000F3   7D00         MOV     R5,#0x0
   \   0000F5   7A85         MOV     R2,#-0x7b
   \   0000F7   7B00         MOV     R3,#0x0
   \   0000F9   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000FC   7404         MOV     A,#0x4
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000101                ; Setup parameters for call to function osal_get_timeoutEx
   \   000101   7A04         MOV     R2,#0x4
   \   000103   7B00         MOV     R3,#0x0
   \   000105   90....       MOV     DPTR,#ZDAppTaskID
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F9           MOV     R1,A
   \   00010A   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00010D   EA           MOV     A,R2
   \   00010E   4B           ORL     A,R3
   \   00010F   4C           ORL     A,R4
   \   000110   4D           ORL     A,R5
   \   000111   700D         JNZ     ??ZDO_LeaveInd_3
   \   000113   02....       LJMP    ??ZDO_LeaveInd_4 & 0xFFFF
   2885              else
   2886              {
   2887                // Remove device address(optionally descendents) from data
   2888                ZDApp_LeaveUpdate( ind->srcAddr,
   2889                                   ind->extAddr,
   2890                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_6:
   \   000116                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000116   EE           MOV     A,R6
   \   000117   2402         ADD     A,#0x2
   \   000119   FC           MOV     R4,A
   \   00011A   E4           CLR     A
   \   00011B   3F           ADDC    A,R7
   \   00011C   FD           MOV     R5,A
   \   00011D   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2891              }
   2892            }
   2893          
   2894            // Pass the leave indication to higher layer if callback registered.
   2895            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_3:
   \   000120   90....       MOV     DPTR,#zdoCBFunc + 12
   \   000123   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000126   6007         JZ      ??ZDO_LeaveInd_9
   2896            {
   2897              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   000128                ; Setup parameters for indirect call
   \   000128   EE           MOV     A,R6
   \   000129   FA           MOV     R2,A
   \   00012A   EF           MOV     A,R7
   \   00012B   FB           MOV     R3,A
   \   00012C   12....       LCALL   ?CALL_IND
   2898            }
   2899          }
   \                     ??ZDO_LeaveInd_9:
   \   00012F   02....       LJMP    ?Subroutine9 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2900          
   2901          /*********************************************************************
   2902           * @fn          ZDO_SyncIndicationCB
   2903           *
   2904           * @brief       This function allows the next higher layer of a
   2905           *              coordinator to be notified of a loss of synchronization
   2906           *                          with the parent/child device.
   2907           *
   2908           * @param       type: 0 - child; 1 - parent
   2909           *
   2910           *
   2911           * @return      none
   2912           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2913          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2914          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   2915            (void)shortAddr;  // Remove this line if this parameter is used.
   2916          
   2917            if ( ZSTACK_END_DEVICE_BUILD
   2918              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2919            {
   2920              if ( type == 1 )
   \   000007   7401         MOV     A,#0x1
   \   000009   6F           XRL     A,R7
   \   00000A   7021         JNZ     ??ZDO_SyncIndicationCB_0
   2921              {
   2922                // We lost contact with our parent.  Clear the neighbor Table.
   2923                nwkNeighborInitTable();
   \   00000C                ; Setup parameters for call to function nwkNeighborInitTable
   \   00000C   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2924          
   2925                // Start the rejoin process.
   2926                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   00000F   90....       MOV     DPTR,#ZDAppTaskID
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014                ; Setup parameters for call to function osal_msg_allocate
   \   000014   7A02         MOV     R2,#0x2
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   E582         MOV     A,DPL
   \   000021   4583         ORL     A,DPH
   \   000023   6008         JZ      ??ZDO_SyncIndicationCB_0
   \   000025   7403         MOV     A,#0x3
   \   000027   F0           MOVX    @DPTR,A
   \   000028                ; Setup parameters for call to function osal_msg_send
   \   000028   EE           MOV     A,R6
   \   000029   F9           MOV     R1,A
   \   00002A   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2927              }
   2928            }
   2929          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   00002D   02....       LJMP    ??Subroutine49_0 & 0xFFFF
   2930          
   2931          /*********************************************************************
   2932           * @fn          ZDO_ManytoOneFailureIndicationCB
   2933           *
   2934           * @brief       This function allows the next higher layer of a
   2935           *              concentrator to be notified of a many-to-one route
   2936           *              failure.
   2937           *
   2938           * @param       none
   2939           *
   2940           *
   2941           * @return      none
   2942           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2943          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2944          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2945            // By default, the concentrator automatically redo many-to-one route
   2946            // discovery to update all many-to-one routes in the network
   2947            // If you want anything processing other than the default,
   2948            // please replace the following code.
   2949          
   2950            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   2951          }
   \   000007                REQUIRE ?Subroutine3
   \   000007                ; // Fall through to label ?Subroutine3
   2952          
   2953          /*********************************************************************
   2954           * @fn          ZDO_PollConfirmCB
   2955           *
   2956           * @brief       This function allows the next higher layer to be
   2957           *              notified of a Poll Confirm.
   2958           *
   2959           * @param       none
   2960           *
   2961           * @return      none
   2962           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2963          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2964          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2965            (void)status;  // Remove this line if this parameter is used.
   2966            return;
   \   000000   02....       LJMP    ?BRET
   2967          }
   2968          
   2969          /*********************************************************************
   2970           * @fn          ZDO_NetworkStatusCB
   2971           *
   2972           * @brief       Network Status Callback function
   2973           *
   2974           * @param       nwkDstAddr - message's destination address- used to determine
   2975           *                           if the message was intended for this device or
   2976           *                           a sleeping end device.
   2977           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   2978           * @param       dstAddr - the destination address related to the status code
   2979           *
   2980           * @return      none
   2981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2982          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   2983          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2984            (void)dstAddr;     // Remove this line if this parameter is used.
   2985          
   2986            if ( (nwkDstAddr == NLME_GetShortAddr())
   2987                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   2988            {
   2989              // Routing error for dstAddr, this is informational and a Route
   2990              // Request should happen automatically.
   2991            }
   2992          }
   \   000007   80..         SJMP    ?Subroutine3
   2993          
   2994          /******************************************************************************
   2995           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2996           *
   2997           * @brief       Stub routine implemented by NHLE. NHLE should call
   2998           *              <AddrMgrWriteNV> when appropriate.
   2999           *
   3000           * @param       none
   3001           *
   3002           * @return      none
   3003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3004          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3005          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3006          #if defined ( NV_RESTORE )
   3007            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   3008            {
   3009              // Trigger to save info into NV
   3010              ZDApp_NVUpdate();
   3011            }
   3012          #endif
   3013          }
   \   000000   02....       LJMP    ?BRET
   3014          
   3015          /*********************************************************************
   3016           * Call Back Functions from Security  - API
   3017           */
   3018          
   3019           /*********************************************************************
   3020           * @fn          ZDO_UpdateDeviceIndication
   3021           *
   3022           * @brief       This function notifies the "Trust Center" of a
   3023           *              network when a device joins or leaves the network.
   3024           *
   3025           * @param       extAddr - pointer to 64 bit address of new device
   3026           * @param       status  - 0 if a new device joined securely
   3027           *                      - 1 if a new device joined un-securely
   3028           *                      - 2 if a device left the network
   3029           *
   3030           * @return      true if newly joined device should be allowed to
   3031           *                                              remain on network
   3032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3033          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3034          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3035            // can implement a network access policy based on the
   3036            // IEEE address of newly joining devices...
   3037            (void)extAddr;
   3038            (void)status;
   3039          
   3040            return ZSuccess;
   \   000000   02....       LJMP    ?Subroutine4 & 0xFFFF
   3041          }
   3042          
   3043          /*********************************************************************
   3044           * @fn          ZDApp_InMsgCB
   3045           *
   3046           * @brief       This function is called to pass up any message that is
   3047           *              not yet supported.  This allows for the developer to
   3048           *              support features themselves..
   3049           *
   3050           * @return      none
   3051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3052          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3054            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000015   5480         ANL     A,#0x80
   \   000017   703C         JNZ     ??ZDApp_InMsgCB_0
   3055            {
   3056              // Handle the response message
   3057            }
   3058            else
   3059            {
   3060              // Handle the request message by sending a generic "not supported".
   3061              // Device Announce doesn't have a response.
   3062              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000019   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   7036         JNZ     ??ZDApp_InMsgCB_0
   \   00001F   7413         MOV     A,#0x13
   \   000021   68           XRL     A,R0
   \   000022   7001         JNZ     ??ZDApp_InMsgCB_1
   \   000024   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000025   602E         JZ      ??ZDApp_InMsgCB_0
   3063              {
   3064                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3065                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000027                ; Setup parameters for call to function ZDP_GenericRsp
   \   000027   E8           MOV     A,R0
   \   000028   F5..         MOV     ?V0,A
   \   00002A   E9           MOV     A,R1
   \   00002B   4480         ORL     A,#0x80
   \   00002D   F5..         MOV     ?V1,A
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   E4           CLR     A
   \   000035   F5..         MOV     ?V0,A
   \   000037   F5..         MOV     ?V1,A
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   12....       LCALL   ?Subroutine41 & 0xFFFF
   3066              }
   3067            }
   \                     ??CrossCallReturnLabel_57:
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FD           MOV     R5,A
   \   000043   7C84         MOV     R4,#-0x7c
   \   000045   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000048   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   3068          }
   \                     ??ZDApp_InMsgCB_0:
   \   000055   02....       LJMP    ??Subroutine49_0 & 0xFFFF
   3069          
   3070          
   3071          /*********************************************************************
   3072           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3073           *
   3074           * @brief   Changes the Match Descriptor Response permission.
   3075           *
   3076           * @param   endpoint - endpoint to allow responses
   3077           * @param   action - true to allow responses, false to not
   3078           *
   3079           * @return  none
   3080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3081          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3082          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3083            // Store the action
   3084            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   3085          }
   \   000008   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   3086          
   3087          /*********************************************************************
   3088           * @fn      ZDApp_NetworkInit()
   3089           *
   3090           * @brief   Used to start the network joining process
   3091           *
   3092           * @param   delay - mSec delay to wait before starting
   3093           *
   3094           * @return  none
   3095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3096          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3097          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3098            if ( delay )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6021         JZ      ??ZDApp_NetworkInit_0
   3099            {
   3100              // Wait awhile before starting the device
   3101              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV     ?V0,R2
   \   00000B   8B..         MOV     ?V1,R3
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V2,A
   \   000010   F5..         MOV     ?V3,A
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   800C         SJMP    ??ZDApp_NetworkInit_1
   3102            }
   3103            else
   3104            {
   3105              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3106            }
   3107          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP    ??Subroutine52_0 & 0xFFFF
   3108          
   3109          /*********************************************************************
   3110           * @fn      ZDApp_NwkStateUpdateCB()
   3111           *
   3112           * @brief   This function notifies that this device's network
   3113           *          state info has been changed.
   3114           *
   3115           * @param   none
   3116           *
   3117           * @return  none
   3118           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3119          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3120          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3121            // Notify to save info into NV
   3122            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   3123            {
   3124              // Trigger to save info into NV
   3125              ZDApp_NVUpdate();
   3126            }
   3127          }
   \   000010   02....       LJMP    ?Subroutine3 & 0xFFFF
   3128          
   3129          /*********************************************************************
   3130           * @fn      ZDApp_NodeProfileSync()
   3131           *
   3132           * @brief   Sync node with stack profile.
   3133           *
   3134           * @param   stackProfile - stack profile of the network to join
   3135           *
   3136           * @return  none
   3137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3138          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3139          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3140            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501B         JNC     ??ZDApp_NodeProfileSync_0
   3141            {
   3142              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6014         JZ      ??ZDApp_NodeProfileSync_0
   3143              {
   3144                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   4402         ORL     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
   3145                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   740C         MOV     A,#0xc
   \   000025   F0           MOVX    @DPTR,A
   3146                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000026                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3147              }
   3148            }
   3149          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   00002A   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   3150          
   3151          /*********************************************************************
   3152           * @fn      ZDApp_StartJoiningCycle()
   3153           *
   3154           * @brief   Starts the joining cycle of a device.  This will only
   3155           *          continue an already started (or stopped) joining cycle.
   3156           *
   3157           * @param   none
   3158           *
   3159           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3160           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3161          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3162          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3163            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7015         JNZ     ??ZDApp_StartJoiningCycle_1
   3164            {
   3165              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   3166              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   FA           MOV     R2,A
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   90....       MOV     DPTR,#ZDAppTaskID
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3167          
   3168              return ( TRUE );
   \   000022   7901         MOV     R1,#0x1
   \   000024   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3169            }
   3170            else
   3171              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000026   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000028   02....       LJMP    ?Subroutine3 & 0xFFFF
   3172          }
   3173          
   3174          /*********************************************************************
   3175           * @fn      ZDApp_StopJoiningCycle()
   3176           *
   3177           * @brief   Stops the joining or rejoining process of a device.
   3178           *
   3179           * @param   none
   3180           *
   3181           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3182           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3183          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3184          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3185            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   3186            {
   3187              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   3188              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3189            }
   3190            else
   3191              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ?Subroutine3 & 0xFFFF
   3192          }
   3193          
   3194          /*********************************************************************
   3195           * @fn      ZDApp_AnnounceNewAddress()
   3196           *
   3197           * @brief   Send Device Announce and hold all transmissions for
   3198           *          new address timeout.
   3199           *
   3200           * @param   none
   3201           *
   3202           * @return  none
   3203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EE           MOV     A,R6
   \   000006   FC           MOV     R4,A
   \   000007   AD..         MOV     R5,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3204          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3205          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3206          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3207            // Turn off data request hold
   3208            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3209          #endif
   3210          
   3211            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3212                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV     ?V0,R2
   \   000011   8B..         MOV     ?V1,R3
   \   000013   AE..         MOV     R6,?V0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0,#0x0
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000023   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   3213          
   3214          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3215            // Setup the timeout
   3216            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   00002B                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3217          #endif
   3218          }
   \   000032   02....       LJMP    ??Subroutine49_0 & 0xFFFF
   3219          
   3220          /*********************************************************************
   3221           * @fn          ZDApp_NVUpdate
   3222           *
   3223           * @brief       Set the NV Update Timer.
   3224           *
   3225           * @param       none
   3226           *
   3227           * @return      none
   3228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3229          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3230          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3231          #if defined ( NV_RESTORE )
   3232            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3233          #endif
   3234          }
   \   000000   02....       LJMP    ?BRET
   3235          
   3236          /*********************************************************************
   3237           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3238           *
   3239           * @brief   Returns a PAN ID for the network layer to use during
   3240           *          a coordinator start and there is another network with
   3241           *          the intended PANID.
   3242           *
   3243           * @param   panid - the intended PAN ID
   3244           *
   3245           * @return  PANID to try
   3246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3247          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3248          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3249            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3250          }
   3251          
   3252          /*********************************************************************
   3253           * @fn          ZDO_SrcRtgIndCB
   3254           *
   3255           * @brief       This function notifies the ZDO available src route record received.
   3256           *
   3257           * @param       srcAddr - source address of the source route
   3258           * @param       relayCnt - number of devices in the relay list
   3259           * @param       relayList - relay list of the source route
   3260           *
   3261           * @return      none
   3262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3263          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3264          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3265            zdoSrcRtg_t srcRtg;
   3266          
   3267            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   3268            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_119:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   3269            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3270          
   3271            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000024   600A         JZ      ??ZDO_SrcRtgIndCB_0
   3272            {
   3273              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   3274            }
   \                     ??CrossCallReturnLabel_69:
   \   00002D   12....       LCALL   ?CALL_IND
   3275          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030   02....       LJMP    ?Subroutine7 & 0xFFFF
   3276          
   3277          /*********************************************************************
   3278           * @fn          ZDApp_InitZdoCBFunc
   3279           *
   3280           * @brief       Call this function to initialize zdoCBFunc[]
   3281           *
   3282           * @param       none
   3283           *
   3284           * @return      none
   3285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3286          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3287          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3288            uint8 i;
   3289          
   3290            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   78..         MOV     R0,#zdoCBFunc & 0xff
   \   000006   79..         MOV     R1,#(zdoCBFunc >> 8) & 0xff
   3291            {
   3292              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
   3293            }
   \   000010   E8           MOV     A,R0
   \   000011   2402         ADD     A,#0x2
   \   000013   F8           MOV     R0,A
   \   000014   5001         JNC     ??ZDApp_InitZdoCBFunc_1
   \   000016   09           INC     R1
   \                     ??ZDApp_InitZdoCBFunc_1:
   \   000017   64..         XRL     A,#(zdoCBFunc + 18) & 0xff
   \   000019   7003         JNZ     ??ZDApp_InitZdoCBFunc_2
   \   00001B   E9           MOV     A,R1
   \   00001C   64..         XRL     A,#((zdoCBFunc + 18) >> 8) & 0xff
   \                     ??ZDApp_InitZdoCBFunc_2:
   \   00001E   70E8         JNZ     ??ZDApp_InitZdoCBFunc_0
   3294          }
   \   000020   02....       LJMP    ?Subroutine3 & 0xFFFF
   3295          
   3296          /*********************************************************************
   3297           * @fn          ZDO_RegisterForZdoCB
   3298           *
   3299           * @brief       Call this function to register the higher layer (for
   3300           *              example, the Application layer or MT layer) with ZDO
   3301           *              callbacks to get notified of some ZDO indication like
   3302           *              existence of a concentrator or receipt of a source
   3303           *              route record.
   3304           *
   3305           * @param       indID - ZDO Indication ID
   3306           * @param       pFn   - Callback function pointer
   3307           *
   3308           * @return      ZSuccess - successful, ZInvalidParameter if not
   3309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3310          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3311          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3312            // Check the range of the indication ID
   3313            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500B         JNC     ??ZDO_RegisterForZdoCB_0
   3314            {
   3315              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00000F   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   3316              return ZSuccess;
   \                     ??CrossCallReturnLabel_116:
   \   000012   7900         MOV     R1,#0x0
   \   000014   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3317            }
   3318          
   3319            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP    ?Subroutine3 & 0xFFFF
   3320          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   29           ADD     A,R1
   \   000001   F8           MOV     R0,A
   \   000002   E4           CLR     A
   \   000003   33           RLC     A
   \   000004   F9           MOV     R1,A
   \   000005   74..         MOV     A,#zdoCBFunc & 0xff
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000C   39           ADDC    A,R1
   \   00000D   F583         MOV     DPH,A
   \   00000F   22           RET
   3321          
   3322          /*********************************************************************
   3323           * @fn          ZDO_DeregisterForZdoCB
   3324           *
   3325           * @brief       Call this function to de-register the higher layer (for
   3326           *              example, the Application layer or MT layer) with ZDO
   3327           *              callbacks to get notified of some ZDO indication like
   3328           *              existence of a concentrator or receipt of a source
   3329           *              route record.
   3330           *
   3331           * @param       indID - ZDO Indication ID
   3332           *
   3333           * @return      ZSuccess - successful, ZInvalidParameter if not
   3334           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3335          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3336          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3337            // Check the range of the indication ID
   3338            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500B         JNC     ??ZDO_DeregisterForZdoCB_0
   3339            {
   3340              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV     A,R2
   \   00000C   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
   3341              return ZSuccess;
   \   000013   F9           MOV     R1,A
   \   000014   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3342            }
   3343          
   3344            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000018   02....       LJMP    ?Subroutine3 & 0xFFFF
   3345          }
   3346          
   3347          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3348          #if defined ( REFLECTOR )
   3349          /*********************************************************************
   3350           * @fn          ZDApp_SetPendingBindDefault
   3351           *
   3352           * @brief       This function initializes a specific entry of pending
   3353           *              Bind Request.
   3354           *
   3355           * @param       pendBindReq - pointer to the entry in the table
   3356           *
   3357           * @return      none
   3358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3359          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3360          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3361            // Set it to an initial value
   3362            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3363          
   3364            // We are checking for age 0 for aged-out records
   3365            pendBindReq->age = 0;
   \   000012   EE           MOV     A,R6
   \   000013   2420         ADD     A,#0x20
   \   000015   F582         MOV     DPL,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   F583         MOV     DPH,A
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   3366          }
   \   00001D   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   3367          
   3368          /*********************************************************************
   3369           * @fn          ZDApp_InitPendingBind
   3370           *
   3371           * @brief       This function initializes the buffer that holds
   3372           *              pending Bind Request messages if no valid NWK address
   3373           *              exists in Address Manager and a Network Address Req
   3374           *              has been sent out.
   3375           *
   3376           * @param       none
   3377           *
   3378           * @return      none
   3379           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3380          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3381          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3382            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000008   702A         JNZ     ??ZDApp_InitPendingBind_0
   3383            {
   3384              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV     R2,#0x63
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000017   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00001A   6018         JZ      ??ZDApp_InitPendingBind_0
   3385              {
   3386                uint8 i;
   3387          
   3388                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV     R6,#0x0
   \   00001E   7F00         MOV     R7,#0x0
   3389                {
   3390                  // Set to default values
   3391                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   000020   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000023   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000026   E5..         MOV     A,?V0
   \   000028   2420         ADD     A,#0x20
   \   00002A   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
   3392                }
   \   00002F   12....       LCALL   ?Subroutine38 & 0xFFFF
   3393              }
   3394            }
   \                     ??CrossCallReturnLabel_49:
   \   000032   70EC         JNZ     ??ZDApp_InitPendingBind_1
   3395          }
   \                     ??ZDApp_InitPendingBind_0:
   \   000034   02....       LJMP    ??Subroutine49_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EE           MOV     A,R6
   \   000001   2421         ADD     A,#0x21
   \   000003   FE           MOV     R6,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FF           MOV     R7,A
   \   000007   7463         MOV     A,#0x63
   \   000009   6E           XRL     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   F5..         MOV     ?V0,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3F           ADDC    A,R7
   \   00000A   F5..         MOV     ?V1,A
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C21         MOV     R4,#0x21
   \   00000E   7D00         MOV     R5,#0x0
   \   000010   79FF         MOV     R1,#-0x1
   \   000012   AA..         MOV     R2,?V0
   \   000014   FB           MOV     R3,A
   \   000015   22           RET
   3396          
   3397          /*********************************************************************
   3398           * @fn          ZDApp_GetEmptyPendingBindReq
   3399           *
   3400           * @brief       This function looks for an empty entry.
   3401           *
   3402           * @param       none
   3403           *
   3404           * @return      Pointer to entry
   3405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3406          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3407          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3408            uint8 i;
   3409          
   3410            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000007   603A         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3411            {
   3412              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   2420         ADD     A,#0x20
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   3400         ADDC    A,#0x0
   \   000016   F9           MOV     R1,A
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   3413              {
   3414                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   7014         JNZ     ??ZDApp_GetEmptyPendingBindReq_2
   3415                {
   3416                  return ( &ZDAppPendingBindReq[i] );
   \   00001E   EA           MOV     A,R2
   \   00001F   75F021       MOV     B,#0x21
   \   000022   A4           MUL     AB
   \   000023   F8           MOV     R0,A
   \   000024   A9F0         MOV     R1,B
   \   000026   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   28           ADD     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   39           ADDC    A,R1
   \   00002F   FB           MOV     R3,A
   \   000030   8015         SJMP    ??ZDApp_GetEmptyPendingBindReq_3
   3417                }
   3418              }
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   000032   0A           INC     R2
   \   000033   E582         MOV     A,DPL
   \   000035   2421         ADD     A,#0x21
   \   000037   F582         MOV     DPL,A
   \   000039   5002         JNC     ??ZDApp_GetEmptyPendingBindReq_4
   \   00003B   0583         INC     DPH
   \                     ??ZDApp_GetEmptyPendingBindReq_4:
   \   00003D   EA           MOV     A,R2
   \   00003E   C3           CLR     C
   \   00003F   9403         SUBB    A,#0x3
   \   000041   40D8         JC      ??ZDApp_GetEmptyPendingBindReq_1
   3419            }
   3420          
   3421            // No empty entry was found
   3422            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   000043   7A00         MOV     R2,#0x0
   \   000045   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_3:
   \   000047   02....       LJMP    ?Subroutine3 & 0xFFFF
   3423          }
   3424          
   3425          /*********************************************************************
   3426           * @fn          ZDApp_ProcessPendingBindReq
   3427           *
   3428           * @brief       Process pending entry based on EXT address.
   3429           *
   3430           * @param       extAddr - of device to look up
   3431           *
   3432           * @return      none
   3433           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3434          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3435          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3436            uint8 i;
   3437          
   3438            // Loop through all the pending entries for that Ext Address
   3439            // to create Bind Entries and send Bind Rsp
   3440            if ( ZDAppPendingBindReq != NULL )
   \   00000A   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00000D   7003         JNZ     $+5
   \   00000F   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3441            {
   3442              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000012   7E00         MOV     R6,#0x0
   \   000014   7F00         MOV     R7,#0x0
   \   000016   8A..         MOV     ?V0,R2
   \   000018   8B..         MOV     ?V1,R3
   \   00001A   8E..         MOV     ?V2,R6
   3443              {
   3444                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3445                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   00001C                ; Setup parameters for call to function osal_memcmp
   \   00001C   78..         MOV     R0,#?V0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000021   7C08         MOV     R4,#0x8
   \   000023   7D00         MOV     R5,#0x0
   \   000025   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000028   240B         ADD     A,#0xb
   \   00002A   F5..         MOV     ?V4,A
   \   00002C   E4           CLR     A
   \   00002D   39           ADDC    A,R1
   \   00002E   A9..         MOV     R1,?V4
   \   000030   FA           MOV     R2,A
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000036   7403         MOV     A,#0x3
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   E9           MOV     A,R1
   \   00003C   6401         XRL     A,#0x1
   \   00003E   6003         JZ      $+5
   \   000040   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3446                {
   3447                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   748C         MOV     A,#-0x74
   \   00004B   F0           MOVX    @DPTR,A
   3448          
   3449                  // Add Bind entry
   3450                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3451                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3452                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3453                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   00004C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00004F                ; Setup parameters for call to function APSME_BindRequest
   \   00004F   E5..         MOV     A,?V4
   \   000051   2414         ADD     A,#0x14
   \   000053   F582         MOV     DPL,A
   \   000055   E4           CLR     A
   \   000056   35..         ADDC    A,?V5
   \   000058   F583         MOV     DPH,A
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V3,A
   \   00005D   78..         MOV     R0,#?V3
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   E5..         MOV     A,?V4
   \   000064   240B         ADD     A,#0xb
   \   000066   FC           MOV     R4,A
   \   000067   E4           CLR     A
   \   000068   35..         ADDC    A,?V5
   \   00006A   FD           MOV     R5,A
   \   00006B   85..82       MOV     DPL,?V4
   \   00006E   85..83       MOV     DPH,?V5
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00007C   85..82       MOV     DPL,?V4
   \   00007F   85..83       MOV     DPH,?V5
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   00008F   7401         MOV     A,#0x1
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   \   000094   E9           MOV     A,R1
   \   000095   7008         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3454                  {
   3455                    // valid entry
   3456                    bindStat = ZDP_SUCCESS;
   \   000097   85..82       MOV     DPL,?XSP + 0
   \   00009A   85..83       MOV     DPH,?XSP + 1
   \   00009D   E4           CLR     A
   \   00009E   F0           MOVX    @DPTR,A
   3457          
   3458                    // Notify to save info into NV
   3459                    ZDApp_NVUpdate();
   3460                  }
   3461          
   3462                  // Send back a response message
   3463                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3464                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   00009F   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000A2   F5..         MOV     ?V3,A
   \   0000A4   78..         MOV     R0,#?V3
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A9   7401         MOV     A,#0x1
   \   0000AB   12....       LCALL   ?XSTACK_DISP100_8
   \   0000AE   88..         MOV     ?V4,R0
   \   0000B0   89..         MOV     ?V5,R1
   \   0000B2   78..         MOV     R0,#?V4
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   75..21       MOV     ?V4,#0x21
   \   0000BA   75..80       MOV     ?V5,#-0x80
   \   0000BD   78..         MOV     R0,#?V4
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000C5   5001         JNC     ??ZDApp_ProcessPendingBindReq_4
   \   0000C7   0B           INC     R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   0000C8   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000CB   7405         MOV     A,#0x5
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   3465          
   3466                  // Set the pending request entry to default values
   3467                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000D0   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000D3                ; Setup parameters for call to function osal_memset
   \   0000D3   7C21         MOV     R4,#0x21
   \   0000D5   7D00         MOV     R5,#0x0
   \   0000D7   79FF         MOV     R1,#-0x1
   \   0000D9   AA..         MOV     R2,?V4
   \   0000DB   FB           MOV     R3,A
   \   0000DC   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000DF   E5..         MOV     A,?V4
   \   0000E1   2420         ADD     A,#0x20
   \   0000E3   F582         MOV     DPL,A
   \   0000E5   E4           CLR     A
   \   0000E6   35..         ADDC    A,?V5
   \   0000E8   F583         MOV     DPH,A
   \   0000EA   E4           CLR     A
   \   0000EB   F0           MOVX    @DPTR,A
   3468                }
   3469              }
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000EC   12....       LCALL   ?Subroutine38 & 0xFFFF
   3470            }
   \                     ??CrossCallReturnLabel_50:
   \   0000EF   6003         JZ      $+5
   \   0000F1   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3471          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000F4   7401         MOV     A,#0x1
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F9   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   F5..         MOV     ?V4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3F           ADDC    A,R7
   \   00000A   F5..         MOV     ?V5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EA           MOV     A,R2
   \   000003   2415         ADD     A,#0x15
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3B           ADDC    A,R3
   \   000008   FD           MOV     R5,A
   \   000009   EA           MOV     A,R2
   \   00000A   241F         ADD     A,#0x1f
   \   00000C   FA           MOV     R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   FB           MOV     R3,A
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A   EA           MOV     A,R2
   \   00000B   241E         ADD     A,#0x1e
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   22           RET
   3472          
   3473          /*********************************************************************
   3474           * @fn          ZDApp_AgeOutPendingBindEntry
   3475           *
   3476           * @brief       Age out pending Bind Req entries.
   3477           *
   3478           * @param       none
   3479           *
   3480           * @return      none
   3481           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3482          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3483          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3484            uint8 i;
   3485            bool entryFound = FALSE;
   \   00000A   75..00       MOV     ?V2,#0x0
   3486          
   3487            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3488            {
   3489              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   7E00         MOV     R6,#0x0
   \   000017   7F00         MOV     R7,#0x0
   3490              {
   3491                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000019   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00001C   2420         ADD     A,#0x20
   \   00001E   F582         MOV     DPL,A
   \   000020   E4           CLR     A
   \   000021   39           ADDC    A,R1
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FA           MOV     R2,A
   \   000026   C3           CLR     C
   \   000027   9402         SUBB    A,#0x2
   \   000029   4009         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3492                {
   3493                  ZDAppPendingBindReq[i].age--;
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   14           DEC     A
   \   00002D   F0           MOVX    @DPTR,A
   3494          
   3495                  entryFound = TRUE;
   \   00002E   75..01       MOV     ?V2,#0x1
   \   000031   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3496                }
   3497                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   000034   7401         MOV     A,#0x1
   \   000036   6A           XRL     A,R2
   \   000037   6003         JZ      $+5
   \   000039   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3498                {
   3499                  // The record has aged out and has valid data
   3500                  AddrMgrEntry_t entry;
   3501                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   748C         MOV     A,#-0x74
   \   000044   F0           MOVX    @DPTR,A
   3502          
   3503                  entry.user = ADDRMGR_USER_BINDING;
   \   000045   7401         MOV     A,#0x1
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   7404         MOV     A,#0x4
   \   00004C   F0           MOVX    @DPTR,A
   3504          
   3505                  // Remove the entry in address manager so we do not keep entries
   3506                  // with invalid addresses
   3507                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   00004D                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00004D   E8           MOV     A,R0
   \   00004E   240B         ADD     A,#0xb
   \   000050   FC           MOV     R4,A
   \   000051   E4           CLR     A
   \   000052   39           ADDC    A,R1
   \   000053   FD           MOV     R5,A
   \   000054   7404         MOV     A,#0x4
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   AA82         MOV     R2,DPL
   \   00005B   AB83         MOV     R3,DPH
   \   00005D   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3508          
   3509                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000060                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000060   7401         MOV     A,#0x1
   \   000062   12....       LCALL   ?XSTACK_DISP101_8
   \   000065   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000068   E9           MOV     A,R1
   \   000069   6401         XRL     A,#0x1
   \   00006B   7017         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3510                  {
   3511                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   00006D   7402         MOV     A,#0x2
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   E0           MOVX    A,@DPTR
   \   000073   64FE         XRL     A,#0xfe
   \   000075   7003         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F4           CPL     A
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   00007A   7008         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3512                    {
   3513                      // Release the entry that contains an invalid NWK address
   3514                      AddrMgrEntryRelease( &entry );
   \   00007C                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00007C   7401         MOV     A,#0x1
   \   00007E   12....       LCALL   ?XSTACK_DISP101_8
   \   000081   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   3515                    }
   3516                  }
   3517          
   3518                  // Send the Bind Response with failure status
   3519                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3520                               &(ZDAppPendingBindReq[i].srcAddr),
   3521                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   000084   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000087   F5..         MOV     ?V0,A
   \   000089   78..         MOV     R0,#?V0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008E   7401         MOV     A,#0x1
   \   000090   12....       LCALL   ?XSTACK_DISP100_8
   \   000093   88..         MOV     ?V0,R0
   \   000095   89..         MOV     ?V1,R1
   \   000097   78..         MOV     R0,#?V0
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   75..21       MOV     ?V0,#0x21
   \   00009F   75..80       MOV     ?V1,#-0x80
   \   0000A2   78..         MOV     R0,#?V0
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000AA   5001         JNC     ??ZDApp_AgeOutPendingBindEntry_6
   \   0000AC   0B           INC     R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000AD   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000B0   7405         MOV     A,#0x5
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   3522          
   3523                  // Clear the record and set to default values
   3524                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000B5   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000B8   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   2420         ADD     A,#0x20
   \   0000BF   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000C2   E4           CLR     A
   \   0000C3   F0           MOVX    @DPTR,A
   3525                }
   3526              }
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   0000C4   12....       LCALL   ?Subroutine38 & 0xFFFF
   3527            }
   \                     ??CrossCallReturnLabel_51:
   \   0000C7   6003         JZ      $+5
   \   0000C9   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3528          
   3529            if ( entryFound == FALSE )
   \   0000CC   E5..         MOV     A,?V2
   \   0000CE   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D0   400E         JC      ??ZDApp_AgeOutPendingBindEntry_7
   3530            {
   3531              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000D2                ; Setup parameters for call to function osal_stop_timerEx
   \   0000D2   7A00         MOV     R2,#0x0
   \   0000D4   7B10         MOV     R3,#0x10
   \   0000D6   90....       MOV     DPTR,#ZDAppTaskID
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F9           MOV     R1,A
   \   0000DB   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000DE   8017         SJMP    ??ZDApp_AgeOutPendingBindEntry_8
   3532            }
   3533            else
   3534            {
   3535              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3536                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   0000E0                ; Setup parameters for call to function osal_start_timerEx
   \   0000E0   90....       MOV     DPTR,#__Constant_3e8
   \   0000E3   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000E6   7A00         MOV     R2,#0x0
   \   0000E8   7B10         MOV     R3,#0x10
   \   0000EA   90....       MOV     DPTR,#ZDAppTaskID
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000F2   7404         MOV     A,#0x4
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
   3537            }
   3538          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   0000F7   740E         MOV     A,#0xe
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FC   7F03         MOV     R7,#0x3
   \   0000FE   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetPendingBindDefault::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitPendingBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_GetEmptyPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AgeOutPendingBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry
   3539          #endif
   3540          #endif
   3541          
   3542          /*********************************************************************
   3543          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   AddrMgrWriteNVRequest
      2      0   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     12   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     42   ZDApp_AgeOutPendingBindEntry
        0     25   -> AddrMgrEntryLookupExt
        0     25   -> AddrMgrEntryRelease
        0     25   -> AddrMgrExtAddrSet
        0     30   -> ZDP_SendData
        0     25   -> osal_memset
        0     29   -> osal_start_timerEx
        0     25   -> osal_stop_timerEx
      0     11   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0      0   ZDApp_CoordStartPANIDConflictCB
      0     66   ZDApp_DeviceAuthEvt
        0     31   -> APSME_HoldDataRequests
        0     31   -> NLME_GetExtAddr
        0     31   -> NLME_GetShortAddr
        0     31   -> NLME_SetPollRate
        0     31   -> SSP_ReadNwkActiveKey
        0     32   -> ZDP_DeviceAnnce
        0     31   -> osal_clear_event
        0     31   -> osal_memset
        0     35   -> osal_nv_write
        0     31   -> osal_pwrmgr_device
        0     31   -> osal_set_event
        0     31   -> osal_stop_timerEx
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> HalKeyRead
        0      9   -> HalLedBlink
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDApp_InitPendingBind
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     19   ZDApp_InitPendingBind
        0     10   -> osal_mem_alloc
        0     10   -> osal_memset
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      0   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     26   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     14   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      0     14   ZDApp_LeaveCtrlStartup
        0     14   -> osal_nv_write
      0     14   ZDApp_LeaveReset
        0     10   -> osal_get_timeoutEx
        0     14   -> osal_nv_write
        0     14   -> osal_start_timerEx
      0     39   ZDApp_LeaveUpdate
        0     24   -> RTG_RemoveRtgEntry
        0     24   -> ZDSecMgrAddrClear
        0     24   -> ZDSecMgrDeviceRemoveByExtAddr
        0     24   -> nwkNeighborRemove
        0     27   -> osal_memcpy
      0      0   ZDApp_NVUpdate
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     16   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2      0   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     24   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     29   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> osal_get_timeoutEx
      0     48   ZDApp_ProcessMsgCBs
        0     33   -> ZDApp_ProcessPendingBindReq
        0     33   -> ZDO_ParseAddrRsp
        0     33   -> ZDO_ParseBindUnbindReq
        0     33   -> ZDO_ProcessBindUnbindReq
        0     33   -> ZDO_UpdateAddrManager
        0     33   -> osal_mem_free
      0     33   ZDApp_ProcessNetworkJoin
        0     14   -> APSME_HoldDataRequests
        0     14   -> NLME_GetExtAddr
        0     14   -> NLME_GetShortAddr
        0     14   -> NLME_NwkDiscTerm
        0     14   -> NLME_SetPollRate
        0     14   -> NLME_SetQueuedPollRate
        0     14   -> NLME_SetResponseRate
        0     15   -> ZDP_DeviceAnnce
        0     14   -> ZMacSetReq
        0     14   -> nwkNeighborInitTable
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_rand
        0     14   -> osal_set_event
        0     18   -> osal_start_timerEx
      0     31   ZDApp_ProcessOSALMsg
        0     19   -> NLME_JoinRequest
        0     15   -> NLME_ReJoinRequestUnsecure
        0     15   -> NLME_SetPollRate
        0     15   -> NLME_SetQueuedPollRate
        0     15   -> NLME_SetResponseRate
        0     15   -> ZDApp_NodeProfileSync
        0     15   -> ZDApp_NwkDescListProcessing
        0     15   -> ZDApp_ProcessMsgCBs
        0     15   -> ZDApp_ProcessNetworkJoin
        0     15   -> ZDP_IncomingData
        0     15   -> ZMacSetReq
        0     19   -> osal_nv_read
        0     15   -> osal_rand
        0     15   -> osal_set_event
        0     19   -> osal_start_timerEx
        0     15   -> sAddrExtCpy
      0     53   ZDApp_ProcessPendingBindReq
        0     16   -> APSME_BindRequest
        0     20   -> ZDP_SendData
        0     18   -> osal_memcmp
        0     15   -> osal_memset
      0     35   ZDApp_ProcessSecEvent
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> ZDApp_DeviceAuthEvt
        0     31   -> ZDSecMgrSaveTCLinkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0      9   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     16   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     53   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      0      0   ZDApp_SaveNetworkStateEvt
      0     35   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0      9   ZDApp_SecInit
        0      9   -> ZDSecMgrInit
      1     22   ZDApp_SendEventMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      1     22   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      0      9   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      2      0   ZDApp_StartJoiningCycle
        2      0   -> osal_set_event
      2      0   ZDApp_StopJoiningCycle
      0     16   ZDApp_event_loop
        0     12   -> Onboard_soft_reset
        0     12   -> ZDApp_AgeOutPendingBindEntry
        0     12   -> ZDApp_ProcessOSALMsg
        0     12   -> ZDO_StartDevice
        0     12   -> ZDO_UpdateNwkStatus
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
        0     12   -> zgWriteStartupOptions
      0     25   ZDOInitDevice
        0     12   -> NLME_SetBroadcastFilter
        0     12   -> ZDAppDetermineDeviceType
        0     12   -> ZDApp_LeaveCtrlInit
        0     12   -> ZDConfig_InitDescriptors
        0     12   -> ZDSecMgrInit
        0     16   -> osal_nv_write
        0     12   -> osal_rand
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
        0     12   -> zgInitItems
        0     12   -> zgWriteStartupOptions
      0     15   ZDO_AddrChangeIndicationCB
        0     14   -> APSME_HoldDataRequests
        0     14   -> NLME_GetExtAddr
        0     14   -> NLME_GetShortAddr
        0     15   -> ZDP_DeviceAnnce
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> HalLedSet
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> osal_msg_allocate
        0     17   -> osal_msg_send
        0     17   -> sAddrExtCpy
      0      1   ZDO_JoinIndicationCB
      0     14   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> osal_get_timeoutEx
        0     14   -> osal_nv_write
        0     14   -> osal_start_timerEx
        0     10   -> sAddrExtCmp
      0     16   ZDO_LeaveInd
        0     12   -> NLME_GetCoordShortAddr
        0     12   -> NLME_LeaveRsp
        0     12   -> NLME_SetPollRate
        0     12   -> ZDApp_LeaveUpdate
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_nv_write
        0     16   -> osal_start_timerEx
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      1     18   ZDO_NetworkDiscoveryConfirmCB
        0     18   -> osal_memcpy
        0     15   -> osal_msg_allocate
        0     15   -> osal_msg_send
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0     10   ZDO_SyncIndicationCB
        0     10   -> nwkNeighborInitTable
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_send
      0      0   ZDO_UpdateDeviceIndication
      1     14   ZDO_beaconNotifyIndCB
        0     14   -> osal_mem_alloc
        0     14   -> osal_memset
        0     14   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for zdoDiscCounter>
      11  ??Subroutine45_0
       1  ??Subroutine46_0
       7  ??Subroutine47_0
       3  ??Subroutine48_0
       5  ??Subroutine49_0
       6  ??Subroutine50_0
       3  ??Subroutine51_0
       5  ??Subroutine52_0
       6  ??Subroutine53_0
       5  ??Subroutine54_0
      10  ??Subroutine55_0
       6  ??Subroutine56_0
       4  ??Subroutine57_0
       8  ??Subroutine58_0
       6  ??Subroutine59_0
       6  ??Subroutine60_0
      10  ?Subroutine0
       2  ?Subroutine1
      16  ?Subroutine10
       5  ?Subroutine11
      14  ?Subroutine12
      12  ?Subroutine13
       6  ?Subroutine14
      12  ?Subroutine15
      12  ?Subroutine16
       3  ?Subroutine17
      10  ?Subroutine18
      22  ?Subroutine19
      35  ?Subroutine2
      21  ?Subroutine20
       6  ?Subroutine21
      10  ?Subroutine22
       9  ?Subroutine23
       2  ?Subroutine24
       3  ?Subroutine25
      10  ?Subroutine26
       1  ?Subroutine27
      13  ?Subroutine28
      10  ?Subroutine29
       7  ?Subroutine3
       4  ?Subroutine30
       4  ?Subroutine31
      12  ?Subroutine32
       9  ?Subroutine33
       8  ?Subroutine34
      16  ?Subroutine35
       4  ?Subroutine36
      17  ?Subroutine37
      12  ?Subroutine38
      10  ?Subroutine39
       5  ?Subroutine4
      10  ?Subroutine40
      10  ?Subroutine41
      14  ?Subroutine42
       6  ?Subroutine43
       9  ?Subroutine44
       5  ?Subroutine5
       5  ?Subroutine6
       7  ?Subroutine7
       5  ?Subroutine8
       5  ?Subroutine9
       3  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
      24  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      76  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     257  ZDApp_AgeOutPendingBindEntry
       6  ZDApp_AgeOutPendingBindEntry::?relay
      53  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
     182  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      84  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     128  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
      74  ZDApp_GetEmptyPendingBindReq
       6  ZDApp_GetEmptyPendingBindReq::?relay
      88  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
     127  ZDApp_Init
       6  ZDApp_Init::?relay
      55  ZDApp_InitPendingBind
       6  ZDApp_InitPendingBind::?relay
     111  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      35  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      75  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      16  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      65  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      13  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      22  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      79  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
     101  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     124  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
       3  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      11  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      57  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
      89  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      45  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     244  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      19  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     138  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     567  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
     674  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     252  ZDApp_ProcessPendingBindReq
       6  ZDApp_ProcessPendingBindReq::?relay
     127  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      56  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      23  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      55  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      66  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      31  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      57  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
     211  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
       3  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      63  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       2  ZDApp_SavedPollRate
      11  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      88  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
      88  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
      32  ZDApp_SetPendingBindDefault
       6  ZDApp_SetPendingBindDefault::?relay
      43  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      31  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     196  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     226  ZDOInitDevice
       6  ZDOInitDevice::?relay
     151  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      45  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      27  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     256  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
       0  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
     146  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     306  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
       7  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
     117  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      49  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
       9  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      40  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      27  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      51  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      49  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      48  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       3  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     539  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_1388
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  retryCnt
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter

 
 7 712 bytes in segment BANKED_CODE
   432 bytes in segment BANK_RELAYS
    10 bytes in segment XDATA_I
    10 bytes in segment XDATA_ID
    16 bytes in segment XDATA_ROM_C
    62 bytes in segment XDATA_Z
 
 8 154 bytes of CODE  memory
     0 bytes of CONST memory (+ 16 bytes shared)
    72 bytes of XDATA memory

Errors: none
Warnings: none
