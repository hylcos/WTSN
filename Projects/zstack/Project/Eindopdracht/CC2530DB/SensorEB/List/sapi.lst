###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                14/Mar/2016  22:13:06
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\sapi\sapi.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\sapi\sapi.c -D
#        NWK_AUTO_POLL -D HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\sapi.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\sapi.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\sapi\sapi.c
      1          /**************************************************************************************************
      2            Filename:       sapi.c
      3            Revised:        $Date: 2010-05-03 17:46:57 -0700 (Mon, 03 May 2010) $
      4            Revision:       $Revision: 22364 $
      5          
      6            Description:    Z-Stack Simple Application Interface.
      7          
      8          
      9            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /******************************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "hal_drivers.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Tasks.h"
     48          //#include "OSAL_Custom.h"
     49          
     50          #if defined ( MT_TASK )
     51            #include "MT.h"
     52            #include "MT_TASK.h"
     53          #endif
     54          
     55          #include "nwk.h"
     56          #include "APS.h"
     57          #include "ZDApp.h"
     58          
     59          #include "osal_nv.h"
     60          #include "NLMEDE.h"
     61          #include "AF.h"
     62          #include "OnBoard.h"
     63          #include "nwk_util.h"
     64          #include "ZDProfile.h"
     65          #include "ZDObject.h"
     66          #include "hal_led.h"
     67          #include "hal_key.h"
     68          #include "sapi.h"
     69          #include "MT_SAPI.h"
     70          
     71          extern uint8 zgStartDelay;
     72          extern uint8 zgSapiEndpoint;
     73          
     74          /*********************************************************************
     75           * CONSTANTS
     76           */
     77          
     78          #if !defined OSAL_SAPI
     79          #define OSAL_SAPI  TRUE
     80          #endif
     81          
     82          #if !defined SAPI_CB_FUNC
     83          #define SAPI_CB_FUNC  TRUE
     84          #endif
     85          
     86          // Message ID's for application user messages must be in 0xE0-0xEF range
     87          #define ZB_USER_MSG                       0xE0
     88          #define SAPICB_DATA_CNF   0xE0
     89          #define SAPICB_BIND_CNF   0xE1
     90          #define SAPICB_START_CNF  0xE2
     91          
     92          /*********************************************************************
     93           * TYPEDEFS
     94           */
     95          
     96          /*********************************************************************
     97           * GLOBAL VARIABLES
     98           */
     99          
    100          #if OSAL_SAPI
    101          // The order in this table must be identical to the task initialization calls below in osalInitTask.

   \                                 In  segment XDATA_ROM_C, align 1
    102          const pTaskEventHandlerFn tasksArr[] = {
   \                     tasksArr:
   \   000000   ....         DW `??macEventLoop::?relay`
   \   000002   ....         DW `??nwk_event_loop::?relay`
   \   000004   ....         DW `??Hal_ProcessEvent::?relay`
   \   000006   ....         DW `??APS_event_loop::?relay`
   \   000008   ....         DW `??ZDApp_event_loop::?relay`
   \   00000A   ....         DW `??SAPI_ProcessEvent::?relay`
    103            macEventLoop,
    104            nwk_event_loop,
    105            Hal_ProcessEvent,
    106          #if defined( MT_TASK )
    107            MT_ProcessEvent,
    108          #endif
    109            APS_event_loop,
    110            ZDApp_event_loop,
    111          
    112            SAPI_ProcessEvent
    113          };
    114          

   \                                 In  segment XDATA_ROM_C, align 1
    115          const uint8 tasksCnt = sizeof( tasksArr ) / sizeof( tasksArr[0] );
   \                     tasksCnt:
   \   000000   06           DB 6

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          uint16 *tasksEvents;
   \                     tasksEvents:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    117          #endif
    118          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          endPointDesc_t sapi_epDesc;
   \                     sapi_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          uint8 sapi_TaskID;
   \                     sapi_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          static uint16 sapi_bindInProgress;
   \                     sapi_bindInProgress:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124           * LOCAL FUNCTIONS
    125           */
    126          
    127          void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    128          static void SAPI_SendCback( uint8 event, uint8 status, uint16 data );
    129          
    130          static void SAPI_StartConfirm( uint8 status );
    131          static void SAPI_SendDataConfirm( uint8 handle, uint8 status );
    132          static void SAPI_BindConfirm( uint16 commandId, uint8 status );
    133          static void SAPI_FindDeviceConfirm( uint8 searchType,
    134                                              uint8 *searchKey, uint8 *result );
    135          static void SAPI_ReceiveDataIndication( uint16 source,
    136                                        uint16 command, uint16 len, uint8 *pData  );
    137          static void SAPI_AllowBindConfirm( uint16 source );
    138          
    139          /******************************************************************************
    140           * @fn          zb_SystemReset
    141           *
    142           * @brief       The zb_SystemReset function reboots the ZigBee device.  The
    143           *              zb_SystemReset function can be called after a call to
    144           *              zb_WriteConfiguration to restart Z-Stack with the updated
    145           *              configuration.
    146           *
    147           * @param       none
    148           *
    149           * @return      none
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void zb_SystemReset ( void )
   \                     zb_SystemReset:
    152          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    153            SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
   \   000000                ; Setup parameters for call to function Onboard_soft_reset
   \   000000   12....       LCALL   Onboard_soft_reset & 0xFFFF
    154          }
   \   000003   02....       LJMP    ?BRET
    155          
    156          /******************************************************************************
    157           * @fn          zb_StartRequest
    158           *
    159           * @brief       The zb_StartRequest function starts the ZigBee stack.  When the
    160           *              ZigBee stack starts, the device reads configuration parameters
    161           *              from Nonvolatile memory and the device joins its network.  The
    162           *              ZigBee stack calls the zb_StartConrifm callback function when
    163           *              the startup process completes.
    164           *
    165           * @param       none
    166           *
    167           * @return      none
    168           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          void zb_StartRequest()
   \                     zb_StartRequest:
    170          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    171            uint8 logicalType;
    172          
    173            zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
   \   00000A                ; Setup parameters for call to function osal_nv_item_len
   \   00000A   7A87         MOV     R2,#-0x79
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000011   EA           MOV     A,R2
   \   000012   F5..         MOV     ?V0,A
   \   000014   C3           CLR     C
   \   000015   9402         SUBB    A,#0x2
   \   000017   5025         JNC     ??zb_StartRequest_0
   \   000019                ; Setup parameters for call to function osal_nv_read
   \   000019   A8..         MOV     R0,?XSP + 0
   \   00001B   A9..         MOV     R1,?XSP + 1
   \   00001D   88..         MOV     ?V2,R0
   \   00001F   89..         MOV     ?V3,R1
   \   000021   78..         MOV     R0,#?V2
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A87         MOV     R2,#-0x79
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
    174          
    175            // Check for bad combinations of compile flag definitions and device type setting.
    176            if ((logicalType > ZG_DEVICETYPE_ENDDEVICE)      ||
    177          #if !ZG_BUILD_ENDDEVICE_TYPE   // Only RTR or Coord possible.
    178                (logicalType == ZG_DEVICETYPE_ENDDEVICE)     ||
    179          #endif
    180          #if !ZG_BUILD_RTR_TYPE         // Only End Device possible.
    181                (logicalType == ZG_DEVICETYPE_ROUTER)        ||
    182                (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
    183          #elif ZG_BUILD_RTRONLY_TYPE    // Only RTR possible.
    184                (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
    185          #elif !ZG_BUILD_JOINING_TYPE   // Only Coord possible.
    186                (logicalType == ZG_DEVICETYPE_ROUTER)        ||
    187          #endif
    188                (0))
   \                     ??zb_StartRequest_0:
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C3           CLR     C
   \   000046   9403         SUBB    A,#0x3
   \   000048   5008         JNC     ??zb_StartRequest_1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6401         XRL     A,#0x1
   \   00004D   6003         JZ      ??zb_StartRequest_1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   7025         JNZ     ??zb_StartRequest_2
    189            {
    190              logicalType = ZB_INVALID_PARAMETER;
   \                     ??zb_StartRequest_1:
   \   000052   7402         MOV     A,#0x2
   \   000054   F0           MOVX    @DPTR,A
    191              SAPI_SendCback(SAPICB_START_CNF, logicalType, 0);
   \   000055                ; Setup parameters for call to function osal_msg_allocate
   \   000055   7A04         MOV     R2,#0x4
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00005C   EA           MOV     A,R2
   \   00005D   4B           ORL     A,R3
   \   00005E   6023         JZ      ??zb_StartRequest_3
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   74E2         MOV     A,#-0x1e
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ?Subroutine10 & 0xFFFF
    192            }
   \                     ??CrossCallReturnLabel_14:
   \   00006B   A3           INC     DPTR
   \   00006C   E4           CLR     A
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000072   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000075   800C         SJMP    ??zb_StartRequest_3
    193            else
    194            {
    195              logicalType = ZB_SUCCESS;
   \                     ??zb_StartRequest_2:
   \   000077   E4           CLR     A
   \   000078   F0           MOVX    @DPTR,A
    196              ZDOInitDevice(zgStartDelay);
   \   000079                ; Setup parameters for call to function ZDOInitDevice
   \   000079   90....       MOV     DPTR,#zgStartDelay
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FA           MOV     R2,A
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
    197            }
    198          
    199            return;
   \                     ??zb_StartRequest_3:
   \   000083   7401         MOV     A,#0x1
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088                REQUIRE ?Subroutine0
   \   000088                ; // Fall through to label ?Subroutine0
    200          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine14_0
   \   000002                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function APSME_BindRequest
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   90....       MOV     DPTR,#sapi_TaskID
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   22           RET
    201          
    202          /******************************************************************************
    203           * @fn          zb_BindDevice
    204           *
    205           * @brief       The zb_BindDevice function establishes or removes a ‘binding’
    206           *              between two devices.  Once bound, an application can send
    207           *              messages to a device by referencing the commandId for the
    208           *              binding.
    209           *
    210           * @param       create - TRUE to create a binding, FALSE to remove a binding
    211           *              commandId - The identifier of the binding
    212           *              pDestination - The 64-bit IEEE address of the device to bind to
    213           *
    214           * @return      The status of the bind operation is returned in the
    215           *              zb_BindConfirm callback.
    216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    217          void zb_BindDevice ( uint8 create, uint16 commandId, uint8 *pDestination )
   \                     zb_BindDevice:
    218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EC           MOV     A,R4
   \   000016   FE           MOV     R6,A
   \   000017   ED           MOV     A,R5
   \   000018   FF           MOV     R7,A
    219            zAddrType_t destination;
    220            uint8 ret = ZB_ALREADY_IN_PROGRESS;
   \   000019   75..20       MOV     ?V1,#0x20
    221          
    222            if ( create )
   \   00001C   E9           MOV     A,R1
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??zb_BindDevice_0 & 0xFFFF
    223            {
    224              if (sapi_bindInProgress == 0xffff)
   \   000022   90....       MOV     DPTR,#sapi_bindInProgress
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F4           CPL     A
   \   000027   7003         JNZ     ??zb_BindDevice_1
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F4           CPL     A
   \                     ??zb_BindDevice_1:
   \   00002C   7065         JNZ     ??zb_BindDevice_2
    225              {
    226                if ( pDestination )
   \   00002E   EE           MOV     A,R6
   \   00002F   4F           ORL     A,R7
   \   000030   7003         JNZ     $+5
   \   000032   02....       LJMP    ??zb_BindDevice_3 & 0xFFFF
    227                {
    228                  destination.addrMode = Addr64Bit;
   \   000035   740A         MOV     A,#0xa
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   7403         MOV     A,#0x3
   \   00003C   F0           MOVX    @DPTR,A
    229                  osal_cpyExtAddr( destination.addr.extAddr, pDestination );
   \   00003D                ; Setup parameters for call to function sAddrExtCpy
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?XSTACK_DISP101_8
   \   000042   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    230          
    231                  ret = APSME_BindRequest( sapi_epDesc.endPoint, commandId,
    232                                           &destination, sapi_epDesc.endPoint );
   \   000045                ; Setup parameters for call to function APSME_BindRequest
   \   000045   90....       MOV     DPTR,#sapi_epDesc
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V1,A
   \   00004B   78..         MOV     R0,#?V1
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?XSTACK_DISP102_8
   \   000055   7401         MOV     A,#0x1
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00005D   90....       MOV     DPTR,#sapi_epDesc
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   000065   7401         MOV     A,#0x1
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   E9           MOV     A,R1
   \   00006B   F5..         MOV     ?V1,A
    233          
    234                  if ( ret == ZSuccess )
   \   00006D   7024         JNZ     ??zb_BindDevice_2
    235                  {
    236                    // Find nwk addr
    237                    ZDP_NwkAddrReq(pDestination, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00006F                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   7C00         MOV     R4,#0x0
   \   000073   7900         MOV     R1,#0x0
   \   000075   EE           MOV     A,R6
   \   000076   FA           MOV     R2,A
   \   000077   EF           MOV     A,R7
   \   000078   FB           MOV     R3,A
   \   000079   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
    238                    osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   00007C                ; Setup parameters for call to function osal_start_timerEx
   \   00007C   90....       MOV     DPTR,#__Constant_fa
   \   00007F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000082   7A00         MOV     R2,#0x0
   \   000084   7B01         MOV     R3,#0x1
   \   000086   90....       MOV     DPTR,#ZDAppTaskID
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00008E   7404         MOV     A,#0x4
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
    239                  }
    240                }
    241                else
    242                {
    243                  ret = ZB_INVALID_PARAMETER;
    244                  destination.addrMode = Addr16Bit;
    245                  destination.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    246                  if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumOutClusters,
    247                                              sapi_epDesc.simpleDesc->pAppOutClusterList ) )
    248                  {
    249                    // Try to match with a device in the allow bind mode
    250                    ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
    251                        sapi_epDesc.simpleDesc->AppProfId, 1, &commandId, 0, (cId_t *)NULL, 0 );
    252                  }
    253                  else if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumInClusters,
    254                                                   sapi_epDesc.simpleDesc->pAppInClusterList ) )
    255                  {
    256                    ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
    257                        sapi_epDesc.simpleDesc->AppProfId, 0, (cId_t *)NULL, 1, &commandId, 0 );
    258                  }
    259          
    260                  if ( ret == ZB_SUCCESS )
    261                  {
    262                    // Set a timer to make sure bind completes
    263          #if ( ZG_BUILD_RTR_TYPE )
    264                    osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, AIB_MaxBindingTime);
    265          #else
    266                    // AIB_MaxBindingTime is not defined for an End Device
    267                    osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, zgApsDefaultMaxBindingTime);
    268          #endif
    269                    sapi_bindInProgress = commandId;
    270                    return; // dont send cback event
    271                  }
    272                }
    273              }
    274              SAPI_SendCback( SAPICB_BIND_CNF, ret, commandId );
   \                     ??zb_BindDevice_2:
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FE           MOV     R6,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   FF           MOV     R7,A
   \   00009E                ; Setup parameters for call to function osal_msg_allocate
   \   00009E   7A04         MOV     R2,#0x4
   \   0000A0   7B00         MOV     R3,#0x0
   \   0000A2   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0000A5   EA           MOV     A,R2
   \   0000A6   4B           ORL     A,R3
   \   0000A7   7003         JNZ     $+5
   \   0000A9   02....       LJMP    ??zb_BindDevice_4 & 0xFFFF
   \   0000AC   8A82         MOV     DPL,R2
   \   0000AE   8B83         MOV     DPH,R3
   \   0000B0   74E1         MOV     A,#-0x1f
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E5..         MOV     A,?V1
   \   0000B6   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000B9   EF           MOV     A,R7
   \   0000BA   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000BD   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000C0   02....       LJMP    ??zb_BindDevice_4 & 0xFFFF
   \                     ??zb_BindDevice_3:
   \   0000C3   75..02       MOV     ?V1,#0x2
   \   0000C6   740A         MOV     A,#0xa
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   7402         MOV     A,#0x2
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   74FF         MOV     A,#-0x1
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000DF   8882         MOV     DPL,R0
   \   0000E1   8983         MOV     DPH,R1
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   FC           MOV     R4,A
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F3   7901         MOV     R1,#0x1
   \   0000F5   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0000F8   7402         MOV     A,#0x2
   \   0000FA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FD   E9           MOV     A,R1
   \   0000FE   602F         JZ      ??zb_BindDevice_5
   \   000100                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000100   75..00       MOV     ?V1,#0x0
   \   000103   78..         MOV     R0,#?V1
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000108   E4           CLR     A
   \   000109   F5..         MOV     ?V2,A
   \   00010B   F5..         MOV     ?V3,A
   \   00010D   78..         MOV     R0,#?V2
   \   00010F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000112   78..         MOV     R0,#?V1
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000117   7404         MOV     A,#0x4
   \   000119   12....       LCALL   ?XSTACK_DISP100_8
   \   00011C   88..         MOV     ?V2,R0
   \   00011E   89..         MOV     ?V3,R1
   \   000120   78..         MOV     R0,#?V2
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000128   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00012B   7901         MOV     R1,#0x1
   \   00012D   8057         SJMP    ??zb_BindDevice_6
   \                     ??zb_BindDevice_5:
   \   00012F   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000132   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000135   8882         MOV     DPL,R0
   \   000137   8983         MOV     DPH,R1
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   FC           MOV     R4,A
   \   000141   7402         MOV     A,#0x2
   \   000143   12....       LCALL   ?XSTACK_DISP101_8
   \   000146   7901         MOV     R1,#0x1
   \   000148   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00014B   7402         MOV     A,#0x2
   \   00014D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000150   E9           MOV     A,R1
   \   000151   7003         JNZ     $+5
   \   000153   02....       LJMP    ??zb_BindDevice_2 & 0xFFFF
   \   000156                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000156   75..00       MOV     ?V1,#0x0
   \   000159   78..         MOV     R0,#?V1
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015E   7401         MOV     A,#0x1
   \   000160   12....       LCALL   ?XSTACK_DISP100_8
   \   000163   88..         MOV     ?V2,R0
   \   000165   89..         MOV     ?V3,R1
   \   000167   78..         MOV     R0,#?V2
   \   000169   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016C   75..01       MOV     ?V1,#0x1
   \   00016F   78..         MOV     R0,#?V1
   \   000171   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000174   E4           CLR     A
   \   000175   F5..         MOV     ?V2,A
   \   000177   F5..         MOV     ?V3,A
   \   000179   78..         MOV     R0,#?V2
   \   00017B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000181   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000184   7900         MOV     R1,#0x0
   \                     ??zb_BindDevice_6:
   \   000186   7CFF         MOV     R4,#-0x1
   \   000188   7DFF         MOV     R5,#-0x1
   \   00018A   740A         MOV     A,#0xa
   \   00018C   12....       LCALL   ?XSTACK_DISP101_8
   \   00018F   12....       LCALL   `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   000192   7408         MOV     A,#0x8
   \   000194   12....       LCALL   ?DEALLOC_XSTACK8
   \   000197   E9           MOV     A,R1
   \   000198   F5..         MOV     ?V1,A
   \   00019A   E5..         MOV     A,?V1
   \   00019C   6003         JZ      $+5
   \   00019E   02....       LJMP    ??zb_BindDevice_2 & 0xFFFF
   \   0001A1                ; Setup parameters for call to function osal_start_timerEx
   \   0001A1   90....       MOV     DPTR,#zgApsDefaultMaxBindingTime
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   F5..         MOV     ?V4,A
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   F5..         MOV     ?V5,A
   \   0001AB   E4           CLR     A
   \   0001AC   F5..         MOV     ?V6,A
   \   0001AE   F5..         MOV     ?V7,A
   \   0001B0   78..         MOV     R0,#?V4
   \   0001B2   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0001B5   7A00         MOV     R2,#0x0
   \   0001B7   7B20         MOV     R3,#0x20
   \   0001B9   90....       MOV     DPTR,#sapi_TaskID
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   F9           MOV     R1,A
   \   0001BE   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001C1   7404         MOV     A,#0x4
   \   0001C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C6   85..82       MOV     DPL,?XSP + 0
   \   0001C9   85..83       MOV     DPH,?XSP + 1
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F8           MOV     R0,A
   \   0001CE   A3           INC     DPTR
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   F9           MOV     R1,A
   \   0001D1   90....       MOV     DPTR,#sapi_bindInProgress
   \   0001D4   E8           MOV     A,R0
   \   0001D5   F0           MOVX    @DPTR,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   E9           MOV     A,R1
   \   0001D8   F0           MOVX    @DPTR,A
   \   0001D9   802C         SJMP    ??zb_BindDevice_4
    275            }
    276            else
    277            {
    278              // Remove local bindings for the commandId
    279              BindingEntry_t *pBind;
    280          
    281              // Loop through bindings an remove any that match the cluster
    282              while ( pBind = bindFind( sapi_epDesc.simpleDesc->EndPoint, commandId, 0 ) )
    283              {
    284                bindRemoveEntry(pBind);
   \                     ??zb_BindDevice_7:
   \   0001DB                ; Setup parameters for call to function bindRemoveEntry
   \   0001DB   12....       LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
    285              }
   \                     ??zb_BindDevice_0:
   \   0001DE                ; Setup parameters for call to function bindFind
   \   0001DE   7C00         MOV     R4,#0x0
   \   0001E0   85..82       MOV     DPL,?XSP + 0
   \   0001E3   85..83       MOV     DPH,?XSP + 1
   \   0001E6   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0001E9   12....       LCALL   `??bindFind::?relay` ; Banked call to: bindFind
   \   0001EC   EA           MOV     A,R2
   \   0001ED   4B           ORL     A,R3
   \   0001EE   70EB         JNZ     ??zb_BindDevice_7
    286              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   0001F0                ; Setup parameters for call to function osal_start_timerEx
   \   0001F0   90....       MOV     DPTR,#__Constant_fa
   \   0001F3   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001F6   7A00         MOV     R2,#0x0
   \   0001F8   7B01         MOV     R3,#0x1
   \   0001FA   90....       MOV     DPTR,#ZDAppTaskID
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   F9           MOV     R1,A
   \   0001FF   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000202   7404         MOV     A,#0x4
   \   000204   12....       LCALL   ?DEALLOC_XSTACK8
    287            }
    288            return;
   \                     ??zb_BindDevice_4:
   \   000207   740B         MOV     A,#0xb
   \   000209                REQUIRE ?Subroutine1
   \   000209                ; // Fall through to label ?Subroutine1
    289          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000008                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   EE           MOV     A,R6
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005                REQUIRE ??Subroutine16_0
   \   000005                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   22           RET
    290          /******************************************************************************
    291           * @fn          zb_PermitJoiningRequest
    292           *
    293           * @brief       The zb_PermitJoiningRequest function is used to control the
    294           *              joining permissions and thus allow or disallow new devices from
    295           *              joining the network.
    296           *
    297           * @param       destination - The destination parameter indicates the address
    298           *                            of the device for which the joining permissions
    299           *                            should be set. This is usually the local device
    300           *                            address or the special broadcast address that denotes
    301           *                            all routers and coordinator ( 0xFFFC ). This way
    302           *                            the joining permissions of a single device or the
    303           *                            whole network can be controlled.
    304           *              timeout -  Indicates the amount of time in seconds for which
    305           *                         the joining permissions should be turned on.
    306           *                         If timeout is set to 0x00, the device will turn off the
    307           *                         joining permissions indefinitely. If it is set to 0xFF,
    308           *                         the joining permissions will be turned on indefinitely.
    309           *
    310           *
    311           * @return      ZB_SUCCESS or a failure code
    312           *
    313           */
    314          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    315          uint8 zb_PermitJoiningRequest ( uint16 destination, uint8 timeout )
   \                     zb_PermitJoiningRequest:
    316          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    317          #if defined( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    318            zAddrType_t dstAddr;
    319          
    320            dstAddr.addrMode = Addr16Bit;
    321            dstAddr.addr.shortAddr = destination;
    322          
    323            return( (uint8) ZDP_MgmtPermitJoinReq( &dstAddr, timeout, 0, 0 ) );
    324          #else
    325            (void)destination;
    326            (void)timeout;
    327            return ZUnsupportedMode;
   \   000000   7912         MOV     R1,#0x12
   \   000002   02....       LJMP    ?BRET
    328          #endif
    329          }
    330          /******************************************************************************
    331           * @fn          zb_AllowBind
    332           *
    333           * @brief       The zb_AllowBind function puts the device into the
    334           *              Allow Binding Mode for a given period of time.  A peer device
    335           *              can establish a binding to a device in the Allow Binding Mode
    336           *              by calling zb_BindDevice with a destination address of NULL
    337           *
    338           * @param       timeout - The number of seconds to remain in the allow binding
    339           *                        mode.  Valid values range from 1 through 65.
    340           *                        If 0, the Allow Bind mode will be set false without TO
    341           *                        If greater than 64, the Allow Bind mode will be true
    342           *
    343           * @return      ZB_SUCCESS if the device entered the allow bind mode, else
    344           *              an error code.
    345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    346          void zb_AllowBind ( uint8 timeout )
   \                     zb_AllowBind:
    347          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    348          
    349            osal_stop_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER);
   \   000007                ; Setup parameters for call to function osal_stop_timerEx
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7B40         MOV     R3,#0x40
   \   00000B   90....       MOV     DPTR,#sapi_TaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    350          
    351            if ( timeout == 0 )
   \   000013   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000016   EE           MOV     A,R6
   \   000017   7007         JNZ     ??zb_AllowBind_0
    352            {
    353              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   000019                ; Setup parameters for call to function afSetMatch
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   00001E   8044         SJMP    ??zb_AllowBind_1
    354            }
    355            else
    356            {
    357              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, TRUE);
   \                     ??zb_AllowBind_0:
   \   000020                ; Setup parameters for call to function afSetMatch
   \   000020   7A01         MOV     R2,#0x1
   \   000022   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
    358              if ( timeout != 0xFF )
   \   000025   74FF         MOV     A,#-0x1
   \   000027   6E           XRL     A,R6
   \   000028   603A         JZ      ??zb_AllowBind_1
    359              {
    360                if ( timeout > 64 )
   \   00002A   EE           MOV     A,R6
   \   00002B   C3           CLR     C
   \   00002C   9441         SUBB    A,#0x41
   \   00002E   4002         JC      ??zb_AllowBind_2
    361                {
    362                  timeout = 64;
   \   000030   7E40         MOV     R6,#0x40
    363                }
    364                osal_start_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER, timeout*1000);
   \                     ??zb_AllowBind_2:
   \   000032                ; Setup parameters for call to function osal_start_timerEx
   \   000032   EE           MOV     A,R6
   \   000033   F8           MOV     R0,A
   \   000034   75F0E8       MOV     B,#-0x18
   \   000037   A4           MUL     AB
   \   000038   C8           XCH     A,R0
   \   000039   AAF0         MOV     R2,B
   \   00003B   75F003       MOV     B,#0x3
   \   00003E   A4           MUL     AB
   \   00003F   2A           ADD     A,R2
   \   000040   FA           MOV     R2,A
   \   000041   E4           CLR     A
   \   000042   2A           ADD     A,R2
   \   000043   88..         MOV     ?V0,R0
   \   000045   F5..         MOV     ?V1,A
   \   000047   33           RLC     A
   \   000048   95E0         SUBB    A,0xE0 /* A   */
   \   00004A   F5..         MOV     ?V2,A
   \   00004C   F5..         MOV     ?V3,A
   \   00004E   78..         MOV     R0,#?V0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000053   7A00         MOV     R2,#0x0
   \   000055   7B40         MOV     R3,#0x40
   \   000057   90....       MOV     DPTR,#sapi_TaskID
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005F   7404         MOV     A,#0x4
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    365              }
    366            }
    367            return;
   \                     ??zb_AllowBind_1:
   \   000064   02....       LJMP    ?Subroutine0 & 0xFFFF
    368          }
    369          /******************************************************************************
    370           * @fn          zb_SendDataRequest
    371           *
    372           * @brief       The zb_SendDataRequest function initiates transmission of data
    373           *              to a peer device
    374           *
    375           * @param       destination - The destination of the data.  The destination can
    376           *                            be one of the following:
    377           *                            - 16-Bit short address of device [0-0xfffD]
    378           *                            - ZB_BROADCAST_ADDR sends the data to all devices
    379           *                              in the network.
    380           *                            - ZB_BINDING_ADDR sends the data to a previously
    381           *                              bound device.
    382           *
    383           *              commandId - The command ID to send with the message.  If the
    384           *                          ZB_BINDING_ADDR destination is used, this parameter
    385           *                          also indicates the binding to use.
    386           *
    387           *              len - The size of the pData buffer in bytes
    388           *              handle - A handle used to identify the send data request.
    389           *              txOptions - TRUE if requesting acknowledgement from the destination.
    390           *              radius - The max number of hops the packet can travel through
    391           *                       before it is dropped.
    392           *
    393           * @return      none
    394           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    395          void zb_SendDataRequest ( uint16 destination, uint16 commandId, uint8 len,
   \                     zb_SendDataRequest:
    396                                    uint8 *pData, uint8 handle, uint8 txOptions, uint8 radius )
    397          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V0,R4
   \   00000C   8D..         MOV     ?V1,R5
   \   00000E   89..         MOV     ?V2,R1
   \   000010   741D         MOV     A,#0x1d
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
    398            afStatus_t status;
    399            afAddrType_t dstAddr;
    400          
    401            txOptions |= AF_DISCV_ROUTE;
    402          
    403            // Set the destination address
    404            if (destination == ZB_BINDING_ADDR)
   \   000017   74FE         MOV     A,#-0x2
   \   000019   6A           XRL     A,R2
   \   00001A   7003         JNZ     ??zb_SendDataRequest_0
   \   00001C   74FF         MOV     A,#-0x1
   \   00001E   6B           XRL     A,R3
   \                     ??zb_SendDataRequest_0:
   \   00001F   7009         JNZ     ??zb_SendDataRequest_1
    405            {
    406              // Binding
    407              dstAddr.addrMode = afAddrNotPresent;
   \   000021   7408         MOV     A,#0x8
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
   \   000028   801D         SJMP    ??zb_SendDataRequest_2
    408            }
    409            else
    410            {
    411              // Use short address
    412              dstAddr.addr.shortAddr = destination;
   \                     ??zb_SendDataRequest_1:
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   EA           MOV     A,R2
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   EB           MOV     A,R3
   \   000034   F0           MOVX    @DPTR,A
    413              dstAddr.addrMode = afAddr16Bit;
   \   000035   7408         MOV     A,#0x8
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   7402         MOV     A,#0x2
   \   00003C   F0           MOVX    @DPTR,A
    414          
    415              if ( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( destination ) )
   \   00003D                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00003D   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000040   E9           MOV     A,R1
   \   000041   6004         JZ      ??zb_SendDataRequest_2
    416              {
    417                txOptions &= ~AF_ACK_REQUEST;
   \   000043   EE           MOV     A,R6
   \   000044   C2E4         CLR     0xE0 /* A   */.4
   \   000046   FE           MOV     R6,A
    418              }
    419            }
    420          
    421            dstAddr.panId = 0;                                    // Not an inter-pan message.
   \                     ??zb_SendDataRequest_2:
   \   000047   740A         MOV     A,#0xa
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
    422            dstAddr.endPoint = sapi_epDesc.simpleDesc->EndPoint;  // Set the endpoint.
   \   000050   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000053   C0E0         PUSH    A
   \   000055   7409         MOV     A,#0x9
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   D0E0         POP     A
   \   00005C   F0           MOVX    @DPTR,A
    423          
    424            // Send the message
    425            status = AF_DataRequest(&dstAddr, &sapi_epDesc, commandId, len,
    426                                    pData, &handle, txOptions, radius);
   \   00005D                ; Setup parameters for call to function AF_DataRequest
   \   00005D   741E         MOV     A,#0x1e
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F5..         MOV     ?V3,A
   \   000065   78..         MOV     R0,#?V3
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   741D         MOV     A,#0x1d
   \   00006C   12....       LCALL   ?XSTACK_DISP100_8
   \   00006F   88..         MOV     ?V4,R0
   \   000071   89..         MOV     ?V5,R1
   \   000073   78..         MOV     R0,#?V4
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   741D         MOV     A,#0x1d
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000080   85....       MOV     ?V4,?V2
   \   000083   75..00       MOV     ?V5,#0x0
   \   000086   78..         MOV     R0,#?V4
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   EE           MOV     A,R6
   \   000091   F9           MOV     R1,A
   \   000092   7C..         MOV     R4,#sapi_epDesc & 0xff
   \   000094   7D..         MOV     R5,#(sapi_epDesc >> 8) & 0xff
   \   000096   7409         MOV     A,#0x9
   \   000098   12....       LCALL   ?XSTACK_DISP101_8
   \   00009B   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00009E   7409         MOV     A,#0x9
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   E9           MOV     A,R1
   \   0000A4   F5..         MOV     ?V0,A
    427          
    428            if (status != afStatus_SUCCESS)
   \   0000A6   6026         JZ      ??zb_SendDataRequest_3
    429            {
    430              SAPI_SendCback( SAPICB_DATA_CNF, status, handle );
   \   0000A8   741C         MOV     A,#0x1c
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   FE           MOV     R6,A
   \   0000AF                ; Setup parameters for call to function osal_msg_allocate
   \   0000AF   7A04         MOV     R2,#0x4
   \   0000B1   7B00         MOV     R3,#0x0
   \   0000B3   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0000B6   EA           MOV     A,R2
   \   0000B7   4B           ORL     A,R3
   \   0000B8   6014         JZ      ??zb_SendDataRequest_3
   \   0000BA   8A82         MOV     DPL,R2
   \   0000BC   8B83         MOV     DPH,R3
   \   0000BE   74E0         MOV     A,#-0x20
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E5..         MOV     A,?V0
   \   0000C4   12....       LCALL   ?Subroutine9 & 0xFFFF
    431            }
   \                     ??CrossCallReturnLabel_8:
   \   0000C7   E4           CLR     A
   \   0000C8   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000CB   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    432          }
   \                     ??zb_SendDataRequest_3:
   \   0000CE   740C         MOV     A,#0xc
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D3                REQUIRE ?Subroutine2
   \   0000D3                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    433          
    434          /******************************************************************************
    435           * @fn          zb_ReadConfiguration
    436           *
    437           * @brief       The zb_ReadConfiguration function is used to get a
    438           *              Configuration Protperty from Nonvolatile memory.
    439           *
    440           * @param       configId - The identifier for the configuration property
    441           *              len - The size of the pValue buffer in bytes
    442           *              pValue - A buffer to hold the configuration property
    443           *
    444           * @return      none
    445           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    446          uint8 zb_ReadConfiguration( uint8 configId, uint8 len, void *pValue )
   \                     zb_ReadConfiguration:
    447          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V5,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
    448            uint8 size;
    449          
    450            size = (uint8)osal_nv_item_len( configId );
   \   00000D   AE..         MOV     R6,?V5
   \   00000F                ; Setup parameters for call to function osal_nv_item_len
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000016   EA           MOV     A,R2
   \   000017   F5..         MOV     ?V0,A
    451            if ( size > len )
   \   000019   E5..         MOV     A,?V4
   \   00001B   C3           CLR     C
   \   00001C   95..         SUBB    A,?V0
   \   00001E   5004         JNC     ??zb_ReadConfiguration_0
    452            {
    453              return ZFailure;
   \   000020   7901         MOV     R1,#0x1
   \   000022   801D         SJMP    ??zb_ReadConfiguration_1
    454            }
    455            else
    456            {
    457              return( osal_nv_read(configId, 0, size, pValue) );
   \                     ??zb_ReadConfiguration_0:
   \   000024                ; Setup parameters for call to function osal_nv_read
   \   000024   78..         MOV     R0,#?V2
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   75..00       MOV     ?V1,#0x0
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   7C00         MOV     R4,#0x0
   \   000033   7D00         MOV     R5,#0x0
   \   000035   EE           MOV     A,R6
   \   000036   FA           MOV     R2,A
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
    458            }
   \                     ??zb_ReadConfiguration_1:
   \   000041   80..         SJMP    ?Subroutine2
    459          }
    460          /******************************************************************************
    461           * @fn          zb_WriteConfiguration
    462           *
    463           * @brief       The zb_WriteConfiguration function is used to write a
    464           *              Configuration Property to nonvolatile memory.
    465           *
    466           * @param       configId - The identifier for the configuration property
    467           *              len - The size of the pValue buffer in bytes
    468           *              pValue - A buffer containing the new value of the
    469           *                       configuration property
    470           *
    471           * @return      none
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          uint8 zb_WriteConfiguration( uint8 configId, uint8 len, void *pValue )
   \                     zb_WriteConfiguration:
    474          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    475            return( osal_nv_write(configId, 0, len, pValue) );
   \   000009                ; Setup parameters for call to function osal_nv_write
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   8E..         MOV     ?V0,R6
   \   000014   75..00       MOV     ?V1,#0x0
   \   000017   78..         MOV     R0,#?V0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   EF           MOV     A,R7
   \   000021   FA           MOV     R2,A
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000027   7404         MOV     A,#0x4
   \   000029                REQUIRE ?Subroutine3
   \   000029                ; // Fall through to label ?Subroutine3
    476          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    477          /******************************************************************************
    478           * @fn          zb_GetDeviceInfo
    479           *
    480           * @brief       The zb_GetDeviceInfo function retrieves a Device Information
    481           *              Property.
    482           *
    483           * @param       param - The identifier for the device information
    484           *              pValue - A buffer to hold the device information
    485           *
    486           * @return      none
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          void zb_GetDeviceInfo ( uint8 param, void *pValue )
   \                     zb_GetDeviceInfo:
    489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    490            switch(param)
   \   000006   6017         JZ      ??zb_GetDeviceInfo_0
   \   000008   14           DEC     A
   \   000009   601C         JZ      ??zb_GetDeviceInfo_1
   \   00000B   14           DEC     A
   \   00000C   6021         JZ      ??zb_GetDeviceInfo_2
   \   00000E   14           DEC     A
   \   00000F   6026         JZ      ??zb_GetDeviceInfo_3
   \   000011   14           DEC     A
   \   000012   602B         JZ      ??zb_GetDeviceInfo_4
   \   000014   14           DEC     A
   \   000015   6030         JZ      ??zb_GetDeviceInfo_5
   \   000017   14           DEC     A
   \   000018   603F         JZ      ??zb_GetDeviceInfo_6
   \   00001A   14           DEC     A
   \   00001B   604E         JZ      ??zb_GetDeviceInfo_7
   \   00001D   8066         SJMP    ??zb_GetDeviceInfo_8
    491            {
    492              case ZB_INFO_DEV_STATE:
    493                osal_memcpy(pValue, &devState, sizeof(uint8));
   \                     ??zb_GetDeviceInfo_0:
   \   00001F                ; Setup parameters for call to function osal_memcpy
   \   00001F   75....       MOV     ?V0,#devState & 0xff
   \   000022   75....       MOV     ?V1,#(devState >> 8) & 0xff
   \   000025   8026         SJMP    ??zb_GetDeviceInfo_9
    494                break;
    495              case ZB_INFO_IEEE_ADDR:
    496                osal_memcpy(pValue, &aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_1:
   \   000027                ; Setup parameters for call to function osal_memcpy
   \   000027   75....       MOV     ?V0,#aExtendedAddress & 0xff
   \   00002A   75....       MOV     ?V1,#(aExtendedAddress >> 8) & 0xff
   \   00002D   8042         SJMP    ??zb_GetDeviceInfo_10
    497                break;
    498              case ZB_INFO_SHORT_ADDR:
    499                osal_memcpy(pValue, &_NIB.nwkDevAddress, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_2:
   \   00002F                ; Setup parameters for call to function osal_memcpy
   \   00002F   75....       MOV     ?V0,#(_NIB + 20) & 0xff
   \   000032   75....       MOV     ?V1,#((_NIB + 20) >> 8) & 0xff
   \   000035   8028         SJMP    ??zb_GetDeviceInfo_11
    500                break;
    501              case ZB_INFO_PARENT_SHORT_ADDR:
    502                osal_memcpy(pValue, &_NIB.nwkCoordAddress, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_3:
   \   000037                ; Setup parameters for call to function osal_memcpy
   \   000037   75....       MOV     ?V0,#(_NIB + 23) & 0xff
   \   00003A   75....       MOV     ?V1,#((_NIB + 23) >> 8) & 0xff
   \   00003D   8020         SJMP    ??zb_GetDeviceInfo_11
    503                break;
    504              case ZB_INFO_PARENT_IEEE_ADDR:
    505                osal_memcpy(pValue, &_NIB.nwkCoordExtAddress, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_4:
   \   00003F                ; Setup parameters for call to function osal_memcpy
   \   00003F   75....       MOV     ?V0,#(_NIB + 25) & 0xff
   \   000042   75....       MOV     ?V1,#((_NIB + 25) >> 8) & 0xff
   \   000045   802A         SJMP    ??zb_GetDeviceInfo_10
    506                break;
    507              case ZB_INFO_CHANNEL:
    508                osal_memcpy(pValue, &_NIB.nwkLogicalChannel, sizeof(uint8));
   \                     ??zb_GetDeviceInfo_5:
   \   000047                ; Setup parameters for call to function osal_memcpy
   \   000047   75....       MOV     ?V0,#(_NIB + 22) & 0xff
   \   00004A   75....       MOV     ?V1,#((_NIB + 22) >> 8) & 0xff
   \                     ??zb_GetDeviceInfo_9:
   \   00004D   75..00       MOV     ?V2,#0x0
   \   000050   78..         MOV     R0,#?V0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000055   7C01         MOV     R4,#0x1
   \   000057   8022         SJMP    ??zb_GetDeviceInfo_12
    509                break;
    510              case ZB_INFO_PAN_ID:
    511                osal_memcpy(pValue, &_NIB.nwkPanId, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_6:
   \   000059                ; Setup parameters for call to function osal_memcpy
   \   000059   75....       MOV     ?V0,#(_NIB + 33) & 0xff
   \   00005C   75....       MOV     ?V1,#((_NIB + 33) >> 8) & 0xff
   \                     ??zb_GetDeviceInfo_11:
   \   00005F   75..00       MOV     ?V2,#0x0
   \   000062   78..         MOV     R0,#?V0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000067   7C02         MOV     R4,#0x2
   \   000069   8010         SJMP    ??zb_GetDeviceInfo_12
    512                break;
    513              case ZB_INFO_EXT_PAN_ID:
    514                osal_memcpy(pValue, &_NIB.extendedPANID, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_7:
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   75....       MOV     ?V0,#(_NIB + 53) & 0xff
   \   00006E   75....       MOV     ?V1,#((_NIB + 53) >> 8) & 0xff
   \                     ??zb_GetDeviceInfo_10:
   \   000071   75..00       MOV     ?V2,#0x0
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000079   7C08         MOV     R4,#0x8
   \                     ??zb_GetDeviceInfo_12:
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000080   7403         MOV     A,#0x3
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    515                break;
    516            }
    517          }
   \                     ??zb_GetDeviceInfo_8:
   \   000085   7F03         MOV     R7,#0x3
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    518          
    519          /******************************************************************************
    520           * @fn          zb_FindDeviceRequest
    521           *
    522           * @brief       The zb_FindDeviceRequest function is used to determine the
    523           *              short address for a device in the network.  The device initiating
    524           *              a call to zb_FindDeviceRequest and the device being discovered
    525           *              must both be a member of the same network.  When the search is
    526           *              complete, the zv_FindDeviceConfirm callback function is called.
    527           *
    528           * @param       searchType - The type of search to perform. Can be one of following:
    529           *                           ZB_IEEE_SEARCH - Search for 16-bit addr given IEEE addr.
    530           *              searchKey - Value to search on.
    531           *
    532           * @return      none
    533           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          void zb_FindDeviceRequest( uint8 searchType, void *searchKey )
   \                     zb_FindDeviceRequest:
    535          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    536            if (searchType == ZB_IEEE_SEARCH)
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7009         JNZ     ??zb_FindDeviceRequest_0
    537            {
    538              ZDP_NwkAddrReq((uint8*) searchKey, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00000C                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
    539            }
    540          }
   \                     ??zb_FindDeviceRequest_0:
   \   000015   7F01         MOV     R7,#0x1
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA
    541          /******************************************************************************
    542           * @fn          SAPI_StartConfirm
    543           *
    544           * @brief       The SAPI_StartConfirm callback is called by the ZigBee stack
    545           *              after a start request operation completes
    546           *
    547           * @param       status - The status of the start operation.  Status of
    548           *                       ZB_SUCCESS indicates the start operation completed
    549           *                       successfully.  Else the status is an error code.
    550           *
    551           * @return      none
    552           */
    553          void SAPI_StartConfirm( uint8 status )
    554          {
    555          #if defined ( MT_SAPI_CB_FUNC )
    556            /* First check if MT has subscribed for this callback. If so , pass it as
    557            a event to MonitorTest and return control to calling function after that */
    558            if ( SAPICB_CHECK( SPI_CB_SAPI_START_CNF ) )
    559            {
    560              zb_MTCallbackStartConfirm( status );
    561            }
    562            else
    563          #endif  //MT_SAPI_CB_FUNC
    564            {
    565          #if ( SAPI_CB_FUNC )
    566              zb_StartConfirm( status );
    567          #endif
    568            }
    569          }
    570          
    571          /******************************************************************************
    572           * @fn          SAPI_SendDataConfirm
    573           *
    574           * @brief       The SAPI_SendDataConfirm callback function is called by the
    575           *              ZigBee after a send data operation completes
    576           *
    577           * @param       handle - The handle identifying the data transmission.
    578           *              status - The status of the operation.
    579           *
    580           * @return      none
    581           */
    582          void SAPI_SendDataConfirm( uint8 handle, uint8 status )
    583          {
    584          #if defined ( MT_SAPI_CB_FUNC )
    585            /* First check if MT has subscribed for this callback. If so , pass it as
    586            a event to MonitorTest and return control to calling function after that */
    587            if ( SAPICB_CHECK( SPI_CB_SAPI_SEND_DATA_CNF ) )
    588            {
    589              zb_MTCallbackSendDataConfirm( handle, status );
    590            }
    591            else
    592          #endif  //MT_SAPI_CB_FUNC
    593            {
    594          #if ( SAPI_CB_FUNC )
    595              zb_SendDataConfirm( handle, status );
    596          #endif
    597            }
    598          }
    599          
    600          /******************************************************************************
    601           * @fn          SAPI_BindConfirm
    602           *
    603           * @brief       The SAPI_BindConfirm callback is called by the ZigBee stack
    604           *              after a bind operation completes.
    605           *
    606           * @param       commandId - The command ID of the binding being confirmed.
    607           *              status - The status of the bind operation.
    608           *              allowBind - TRUE if the bind operation was initiated by a call
    609           *                          to zb_AllowBindRespones.  FALSE if the operation
    610           *                          was initiated by a call to ZB_BindDevice
    611           *
    612           * @return      none
    613           */
    614          void SAPI_BindConfirm( uint16 commandId, uint8 status )
    615          {
    616          #if defined ( MT_SAPI_CB_FUNC )
    617            /* First check if MT has subscribed for this callback. If so , pass it as
    618            a event to MonitorTest and return control to calling function after that */
    619            if ( SAPICB_CHECK( SPI_CB_SAPI_BIND_CNF ) )
    620            {
    621              zb_MTCallbackBindConfirm( commandId, status );
    622            }
    623            else
    624          #endif  //MT_SAPI_CB_FUNC
    625            {
    626          #if ( SAPI_CB_FUNC )
    627              zb_BindConfirm( commandId, status );
    628          #endif
    629            }
    630          }
    631          
    632          /******************************************************************************
    633           * @fn          SAPI_AllowBindConfirm
    634           *
    635           * @brief       Indicates when another device attempted to bind to this device
    636           *
    637           * @param
    638           *
    639           * @return      none
    640           */
    641          void SAPI_AllowBindConfirm( uint16 source )
    642          {
    643            #if defined ( MT_SAPI_CB_FUNC )
    644            /* First check if MT has subscribed for this callback. If so , pass it as
    645            a event to MonitorTest and return control to calling function after that */
    646            if ( SAPICB_CHECK( SPI_CB_SAPI_ALLOW_BIND_CNF ) )
    647            {
    648              zb_MTCallbackAllowBindConfirm( source );
    649            }
    650            else
    651          #endif  //MT_SAPI_CB_FUNC
    652            {
    653          #if ( SAPI_CB_FUNC )
    654              zb_AllowBindConfirm( source );
    655          #endif
    656            }
    657          }
    658          /******************************************************************************
    659           * @fn          SAPI_FindDeviceConfirm
    660           *
    661           * @brief       The SAPI_FindDeviceConfirm callback function is called by the
    662           *              ZigBee stack when a find device operation completes.
    663           *
    664           * @param       searchType - The type of search that was performed.
    665           *              searchKey - Value that the search was executed on.
    666           *              result - The result of the search.
    667           *
    668           * @return      none
    669           */
    670          void SAPI_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
    671          {
    672          #if defined ( MT_SAPI_CB_FUNC )
    673            /* First check if MT has subscribed for this callback. If so , pass it as
    674            a event to MonitorTest and return control to calling function after that */
    675            if ( SAPICB_CHECK( SPI_CB_SAPI_FIND_DEV_CNF ) )
    676            {
    677              zb_MTCallbackFindDeviceConfirm( searchType, searchKey, result );
    678            }
    679            else
    680          #endif  //MT_SAPI_CB_FUNC
    681            {
    682          #if ( SAPI_CB_FUNC )
    683              zb_FindDeviceConfirm( searchType, searchKey, result );
    684          #endif
    685            }
    686          }
    687          /******************************************************************************
    688           * @fn          SAPI_ReceiveDataIndication
    689           *
    690           * @brief       The SAPI_ReceiveDataIndication callback function is called
    691           *              asynchronously by the ZigBee stack to notify the application
    692           *              when data is received from a peer device.
    693           *
    694           * @param       source - The short address of the peer device that sent the data
    695           *              command - The commandId associated with the data
    696           *              len - The number of bytes in the pData parameter
    697           *              pData - The data sent by the peer device
    698           *
    699           * @return      none
    700           */
    701          void SAPI_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
    702          {
    703          #if defined ( MT_SAPI_CB_FUNC )
    704            /* First check if MT has subscribed for this callback. If so , pass it as
    705            a event to MonitorTest and return control to calling function after that */
    706            if ( SAPICB_CHECK( SPI_CB_SAPI_RCV_DATA_IND ) )
    707            {
    708              zb_MTCallbackReceiveDataIndication( source, command, len, pData  );
    709            }
    710            else
    711          #endif  //MT_SAPI_CB_FUNC
    712            {
    713          #if ( SAPI_CB_FUNC )
    714              zb_ReceiveDataIndication( source, command, len, pData  );
    715          #endif
    716            }
    717          }
    718          /*********************************************************************
    719           * @fn      SAPI_ProcessEvent
    720           *
    721           * @brief   Simple API Task event processor.  This function
    722           *          is called to process all events for the task.  Events
    723           *          include timers, messages and any other user defined events.
    724           *
    725           * @param   task_id  - The OSAL assigned task ID.
    726           * @param   events - events to process.  This is a bit map and can
    727           *                   contain more than one event.
    728           *
    729           * @return  none
    730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    731          UINT16 SAPI_ProcessEvent( byte task_id, UINT16 events )
   \                     SAPI_ProcessEvent:
    732          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
    733            osal_event_hdr_t *pMsg;
    734            afIncomingMSGPacket_t *pMSGpkt;
    735            afDataConfirm_t *pDataConfirm;
    736          
    737            if ( events & SYS_EVENT_MSG )
   \   000010   EB           MOV     A,R3
   \   000011   5480         ANL     A,#0x80
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??SAPI_ProcessEvent_0 & 0xFFFF
    738            {
    739              pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
   \   000018                ; Setup parameters for call to function osal_msg_receive
   \   000018   800F         SJMP    ??SAPI_ProcessEvent_1
    740              while ( pMsg )
    741              {
    742                switch ( pMsg->event )
    743                {
    744                  case ZDO_CB_MSG:
    745                    SAPI_ProcessZDOMsgs( (zdoIncomingMsg_t *)pMsg );
    746                    break;
    747          
    748                  case AF_DATA_CONFIRM_CMD:
    749                    // This message is received as a confirmation of a data packet sent.
    750                    // The status is of ZStatus_t type [defined in ZComDef.h]
    751                    // The message fields are defined in AF.h
    752                    pDataConfirm = (afDataConfirm_t *) pMsg;
    753                    SAPI_SendDataConfirm( pDataConfirm->transID, pDataConfirm->hdr.status );
    754                    break;
    755          
    756                  case AF_INCOMING_MSG_CMD:
    757                    pMSGpkt = (afIncomingMSGPacket_t *) pMsg;
    758                    SAPI_ReceiveDataIndication( pMSGpkt->srcAddr.addr.shortAddr, pMSGpkt->clusterId,
    759                                                pMSGpkt->cmd.DataLength, pMSGpkt->cmd.Data);
    760                    break;
    761          
    762                  case ZDO_STATE_CHANGE:
    763                    // If the device has started up, notify the application
    764                    if (pMsg->status == DEV_END_DEVICE ||
    765                        pMsg->status == DEV_ROUTER ||
    766                        pMsg->status == DEV_ZB_COORD )
    767                    {
    768                      SAPI_StartConfirm( ZB_SUCCESS );
    769                    }
    770                    else  if (pMsg->status == DEV_HOLD ||
    771                            pMsg->status == DEV_INIT)
    772                    {
    773                      SAPI_StartConfirm( ZB_INIT );
    774                    }
    775                    break;
    776          
    777                  case ZDO_MATCH_DESC_RSP_SENT:
    778                    SAPI_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)pMsg)->nwkAddr );
    779                    break;
    780          
    781                  case KEY_CHANGE:
    782          #if ( SAPI_CB_FUNC )
    783                    zb_HandleKeys( ((keyChange_t *)pMsg)->state, ((keyChange_t *)pMsg)->keys );
    784          #endif
    785                    break;
    786          
    787                  case SAPICB_DATA_CNF:
    788                    SAPI_SendDataConfirm( (uint8)((sapi_CbackEvent_t *)pMsg)->data,
    789                                                 ((sapi_CbackEvent_t *)pMsg)->hdr.status );
    790                    break;
    791          
    792                  case SAPICB_BIND_CNF:
    793                    SAPI_BindConfirm( ((sapi_CbackEvent_t *)pMsg)->data,
    794                                      ((sapi_CbackEvent_t *)pMsg)->hdr.status );
    795                    break;
    796          
    797                  case SAPICB_START_CNF:
    798                    SAPI_StartConfirm( ((sapi_CbackEvent_t *)pMsg)->hdr.status );
   \                     ??SAPI_ProcessEvent_2:
   \   00001A                ; Setup parameters for call to function zb_StartConfirm
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \                     ??SAPI_ProcessEvent_3:
   \   00001D   12....       LCALL   `??zb_StartConfirm::?relay`; Banked call to: zb_StartConfirm
    799                    break;
    800          
    801                  default:
    802                    // User messages should be handled by user or passed to the application
    803                    if ( pMsg->event >= ZB_USER_MSG )
    804                    {
    805          
    806                    }
    807                    break;
    808                }
    809          
    810                // Release the memory
    811                osal_msg_deallocate( (uint8 *) pMsg );
   \                     ??SAPI_ProcessEvent_4:
   \   000020                ; Setup parameters for call to function osal_msg_deallocate
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    812          
    813                // Next
    814                pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
   \   000027                ; Setup parameters for call to function osal_msg_receive
   \   000027   A9..         MOV     R1,?V2
   \                     ??SAPI_ProcessEvent_1:
   \   000029   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00002C   8A..         MOV     ?V4,R2
   \   00002E   8B..         MOV     ?V5,R3
   \   000030   AE..         MOV     R6,?V4
   \   000032   AF..         MOV     R7,?V5
   \   000034   EE           MOV     A,R6
   \   000035   4F           ORL     A,R7
   \   000036   7003         JNZ     $+5
   \   000038   02....       LJMP    ??SAPI_ProcessEvent_5 & 0xFFFF
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   24E6         ADD     A,#-0x1a
   \   000042   6040         JZ      ??SAPI_ProcessEvent_6
   \   000044   245A         ADD     A,#0x5a
   \   000046   7003         JNZ     $+5
   \   000048   02....       LJMP    ??SAPI_ProcessEvent_7 & 0xFFFF
   \   00004B   24EF         ADD     A,#-0x11
   \   00004D   6070         JZ      ??SAPI_ProcessEvent_8
   \   00004F   14           DEC     A
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??SAPI_ProcessEvent_9 & 0xFFFF
   \   000055   14           DEC     A
   \   000056   6016         JZ      ??SAPI_ProcessEvent_10
   \   000058   24F3         ADD     A,#-0xd
   \   00005A   7003         JNZ     $+5
   \   00005C   02....       LJMP    ??SAPI_ProcessEvent_11 & 0xFFFF
   \   00005F   14           DEC     A
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??SAPI_ProcessEvent_12 & 0xFFFF
   \   000065   14           DEC     A
   \   000066   60B2         JZ      ??SAPI_ProcessEvent_2
   \   000068   24E5         ADD     A,#-0x1b
   \   00006A   600B         JZ      ??SAPI_ProcessEvent_13
   \   00006C   80B2         SJMP    ??SAPI_ProcessEvent_4
   \                     ??SAPI_ProcessEvent_10:
   \   00006E                ; Setup parameters for call to function SAPI_ProcessZDOMsgs
   \   00006E   EE           MOV     A,R6
   \   00006F   FA           MOV     R2,A
   \   000070   EF           MOV     A,R7
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   `??SAPI_ProcessZDOMsgs::?relay`; Banked call to: SAPI_ProcessZDOMsgs
   \   000075   80A9         SJMP    ??SAPI_ProcessEvent_4
   \                     ??SAPI_ProcessEvent_13:
   \   000077                ; Setup parameters for call to function zb_SendDataConfirm
   \   000077   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00007A   A3           INC     DPTR
   \                     ??SAPI_ProcessEvent_14:
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   `??zb_SendDataConfirm::?relay`; Banked call to: zb_SendDataConfirm
   \   000082   809C         SJMP    ??SAPI_ProcessEvent_4
   \                     ??SAPI_ProcessEvent_6:
   \   000084                ; Setup parameters for call to function zb_ReceiveDataIndication
   \   000084   EE           MOV     A,R6
   \   000085   2422         ADD     A,#0x22
   \   000087   F582         MOV     DPL,A
   \   000089   E4           CLR     A
   \   00008A   3F           ADDC    A,R7
   \   00008B   F583         MOV     DPH,A
   \   00008D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000090   EE           MOV     A,R6
   \   000091   2420         ADD     A,#0x20
   \   000093   F582         MOV     DPL,A
   \   000095   E4           CLR     A
   \   000096   3F           ADDC    A,R7
   \   000097   F583         MOV     DPH,A
   \   000099   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FC           MOV     R4,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FD           MOV     R5,A
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000B4   12....       LCALL   `??zb_ReceiveDataIndication::?relay`; Banked call to: zb_ReceiveDataIndication
   \   0000B7   7404         MOV     A,#0x4
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BC   02....       LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
   \                     ??SAPI_ProcessEvent_8:
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F8           MOV     R0,A
   \   0000C2   7406         MOV     A,#0x6
   \   0000C4   68           XRL     A,R0
   \   0000C5   600A         JZ      ??SAPI_ProcessEvent_15
   \   0000C7   7407         MOV     A,#0x7
   \   0000C9   68           XRL     A,R0
   \   0000CA   6005         JZ      ??SAPI_ProcessEvent_15
   \   0000CC   7409         MOV     A,#0x9
   \   0000CE   68           XRL     A,R0
   \   0000CF   7005         JNZ     ??SAPI_ProcessEvent_16
   \                     ??SAPI_ProcessEvent_15:
   \   0000D1                ; Setup parameters for call to function zb_StartConfirm
   \   0000D1   7900         MOV     R1,#0x0
   \   0000D3   02....       LJMP    ??SAPI_ProcessEvent_3 & 0xFFFF
   \                     ??SAPI_ProcessEvent_16:
   \   0000D6   E8           MOV     A,R0
   \   0000D7   6008         JZ      ??SAPI_ProcessEvent_17
   \   0000D9   7401         MOV     A,#0x1
   \   0000DB   68           XRL     A,R0
   \   0000DC   6003         JZ      $+5
   \   0000DE   02....       LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
   \                     ??SAPI_ProcessEvent_17:
   \   0000E1                ; Setup parameters for call to function zb_StartConfirm
   \   0000E1   7922         MOV     R1,#0x22
   \   0000E3   02....       LJMP    ??SAPI_ProcessEvent_3 & 0xFFFF
   \                     ??SAPI_ProcessEvent_9:
   \   0000E6                ; Setup parameters for call to function zb_AllowBindConfirm
   \   0000E6   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000E9   12....       LCALL   `??zb_AllowBindConfirm::?relay`; Banked call to: zb_AllowBindConfirm
   \   0000EC   02....       LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
   \                     ??SAPI_ProcessEvent_7:
   \   0000EF                ; Setup parameters for call to function zb_HandleKeys
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F9           MOV     R1,A
   \   0000F8   12....       LCALL   `??zb_HandleKeys::?relay`; Banked call to: zb_HandleKeys
   \   0000FB   02....       LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
   \                     ??SAPI_ProcessEvent_11:
   \   0000FE                ; Setup parameters for call to function zb_SendDataConfirm
   \   0000FE   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000101   02....       LJMP    ??SAPI_ProcessEvent_14 & 0xFFFF
   \                     ??SAPI_ProcessEvent_12:
   \   000104                ; Setup parameters for call to function zb_BindConfirm
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F9           MOV     R1,A
   \   000107   8E82         MOV     DPL,R6
   \   000109   8F83         MOV     DPH,R7
   \   00010B   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00010E   12....       LCALL   `??zb_BindConfirm::?relay`; Banked call to: zb_BindConfirm
   \   000111   02....       LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
    815              }
    816          
    817              // Return unprocessed events
    818              return (events ^ SYS_EVENT_MSG);
   \                     ??SAPI_ProcessEvent_5:
   \   000114   AA..         MOV     R2,?V0
   \   000116   E5..         MOV     A,?V1
   \   000118   6480         XRL     A,#0x80
   \   00011A   02....       LJMP    ??SAPI_ProcessEvent_18 & 0xFFFF
    819            }
    820          
    821            if ( events & ZB_ALLOW_BIND_TIMER )
   \                     ??SAPI_ProcessEvent_0:
   \   00011D   EB           MOV     A,R3
   \   00011E   5440         ANL     A,#0x40
   \   000120   6011         JZ      ??SAPI_ProcessEvent_19
    822            {
    823              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   000122                ; Setup parameters for call to function afSetMatch
   \   000122   7A00         MOV     R2,#0x0
   \   000124   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000127   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
    824              return (events ^ ZB_ALLOW_BIND_TIMER);
   \   00012A   AA..         MOV     R2,?V0
   \   00012C   E5..         MOV     A,?V1
   \   00012E   6440         XRL     A,#0x40
   \   000130   02....       LJMP    ??SAPI_ProcessEvent_18 & 0xFFFF
    825            }
    826          
    827            if ( events & ZB_BIND_TIMER )
   \                     ??SAPI_ProcessEvent_19:
   \   000133   EB           MOV     A,R3
   \   000134   5420         ANL     A,#0x20
   \   000136   601B         JZ      ??SAPI_ProcessEvent_20
    828            {
    829              // Send bind confirm callback to application
    830              SAPI_BindConfirm( sapi_bindInProgress, ZB_TIMEOUT );
   \   000138                ; Setup parameters for call to function zb_BindConfirm
   \   000138   7921         MOV     R1,#0x21
   \   00013A   90....       MOV     DPTR,#sapi_bindInProgress
   \   00013D   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000140   12....       LCALL   `??zb_BindConfirm::?relay`; Banked call to: zb_BindConfirm
    831              sapi_bindInProgress = 0xffff;
   \   000143   90....       MOV     DPTR,#sapi_bindInProgress
   \   000146   74FF         MOV     A,#-0x1
   \   000148   F0           MOVX    @DPTR,A
   \   000149   A3           INC     DPTR
   \   00014A   F0           MOVX    @DPTR,A
    832          
    833              return (events ^ ZB_BIND_TIMER);
   \   00014B   AA..         MOV     R2,?V0
   \   00014D   E5..         MOV     A,?V1
   \   00014F   6420         XRL     A,#0x20
   \   000151   806A         SJMP    ??SAPI_ProcessEvent_18
    834            }
    835          
    836            if ( events & ZB_ENTRY_EVENT )
   \                     ??SAPI_ProcessEvent_20:
   \   000153   EB           MOV     A,R3
   \   000154   5410         ANL     A,#0x10
   \   000156   6068         JZ      ??SAPI_ProcessEvent_21
    837            {
    838              uint8 startOptions;
    839          
    840              // Give indication to application of device startup
    841          #if ( SAPI_CB_FUNC )
    842              zb_HandleOsalEvent( ZB_ENTRY_EVENT );
   \   000158                ; Setup parameters for call to function zb_HandleOsalEvent
   \   000158   7A00         MOV     R2,#0x0
   \   00015A   7B10         MOV     R3,#0x10
   \   00015C   12....       LCALL   `??zb_HandleOsalEvent::?relay`; Banked call to: zb_HandleOsalEvent
    843          #endif
    844          
    845              // LED off cancels HOLD_AUTO_START blink set in the stack
    846              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   00015F                ; Setup parameters for call to function HalLedSet
   \   00015F   7A00         MOV     R2,#0x0
   \   000161   7908         MOV     R1,#0x8
   \   000163   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    847          
    848              zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   000166                ; Setup parameters for call to function osal_nv_item_len
   \   000166   7A03         MOV     R2,#0x3
   \   000168   7B00         MOV     R3,#0x0
   \   00016A   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00016D   EA           MOV     A,R2
   \   00016E   F5..         MOV     ?V4,A
   \   000170   C3           CLR     C
   \   000171   9402         SUBB    A,#0x2
   \   000173   5025         JNC     ??SAPI_ProcessEvent_22
   \   000175                ; Setup parameters for call to function osal_nv_read
   \   000175   A8..         MOV     R0,?XSP + 0
   \   000177   A9..         MOV     R1,?XSP + 1
   \   000179   88..         MOV     ?V6,R0
   \   00017B   89..         MOV     ?V7,R1
   \   00017D   78..         MOV     R0,#?V6
   \   00017F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000182   75..00       MOV     ?V5,#0x0
   \   000185   78..         MOV     R0,#?V4
   \   000187   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018A   7C00         MOV     R4,#0x0
   \   00018C   7D00         MOV     R5,#0x0
   \   00018E   7A03         MOV     R2,#0x3
   \   000190   7B00         MOV     R3,#0x0
   \   000192   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000195   7404         MOV     A,#0x4
   \   000197   12....       LCALL   ?DEALLOC_XSTACK8
    849              if ( startOptions & ZCD_STARTOPT_AUTO_START )
   \                     ??SAPI_ProcessEvent_22:
   \   00019A   85..82       MOV     DPL,?XSP + 0
   \   00019D   85..83       MOV     DPH,?XSP + 1
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   A2E2         MOV     C,0xE0 /* A   */.2
   \   0001A3   5005         JNC     ??SAPI_ProcessEvent_23
    850              {
    851                zb_StartRequest();
   \   0001A5                ; Setup parameters for call to function zb_StartRequest
   \   0001A5   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
   \   0001A8   800D         SJMP    ??SAPI_ProcessEvent_24
    852              }
    853              else
    854              {
    855                // blink leds and wait for external input to config and restart
    856                HalLedBlink(HAL_LED_2, 0, 50, 500);
   \                     ??SAPI_ProcessEvent_23:
   \   0001AA                ; Setup parameters for call to function HalLedBlink
   \   0001AA   7CF4         MOV     R4,#-0xc
   \   0001AC   7D01         MOV     R5,#0x1
   \   0001AE   7B32         MOV     R3,#0x32
   \   0001B0   7A00         MOV     R2,#0x0
   \   0001B2   7902         MOV     R1,#0x2
   \   0001B4   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    857              }
    858          
    859              return (events ^ ZB_ENTRY_EVENT );
   \                     ??SAPI_ProcessEvent_24:
   \   0001B7   AA..         MOV     R2,?V0
   \   0001B9   E5..         MOV     A,?V1
   \   0001BB   6410         XRL     A,#0x10
   \                     ??SAPI_ProcessEvent_18:
   \   0001BD   FB           MOV     R3,A
   \   0001BE   800A         SJMP    ??SAPI_ProcessEvent_25
    860            }
    861          
    862            // This must be the last event to be processed
    863            if ( events & ( ZB_USER_EVENTS ) )
   \                     ??SAPI_ProcessEvent_21:
   \   0001C0   EA           MOV     A,R2
   \   0001C1   6003         JZ      ??SAPI_ProcessEvent_26
    864            {
    865              // User events are passed to the application
    866          #if ( SAPI_CB_FUNC )
    867              zb_HandleOsalEvent( events );
   \   0001C3                ; Setup parameters for call to function zb_HandleOsalEvent
   \   0001C3   12....       LCALL   `??zb_HandleOsalEvent::?relay`; Banked call to: zb_HandleOsalEvent
    868          #endif
    869          
    870              // Do not return here, return 0 later
    871            }
    872          
    873            // Discard unknown events
    874            return 0;
   \                     ??SAPI_ProcessEvent_26:
   \   0001C6   7A00         MOV     R2,#0x0
   \   0001C8   7B00         MOV     R3,#0x0
   \                     ??SAPI_ProcessEvent_25:
   \   0001CA   7401         MOV     A,#0x1
   \   0001CC   02....       LJMP    ?Subroutine1 & 0xFFFF
    875          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   FA           MOV     R2,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   22           RET
    876          
    877          /*********************************************************************
    878           * @fn      SAPI_ProcessZDOMsgs()
    879           *
    880           * @brief   Process response messages
    881           *
    882           * @param   none
    883           *
    884           * @return  none
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     SAPI_ProcessZDOMsgs:
    887          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    888            switch ( inMsg->clusterID )
   \   00000A   EA           MOV     A,R2
   \   00000B   240C         ADD     A,#0xc
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V1,A
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for SAPI_ProcessZDOMsgs>_0`:
   \   00001F   0000         DW        0
   \   000021   0200         DW        2
   \   000023   0080         DW        32768
   \   000025   ....         DW        ??SAPI_ProcessZDOMsgs_0
   \   000027   0680         DW        32774
   \   000029   ....         DW        ??SAPI_ProcessZDOMsgs_1
   \   00002B   ....         DW        ??SAPI_ProcessZDOMsgs_2
    889            {
    890              case NWK_addr_rsp:
    891                {
    892                  // Send find device callback to application
    893                  ZDO_NwkIEEEAddrResp_t *pNwkAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??SAPI_ProcessZDOMsgs_0:
   \   00002D                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002D   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
    894                  SAPI_FindDeviceConfirm( ZB_IEEE_SEARCH, (uint8*)&pNwkAddrRsp->nwkAddr, pNwkAddrRsp->extAddr );
   \   000034                ; Setup parameters for call to function zb_FindDeviceConfirm
   \   000034   E582         MOV     A,DPL
   \   000036   2403         ADD     A,#0x3
   \   000038   FC           MOV     R4,A
   \   000039   E4           CLR     A
   \   00003A   3583         ADDC    A,DPH
   \   00003C   FD           MOV     R5,A
   \   00003D   A3           INC     DPTR
   \   00003E   AA82         MOV     R2,DPL
   \   000040   AB83         MOV     R3,DPH
   \   000042   7901         MOV     R1,#0x1
   \   000044   12....       LCALL   `??zb_FindDeviceConfirm::?relay`; Banked call to: zb_FindDeviceConfirm
    895                }
    896                break;
   \   000047   02....       LJMP    ??SAPI_ProcessZDOMsgs_2 & 0xFFFF
    897          
    898              case Match_Desc_rsp:
    899                {
    900                  zAddrType_t dstAddr;
    901                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??SAPI_ProcessZDOMsgs_1:
   \   00004A                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00004A   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
    902          
    903                  if ( sapi_bindInProgress != 0xffff )
   \   00004D   90....       MOV     DPTR,#sapi_bindInProgress
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F4           CPL     A
   \   000052   7003         JNZ     ??SAPI_ProcessZDOMsgs_3
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F4           CPL     A
   \                     ??SAPI_ProcessZDOMsgs_3:
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??SAPI_ProcessZDOMsgs_2 & 0xFFFF
    904                  {
    905                    // Create a binding table entry
    906                    dstAddr.addrMode = Addr16Bit;
   \   00005C   7408         MOV     A,#0x8
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?Subroutine10 & 0xFFFF
    907                    dstAddr.addr.shortAddr = pRsp->nwkAddr;
   \                     ??CrossCallReturnLabel_12:
   \   000064   AE82         MOV     R6,DPL
   \   000066   AF83         MOV     R7,DPH
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F8           MOV     R0,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   E8           MOV     A,R0
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   E9           MOV     A,R1
   \   000077   12....       LCALL   ??Subroutine14_0 & 0xFFFF
    908          
    909                    if ( APSME_BindRequest( sapi_epDesc.simpleDesc->EndPoint,
    910                                            sapi_bindInProgress, &dstAddr,
    911                                            pRsp->epList[0] ) == ZSuccess )
   \                     ??CrossCallReturnLabel_13:
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F5..         MOV     ?V0,A
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   7401         MOV     A,#0x1
   \   000087   12....       LCALL   ?XSTACK_DISP102_8
   \   00008A   90....       MOV     DPTR,#sapi_bindInProgress
   \   00008D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000090   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   E9           MOV     A,R1
   \   000099   7046         JNZ     ??SAPI_ProcessZDOMsgs_2
    912                    {
    913                      osal_stop_timerEx(sapi_TaskID,  ZB_BIND_TIMER);
   \   00009B                ; Setup parameters for call to function osal_stop_timerEx
   \   00009B   7A00         MOV     R2,#0x0
   \   00009D   7B20         MOV     R3,#0x20
   \   00009F   90....       MOV     DPTR,#sapi_TaskID
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    914                      osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   0000A7                ; Setup parameters for call to function osal_start_timerEx
   \   0000A7   90....       MOV     DPTR,#__Constant_fa
   \   0000AA   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AD   7A00         MOV     R2,#0x0
   \   0000AF   7B01         MOV     R3,#0x1
   \   0000B1   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F9           MOV     R1,A
   \   0000B6   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000B9   7404         MOV     A,#0x4
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
    915          
    916                      // Find IEEE addr
    917                      ZDP_IEEEAddrReq( pRsp->nwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0000BE                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   7C00         MOV     R4,#0x0
   \   0000C2   7900         MOV     R1,#0x0
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000CB   12....       LCALL   `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
    918          #if defined ( MT_SAPI_CB_FUNC )
    919                      zb_MTCallbackBindConfirm( sapi_bindInProgress, ZB_SUCCESS );
    920          #endif
    921                      // Send bind confirm callback to application
    922          #if ( SAPI_CB_FUNC )
    923                      zb_BindConfirm( sapi_bindInProgress, ZB_SUCCESS );
   \   0000CE                ; Setup parameters for call to function zb_BindConfirm
   \   0000CE   7900         MOV     R1,#0x0
   \   0000D0   90....       MOV     DPTR,#sapi_bindInProgress
   \   0000D3   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000D6   12....       LCALL   `??zb_BindConfirm::?relay`; Banked call to: zb_BindConfirm
    924          #endif
    925                      sapi_bindInProgress = 0xffff;
   \   0000D9   90....       MOV     DPTR,#sapi_bindInProgress
   \   0000DC   74FF         MOV     A,#-0x1
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   F0           MOVX    @DPTR,A
    926                    }
    927                  }
    928                }
    929                break;
    930            }
    931          }
   \                     ??SAPI_ProcessZDOMsgs_2:
   \   0000E1   7409         MOV     A,#0x9
   \   0000E3   02....       LJMP    ?Subroutine3 & 0xFFFF
    932          
    933          /*********************************************************************
    934           * @fn      SAPI_Init
    935           *
    936           * @brief   Initialization function for the Simple API Task.
    937           *          This is called during initialization and should contain
    938           *          any application specific initialization (ie. hardware
    939           *          initialization/setup, table initialization, power up
    940           *          notification ... ).
    941           *
    942           * @param   task_id - the ID assigned by OSAL.  This ID should be
    943           *                    used to send messages and set timers.
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void SAPI_Init( byte task_id )
   \                     SAPI_Init:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    949            sapi_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#sapi_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    950            sapi_bindInProgress = 0xffff;
   \   000010   90....       MOV     DPTR,#sapi_bindInProgress
   \   000013   74FF         MOV     A,#-0x1
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    951          
    952            sapi_epDesc.task_id = &sapi_TaskID;
   \   000018   90....       MOV     DPTR,#sapi_epDesc + 1
   \   00001B   74..         MOV     A,#sapi_TaskID & 0xff
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   74..         MOV     A,#(sapi_TaskID >> 8) & 0xff
   \   000021   F0           MOVX    @DPTR,A
    953            sapi_epDesc.endPoint = 0;
   \   000022   90....       MOV     DPTR,#sapi_epDesc
   \   000025   E4           CLR     A
   \   000026   F0           MOVX    @DPTR,A
    954          
    955          #if ( SAPI_CB_FUNC )
    956            sapi_epDesc.endPoint = zb_SimpleDesc.EndPoint;
   \   000027   90....       MOV     DPTR,#zb_SimpleDesc
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   90....       MOV     DPTR,#sapi_epDesc
   \   00002E   F0           MOVX    @DPTR,A
    957            sapi_epDesc.task_id = &sapi_TaskID;
    958            sapi_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&zb_SimpleDesc;
   \   00002F   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000032   74..         MOV     A,#zb_SimpleDesc & 0xff
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   74..         MOV     A,#(zb_SimpleDesc >> 8) & 0xff
   \   000038   F0           MOVX    @DPTR,A
    959            sapi_epDesc.latencyReq = noLatencyReqs;
   \   000039   A3           INC     DPTR
   \   00003A   E4           CLR     A
   \   00003B   F0           MOVX    @DPTR,A
    960          
    961            // Register the endpoint/interface description with the AF
    962            afRegister( &sapi_epDesc );
   \   00003C                ; Setup parameters for call to function afRegister
   \   00003C   7A..         MOV     R2,#sapi_epDesc & 0xff
   \   00003E   7B..         MOV     R3,#(sapi_epDesc >> 8) & 0xff
   \   000040   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    963          #endif
    964          
    965            // Turn off match descriptor response by default
    966            afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   000043                ; Setup parameters for call to function afSetMatch
   \   000043   7A00         MOV     R2,#0x0
   \   000045   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000048   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
    967          
    968            // Register callback evetns from the ZDApp
    969            ZDO_RegisterForZDOMsg( sapi_TaskID, NWK_addr_rsp );
   \   00004B                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00004B   7A00         MOV     R2,#0x0
   \   00004D   7B80         MOV     R3,#-0x80
   \   00004F   90....       MOV     DPTR,#sapi_TaskID
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    970            ZDO_RegisterForZDOMsg( sapi_TaskID, Match_Desc_rsp );
   \   000057                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000057   7A06         MOV     R2,#0x6
   \   000059   7B80         MOV     R3,#-0x80
   \   00005B   90....       MOV     DPTR,#sapi_TaskID
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    971          
    972          #if ( SAPI_CB_FUNC )
    973          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    974            // Register for HAL events
    975            RegisterForKeys( sapi_TaskID );
   \   000063                ; Setup parameters for call to function RegisterForKeys
   \   000063   90....       MOV     DPTR,#sapi_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    976          
    977            if ( HalKeyRead () == HAL_KEY_SW_2)
   \   00006B                ; Setup parameters for call to function HalKeyRead
   \   00006B   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   00006E   E9           MOV     A,R1
   \   00006F   6402         XRL     A,#0x2
   \   000071   7034         JNZ     ??SAPI_Init_0
    978            {
    979              // If SW5 is pressed and held while powerup, force auto-start and nv-restore off and reset
    980              uint8 startOptions = ZCD_STARTOPT_CLEAR_STATE | ZCD_STARTOPT_CLEAR_CONFIG;
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   7403         MOV     A,#0x3
   \   00007B   F0           MOVX    @DPTR,A
    981              zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   00007C                ; Setup parameters for call to function osal_nv_write
   \   00007C   A8..         MOV     R0,?XSP + 0
   \   00007E   A9..         MOV     R1,?XSP + 1
   \   000080   88..         MOV     ?V0,R0
   \   000082   89..         MOV     ?V1,R1
   \   000084   78..         MOV     R0,#?V0
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   75..01       MOV     ?V0,#0x1
   \   00008C   75..00       MOV     ?V1,#0x0
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   7C00         MOV     R4,#0x0
   \   000096   7D00         MOV     R5,#0x0
   \   000098   7A03         MOV     R2,#0x3
   \   00009A   7B00         MOV     R3,#0x0
   \   00009C   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    982              zb_SystemReset();
   \   0000A4                ; Setup parameters for call to function Onboard_soft_reset
   \   0000A4   12....       LCALL   Onboard_soft_reset & 0xFFFF
    983            }
    984          #endif // HAL_KEY
    985          
    986            // Set an event to start the application
    987            osal_set_event(task_id, ZB_ENTRY_EVENT);
   \                     ??SAPI_Init_0:
   \   0000A7                ; Setup parameters for call to function osal_set_event
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B10         MOV     R3,#0x10
   \   0000AB   EE           MOV     A,R6
   \   0000AC   F9           MOV     R1,A
   \   0000AD   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    988          #endif
    989          }
   \   0000B0   7401         MOV     A,#0x1
   \   0000B2   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine15_0
   \   000002                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fa:
   \   000000   FA000000     DD 250

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SystemReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SystemReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_PermitJoiningRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_PermitJoiningRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReadConfiguration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReadConfiguration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_WriteConfiguration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_WriteConfiguration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_GetDeviceInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_GetDeviceInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_Init
    990          
    991          /*********************************************************************
    992           * @fn      SAPI_SendCback
    993           *
    994           * @brief   Sends a message to the sapi task ( itself ) so that a
    995           *           callback can be generated later.
    996           *
    997           * @return  none
    998           */
    999          void SAPI_SendCback( uint8 event, uint8 status, uint16 data )
   1000          {
   1001            sapi_CbackEvent_t *pMsg;
   1002          
   1003            pMsg = (sapi_CbackEvent_t *)osal_msg_allocate( sizeof(sapi_CbackEvent_t) );
   1004            if( pMsg )
   1005            {
   1006              pMsg->hdr.event = event;
   1007              pMsg->hdr.status = status;
   1008              pMsg->data = data;
   1009          
   1010              osal_msg_send( sapi_TaskID, (uint8 *)pMsg );
   1011            }
   1012          
   1013          }
   1014          
   1015          /*********************************************************************
   1016          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     15   SAPI_Init
        0     11   -> HalKeyRead
        0     11   -> Onboard_soft_reset
        0     11   -> RegisterForKeys
        0     11   -> ZDO_RegisterForZDOMsg
        0     11   -> afRegister
        0     11   -> afSetMatch
        0     15   -> osal_nv_write
        0     11   -> osal_set_event
      0     21   SAPI_ProcessEvent
        0     17   -> HalLedBlink
        0     17   -> HalLedSet
        0     17   -> SAPI_ProcessZDOMsgs
        0     17   -> afSetMatch
        0     17   -> osal_msg_deallocate
        0     17   -> osal_msg_receive
        0     17   -> osal_nv_item_len
        0     21   -> osal_nv_read
        0     17   -> zb_AllowBindConfirm
        0     17   -> zb_BindConfirm
        0     17   -> zb_HandleKeys
        0     17   -> zb_HandleOsalEvent
        0     21   -> zb_ReceiveDataIndication
        0     17   -> zb_SendDataConfirm
        0     17   -> zb_StartConfirm
        0     17   -> zb_StartRequest
      0     40   SAPI_ProcessZDOMsgs
        0     20   -> APSME_BindRequest
        0     19   -> ZDO_ParseAddrRsp
        0     19   -> ZDO_ParseEPListRsp
        0     19   -> ZDP_IEEEAddrReq
        0     23   -> osal_start_timerEx
        0     19   -> osal_stop_timerEx
        0     19   -> zb_BindConfirm
        0     19   -> zb_FindDeviceConfirm
      0     16   zb_AllowBind
        0     12   -> afSetMatch
        0     16   -> osal_start_timerEx
        0     12   -> osal_stop_timerEx
      1     35   zb_BindDevice
        0     28   -> APSME_BindRequest
        0     29   -> ZDO_AnyClusterMatches
        0     35   -> ZDP_MatchDescReq
        0     27   -> ZDP_NwkAddrReq
        0     27   -> bindFind
        0     27   -> bindRemoveEntry
        0     27   -> osal_msg_allocate
        0     27   -> osal_msg_send
        0     31   -> osal_start_timerEx
        0     27   -> sAddrExtCpy
      0      9   zb_FindDeviceRequest
        0      9   -> ZDP_NwkAddrReq
      0     14   zb_GetDeviceInfo
        0     14   -> osal_memcpy
      0      0   zb_PermitJoiningRequest
      0     18   zb_ReadConfiguration
        0     14   -> osal_nv_item_len
        0     18   -> osal_nv_read
      1     40   zb_SendDataRequest
        0     35   -> AF_DataRequest
        0     26   -> NLME_IsAddressBroadcast
        0     26   -> osal_msg_allocate
        0     26   -> osal_msg_send
      0     34   zb_StartRequest
        0     13   -> ZDOInitDevice
        0     13   -> osal_msg_allocate
        0     13   -> osal_msg_send
        0     13   -> osal_nv_item_len
        0     17   -> osal_nv_read
      0      0   zb_SystemReset
        0      0   -> Onboard_soft_reset
      0     14   zb_WriteConfiguration
        0     14   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ??Subroutine14_0
       6  ??Subroutine15_0
       5  ??Subroutine16_0
       5  ?Subroutine0
       8  ?Subroutine1
       2  ?Subroutine10
       7  ?Subroutine11
       5  ?Subroutine12
      12  ?Subroutine13
       5  ?Subroutine2
       8  ?Subroutine3
       5  ?Subroutine4
      20  ?Subroutine5
       2  ?Subroutine6
       8  ?Subroutine7
       5  ?Subroutine8
      11  ?Subroutine9
     181  SAPI_Init
       6  SAPI_Init::?relay
     463  SAPI_ProcessEvent
       6  SAPI_ProcessEvent::?relay
     230  SAPI_ProcessZDOMsgs
       6  SAPI_ProcessZDOMsgs::?relay
       4  __Constant_fa
       1  sapi_TaskID
       2  sapi_bindInProgress
       6  sapi_epDesc
      12  tasksArr
       1  tasksCnt
       2  tasksEvents
     103  zb_AllowBind
       6  zb_AllowBind::?relay
     521  zb_BindDevice
       6  zb_BindDevice::?relay
      26  zb_FindDeviceRequest
       6  zb_FindDeviceRequest::?relay
     138  zb_GetDeviceInfo
       6  zb_GetDeviceInfo::?relay
       5  zb_PermitJoiningRequest
       6  zb_PermitJoiningRequest::?relay
      67  zb_ReadConfiguration
       6  zb_ReadConfiguration::?relay
     211  zb_SendDataRequest
       6  zb_SendDataRequest::?relay
     136  zb_StartRequest
       6  zb_StartRequest::?relay
       6  zb_SystemReset
       6  zb_SystemReset::?relay
      41  zb_WriteConfiguration
       6  zb_WriteConfiguration::?relay

 
 2 249 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
    17 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
 2 327 bytes of CODE  memory
    13 bytes of CONST memory (+ 4 bytes shared)
    11 bytes of XDATA memory

Errors: none
Warnings: none
