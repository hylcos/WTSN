###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                10/Mar/2016  12:27:08
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\mac\low_level\srf04\mac_autopend.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\mac\low_level\srf04\mac_autopend.c
#        -D NWK_AUTO_POLL -D HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\mac_autopend.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\mac_autopend.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\mac\low_level\srf04\mac_autopend.c
      1          /**************************************************************************************************
      2            Filename:       mac_autopend.c
      3            Revised:        $Date: 2014-05-29 13:33:32 -0700 (Thu, 29 May 2014) $
      4            Revision:       $Revision: 38710 $
      5          
      6            Description:    This file implements the TIMAC Autopend feature.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* low-level */
     41          #include "mac_api.h"
     42          #include "mac_radio_defs.h"
     43          
     44          /* osal */
     45          #include "OSAL.h"
     46          #include "saddr.h"
     47          #include "ZComDef.h"
     48          
     49          #include "mac_autopend.h"
     50          
     51          /* ------------------------------------------------------------------------------------------------
     52           *                                           Defines
     53           * ------------------------------------------------------------------------------------------------
     54           */
     55          #define MAC_SRCMATCH_INVALID_INDEX           0xFF
     56          
     57          #define MAC_SRCMATCH_SHORT_ENTRY_SIZE        4
     58          #define MAC_SRCMATCH_EXT_ENTRY_SIZE          Z_EXTADDR_LEN
     59          
     60          #define MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES   24
     61          #define MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES     12
     62          
     63          #define MAC_SRCMATCH_ENABLE_BITMAP_LEN       3
     64          
     65          #define EXT_ADDR_INDEX_SIZE                  2
     66          #define SHORT_ADDR_INDEX_SIZE                1
     67                    
     68          /* ------------------------------------------------------------------------------------------------
     69           *                                      Global Variables
     70           * ------------------------------------------------------------------------------------------------
     71           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          bool macSrcMatchIsEnabled = FALSE; 
   \                     macSrcMatchIsEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     73          
     74          /* ------------------------------------------------------------------------------------------------
     75           *                                         Local Variables
     76           * ------------------------------------------------------------------------------------------------
     77           */
     78          
     79          /* 
     80           The following local Varables are only set in MAC_SrcMatchEnable()  
     81           They are read only to the rest of the module.
     82           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          bool macSrcMatchIsAckAllPending = FALSE;
   \                     macSrcMatchIsAckAllPending:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          
     85          /* ------------------------------------------------------------------------------------------------
     86           *                                         Local Functions
     87           * ------------------------------------------------------------------------------------------------
     88           */
     89          static uint8 macSrcMatchFindEmptyEntry( uint8 macSrcMatchAddrMode );
     90          static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  );
     91          static void macSrcMatchSetPendEnBit( uint8 index, uint8 macSrcMatchAddrMode );
     92          static void macSrcMatchSetEnableBit( uint8 index, bool option, uint8 macSrcMatchAddrMode );
     93          static bool macSrcMatchCheckEnableBit( uint8 index, uint24 enable );
     94          static uint24 macSrcMatchGetShortAddrPendEnBit( void );
     95          static uint24 macSrcMatchGetExtAddrPendEnBit( void );
     96          static uint24 macSrcMatchGetShortAddrEnableBit( void );
     97          static uint24 macSrcMatchGetExtAddrEnableBit( void );
     98          
     99          /*********************************************************************
    100           * @fn          MAC_SrcMatchEnable
    101           *
    102           * @brief      Enabled AUTOPEND and source address matching. 
    103           *             This function shall be not be called from 
    104           *             ISR. It is not thread safe.
    105           *
    106           * @param     none 
    107           *
    108           * @return     none
    109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          void MAC_SrcMatchEnable (void)
   \                     MAC_SrcMatchEnable:
    111          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    112            /* Turn on Frame Filter (TIMAC enables frame filter by default), TBD */
    113            MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   000004   906180       MOV     DPTR,#0x6180
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4409         ORL     A,#0x9
   \   00000C   F0           MOVX    @DPTR,A
    114            
    115            /* Turn on Auto ACK (TIMAC turn on Auto ACK by default), TBD */
    116            MAC_RADIO_TURN_ON_AUTO_ACK();
   \   00000D   906189       MOV     DPTR,#0x6189
   \   000010   E0           MOVX    A,@DPTR
   \   000011   D2E5         SETB    0xE0 /* A   */.5
   \   000013   F0           MOVX    @DPTR,A
    117            
    118            /* Turn on Autopend: set SRCMATCH.AUTOPEND and SRCMATCH.SRC_MATCH_EN */
    119            MAC_RADIO_TURN_ON_SRC_MATCH();
   \   000014   906182       MOV     DPTR,#0x6182
   \   000017   E0           MOVX    A,@DPTR
   \   000018   D2E0         SETB    0xE0 /* A   */.0
   \   00001A   F0           MOVX    @DPTR,A
    120           
    121            /* Set SRCMATCH.AUTOPEND */
    122            MAC_RADIO_TURN_ON_AUTOPEND();
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   D2E1         SETB    0xE0 /* A   */.1
   \   00001E   F0           MOVX    @DPTR,A
    123            
    124            /* AUTOPEND function requires that the received 
    125             * frame is a DATA REQUEST MAC command frame
    126             */
    127            MAC_RADIO_TURN_ON_AUTOPEND_DATAREQ_ONLY();
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   D2E2         SETB    0xE0 /* A   */.2
   \   000022   F0           MOVX    @DPTR,A
    128            
    129            /* Configure all the globals */
    130            macSrcMatchIsEnabled = TRUE;           
   \   000023   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000026   7401         MOV     A,#0x1
   \   000028   02....       LJMP    ?Subroutine0 & 0xFFFF
    131          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine2_0
   \   000001                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    132          
    133          /*********************************************************************
    134           * @fn          MAC_SrcMatchAddEntry
    135           *
    136           * @brief       Add a short or extended address to source address table. This 
    137           *              function shall be not be called from ISR. It is not thread safe.
    138           *
    139           * @param       addr  - a pointer to sAddr_t which contains addrMode 
    140           *                      and a union of a short 16-bit MAC address or an extended 
    141           *                      64-bit MAC address to be added to the source address 
    142          *                       table. 
    143           * @param       panID - the device PAN ID. It is only used when the addr is 
    144           *                      using short address 
    145          
    146           * @return      MAC_SUCCESS or MAC_NO_RESOURCES (source address table full) 
    147           *              or MAC_DUPLICATED_ENTRY (the entry added is duplicated),
    148           *              or MAC_INVALID_PARAMETER if the input parameters are invalid.
    149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          uint8 MAC_SrcMatchAddEntry ( sAddr_t *addr, uint16 panID )
   \                     MAC_SrcMatchAddEntry:
    151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V14,R2
   \   00000C   8B..         MOV     ?V15,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    152            uint8 index;
    153            uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];
    154            
    155            /* Check if the input parameters are valid */
    156            if ( addr == NULL || (addr->addrMode !=  SADDR_MODE_SHORT && addr->addrMode !=  SADDR_MODE_EXT))
   \   000012   EA           MOV     A,R2
   \   000013   45..         ORL     A,?V15
   \   000015   6018         JZ      ??MAC_SrcMatchAddEntry_0
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   7402         MOV     A,#0x2
   \   000027   68           XRL     A,R0
   \   000028   600A         JZ      ??MAC_SrcMatchAddEntry_1
   \   00002A   7403         MOV     A,#0x3
   \   00002C   68           XRL     A,R0
   \   00002D   6005         JZ      ??MAC_SrcMatchAddEntry_1
    157            {
    158              return MAC_INVALID_PARAMETER;  
   \                     ??MAC_SrcMatchAddEntry_0:
   \   00002F   79E8         MOV     R1,#-0x18
   \   000031   02....       LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    159            }
    160            
    161            /* Check if the entry already exists. Do not add duplicated entry */
    162            if ( macSrcMatchCheckSrcAddr( addr, panID ) != MAC_SRCMATCH_INVALID_INDEX )
   \                     ??MAC_SrcMatchAddEntry_1:
   \   000034                ; Setup parameters for call to function macSrcMatchCheckSrcAddr
   \   000034   12....       LCALL   `??macSrcMatchCheckSrcAddr::?relay`; Banked call to: macSrcMatchCheckSrcAddr
   \   000037   E9           MOV     A,R1
   \   000038   F4           CPL     A
   \   000039   6005         JZ      ??MAC_SrcMatchAddEntry_3
    163            {
    164              return MAC_DUPLICATED_ENTRY; 
   \   00003B   791E         MOV     R1,#0x1e
   \   00003D   02....       LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    165            }
    166            
    167            /* If not duplicated, write to the radio RAM and enable the control bit */
    168            
    169            /* Find the first empty entry */
    170            index = macSrcMatchFindEmptyEntry(addr->addrMode);
   \                     ??MAC_SrcMatchAddEntry_3:
   \   000040   85..82       MOV     DPL,?V14
   \   000043   85..83       MOV     DPH,?V15
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V12,A
   \   000051                ; Setup parameters for call to function macMemReadRam
   \   000051   7903         MOV     R1,#0x3
   \   000053   AC..         MOV     R4,?XSP + 0
   \   000055   AD..         MOV     R5,?XSP + 1
   \   000057   7A83         MOV     R2,#-0x7d
   \   000059   7B61         MOV     R3,#0x61
   \   00005B   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   00005E                ; Setup parameters for call to function osal_build_uint32
   \   00005E   7903         MOV     R1,#0x3
   \   000060   AA..         MOV     R2,?XSP + 0
   \   000062   AB..         MOV     R3,?XSP + 1
   \   000064   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000067   8A..         MOV     ?V0,R2
   \   000069   8B..         MOV     ?V1,R3
   \   00006B   8C..         MOV     ?V2,R4
   \   00006D   8D..         MOV     ?V3,R5
   \   00006F                ; Setup parameters for call to function macMemReadRam
   \   00006F   7903         MOV     R1,#0x3
   \   000071   AC..         MOV     R4,?XSP + 0
   \   000073   AD..         MOV     R5,?XSP + 1
   \   000075   7A86         MOV     R2,#-0x7a
   \   000077   7B61         MOV     R3,#0x61
   \   000079   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   00007C                ; Setup parameters for call to function osal_build_uint32
   \   00007C   7903         MOV     R1,#0x3
   \   00007E   AA..         MOV     R2,?XSP + 0
   \   000080   AB..         MOV     R3,?XSP + 1
   \   000082   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000085   8A..         MOV     ?V8,R2
   \   000087   8B..         MOV     ?V9,R3
   \   000089   8C..         MOV     ?V10,R4
   \   00008B   8D..         MOV     ?V11,R5
   \   00008D   85....       MOV     ?V4,?V0
   \   000090   85....       MOV     ?V5,?V1
   \   000093   85....       MOV     ?V6,?V2
   \   000096   85....       MOV     ?V7,?V3
   \   000099   78..         MOV     R0,#?V4
   \   00009B   79..         MOV     R1,#?V8
   \   00009D   12....       LCALL   ?L_IOR
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   65..         XRL     A,?V12
   \   0000A4   75..00       MOV     ?V12,#0x0
   \   0000A7   703B         JNZ     ??MAC_SrcMatchAddEntry_4
   \                     ??MAC_SrcMatchAddEntry_5:
   \   0000A9   8A..         MOV     ?V4,R2
   \   0000AB   8B..         MOV     ?V5,R3
   \   0000AD   8C..         MOV     ?V6,R4
   \   0000AF   8D..         MOV     ?V7,R5
   \   0000B1   74FE         MOV     A,#-0x2
   \   0000B3   55..         ANL     A,?V12
   \   0000B5   78..         MOV     R0,#?V4
   \   0000B7   12....       LCALL   ?UL_SHR
   \   0000BA   E5..         MOV     A,?V4
   \   0000BC   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BE   4019         JC      ??MAC_SrcMatchAddEntry_6
   \   0000C0   85....       MOV     ?V4,?V0
   \   0000C3   85....       MOV     ?V5,?V1
   \   0000C6   85....       MOV     ?V6,?V2
   \   0000C9   85....       MOV     ?V7,?V3
   \   0000CC   E5..         MOV     A,?V12
   \   0000CE   78..         MOV     R0,#?V4
   \   0000D0   12....       LCALL   ?UL_SHR
   \   0000D3   E5..         MOV     A,?V4
   \   0000D5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D7   5046         JNC     ??MAC_SrcMatchAddEntry_7
   \                     ??MAC_SrcMatchAddEntry_6:
   \   0000D9   05..         INC     ?V12
   \   0000DB   E5..         MOV     A,?V12
   \   0000DD   C3           CLR     C
   \   0000DE   9418         SUBB    A,#0x18
   \   0000E0   503D         JNC     ??MAC_SrcMatchAddEntry_7
   \   0000E2   80C5         SJMP    ??MAC_SrcMatchAddEntry_5
   \                     ??MAC_SrcMatchAddEntry_4:
   \   0000E4   85....       MOV     ?V0,?V4
   \   0000E7   85....       MOV     ?V1,?V5
   \   0000EA   85....       MOV     ?V2,?V6
   \   0000ED   85....       MOV     ?V3,?V7
   \   0000F0   75..03       MOV     ?V8,#0x3
   \   0000F3   75..00       MOV     ?V9,#0x0
   \   0000F6   75..00       MOV     ?V10,#0x0
   \   0000F9   75..00       MOV     ?V11,#0x0
   \   0000FC   E5..         MOV     A,?V12
   \   0000FE   C3           CLR     C
   \   0000FF   33           RLC     A
   \   000100   78..         MOV     R0,#?V8
   \   000102   12....       LCALL   ?L_SHL
   \   000105   78..         MOV     R0,#?V0
   \   000107   79..         MOV     R1,#?V8
   \   000109   12....       LCALL   ?L_AND
   \   00010C   E5..         MOV     A,?V0
   \   00010E   45..         ORL     A,?V1
   \   000110   45..         ORL     A,?V2
   \   000112   45..         ORL     A,?V3
   \   000114   6009         JZ      ??MAC_SrcMatchAddEntry_7
   \   000116   05..         INC     ?V12
   \   000118   E5..         MOV     A,?V12
   \   00011A   C3           CLR     C
   \   00011B   940C         SUBB    A,#0xc
   \   00011D   40C5         JC      ??MAC_SrcMatchAddEntry_4
    171            
    172          
    173            if ( (index == MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES && addr->addrMode == SADDR_MODE_SHORT) || 
    174                 (index == MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES && addr->addrMode == SADDR_MODE_EXT) )
   \                     ??MAC_SrcMatchAddEntry_7:
   \   00011F   7418         MOV     A,#0x18
   \   000121   65..         XRL     A,?V12
   \   000123   7068         JNZ     ??MAC_SrcMatchAddEntry_8
   \   000125   85..82       MOV     DPL,?V14
   \   000128   85..83       MOV     DPH,?V15
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   6402         XRL     A,#0x2
   \   000136   606E         JZ      ??MAC_SrcMatchAddEntry_9
    175            {
    176              return MAC_NO_RESOURCES;   /* Table is full */
    177            }
    178            
    179            if ( addr->addrMode == SADDR_MODE_SHORT )
   \                     ??MAC_SrcMatchAddEntry_10:
   \   000138   85....       MOV     ?V0,?V12
   \   00013B   75..00       MOV     ?V1,#0x0
   \   00013E   85..82       MOV     DPL,?V14
   \   000141   85..83       MOV     DPH,?V15
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   6402         XRL     A,#0x2
   \   00014F   705A         JNZ     ??MAC_SrcMatchAddEntry_11
    180            {
    181              /* Write the PanID and short address */
    182              entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
   \   000151   7406         MOV     A,#0x6
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   EE           MOV     A,R6
   \   000157   F0           MOVX    @DPTR,A
    183              entry[1] = HI_UINT16( panID );
   \   000158   7407         MOV     A,#0x7
   \   00015A   12....       LCALL   ?XSTACK_DISP0_8
   \   00015D   EF           MOV     A,R7
   \   00015E   F0           MOVX    @DPTR,A
    184              entry[2] = LO_UINT16( addr->addr.shortAddr );
   \   00015F   85..82       MOV     DPL,?V14
   \   000162   85..83       MOV     DPH,?V15
   \   000165   E0           MOVX    A,@DPTR
   \   000166   C0E0         PUSH    A
   \   000168   7408         MOV     A,#0x8
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   D0E0         POP     A
   \   00016F   F0           MOVX    @DPTR,A
    185              entry[3] = HI_UINT16( addr->addr.shortAddr );
   \   000170   85..82       MOV     DPL,?V14
   \   000173   85..83       MOV     DPH,?V15
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   C0E0         PUSH    A
   \   00017A   7409         MOV     A,#0x9
   \   00017C   12....       LCALL   ?XSTACK_DISP0_8
   \   00017F   D0E0         POP     A
   \   000181   F0           MOVX    @DPTR,A
    186              MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_SHORT_ENTRY_SIZE ), 
    187                             entry, MAC_SRCMATCH_SHORT_ENTRY_SIZE );
   \   000182                ; Setup parameters for call to function macMemWriteRam
   \   000182   7904         MOV     R1,#0x4
   \   000184   7406         MOV     A,#0x6
   \   000186   12....       LCALL   ?XSTACK_DISP102_8
   \   000189   7402         MOV     A,#0x2
   \   00018B   8026         SJMP    ??MAC_SrcMatchAddEntry_12
    188            }
   \                     ??MAC_SrcMatchAddEntry_8:
   \   00018D   740C         MOV     A,#0xc
   \   00018F   65..         XRL     A,?V12
   \   000191   70A5         JNZ     ??MAC_SrcMatchAddEntry_10
   \   000193   85..82       MOV     DPL,?V14
   \   000196   85..83       MOV     DPH,?V15
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   6403         XRL     A,#0x3
   \   0001A4   7092         JNZ     ??MAC_SrcMatchAddEntry_10
   \                     ??MAC_SrcMatchAddEntry_9:
   \   0001A6   791A         MOV     R1,#0x1a
   \   0001A8   02....       LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    189            else
    190            {
    191              /* Write the extended address */
    192              MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_EXT_ENTRY_SIZE ), 
    193                             addr->addr.extAddr, MAC_SRCMATCH_EXT_ENTRY_SIZE ); 
   \                     ??MAC_SrcMatchAddEntry_11:
   \   0001AB                ; Setup parameters for call to function macMemWriteRam
   \   0001AB   7908         MOV     R1,#0x8
   \   0001AD   AC..         MOV     R4,?V14
   \   0001AF   AD..         MOV     R5,?V15
   \   0001B1   7403         MOV     A,#0x3
   \                     ??MAC_SrcMatchAddEntry_12:
   \   0001B3   78..         MOV     R0,#?V0
   \   0001B5   12....       LCALL   ?S_SHL
   \   0001B8   25..         ADD     A,?V0
   \   0001BA   FA           MOV     R2,A
   \   0001BB   7461         MOV     A,#0x61
   \   0001BD   35..         ADDC    A,?V1
   \   0001BF   FB           MOV     R3,A
   \   0001C0   12....       LCALL   `??macMemWriteRam::?relay`; Banked call to: macMemWriteRam
    194            }
    195            
    196            /* Set the Autopend enable bits */
    197            macSrcMatchSetPendEnBit( index, addr->addrMode );
   \   0001C3   85..82       MOV     DPL,?V14
   \   0001C6   85..83       MOV     DPH,?V15
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0001D4   704E         JNZ     ??MAC_SrcMatchAddEntry_13
   \   0001D6                ; Setup parameters for call to function macMemReadRam
   \   0001D6   7A67         MOV     R2,#0x67
   \   0001D8   7B61         MOV     R3,#0x61
   \   0001DA   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   0001DD                ; Setup parameters for call to function osal_build_uint32
   \   0001DD   7903         MOV     R1,#0x3
   \   0001DF   AA..         MOV     R2,?XSP + 0
   \   0001E1   AB..         MOV     R3,?XSP + 1
   \   0001E3   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   0001E6   8A..         MOV     ?V0,R2
   \   0001E8   8B..         MOV     ?V1,R3
   \   0001EA   8C..         MOV     ?V2,R4
   \   0001EC   8D..         MOV     ?V3,R5
   \   0001EE                ; Setup parameters for call to function osal_buffer_uint24
   \   0001EE   75..01       MOV     ?V4,#0x1
   \   0001F1   75..00       MOV     ?V5,#0x0
   \   0001F4   75..00       MOV     ?V6,#0x0
   \   0001F7   75..00       MOV     ?V7,#0x0
   \   0001FA   E5..         MOV     A,?V12
   \   0001FC   78..         MOV     R0,#?V4
   \   0001FE   12....       LCALL   ?L_SHL
   \   000201   78..         MOV     R0,#?V0
   \   000203   79..         MOV     R1,#?V4
   \   000205   12....       LCALL   ?L_IOR
   \   000208   78..         MOV     R0,#?V0
   \   00020A   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00020D   7407         MOV     A,#0x7
   \   00020F   12....       LCALL   ?XSTACK_DISP101_8
   \   000212   12....       LCALL   `??osal_buffer_uint24::?relay`; Banked call to: osal_buffer_uint24
   \   000215   7404         MOV     A,#0x4
   \   000217   12....       LCALL   ?DEALLOC_XSTACK8
   \   00021A                ; Setup parameters for call to function macMemWriteRam
   \   00021A   7903         MOV     R1,#0x3
   \   00021C   E9           MOV     A,R1
   \   00021D   12....       LCALL   ?XSTACK_DISP102_8
   \   000220   7A67         MOV     R2,#0x67
   \   000222   806A         SJMP    ??MAC_SrcMatchAddEntry_14
   \                     ??MAC_SrcMatchAddEntry_13:
   \   000224                ; Setup parameters for call to function macMemReadRam
   \   000224   7A64         MOV     R2,#0x64
   \   000226   7B61         MOV     R3,#0x61
   \   000228   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   00022B                ; Setup parameters for call to function osal_build_uint32
   \   00022B   7903         MOV     R1,#0x3
   \   00022D   AA..         MOV     R2,?XSP + 0
   \   00022F   AB..         MOV     R3,?XSP + 1
   \   000231   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000234   8A..         MOV     ?V0,R2
   \   000236   8B..         MOV     ?V1,R3
   \   000238   8C..         MOV     ?V2,R4
   \   00023A   8D..         MOV     ?V3,R5
   \   00023C   E5..         MOV     A,?V12
   \   00023E   C3           CLR     C
   \   00023F   33           RLC     A
   \   000240   FA           MOV     R2,A
   \   000241                ; Setup parameters for call to function osal_buffer_uint24
   \   000241   75..01       MOV     ?V4,#0x1
   \   000244   75..00       MOV     ?V5,#0x0
   \   000247   75..00       MOV     ?V6,#0x0
   \   00024A   75..00       MOV     ?V7,#0x0
   \   00024D   78..         MOV     R0,#?V4
   \   00024F   12....       LCALL   ?L_SHL
   \   000252   78..         MOV     R0,#?V0
   \   000254   79..         MOV     R1,#?V4
   \   000256   12....       LCALL   ?L_IOR
   \   000259   75..01       MOV     ?V4,#0x1
   \   00025C   75..00       MOV     ?V5,#0x0
   \   00025F   75..00       MOV     ?V6,#0x0
   \   000262   75..00       MOV     ?V7,#0x0
   \   000265   7401         MOV     A,#0x1
   \   000267   2A           ADD     A,R2
   \   000268   78..         MOV     R0,#?V4
   \   00026A   12....       LCALL   ?L_SHL
   \   00026D   78..         MOV     R0,#?V0
   \   00026F   79..         MOV     R1,#?V4
   \   000271   12....       LCALL   ?L_IOR
   \   000274   78..         MOV     R0,#?V0
   \   000276   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000279   7407         MOV     A,#0x7
   \   00027B   12....       LCALL   ?XSTACK_DISP101_8
   \   00027E   12....       LCALL   `??osal_buffer_uint24::?relay`; Banked call to: osal_buffer_uint24
   \   000281   7404         MOV     A,#0x4
   \   000283   12....       LCALL   ?DEALLOC_XSTACK8
   \   000286                ; Setup parameters for call to function macMemWriteRam
   \   000286   7903         MOV     R1,#0x3
   \   000288   E9           MOV     A,R1
   \   000289   12....       LCALL   ?XSTACK_DISP102_8
   \   00028C   7A64         MOV     R2,#0x64
   \                     ??MAC_SrcMatchAddEntry_14:
   \   00028E   7B61         MOV     R3,#0x61
   \   000290   12....       LCALL   `??macMemWriteRam::?relay`; Banked call to: macMemWriteRam
    198            
    199            /* Set the Src Match enable bits */
    200            macSrcMatchSetEnableBit( index, TRUE, addr->addrMode);
   \   000293                ; Setup parameters for call to function macSrcMatchSetEnableBit
   \   000293   85..82       MOV     DPL,?V14
   \   000296   85..83       MOV     DPH,?V15
   \   000299   A3           INC     DPTR
   \   00029A   A3           INC     DPTR
   \   00029B   A3           INC     DPTR
   \   00029C   A3           INC     DPTR
   \   00029D   A3           INC     DPTR
   \   00029E   A3           INC     DPTR
   \   00029F   A3           INC     DPTR
   \   0002A0   A3           INC     DPTR
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   FB           MOV     R3,A
   \   0002A3   7A01         MOV     R2,#0x1
   \   0002A5   A9..         MOV     R1,?V12
   \   0002A7   12....       LCALL   `??macSrcMatchSetEnableBit::?relay`; Banked call to: macSrcMatchSetEnableBit
    201            
    202            return MAC_SUCCESS;
   \   0002AA   7900         MOV     R1,#0x0
   \                     ??MAC_SrcMatchAddEntry_2:
   \   0002AC   740A         MOV     A,#0xa
   \   0002AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B1   7F10         MOV     R7,#0x10
   \   0002B3   02....       LJMP    ?BANKED_LEAVE_XDATA
    203          }
    204          
    205          /*********************************************************************
    206           * @fn         MAC_SrcMatchDeleteEntry
    207           *
    208           * @brief      Delete a short or extended address from source address table. 
    209           *             This function shall be not be called from ISR. It is not thread 
    210           *             safe.
    211           *
    212           * @param      addr  - a pointer to sAddr_t which contains addrMode 
    213           *                     and a union of a short 16-bit MAC address or an extended 
    214           *                     64-bit MAC address to be deleted from the source address 
    215           *                     table. 
    216           * @param      panID - the device PAN ID. It is only used when the addr is 
    217           *                     using short address  
    218           *
    219           * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER (address to be deleted 
    220           *                  cannot be found in the source address table).
    221           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    222          uint8 MAC_SrcMatchDeleteEntry ( sAddr_t *addr, uint16 panID  )
   \                     MAC_SrcMatchDeleteEntry:
    223          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    224            uint8 index;
    225            
    226            if ( addr == NULL || (addr->addrMode !=  SADDR_MODE_SHORT && addr->addrMode !=  SADDR_MODE_EXT))
   \   00000A   EA           MOV     A,R2
   \   00000B   4B           ORL     A,R3
   \   00000C   6023         JZ      ??MAC_SrcMatchDeleteEntry_0
   \   00000E   EA           MOV     A,R2
   \   00000F   2408         ADD     A,#0x8
   \   000011   FE           MOV     R6,A
   \   000012   E4           CLR     A
   \   000013   3B           ADDC    A,R3
   \   000014   FF           MOV     R7,A
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   7402         MOV     A,#0x2
   \   00001D   68           XRL     A,R0
   \   00001E   6005         JZ      ??MAC_SrcMatchDeleteEntry_1
   \   000020   7403         MOV     A,#0x3
   \   000022   68           XRL     A,R0
   \   000023   700C         JNZ     ??MAC_SrcMatchDeleteEntry_0
    227            {
    228              return MAC_INVALID_PARAMETER;  
    229            }
    230            
    231            /* Look up the source address table and find the entry. */
    232            index = macSrcMatchCheckSrcAddr( addr, panID );
   \                     ??MAC_SrcMatchDeleteEntry_1:
   \   000025                ; Setup parameters for call to function macSrcMatchCheckSrcAddr
   \   000025   12....       LCALL   `??macSrcMatchCheckSrcAddr::?relay`; Banked call to: macSrcMatchCheckSrcAddr
   \   000028   E9           MOV     A,R1
   \   000029   F5..         MOV     ?V0,A
    233          
    234            if( index == MAC_SRCMATCH_INVALID_INDEX )
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   65..         XRL     A,?V0
   \   00002F   7005         JNZ     ??MAC_SrcMatchDeleteEntry_2
    235            {
    236              return MAC_INVALID_PARAMETER; 
   \                     ??MAC_SrcMatchDeleteEntry_0:
   \   000031   79E8         MOV     R1,#-0x18
   \   000033   02....       LJMP    ??MAC_SrcMatchDeleteEntry_3 & 0xFFFF
    237            }
    238            
    239            /* Clear Src Match enable bits */
    240            macSrcMatchSetEnableBit( index, FALSE, addr->addrMode);
   \                     ??MAC_SrcMatchDeleteEntry_2:
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00003D   7040         JNZ     ??MAC_SrcMatchDeleteEntry_4
   \   00003F                ; Setup parameters for call to function macMemReadRam
   \   00003F   7A83         MOV     R2,#-0x7d
   \   000041   7B61         MOV     R3,#0x61
   \   000043   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   000046                ; Setup parameters for call to function osal_build_uint32
   \   000046   7903         MOV     R1,#0x3
   \   000048   AA..         MOV     R2,?XSP + 0
   \   00004A   AB..         MOV     R3,?XSP + 1
   \   00004C   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00004F   8A..         MOV     ?V4,R2
   \   000051   8B..         MOV     ?V5,R3
   \   000053   8C..         MOV     ?V6,R4
   \   000055   8D..         MOV     ?V7,R5
   \   000057                ; Setup parameters for call to function osal_buffer_uint24
   \   000057   75..01       MOV     ?V8,#0x1
   \   00005A   75..00       MOV     ?V9,#0x0
   \   00005D   75..00       MOV     ?V10,#0x0
   \   000060   75..00       MOV     ?V11,#0x0
   \   000063   E5..         MOV     A,?V0
   \   000065   78..         MOV     R0,#?V8
   \   000067   12....       LCALL   ?L_SHL
   \   00006A   78..         MOV     R0,#?V8
   \   00006C   12....       LCALL   ?L_NOT
   \   00006F   78..         MOV     R0,#?V4
   \   000071   79..         MOV     R1,#?V8
   \   000073   12....       LCALL   ?L_AND
   \   000076   78..         MOV     R0,#?V4
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00007B   7A83         MOV     R2,#-0x7d
   \   00007D   8040         SJMP    ??MAC_SrcMatchDeleteEntry_5
   \                     ??MAC_SrcMatchDeleteEntry_4:
   \   00007F                ; Setup parameters for call to function macMemReadRam
   \   00007F   7A86         MOV     R2,#-0x7a
   \   000081   7B61         MOV     R3,#0x61
   \   000083   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   000086                ; Setup parameters for call to function osal_build_uint32
   \   000086   7903         MOV     R1,#0x3
   \   000088   AA..         MOV     R2,?XSP + 0
   \   00008A   AB..         MOV     R3,?XSP + 1
   \   00008C   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00008F   8A..         MOV     ?V4,R2
   \   000091   8B..         MOV     ?V5,R3
   \   000093   8C..         MOV     ?V6,R4
   \   000095   8D..         MOV     ?V7,R5
   \   000097                ; Setup parameters for call to function osal_buffer_uint24
   \   000097   75..01       MOV     ?V8,#0x1
   \   00009A   75..00       MOV     ?V9,#0x0
   \   00009D   75..00       MOV     ?V10,#0x0
   \   0000A0   75..00       MOV     ?V11,#0x0
   \   0000A3   E5..         MOV     A,?V0
   \   0000A5   C3           CLR     C
   \   0000A6   33           RLC     A
   \   0000A7   78..         MOV     R0,#?V8
   \   0000A9   12....       LCALL   ?L_SHL
   \   0000AC   78..         MOV     R0,#?V8
   \   0000AE   12....       LCALL   ?L_NOT
   \   0000B1   78..         MOV     R0,#?V4
   \   0000B3   79..         MOV     R1,#?V8
   \   0000B5   12....       LCALL   ?L_AND
   \   0000B8   78..         MOV     R0,#?V4
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000BD   7A86         MOV     R2,#-0x7a
   \                     ??MAC_SrcMatchDeleteEntry_5:
   \   0000BF   7B61         MOV     R3,#0x61
   \   0000C1   12....       LCALL   `??osal_buffer_uint24::?relay`; Banked call to: osal_buffer_uint24
   \   0000C4   7404         MOV     A,#0x4
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
    241          
    242            return MAC_SUCCESS;
   \   0000C9   7900         MOV     R1,#0x0
   \                     ??MAC_SrcMatchDeleteEntry_3:
   \   0000CB   7403         MOV     A,#0x3
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   7F0C         MOV     R7,#0xc
   \   0000D2   02....       LJMP    ?BANKED_LEAVE_XDATA
    243          }
    244                            
    245          /*********************************************************************
    246           * @fn          MAC_SrcMatchAckAllPending
    247           *
    248           * @brief       Enabled/disable acknowledging all packets with pending bit set
    249           *              The application normally enables it when adding new entries to 
    250           *              the source address table fails due to the table is full, or 
    251           *              disables it when more entries are deleted and the table has
    252           *              empty slots.
    253           *
    254           * @param       option - TRUE (acknowledging all packets with pending field set)
    255           *                       FALSE (address filtering and FSM control sets the 
    256           *                              pending field) 
    257           *
    258           * @return      none
    259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          void MAC_SrcMatchAckAllPending ( uint8 option  ) 
   \                     MAC_SrcMatchAckAllPending:
    261          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    262            if( option == TRUE )
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   00000A   700B         JNZ     ??MAC_SrcMatchAckAllPending_0
    263            {
    264              macSrcMatchIsAckAllPending = TRUE;
   \   00000C   7401         MOV     A,#0x1
   \   00000E   F0           MOVX    @DPTR,A
    265              
    266              /* Set the PENDING_OR register */
    267              MAC_RADIO_TURN_ON_PENDING_OR();
   \   00000F   90618A       MOV     DPTR,#0x618a
   \   000012   E0           MOVX    A,@DPTR
   \   000013   D2E2         SETB    0xE0 /* A   */.2
   \   000015   8008         SJMP    ??MAC_SrcMatchAckAllPending_1
    268            }
    269            else
    270            {
    271              macSrcMatchIsAckAllPending = FALSE;
   \                     ??MAC_SrcMatchAckAllPending_0:
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    272              
    273              /* Clear the PENDING_OR register */
    274              MAC_RADIO_TURN_OFF_PENDING_OR();
   \   000019   90618A       MOV     DPTR,#0x618a
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C2E2         CLR     0xE0 /* A   */.2
    275            }
   \                     ??MAC_SrcMatchAckAllPending_1:
   \   00001F   80..         SJMP    ?Subroutine0
    276          }
    277          
    278          /*********************************************************************
    279           * @fn          MAC_SrcMatchCheckAllPending
    280           *
    281           * @brief       Check if acknowledging all packets with pending bit set
    282           *              is enabled. 
    283           *
    284           * @param       none 
    285           *
    286           * @return      MAC_AUTOACK_PENDING_ALL_ON or MAC_AUTOACK_PENDING_ALL_OFF
    287           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          uint8 MAC_SrcMatchCheckAllPending ( void )
   \                     MAC_SrcMatchCheckAllPending:
    289          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    290            if( macSrcMatchIsAckAllPending == TRUE )
   \   000004   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7004         JNZ     ??MAC_SrcMatchCheckAllPending_0
    291            {
    292              return MAC_AUTOACK_PENDING_ALL_ON; 
   \   00000C   79FE         MOV     R1,#-0x2
   \   00000E   8002         SJMP    ??MAC_SrcMatchCheckAllPending_1
    293            }
    294            
    295            return MAC_AUTOACK_PENDING_ALL_OFF;
   \                     ??MAC_SrcMatchCheckAllPending_0:
   \   000010   79FF         MOV     R1,#-0x1
   \                     ??MAC_SrcMatchCheckAllPending_1:
   \   000012   80..         SJMP    ??Subroutine2_0
    296          }
    297          
    298          /*********************************************************************
    299           * @fn          MAC_SrcMatchCheckResult
    300           *
    301           * @brief       Check the result of source matching
    302           *
    303           * @param       index - index of the entry in the source address table
    304           *
    305           * @return      TRUE or FALSE
    306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          MAC_INTERNAL_API bool MAC_SrcMatchCheckResult( void )
   \                     MAC_SrcMatchCheckResult:
    308          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    309            uint8 resIndex;
    310            
    311            if ( macSrcMatchIsAckAllPending )
   \   000004   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6004         JZ      ??MAC_SrcMatchCheckResult_0
    312            {
    313              return (TRUE);
   \   00000A   7901         MOV     R1,#0x1
   \   00000C   8009         SJMP    ??MAC_SrcMatchCheckResult_1
    314            }
    315            
    316            MAC_RADIO_SRC_MATCH_RESINDEX( resIndex );
   \                     ??MAC_SrcMatchCheckResult_0:
   \   00000E   906163       MOV     DPTR,#0x6163
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
    317            
    318            return ( resIndex & AUTOPEND_RES );
   \   000013   7440         MOV     A,#0x40
   \   000015   58           ANL     A,R0
   \   000016   F9           MOV     R1,A
   \                     ??MAC_SrcMatchCheckResult_1:
   \   000017   80..         SJMP    ??Subroutine2_0
    319          }
    320          
    321          /*********************************************************************
    322           * @fn          macSrcMatchFindEmptyEntry
    323           *
    324           * @brief       return index of the first empty entry found
    325           *
    326           * @param       macSrcMatchAddrMode - Address Mode for the entry. Valid values
    327           *              are SADDR_MODE_SHORT or SADDR_MODE_EXT
    328           *
    329           * @return      uint8 - return index of the first empty entry found
    330           */
    331          static uint8 macSrcMatchFindEmptyEntry( uint8 macSrcMatchAddrMode )
    332          {
    333            uint8  index;
    334            uint24 shortAddrEnable = MAC_RADIO_SRC_MATCH_GET_SHORTADDR_EN();
    335            uint24 extAddrEnable = MAC_RADIO_SRC_MATCH_GET_EXTADDR_EN();
    336            uint24 enable = shortAddrEnable | extAddrEnable;
    337          
    338            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
    339             {
    340               for( index = 0; index < MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES; index ++ )
    341               {
    342                 /* Both 2n bit of extAddrEnable and
    343                  * corresponding bit of shortAddrEnable must be clear
    344                  * in order to assume that the entry location for a short address
    345                  * is not used.
    346                  */
    347                 if( (extAddrEnable & ((uint24)0x01 << ((index/2)*2))) == 0 &&
    348                     (shortAddrEnable & ((uint24)0x01 << index)) == 0 )
    349                 {
    350                   return index;
    351                 }
    352               }
    353             }
    354             else
    355             {
    356               for( index = 0; index < MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES; index++ )
    357               {
    358                 /* Both 2n bit of extAddrEnable and
    359                  * 2n bit and 2n+1 bit of shortAddrEnable must be clear in order
    360                  * to assume that the entry location for an extended address
    361                  * is not used.        
    362                  */
    363                 if( (enable & ((uint24)0x03 << (index*2))) == 0 )
    364                 {
    365                   return index;
    366                 }
    367               }
    368             }
    369            return index;
    370          }
    371          
    372          /*********************************************************************
    373           * @fn         macSrcMatchCheckSrcAddr
    374           *
    375           * @brief      Check if a short or extended address is in the source address table.
    376           *             This function shall not be called from ISR. It is not thread safe.
    377           *
    378           * @param      addr - a pointer to sAddr_t which contains addrMode 
    379           *                    and a union of a short 16-bit MAC address or an extended 
    380           *                    64-bit MAC address to be checked in the source address table. 
    381           * @param      panID - the device PAN ID. It is only used when the addr is 
    382           *                     using short address 
    383          
    384           * @return     uint8 - index of the entry in the table. Return 
    385           *                     MAC_SRCMATCH_INVALID_INDEX (0xFF) if address not found.
    386           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    387          static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  )
   \                     macSrcMatchCheckSrcAddr:
    388          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    389            uint8 index;     
    390            uint8 *pAddr;
    391            uint8 entrySize;
    392            uint8 indexUsed;
    393            uint8 indexSize;
    394            uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];  
    395            uint8 ramEntry[MAC_SRCMATCH_EXT_ENTRY_SIZE];
    396            uint24 enable;
    397            
    398            /*
    399             Currently, shadow memory is not supported to optimize SPI traffic.
    400            */
    401            if( addr->addrMode ==  SADDR_MODE_SHORT )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6402         XRL     A,#0x2
   \   000019   7051         JNZ     ??macSrcMatchCheckSrcAddr_0
    402            {
    403              entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
   \   00001B   7407         MOV     A,#0x7
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EC           MOV     A,R4
   \   000021   F0           MOVX    @DPTR,A
    404              entry[1] = HI_UINT16( panID );
   \   000022   7408         MOV     A,#0x8
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   ED           MOV     A,R5
   \   000028   F0           MOVX    @DPTR,A
    405              entry[2] = LO_UINT16( addr->addr.shortAddr );
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   7409         MOV     A,#0x9
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   D0E0         POP     A
   \   000037   F0           MOVX    @DPTR,A
    406              entry[3] = HI_UINT16( addr->addr.shortAddr );
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   740A         MOV     A,#0xa
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    407              pAddr = entry;
   \   000048   7407         MOV     A,#0x7
   \   00004A   12....       LCALL   ?XSTACK_DISP100_8
   \   00004D   7405         MOV     A,#0x5
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E8           MOV     A,R0
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   E9           MOV     A,R1
   \   000056   F0           MOVX    @DPTR,A
    408              entrySize = MAC_SRCMATCH_SHORT_ENTRY_SIZE;
   \   000057   75..04       MOV     ?V2,#0x4
    409              indexSize = 1;
   \   00005A   7401         MOV     A,#0x1
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   7401         MOV     A,#0x1
   \   000061   F0           MOVX    @DPTR,A
    410              enable = MAC_RADIO_SRC_MATCH_GET_SHORTADDR_EN();
   \   000062                ; Setup parameters for call to function macMemReadRam
   \   000062   7903         MOV     R1,#0x3
   \   000064   04           INC     A
   \   000065   12....       LCALL   ?XSTACK_DISP102_8
   \   000068   7A83         MOV     R2,#-0x7d
   \   00006A   801C         SJMP    ??macSrcMatchCheckSrcAddr_1
    411            }
    412            else
    413            {
    414              pAddr = addr->addr.extAddr;
   \                     ??macSrcMatchCheckSrcAddr_0:
   \   00006C   7405         MOV     A,#0x5
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   EA           MOV     A,R2
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   EB           MOV     A,R3
   \   000075   F0           MOVX    @DPTR,A
    415              entrySize = MAC_SRCMATCH_EXT_ENTRY_SIZE;
   \   000076   75..08       MOV     ?V2,#0x8
    416              indexSize = 2;
   \   000079   7401         MOV     A,#0x1
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   7402         MOV     A,#0x2
   \   000080   F0           MOVX    @DPTR,A
    417              enable = MAC_RADIO_SRC_MATCH_GET_EXTADDR_EN();
   \   000081                ; Setup parameters for call to function macMemReadRam
   \   000081   7903         MOV     R1,#0x3
   \   000083   12....       LCALL   ?XSTACK_DISP102_8
   \   000086   7A86         MOV     R2,#-0x7a
   \                     ??macSrcMatchCheckSrcAddr_1:
   \   000088   7B61         MOV     R3,#0x61
   \   00008A   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   00008D                ; Setup parameters for call to function osal_build_uint32
   \   00008D   7903         MOV     R1,#0x3
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?XSTACK_DISP101_8
   \   000094   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000097   8A..         MOV     ?V4,R2
   \   000099   8B..         MOV     ?V5,R3
   \   00009B   8C..         MOV     ?V6,R4
   \   00009D   8D..         MOV     ?V7,R5
    418            }
    419            
    420            for( index = 0; index < MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES; index += indexSize )
   \   00009F   85..82       MOV     DPL,?XSP + 0
   \   0000A2   85..83       MOV     DPH,?XSP + 1
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   740B         MOV     A,#0xb
   \   0000A9   12....       LCALL   ?XSTACK_DISP100_8
   \   0000AC   88..         MOV     ?V12,R0
   \   0000AE   89..         MOV     ?V13,R1
   \   0000B0   75..00       MOV     ?V14,#0x0
   \   0000B3   85....       MOV     ?V0,?V2
   \   0000B6   75..00       MOV     ?V1,#0x0
    421            {
    422              /* Check if the entry is enabled */
    423              if( macSrcMatchCheckEnableBit( index, enable ) == FALSE )
   \                     ??macSrcMatchCheckSrcAddr_2:
   \   0000B9   85....       MOV     ?V8,?V4
   \   0000BC   85....       MOV     ?V9,?V5
   \   0000BF   85....       MOV     ?V10,?V6
   \   0000C2   85....       MOV     ?V11,?V7
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   78..         MOV     R0,#?V8
   \   0000C8   12....       LCALL   ?UL_SHR
   \   0000CB   E5..         MOV     A,?V8
   \   0000CD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000CF   5058         JNC     ??macSrcMatchCheckSrcAddr_3
    424              {
    425                continue; 
    426              }
    427              
    428              indexUsed = index / indexSize;
   \   0000D1   7401         MOV     A,#0x1
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F5F0         MOV     B,A
   \   0000D9   85..82       MOV     DPL,?XSP + 0
   \   0000DC   85..83       MOV     DPH,?XSP + 1
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   84           DIV     AB
   \   0000E1   F5..         MOV     ?V3,A
    429                
    430              /* Compare the short address or extended address */
    431              MAC_RADIO_SRC_MATCH_TABLE_READ( ( indexUsed * entrySize ), ramEntry, entrySize );
   \   0000E3                ; Setup parameters for call to function macMemReadRam
   \   0000E3   A9..         MOV     R1,?V2
   \   0000E5   740B         MOV     A,#0xb
   \   0000E7   12....       LCALL   ?XSTACK_DISP102_8
   \   0000EA   E5..         MOV     A,?V3
   \   0000EC   89F0         MOV     B,R1
   \   0000EE   A4           MUL     AB
   \   0000EF   FA           MOV     R2,A
   \   0000F0   A8F0         MOV     R0,B
   \   0000F2   E4           CLR     A
   \   0000F3   28           ADD     A,R0
   \   0000F4   FB           MOV     R3,A
   \   0000F5   7461         MOV     A,#0x61
   \   0000F7   3B           ADDC    A,R3
   \   0000F8   FB           MOV     R3,A
   \   0000F9   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
    432               
    433              if( osal_memcmp( pAddr, ramEntry, entrySize ) == TRUE )
   \   0000FC                ; Setup parameters for call to function osal_memcmp
   \   0000FC   78..         MOV     R0,#?V12
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000101   AC..         MOV     R4,?V0
   \   000103   AD..         MOV     R5,?V1
   \   000105   7408         MOV     A,#0x8
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F8           MOV     R0,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   F583         MOV     DPH,A
   \   000110   8882         MOV     DPL,R0
   \   000112   A982         MOV     R1,DPL
   \   000114   AA83         MOV     R2,DPH
   \   000116   7B00         MOV     R3,#0x0
   \   000118   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00011B   7403         MOV     A,#0x3
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000120   E9           MOV     A,R1
   \   000121   6401         XRL     A,#0x1
   \   000123   7004         JNZ     ??macSrcMatchCheckSrcAddr_3
    434              {
    435                /* Match found */
    436                return indexUsed;
   \   000125   A9..         MOV     R1,?V3
   \   000127   801A         SJMP    ??macSrcMatchCheckSrcAddr_4
    437              }
    438            }
   \                     ??macSrcMatchCheckSrcAddr_3:
   \   000129   7401         MOV     A,#0x1
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   F8           MOV     R0,A
   \   000130   85..82       MOV     DPL,?XSP + 0
   \   000133   85..83       MOV     DPH,?XSP + 1
   \   000136   E0           MOVX    A,@DPTR
   \   000137   28           ADD     A,R0
   \   000138   F0           MOVX    @DPTR,A
   \   000139   C3           CLR     C
   \   00013A   9418         SUBB    A,#0x18
   \   00013C   5003         JNC     $+5
   \   00013E   02....       LJMP    ??macSrcMatchCheckSrcAddr_2 & 0xFFFF
    439            
    440            return MAC_SRCMATCH_INVALID_INDEX;
   \   000141   79FF         MOV     R1,#-0x1
   \                     ??macSrcMatchCheckSrcAddr_4:
   \   000143   7413         MOV     A,#0x13
   \   000145   12....       LCALL   ?DEALLOC_XSTACK8
   \   000148   7F0F         MOV     R7,#0xf
   \   00014A   02....       LJMP    ?BANKED_LEAVE_XDATA
    441          }
    442          
    443          /*********************************************************************
    444           * @fn          macSrcMatchSetPendEnBit
    445           *
    446           * @brief       Set the enable bit in the source address table
    447           *
    448           * @param       index - index of the entry in the source address table
    449           * @param       macSrcMatchAddrMode - Address Mode for the entry. Valid values
    450           *              are SADDR_MODE_SHORT or SADDR_MODE_EXT
    451           *
    452           * @return      none
    453           */
    454          static void macSrcMatchSetPendEnBit( uint8 index, uint8 macSrcMatchAddrMode )
    455          {
    456            uint24 enable;
    457            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    458                 
    459            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
    460            {
    461              enable = MAC_RADIO_SRC_MATCH_GET_SHORTADDR_PENDEN(); 
    462              enable |= ( (uint24)0x01 << index );
    463              osal_buffer_uint24( buf, enable );
    464              MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN( buf );
    465            }
    466            else
    467            {
    468              enable = MAC_RADIO_SRC_MATCH_GET_EXTADDR_PENDEN(); 
    469              enable |= ( (uint24)0x01 << ( index * EXT_ADDR_INDEX_SIZE ) );
    470              enable |= ( (uint24)0x01 << ( ( index * EXT_ADDR_INDEX_SIZE ) + 1 ) );
    471              osal_buffer_uint24( buf, enable );
    472              MAC_RADIO_SRC_MATCH_SET_EXTPENDEN( buf );
    473            }
    474          }
    475          
    476          /*********************************************************************
    477           * @fn          macSrcMatchSetEnableBit
    478           *
    479           * @brief       Set or clear the enable bit in the SRCMATCH EN register
    480           *
    481           * @param       index  - index of the entry in the source address table
    482           * @param       option - true (set the enable bit), or false (clear the enable 
    483           *                       bit)
    484           * @param       macSrcMatchAddrMode - Address Mode for the entry. Valid values
    485           *              are SADDR_MODE_SHORT or SADDR_MODE_EXT
    486           *
    487           * @return      none
    488           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          static void macSrcMatchSetEnableBit( uint8 index, 
   \                     macSrcMatchSetEnableBit:
    490                                              bool option, 
    491                                              uint8 macSrcMatchAddrMode )
    492          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   8A..         MOV     ?V8,R2
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
    493            uint24 enable;  
    494            
    495            if( option == TRUE )
   \   000010   7401         MOV     A,#0x1
   \   000012   65..         XRL     A,?V8
   \   000014   7074         JNZ     ??macSrcMatchSetEnableBit_0
    496            {
    497              if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   000016   7402         MOV     A,#0x2
   \   000018   6F           XRL     A,R7
   \   000019   7903         MOV     R1,#0x3
   \   00001B   AC..         MOV     R4,?XSP + 0
   \   00001D   AD..         MOV     R5,?XSP + 1
   \   00001F   7033         JNZ     ??macSrcMatchSetEnableBit_1
    498              {
    499                enable = MAC_RADIO_SRC_MATCH_GET_SHORTADDR_EN(); 
    500                enable |= ( (uint24)0x01 << index );
    501                MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
   \   000021                ; Setup parameters for call to function macMemReadRam
   \   000021   7A83         MOV     R2,#-0x7d
   \   000023   7B61         MOV     R3,#0x61
   \   000025   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   000028                ; Setup parameters for call to function osal_buffer_uint24
   \   000028                ; Setup parameters for call to function osal_build_uint32
   \   000028   7903         MOV     R1,#0x3
   \   00002A   AA..         MOV     R2,?XSP + 0
   \   00002C   AB..         MOV     R3,?XSP + 1
   \   00002E   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000031   8A..         MOV     ?V4,R2
   \   000033   8B..         MOV     ?V5,R3
   \   000035   8C..         MOV     ?V6,R4
   \   000037   8D..         MOV     ?V7,R5
   \   000039   75..01       MOV     ?V0,#0x1
   \   00003C   75..00       MOV     ?V1,#0x0
   \   00003F   75..00       MOV     ?V2,#0x0
   \   000042   75..00       MOV     ?V3,#0x0
   \   000045   EE           MOV     A,R6
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?L_SHL
   \   00004B   78..         MOV     R0,#?V4
   \   00004D   79..         MOV     R1,#?V0
   \   00004F   12....       LCALL   ?L_IOR
   \   000052   8077         SJMP    ??macSrcMatchSetEnableBit_2
    502              }
    503              else
    504              {
    505                enable = MAC_RADIO_SRC_MATCH_GET_EXTADDR_EN(); 
    506                enable |= ( (uint24)0x01 << ( index *  EXT_ADDR_INDEX_SIZE) );
    507                MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
   \                     ??macSrcMatchSetEnableBit_1:
   \   000054                ; Setup parameters for call to function macMemReadRam
   \   000054   7A86         MOV     R2,#-0x7a
   \   000056   7B61         MOV     R3,#0x61
   \   000058   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   00005B                ; Setup parameters for call to function osal_buffer_uint24
   \   00005B                ; Setup parameters for call to function osal_build_uint32
   \   00005B   7903         MOV     R1,#0x3
   \   00005D   AA..         MOV     R2,?XSP + 0
   \   00005F   AB..         MOV     R3,?XSP + 1
   \   000061   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000064   8A..         MOV     ?V4,R2
   \   000066   8B..         MOV     ?V5,R3
   \   000068   8C..         MOV     ?V6,R4
   \   00006A   8D..         MOV     ?V7,R5
   \   00006C   75..01       MOV     ?V0,#0x1
   \   00006F   75..00       MOV     ?V1,#0x0
   \   000072   75..00       MOV     ?V2,#0x0
   \   000075   75..00       MOV     ?V3,#0x0
   \   000078   EE           MOV     A,R6
   \   000079   C3           CLR     C
   \   00007A   33           RLC     A
   \   00007B   78..         MOV     R0,#?V0
   \   00007D   12....       LCALL   ?L_SHL
   \   000080   78..         MOV     R0,#?V4
   \   000082   79..         MOV     R1,#?V0
   \   000084   12....       LCALL   ?L_IOR
   \   000087   02....       LJMP    ??macSrcMatchSetEnableBit_3 & 0xFFFF
    508              }
    509            }
    510            else
    511            {
    512              if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \                     ??macSrcMatchSetEnableBit_0:
   \   00008A   7402         MOV     A,#0x2
   \   00008C   6F           XRL     A,R7
   \   00008D   7903         MOV     R1,#0x3
   \   00008F   AC..         MOV     R4,?XSP + 0
   \   000091   AD..         MOV     R5,?XSP + 1
   \   000093   703F         JNZ     ??macSrcMatchSetEnableBit_4
    513              {
    514                enable = MAC_RADIO_SRC_MATCH_GET_SHORTADDR_EN();
    515                enable &= ~( (uint24)0x01 << index );
    516                MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
   \   000095                ; Setup parameters for call to function macMemReadRam
   \   000095   7A83         MOV     R2,#-0x7d
   \   000097   7B61         MOV     R3,#0x61
   \   000099   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   00009C                ; Setup parameters for call to function osal_buffer_uint24
   \   00009C                ; Setup parameters for call to function osal_build_uint32
   \   00009C   7903         MOV     R1,#0x3
   \   00009E   AA..         MOV     R2,?XSP + 0
   \   0000A0   AB..         MOV     R3,?XSP + 1
   \   0000A2   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   0000A5   8A..         MOV     ?V4,R2
   \   0000A7   8B..         MOV     ?V5,R3
   \   0000A9   8C..         MOV     ?V6,R4
   \   0000AB   8D..         MOV     ?V7,R5
   \   0000AD   75..01       MOV     ?V0,#0x1
   \   0000B0   75..00       MOV     ?V1,#0x0
   \   0000B3   75..00       MOV     ?V2,#0x0
   \   0000B6   75..00       MOV     ?V3,#0x0
   \   0000B9   EE           MOV     A,R6
   \   0000BA   78..         MOV     R0,#?V0
   \   0000BC   12....       LCALL   ?L_SHL
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?L_NOT
   \   0000C4   78..         MOV     R0,#?V4
   \   0000C6   79..         MOV     R1,#?V0
   \   0000C8   12....       LCALL   ?L_AND
   \                     ??macSrcMatchSetEnableBit_2:
   \   0000CB   78..         MOV     R0,#?V4
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000D0   7A83         MOV     R2,#-0x7d
   \   0000D2   803F         SJMP    ??macSrcMatchSetEnableBit_5
    517              }
    518              else
    519              {
    520                enable = MAC_RADIO_SRC_MATCH_GET_EXTADDR_EN(); 
    521                enable &= ~( (uint24)0x01 << ( index * EXT_ADDR_INDEX_SIZE ) );
    522                MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
   \                     ??macSrcMatchSetEnableBit_4:
   \   0000D4                ; Setup parameters for call to function macMemReadRam
   \   0000D4   7A86         MOV     R2,#-0x7a
   \   0000D6   7B61         MOV     R3,#0x61
   \   0000D8   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   0000DB                ; Setup parameters for call to function osal_buffer_uint24
   \   0000DB                ; Setup parameters for call to function osal_build_uint32
   \   0000DB   7903         MOV     R1,#0x3
   \   0000DD   AA..         MOV     R2,?XSP + 0
   \   0000DF   AB..         MOV     R3,?XSP + 1
   \   0000E1   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   0000E4   8A..         MOV     ?V4,R2
   \   0000E6   8B..         MOV     ?V5,R3
   \   0000E8   8C..         MOV     ?V6,R4
   \   0000EA   8D..         MOV     ?V7,R5
   \   0000EC   75..01       MOV     ?V0,#0x1
   \   0000EF   75..00       MOV     ?V1,#0x0
   \   0000F2   75..00       MOV     ?V2,#0x0
   \   0000F5   75..00       MOV     ?V3,#0x0
   \   0000F8   EE           MOV     A,R6
   \   0000F9   C3           CLR     C
   \   0000FA   33           RLC     A
   \   0000FB   78..         MOV     R0,#?V0
   \   0000FD   12....       LCALL   ?L_SHL
   \   000100   78..         MOV     R0,#?V0
   \   000102   12....       LCALL   ?L_NOT
   \   000105   78..         MOV     R0,#?V4
   \   000107   79..         MOV     R1,#?V0
   \   000109   12....       LCALL   ?L_AND
   \                     ??macSrcMatchSetEnableBit_3:
   \   00010C   78..         MOV     R0,#?V4
   \   00010E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000111   7A86         MOV     R2,#-0x7a
   \                     ??macSrcMatchSetEnableBit_5:
   \   000113   7B61         MOV     R3,#0x61
   \   000115   12....       LCALL   `??osal_buffer_uint24::?relay`; Banked call to: osal_buffer_uint24
   \   000118   7404         MOV     A,#0x4
   \   00011A   12....       LCALL   ?DEALLOC_XSTACK8
    523              }
    524            }
    525          }
   \   00011D   7403         MOV     A,#0x3
   \   00011F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000122   7F09         MOV     R7,#0x9
   \   000124   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   6402         XRL     A,#0x2
   \   000003   7903         MOV     R1,#0x3
   \   000005   AC..         MOV     R4,?XSP + 0
   \   000007   AD..         MOV     R5,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchDeleteEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchDeleteEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchAckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchAckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchCheckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchCheckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchCheckResult::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchCheckResult

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macSrcMatchCheckSrcAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchCheckSrcAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macSrcMatchSetEnableBit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchSetEnableBit
    526          
    527          /*********************************************************************
    528           * @fn          macSrcMatchCheckEnableBit
    529           *
    530           * @brief       Check the enable bit in the source address table
    531           *
    532           * @param       index - index of the entry in the source address table
    533           * @param       enable - enable register should be read before passing 
    534           *              it here
    535           *
    536           * @return      TRUE or FALSE
    537           */
    538          static bool macSrcMatchCheckEnableBit( uint8 index, uint24 enable)
    539          {
    540            if( enable & ((uint24)0x01 << index ))
    541            {
    542              return TRUE;
    543            }
    544            
    545            return FALSE; 
    546          }
    547           
    548          /*********************************************************************
    549           * @fn          macSrcMatchGetShortAddrPendEnBit
    550           *
    551           * @brief       Return the SRCMATCH ShortAddr Pend enable bitmap
    552           *
    553           * @param       none
    554           *
    555           * @return      uint24 - 24 bits bitmap
    556           */
    557          static uint24 macSrcMatchGetShortAddrPendEnBit( void )
    558          {
    559            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    560            
    561            MAC_RADIO_GET_SRC_SHORTPENDEN( buf );
    562            
    563            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
    564          }
    565          
    566           
    567          /*********************************************************************
    568           * @fn          macSrcMatchGetExtAddrPendEnBit
    569           *
    570           * @brief       Return the SRCMATCH Extended Address Pend enable bitmap
    571           *
    572           * @param       none
    573           *
    574           * @return      uint24 - 24 bits bitmap
    575           */
    576          static uint24 macSrcMatchGetExtAddrPendEnBit( void )
    577          {
    578            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    579            
    580            MAC_RADIO_GET_SRC_EXTENPEND( buf );
    581            
    582            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
    583          }
    584          
    585          /*********************************************************************
    586           * @fn          macSrcMatchGetShortAddrEnableBit
    587           *
    588           * @brief       Return the SRCMATCH ShortAddr enable bitmap
    589           *
    590           * @param       none
    591           *
    592           * @return      uint24 - 24 bits bitmap
    593           */
    594          static uint24 macSrcMatchGetShortAddrEnableBit( void )
    595          {
    596            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    597            
    598            MAC_RADIO_GET_SRC_SHORTEN( buf );
    599            
    600            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
    601          }
    602          
    603          /*********************************************************************
    604           * @fn          macSrcMatchGetExtAddrEnBit
    605           *
    606           * @brief       Return the SRCMATCH ExtAddr enable bitmap
    607           *
    608           * @param       none
    609           *
    610           * @return      uint24 - 24 bits bitmap
    611           */
    612          static uint24 macSrcMatchGetExtAddrEnableBit( void )
    613          {
    614            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    615            
    616            MAC_RADIO_GET_SRC_EXTEN( buf );
    617            
    618            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
    619          }
    620          
    621          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_SrcMatchAckAllPending
      1     38   MAC_SrcMatchAddEntry
        0     34   -> macMemReadRam
        0     34   -> macMemWriteRam
        0     34   -> macSrcMatchCheckSrcAddr
        0     34   -> macSrcMatchSetEnableBit
        0     38   -> osal_buffer_uint24
        0     34   -> osal_build_uint32
      2      0   MAC_SrcMatchCheckAllPending
      2      0   MAC_SrcMatchCheckResult
      0     27   MAC_SrcMatchDeleteEntry
        0     23   -> macMemReadRam
        0     23   -> macSrcMatchCheckSrcAddr
        0     27   -> osal_buffer_uint24
        0     23   -> osal_build_uint32
      2      0   MAC_SrcMatchEnable
      1     79   macSrcMatchCheckSrcAddr
        0     42   -> macMemReadRam
        0     42   -> osal_build_uint32
        0     45   -> osal_memcmp
      0     58   macSrcMatchSetEnableBit
        0     20   -> macMemReadRam
        0     24   -> osal_buffer_uint24
        0     20   -> osal_build_uint32


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ??Subroutine2_0
       1  ?Subroutine0
      10  ?Subroutine1
      33  MAC_SrcMatchAckAllPending
       6  MAC_SrcMatchAckAllPending::?relay
     694  MAC_SrcMatchAddEntry
       6  MAC_SrcMatchAddEntry::?relay
      20  MAC_SrcMatchCheckAllPending
       6  MAC_SrcMatchCheckAllPending::?relay
      25  MAC_SrcMatchCheckResult
       6  MAC_SrcMatchCheckResult::?relay
     213  MAC_SrcMatchDeleteEntry
       6  MAC_SrcMatchDeleteEntry::?relay
      43  MAC_SrcMatchEnable
       6  MAC_SrcMatchEnable::?relay
     333  macSrcMatchCheckSrcAddr
       6  macSrcMatchCheckSrcAddr::?relay
       1  macSrcMatchIsAckAllPending
       1  macSrcMatchIsEnabled
     295  macSrcMatchSetEnableBit
       6  macSrcMatchSetEnableBit::?relay

 
 1 674 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_Z
 
 1 722 bytes of CODE  memory
     2 bytes of XDATA memory

Errors: none
Warnings: none
