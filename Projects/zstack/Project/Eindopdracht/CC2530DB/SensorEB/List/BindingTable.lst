###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                16/Mar/2016  12:50:12
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\nwk\BindingTable.c
#    Command line       =  
#        -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\nwk\BindingTable.c
#        -D NWK_AUTO_POLL -D HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        -lA
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\BindingTable.lst
#    Object file        =  
#        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\BindingTable.r51
#
###############################################################################

C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\nwk\BindingTable.c
      1          /**************************************************************************************************
      2            Filename:       BindingTable.c
      3            Revised:        $Date: 2014-06-03 14:02:45 -0700 (Tue, 03 Jun 2014) $
      4            Revision:       $Revision: 38776 $
      5          
      6            Description:    Device binding table functions.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "nwk_globals.h"
     47          #include "AddrMgr.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          #define NV_BIND_EMPTY   0xFF
     59          #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
     60          #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
     61          
     62          /*********************************************************************
     63           * TYPEDEFS
     64           */
     65          typedef struct
     66          {
     67            uint8        srcEP;
     68            uint16       srcIndex;
     69            uint16       dstIndex;
     70            uint8        dstEP;
     71            uint8        dstAddrMode;
     72            uint8        clusterIDs;
     73            uint16*      clusterIDList;
     74          } bindFields_t;
     75          
     76          /*********************************************************************
     77           * GLOBAL VARIABLES
     78           */
     79          
     80          /*********************************************************************
     81           * LOCAL FUNCTIONS
     82           */
     83          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
     84                              AddrMgrEntry_t *entryNew );
     85          BindingEntry_t *bindFindEmpty( void );
     86          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
     87          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
     88          void bindAddrMgrLocalLoad( void );
     89          
     90          static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen );
     91          static uint8 BindUpgradeTableInNV( void );
     92          
     93          /*********************************************************************
     94           * LOCAL VARIABLES
     95           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          static uint8 bindAddrMgrLocalLoaded = FALSE;
   \                     bindAddrMgrLocalLoaded:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     97          
     98          /*********************************************************************
     99           * Function Pointers
    100           */
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
   \                     pbindAddEntry:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    103                                            zAddrType_t *dstAddr, byte dstEpInt,
    104                                            byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
   \                     pbindNumOfEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
   \                     pbindRemoveDev:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          byte (*pBindInitNV)( void ) = (void*)NULL;
   \                     pBindInitNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          void (*pBindSetDefaultNV)( void ) = (void*)NULL;
   \                     pBindSetDefaultNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
   \                     pBindRestoreFromNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          void (*pBindWriteNV)( void ) = (void*)NULL;
   \                     pBindWriteNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    111          
    112          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    113          /*********************************************************************
    114           * @fn      BindAddrMgrCB()
    115           *
    116           * @brief   Address Manager Callback function
    117           *
    118           * @param   update -
    119           * @param   entry -
    120           *
    121           * @return  pointer to
    122           */
    123          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
    124                              AddrMgrEntry_t *entryOld )
    125          {
    126            // Check for either deleted items or changed Extended (Duplicate) addresses
    127          }
    128          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
    129          
    130          /*********************************************************************
    131           * @fn      InitBindingTable()
    132           *
    133           * @brief
    134           *
    135           *   This function is used to initialise the binding table
    136           *
    137           * @param   none
    138           *
    139           * @return  none
    140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    141          void InitBindingTable( void )
   \                     InitBindingTable:
    142          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    143            osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
   \   000005                ; Setup parameters for call to function osal_memset
   \   000005   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000008   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000B   E4           CLR     A
   \   00000C   93           MOVC    A,@A+DPTR
   \   00000D   F5..         MOV     ?V0,A
   \   00000F   EC           MOV     A,R4
   \   000010   85..F0       MOV     B,?V0
   \   000013   A4           MUL     AB
   \   000014   FC           MOV     R4,A
   \   000015   A8F0         MOV     R0,B
   \   000017   85..F0       MOV     B,?V0
   \   00001A   ED           MOV     A,R5
   \   00001B   A4           MUL     AB
   \   00001C   28           ADD     A,R0
   \   00001D   FD           MOV     R5,A
   \   00001E   79FF         MOV     R1,#-0x1
   \   000020   7A..         MOV     R2,#BindingTable & 0xff
   \   000022   7B..         MOV     R3,#(BindingTable >> 8) & 0xff
   \   000024   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    144          
    145            pbindAddEntry = bindAddEntry;
   \   000027   90....       MOV     DPTR,#pbindAddEntry
   \   00002A   74..         MOV     A,#`??bindAddEntry::?relay` & 0xff
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   74..         MOV     A,#(`??bindAddEntry::?relay` >> 8) & 0xff
   \   000030   F0           MOVX    @DPTR,A
    146            pbindNumOfEntries = bindNumOfEntries;
   \   000031   90....       MOV     DPTR,#pbindNumOfEntries
   \   000034   74..         MOV     A,#`??bindNumOfEntries::?relay` & 0xff
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   74..         MOV     A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
   \   00003A   F0           MOVX    @DPTR,A
    147            pbindRemoveDev = bindRemoveDev;
   \   00003B   90....       MOV     DPTR,#pbindRemoveDev
   \   00003E   74..         MOV     A,#`??bindRemoveDev::?relay` & 0xff
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   74..         MOV     A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
   \   000044   F0           MOVX    @DPTR,A
    148            pBindInitNV = BindInitNV;
   \   000045   90....       MOV     DPTR,#pBindInitNV
   \   000048   74..         MOV     A,#`??BindInitNV::?relay` & 0xff
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   74..         MOV     A,#(`??BindInitNV::?relay` >> 8) & 0xff
   \   00004E   F0           MOVX    @DPTR,A
    149            pBindSetDefaultNV = BindSetDefaultNV;
   \   00004F   90....       MOV     DPTR,#pBindSetDefaultNV
   \   000052   74..         MOV     A,#`??BindSetDefaultNV::?relay` & 0xff
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   74..         MOV     A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
   \   000058   F0           MOVX    @DPTR,A
    150            pBindRestoreFromNV = BindRestoreFromNV;
   \   000059   90....       MOV     DPTR,#pBindRestoreFromNV
   \   00005C   74..         MOV     A,#`??BindRestoreFromNV::?relay` & 0xff
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   74..         MOV     A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
   \   000062   F0           MOVX    @DPTR,A
    151            pBindWriteNV = BindWriteNV;
   \   000063   90....       MOV     DPTR,#pBindWriteNV
   \   000066   74..         MOV     A,#`??BindWriteNV::?relay` & 0xff
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#(`??BindWriteNV::?relay` >> 8) & 0xff
   \   00006C   F0           MOVX    @DPTR,A
    152          
    153            bindAddrMgrLocalLoaded = FALSE;
   \   00006D   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   000070   E4           CLR     A
   \   000071   F0           MOVX    @DPTR,A
    154          
    155          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    156            // Register with the address manager
    157            AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
    158          #endif
    159          }
   \   000072   02....       LJMP    ??Subroutine39_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   FC           MOV     R4,A
   \   000006   7401         MOV     A,#0x1
   \   000008   93           MOVC    A,@A+DPTR
   \   000009   FD           MOV     R5,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    160          
    161          /*********************************************************************
    162           * @fn      bindFindEmpty()
    163           *
    164           * @brief   This function returns a pointer to an empty binding slot
    165           *
    166           * @param   none
    167           *
    168           * @return  pointer to binding table entry, NULL if not added
    169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    170          BindingEntry_t *bindFindEmpty( void )
   \                     bindFindEmpty:
    171          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    172            bindTableIndex_t x;
    173          
    174            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7A00         MOV     R2,#0x0
   \   000006   78..         MOV     R0,#BindingTable & 0xff
   \   000008   79..         MOV     R1,#(BindingTable >> 8) & 0xff
   \   00000A   8008         SJMP    ??bindFindEmpty_0
   \                     ??bindFindEmpty_1:
   \   00000C   0A           INC     R2
   \   00000D   E8           MOV     A,R0
   \   00000E   240E         ADD     A,#0xe
   \   000010   F8           MOV     R0,A
   \   000011   5001         JNC     ??bindFindEmpty_0
   \   000013   09           INC     R1
   \                     ??bindFindEmpty_0:
   \   000014   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000017   E4           CLR     A
   \   000018   93           MOVC    A,@A+DPTR
   \   000019   FB           MOV     R3,A
   \   00001A   EA           MOV     A,R2
   \   00001B   C3           CLR     C
   \   00001C   9B           SUBB    A,R3
   \   00001D   501A         JNC     ??bindFindEmpty_2
    175            {
    176              // It's empty if the index is "Not Found"
    177              if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F4           CPL     A
   \   000025   70E5         JNZ     ??bindFindEmpty_1
    178              {
    179                return ( &BindingTable[x] );
   \   000027   EA           MOV     A,R2
   \   000028   75F00E       MOV     B,#0xe
   \   00002B   A4           MUL     AB
   \   00002C   F8           MOV     R0,A
   \   00002D   A9F0         MOV     R1,B
   \   00002F   74..         MOV     A,#BindingTable & 0xff
   \   000031   28           ADD     A,R0
   \   000032   FA           MOV     R2,A
   \   000033   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000035   39           ADDC    A,R1
   \   000036   FB           MOV     R3,A
   \   000037   8004         SJMP    ??bindFindEmpty_3
    180              }
    181            }
    182          
    183            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindEmpty_2:
   \   000039   7A00         MOV     R2,#0x0
   \   00003B   7B00         MOV     R3,#0x0
   \                     ??bindFindEmpty_3:
   \   00003D   02....       LJMP    ??Subroutine37_0 & 0xFFFF
    184          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    185          
    186          /*********************************************************************
    187           * @fn      bindNumOfEntries()
    188           *
    189           * @brief   This function returns the number of binding table entries.
    190           *          The return for this is the number of clusters in the
    191           *          table NOT the number of entries.
    192           *
    193           * @param   none
    194           *
    195           * @return  number of entries
    196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          uint16 bindNumOfEntries( void )
   \                     bindNumOfEntries:
    198          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    199            bindTableIndex_t x;
    200            uint16 found;
    201          
    202            for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   6027         JZ      ??bindNumOfEntries_0
   \   000010   78..         MOV     R0,#BindingTable & 0xff
   \   000012   79..         MOV     R1,#(BindingTable >> 8) & 0xff
   \   000014   E4           CLR     A
   \   000015   93           MOVC    A,@A+DPTR
   \   000016   FE           MOV     R6,A
    203            {
    204              // It's empty if the index is "Not Found"
    205              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \                     ??bindNumOfEntries_1:
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F4           CPL     A
   \   00001D   600D         JZ      ??bindNumOfEntries_2
    206              {
    207                found += BindingTable[x].numClusterIds;
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FC           MOV     R4,A
   \   000026   EA           MOV     A,R2
   \   000027   2C           ADD     A,R4
   \   000028   FA           MOV     R2,A
   \   000029   E4           CLR     A
   \   00002A   3B           ADDC    A,R3
   \   00002B   FB           MOV     R3,A
    208              }
    209            }
   \                     ??bindNumOfEntries_2:
   \   00002C   E8           MOV     A,R0
   \   00002D   240E         ADD     A,#0xe
   \   00002F   F8           MOV     R0,A
   \   000030   5001         JNC     ??bindNumOfEntries_3
   \   000032   09           INC     R1
   \                     ??bindNumOfEntries_3:
   \   000033   1E           DEC     R6
   \   000034   EE           MOV     A,R6
   \   000035   70E0         JNZ     ??bindNumOfEntries_1
    210          
    211            return ( found );
   \                     ??bindNumOfEntries_0:
   \   000037   02....       LJMP    ?Subroutine2 & 0xFFFF
    212          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    213          
    214          /*********************************************************************
    215           * @fn      bindCapacity()
    216           *
    217           * @brief   This function returns the number of binding entries
    218           *          possible and used.
    219           *
    220           * @param   maxEntries - pointer to a place to put the max entries
    221           * @param   usedEntries - pointer to a place to put the number
    222           *               of used entries
    223           *
    224           * @return  none
    225           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
   \                     bindCapacity:
    227          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    228            bindTableIndex_t x;
    229            bindTableIndex_t used;
    230          
    231            for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000005   7E00         MOV     R6,#0x0
   \   000007   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000A   E4           CLR     A
   \   00000B   93           MOVC    A,@A+DPTR
   \   00000C   601B         JZ      ??bindCapacity_0
   \   00000E   78..         MOV     R0,#BindingTable & 0xff
   \   000010   79..         MOV     R1,#(BindingTable >> 8) & 0xff
   \   000012   E4           CLR     A
   \   000013   93           MOVC    A,@A+DPTR
   \   000014   FF           MOV     R7,A
    232            {
    233              // It's empty if the index is "Not Found"
    234              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \                     ??bindCapacity_1:
   \   000015   8882         MOV     DPL,R0
   \   000017   8983         MOV     DPH,R1
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F4           CPL     A
   \   00001B   6001         JZ      ??bindCapacity_2
    235              {
    236                used++;
   \   00001D   0E           INC     R6
    237              }
    238            }
   \                     ??bindCapacity_2:
   \   00001E   E8           MOV     A,R0
   \   00001F   240E         ADD     A,#0xe
   \   000021   F8           MOV     R0,A
   \   000022   5001         JNC     ??bindCapacity_3
   \   000024   09           INC     R1
   \                     ??bindCapacity_3:
   \   000025   1F           DEC     R7
   \   000026   EF           MOV     A,R7
   \   000027   70EC         JNZ     ??bindCapacity_1
    239          
    240            *maxEntries = gNWK_MAX_BINDING_ENTRIES;
   \                     ??bindCapacity_0:
   \   000029   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00002C   E4           CLR     A
   \   00002D   93           MOVC    A,@A+DPTR
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
    241            *usedEntries = used;
   \   000036   8C82         MOV     DPL,R4
   \   000038   8D83         MOV     DPH,R5
   \   00003A   EE           MOV     A,R6
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
    242          }
   \   00003F   02....       LJMP    ?Subroutine2 & 0xFFFF
    243          
    244          /*********************************************************************
    245           * @fn      bindAddEntry()
    246           *
    247           * @brief   This function is used to Add an entry to the binding table
    248           *
    249           * @param       srcEpInt - source endpoint
    250           * @param       dstAddr - destination Address
    251           * @param       dstEpInt - destination endpoint
    252           * @param       numClusterIds - number of cluster Ids in the list
    253           * @param       clusterIds - pointer to the Object ID list
    254           *
    255           * @return  pointer to binding table entry, NULL if not added
    256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          BindingEntry_t *bindAddEntry( byte srcEpInt,
   \                     bindAddEntry:
    258                                        zAddrType_t *dstAddr, byte dstEpInt,
    259                                        byte numClusterIds, uint16 *clusterIds )
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V7,R4
   \   00000D   8D..         MOV     ?V0,R5
    261            uint8            index;
    262            bindTableIndex_t bindIdx;
    263            BindingEntry_t*  entry;
    264            bindFields_t     fields;
    265          
    266            // initialize results
    267            entry = NULL;
   \   00000F   7E00         MOV     R6,#0x0
   \   000011   7F00         MOV     R7,#0x0
    268          
    269            // make sure local addresses have been loaded
    270            bindAddrMgrLocalLoad();
   \   000013                ; Setup parameters for call to function bindAddrMgrLocalLoad
   \   000013   12....       LCALL   `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
    271          
    272            // setup fields
    273            fields.dstIndex = bindAddrIndexGet( dstAddr );
   \   000016                ; Setup parameters for call to function bindAddrIndexGet
   \   000016   AA..         MOV     R2,?V4
   \   000018   AB..         MOV     R3,?V5
   \   00001A   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   \   00001D   8A..         MOV     ?V8,R2
   \   00001F   8B..         MOV     ?V9,R3
   \   000021   A8..         MOV     R0,?V8
   \   000023   A9..         MOV     R1,?V9
    274            fields.srcEP    = srcEpInt;
    275          
    276            if ( dstAddr->addrMode == AddrGroup )
   \   000025   85..82       MOV     DPL,?V4
   \   000028   85..83       MOV     DPH,?V5
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6401         XRL     A,#0x1
   \   000036   7007         JNZ     ??bindAddEntry_0
    277            {
    278              fields.dstAddrMode = DSTGROUPMODE_GROUP;
   \   000038   7C01         MOV     R4,#0x1
    279              fields.dstEP       = 0;
   \   00003A   75..00       MOV     ?V1,#0x0
   \   00003D   8005         SJMP    ??bindAddEntry_1
    280            }
    281            else
    282            {
    283              fields.dstAddrMode = DSTGROUPMODE_ADDR;
   \                     ??bindAddEntry_0:
   \   00003F   7C00         MOV     R4,#0x0
    284              fields.dstEP       = dstEpInt;
   \   000041   85....       MOV     ?V1,?V7
    285            }
    286          
    287            if ( fields.dstIndex != INVALID_NODE_ADDR  )
   \                     ??bindAddEntry_1:
   \   000044   74FE         MOV     A,#-0x2
   \   000046   68           XRL     A,R0
   \   000047   7003         JNZ     ??bindAddEntry_2
   \   000049   74FF         MOV     A,#-0x1
   \   00004B   69           XRL     A,R1
   \                     ??bindAddEntry_2:
   \   00004C   7003         JNZ     $+5
   \   00004E   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    288            {
    289              for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7A..         MOV     R2,#BindingTable & 0xff
   \   000055   7B..         MOV     R3,#(BindingTable >> 8) & 0xff
   \   000057   7412         MOV     A,#0x12
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F5..         MOV     ?V4,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F5..         MOV     ?V5,A
   \   000063   8008         SJMP    ??bindAddEntry_4
   \                     ??bindAddEntry_5:
   \   000065   0D           INC     R5
   \   000066   EA           MOV     A,R2
   \   000067   240E         ADD     A,#0xe
   \   000069   FA           MOV     R2,A
   \   00006A   5001         JNC     ??bindAddEntry_4
   \   00006C   0B           INC     R3
   \                     ??bindAddEntry_4:
   \   00006D   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000070   E4           CLR     A
   \   000071   93           MOVC    A,@A+DPTR
   \   000072   F5..         MOV     ?V2,A
   \   000074   ED           MOV     A,R5
   \   000075   C3           CLR     C
   \   000076   95..         SUBB    A,?V2
   \   000078   4003         JC      $+5
   \   00007A   02....       LJMP    ??bindAddEntry_6 & 0xFFFF
    290              {
    291                if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
    292                     ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
    293                     ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
    294                     ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
   \   00007D   8A82         MOV     DPL,R2
   \   00007F   8B83         MOV     DPH,R3
   \   000081   E0           MOVX    A,@DPTR
   \   000082   65..         XRL     A,?V3
   \   000084   70DF         JNZ     ??bindAddEntry_5
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   6C           XRL     A,R4
   \   000089   70DA         JNZ     ??bindAddEntry_5
   \   00008B   8A82         MOV     DPL,R2
   \   00008D   8B83         MOV     DPH,R3
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   68           XRL     A,R0
   \   000093   7003         JNZ     ??bindAddEntry_7
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   69           XRL     A,R1
   \                     ??bindAddEntry_7:
   \   000098   70CB         JNZ     ??bindAddEntry_5
   \   00009A   8A82         MOV     DPL,R2
   \   00009C   8B83         MOV     DPH,R3
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   65..         XRL     A,?V1
   \   0000A5   70BE         JNZ     ??bindAddEntry_5
    295                {
    296                  entry = &BindingTable[bindIdx];
   \   0000A7   ED           MOV     A,R5
   \   0000A8   75F00E       MOV     B,#0xe
   \   0000AB   A4           MUL     AB
   \   0000AC   F8           MOV     R0,A
   \   0000AD   A9F0         MOV     R1,B
   \   0000AF   74..         MOV     A,#BindingTable & 0xff
   \   0000B1   28           ADD     A,R0
   \   0000B2   FE           MOV     R6,A
   \   0000B3   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0000B5   39           ADDC    A,R1
   \   0000B6   FF           MOV     R7,A
    297          
    298                  // break from loop
    299                  break;
    300                }
    301              }
    302          
    303              if ( entry != NULL )
    304              {
    305                // Loop through the cluster IDs
    306                for ( index = 0; index < numClusterIds; index++ )
   \   0000B7   E5..         MOV     A,?V0
   \   0000B9   7003         JNZ     $+5
   \   0000BB   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
   \   0000BE   F5..         MOV     ?V2,A
    307                {
    308                  // Found - is the cluster already defined?
    309                  if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
   \                     ??bindAddEntry_8:
   \   0000C0   85..82       MOV     DPL,?V4
   \   0000C3   85..83       MOV     DPH,?V5
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F5..         MOV     ?V8,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   AC..         MOV     R4,?V8
   \   0000CD   FD           MOV     R5,A
   \   0000CE   EE           MOV     A,R6
   \   0000CF   4F           ORL     A,R7
   \   0000D0   6028         JZ      ??bindAddEntry_9
   \   0000D2   75..00       MOV     ?V6,#0x0
   \   0000D5   EE           MOV     A,R6
   \   0000D6   2405         ADD     A,#0x5
   \   0000D8   FA           MOV     R2,A
   \   0000D9   E4           CLR     A
   \   0000DA   3F           ADDC    A,R7
   \   0000DB   FB           MOV     R3,A
   \   0000DC   8010         SJMP    ??bindAddEntry_10
   \                     ??bindAddEntry_11:
   \   0000DE   A8..         MOV     R0,?V6
   \   0000E0   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   6C           XRL     A,R4
   \   0000E5   7003         JNZ     ??bindAddEntry_12
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   6D           XRL     A,R5
   \                     ??bindAddEntry_12:
   \   0000EA   603B         JZ      ??bindAddEntry_13
   \   0000EC   05..         INC     ?V6
   \                     ??bindAddEntry_10:
   \   0000EE   8A82         MOV     DPL,R2
   \   0000F0   8B83         MOV     DPH,R3
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   E5..         MOV     A,?V6
   \   0000F6   C3           CLR     C
   \   0000F7   98           SUBB    A,R0
   \   0000F8   40E4         JC      ??bindAddEntry_11
    310                  {
    311                    // Nope, add this cluster
    312                    if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
   \                     ??bindAddEntry_9:
   \   0000FA   EE           MOV     A,R6
   \   0000FB   4F           ORL     A,R7
   \   0000FC   6025         JZ      ??bindAddEntry_14
   \   0000FE   EE           MOV     A,R6
   \   0000FF   2405         ADD     A,#0x5
   \   000101   F8           MOV     R0,A
   \   000102   E4           CLR     A
   \   000103   3F           ADDC    A,R7
   \   000104   F9           MOV     R1,A
   \   000105   E8           MOV     A,R0
   \   000106   FA           MOV     R2,A
   \   000107   E9           MOV     A,R1
   \   000108   FB           MOV     R3,A
   \   000109   8A82         MOV     DPL,R2
   \   00010B   8B83         MOV     DPH,R3
   \   00010D   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000110   5011         JNC     ??bindAddEntry_14
   \   000112   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000115   EC           MOV     A,R4
   \   000116   F0           MOVX    @DPTR,A
   \   000117   A3           INC     DPTR
   \   000118   ED           MOV     A,R5
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   8A82         MOV     DPL,R2
   \   00011C   8B83         MOV     DPH,R3
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   04           INC     A
   \   000120   F0           MOVX    @DPTR,A
   \   000121   8004         SJMP    ??bindAddEntry_13
    313                    {
    314                      // Indicate error if cluster list was full
    315                      entry = NULL;
   \                     ??bindAddEntry_14:
   \   000123   7E00         MOV     R6,#0x0
   \   000125   7F00         MOV     R7,#0x0
    316                    }
    317                  }
    318                }
   \                     ??bindAddEntry_13:
   \   000127   E5..         MOV     A,?V4
   \   000129   2402         ADD     A,#0x2
   \   00012B   F5..         MOV     ?V4,A
   \   00012D   5002         JNC     ??bindAddEntry_15
   \   00012F   05..         INC     ?V5
   \                     ??bindAddEntry_15:
   \   000131   15..         DEC     ?V2
   \   000133   E5..         MOV     A,?V2
   \   000135   7003         JNZ     $+5
   \   000137   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
   \   00013A   8084         SJMP    ??bindAddEntry_8
    319              }
    320              else
    321              {
    322                // Find an empty slot
    323                entry = bindFindEmpty();
   \                     ??bindAddEntry_6:
   \   00013C   7D00         MOV     R5,#0x0
   \   00013E   7A..         MOV     R2,#BindingTable & 0xff
   \   000140   7B..         MOV     R3,#(BindingTable >> 8) & 0xff
   \   000142   8008         SJMP    ??bindAddEntry_16
   \                     ??bindAddEntry_17:
   \   000144   0D           INC     R5
   \   000145   EA           MOV     A,R2
   \   000146   240E         ADD     A,#0xe
   \   000148   FA           MOV     R2,A
   \   000149   5001         JNC     ??bindAddEntry_16
   \   00014B   0B           INC     R3
   \                     ??bindAddEntry_16:
   \   00014C   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00014F   E4           CLR     A
   \   000150   93           MOVC    A,@A+DPTR
   \   000151   F5..         MOV     ?V6,A
   \   000153   ED           MOV     A,R5
   \   000154   C3           CLR     C
   \   000155   95..         SUBB    A,?V6
   \   000157   506D         JNC     ??bindAddEntry_3
   \   000159   8A82         MOV     DPL,R2
   \   00015B   8B83         MOV     DPH,R3
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   F4           CPL     A
   \   00015F   70E3         JNZ     ??bindAddEntry_17
   \   000161   ED           MOV     A,R5
   \   000162   75F00E       MOV     B,#0xe
   \   000165   A4           MUL     AB
   \   000166   FA           MOV     R2,A
   \   000167   ABF0         MOV     R3,B
   \   000169   74..         MOV     A,#BindingTable & 0xff
   \   00016B   2A           ADD     A,R2
   \   00016C   FE           MOV     R6,A
   \   00016D   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00016F   3B           ADDC    A,R3
   \   000170   FF           MOV     R7,A
    324          
    325                // Check against the maximum number allowed
    326                if ( entry != NULL )
    327                {
    328                  // Add new entry
    329                  entry->srcEP         = fields.srcEP;
   \   000171   8E82         MOV     DPL,R6
   \   000173   8F83         MOV     DPH,R7
   \   000175   E5..         MOV     A,?V3
   \   000177   F0           MOVX    @DPTR,A
    330                  entry->dstGroupMode  = fields.dstAddrMode;
   \   000178   EC           MOV     A,R4
   \   000179   A3           INC     DPTR
   \   00017A   12....       LCALL   ?Subroutine31 & 0xFFFF
    331                  entry->dstIdx        = fields.dstIndex;
   \                     ??CrossCallReturnLabel_55:
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   E8           MOV     A,R0
   \   000180   F0           MOVX    @DPTR,A
   \   000181   A3           INC     DPTR
   \   000182   E9           MOV     A,R1
   \   000183   12....       LCALL   ?Subroutine31 & 0xFFFF
    332                  entry->dstEP         = fields.dstEP;
   \                     ??CrossCallReturnLabel_56:
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   E5..         MOV     A,?V1
   \   00018C   F0           MOVX    @DPTR,A
    333          
    334                  if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
   \   00018D   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000190   E4           CLR     A
   \   000191   93           MOVC    A,@A+DPTR
   \   000192   C3           CLR     C
   \   000193   95..         SUBB    A,?V0
   \   000195   5004         JNC     ??bindAddEntry_18
    335                  {
    336                    numClusterIds = gMAX_BINDING_CLUSTER_IDS;
   \   000197   E4           CLR     A
   \   000198   93           MOVC    A,@A+DPTR
   \   000199   F5..         MOV     ?V0,A
    337                  }
    338          
    339                  entry->numClusterIds = numClusterIds;
   \                     ??bindAddEntry_18:
   \   00019B   8E82         MOV     DPL,R6
   \   00019D   8F83         MOV     DPH,R7
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   E5..         MOV     A,?V0
   \   0001A6   F0           MOVX    @DPTR,A
    340          
    341                  osal_memcpy( entry->clusterIdList,
    342                               clusterIds,
    343                               numClusterIds * sizeof(uint16) );
   \   0001A7                ; Setup parameters for call to function osal_memcpy
   \   0001A7   75..00       MOV     ?V6,#0x0
   \   0001AA   78..         MOV     R0,#?V4
   \   0001AC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001AF   AC..         MOV     R4,?V0
   \   0001B1   EC           MOV     A,R4
   \   0001B2   2C           ADD     A,R4
   \   0001B3   FC           MOV     R4,A
   \   0001B4   E4           CLR     A
   \   0001B5   33           RLC     A
   \   0001B6   FD           MOV     R5,A
   \   0001B7   EE           MOV     A,R6
   \   0001B8   2406         ADD     A,#0x6
   \   0001BA   FA           MOV     R2,A
   \   0001BB   E4           CLR     A
   \   0001BC   3F           ADDC    A,R7
   \   0001BD   FB           MOV     R3,A
   \   0001BE   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001C1   7403         MOV     A,#0x3
   \   0001C3   12....       LCALL   ?DEALLOC_XSTACK8
    344                }
    345              }
    346            }
    347          
    348            return entry;
   \                     ??bindAddEntry_3:
   \   0001C6   EE           MOV     A,R6
   \   0001C7   FA           MOV     R2,A
   \   0001C8   EF           MOV     A,R7
   \   0001C9   FB           MOV     R3,A
   \   0001CA   7F0A         MOV     R7,#0xa
   \   0001CC   02....       LJMP    ?BANKED_LEAVE_XDATA
    349          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   EE           MOV     A,R6
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   EF           MOV     A,R7
   \   00000B   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000005   E4           CLR     A
   \   000006   93           MOVC    A,@A+DPTR
   \   000007   F9           MOV     R1,A
   \   000008   E8           MOV     A,R0
   \   000009   C3           CLR     C
   \   00000A   99           SUBB    A,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
    350          
    351          /*********************************************************************
    352           * @fn      bindRemoveEntry
    353           *
    354           * @brief   Removes a binding table entry.
    355           *
    356           * @param   pBind - pointer to binding table entry to delete
    357           *
    358           * @return  TRUE if Removed, FALSE if not
    359           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          byte bindRemoveEntry( BindingEntry_t *pBind )
   \                     bindRemoveEntry:
    361          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    362            osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
   \   000004                ; Setup parameters for call to function osal_memset
   \   000004   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000007   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    363            return ( TRUE );
   \   00000A   7901         MOV     R1,#0x1
   \   00000C   02....       LJMP    ??Subroutine37_0 & 0xFFFF
    364          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   79FF         MOV     R1,#-0x1
   \   000005   22           RET
    365          
    366          /*********************************************************************
    367           * @fn      bindIsClusterIDinList()
    368           *
    369           * @brief   Is the clusterID in the clusterID list?
    370           *
    371           * @param   enter - binding table entry
    372           * @param   clusterId  - Cluster ID to look for
    373           *
    374           * @return  TRUE if found, FALSE if not found
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindIsClusterIDinList:
    377          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    378            uint8 x;
    379          
    380            if ( entry != NULL )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   602A         JZ      ??bindIsClusterIDinList_0
    381            {
    382              for ( x = 0; x < entry->numClusterIds; x++ )
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00000F   E8           MOV     A,R0
   \   000010   FE           MOV     R6,A
   \   000011   E9           MOV     A,R1
   \   000012   FF           MOV     R7,A
   \   000013   8002         SJMP    ??bindIsClusterIDinList_1
   \                     ??bindIsClusterIDinList_2:
   \   000015   05..         INC     ?V0
   \                     ??bindIsClusterIDinList_1:
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   E5..         MOV     A,?V0
   \   00001F   C3           CLR     C
   \   000020   98           SUBB    A,R0
   \   000021   5010         JNC     ??bindIsClusterIDinList_0
    383              {
    384                if ( entry->clusterIdList[x] == clusterId )
   \   000023   A8..         MOV     R0,?V0
   \   000025   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000028   7003         JNZ     ??bindIsClusterIDinList_3
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6D           XRL     A,R5
   \                     ??bindIsClusterIDinList_3:
   \   00002D   70E6         JNZ     ??bindIsClusterIDinList_2
    385                {
    386                  return ( TRUE );
   \   00002F   7901         MOV     R1,#0x1
   \   000031   8002         SJMP    ??bindIsClusterIDinList_4
    387                }
    388              }
    389            }
    390          
    391            return ( FALSE );
   \                     ??bindIsClusterIDinList_0:
   \   000033   7900         MOV     R1,#0x0
   \                     ??bindIsClusterIDinList_4:
   \   000035                REQUIRE ?Subroutine2
   \   000035                ; // Fall through to label ?Subroutine2
    392          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EA           MOV     A,R2
   \   000001   2405         ADD     A,#0x5
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   6C           XRL     A,R4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00000E   22           RET
    393          
    394          /*********************************************************************
    395           * @fn      bindRemoveClusterIdFromList()
    396           *
    397           * @brief   Removes a ClusterID from a list of ClusterIDs.
    398           *
    399           * @param   enter - binding table entry
    400           * @param   clusterId  - Cluster ID to look for
    401           *
    402           * @return  TRUE if there are at least 1 clusterID left, FALSE if none
    403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    404          byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindRemoveClusterIdFromList:
    405          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
    406            byte x;
    407            uint16 *listPtr;
    408            byte numIds;
    409          
    410            if ( entry )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6068         JZ      ??bindRemoveClusterIdFromList_0
    411            {
    412              if ( entry->numClusterIds > 0 )
   \   000009   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F5..         MOV     ?V0,A
   \   00000F   6060         JZ      ??bindRemoveClusterIdFromList_0
    413              {
    414                listPtr = entry->clusterIdList;
   \   000011   EA           MOV     A,R2
   \   000012   2406         ADD     A,#0x6
   \   000014   08           INC     R0
   \   000015   E4           CLR     A
   \   000016   3B           ADDC    A,R3
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   FA           MOV     R2,A
   \   00001A   E9           MOV     A,R1
   \   00001B   FB           MOV     R3,A
    415                numIds = entry->numClusterIds;
   \   00001C   85....       MOV     ?V1,?V0
    416          
    417                // Copy the new list over
    418                for ( x = 0; x < numIds; x++ )
   \   00001F   75..00       MOV     ?V0,#0x0
   \   000022   8012         SJMP    ??bindRemoveClusterIdFromList_1
    419                {
    420                  if ( entry->clusterIdList[x] != clusterId )
    421                  {
    422                    *listPtr++ = entry->clusterIdList[x];
    423                  }
    424                  else
    425                  {
    426                    entry->numClusterIds--;
   \                     ??bindRemoveClusterIdFromList_2:
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   E0           MOVX    A,@DPTR
   \   000029   14           DEC     A
   \   00002A   F0           MOVX    @DPTR,A
    427                    if ( entry->numClusterIds == 0 )
   \   00002B   6044         JZ      ??bindRemoveClusterIdFromList_0
    428                    {
    429                      break;
    430                    }
    431                  }
   \                     ??bindRemoveClusterIdFromList_3:
   \   00002D   05..         INC     ?V0
   \   00002F   E8           MOV     A,R0
   \   000030   2402         ADD     A,#0x2
   \   000032   F8           MOV     R0,A
   \   000033   5001         JNC     ??bindRemoveClusterIdFromList_1
   \   000035   09           INC     R1
   \                     ??bindRemoveClusterIdFromList_1:
   \   000036   E5..         MOV     A,?V0
   \   000038   C3           CLR     C
   \   000039   95..         SUBB    A,?V1
   \   00003B   5029         JNC     ??bindRemoveClusterIdFromList_4
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F5..         MOV     ?V2,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V3,A
   \   000048   EC           MOV     A,R4
   \   000049   65..         XRL     A,?V2
   \   00004B   7003         JNZ     ??bindRemoveClusterIdFromList_5
   \   00004D   ED           MOV     A,R5
   \   00004E   65..         XRL     A,?V3
   \                     ??bindRemoveClusterIdFromList_5:
   \   000050   60D2         JZ      ??bindRemoveClusterIdFromList_2
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   E5..         MOV     A,?V2
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   E5..         MOV     A,?V3
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   EA           MOV     A,R2
   \   00005E   2402         ADD     A,#0x2
   \   000060   FA           MOV     R2,A
   \   000061   50CA         JNC     ??bindRemoveClusterIdFromList_3
   \   000063   0B           INC     R3
   \   000064   80C7         SJMP    ??bindRemoveClusterIdFromList_3
    432                }
    433              }
    434            }
   \                     ??bindRemoveClusterIdFromList_4:
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6004         JZ      ??bindRemoveClusterIdFromList_0
    435          
    436            if ( entry && (entry->numClusterIds > 0) )
    437            {
    438              return ( TRUE );
   \   00006D   7901         MOV     R1,#0x1
   \   00006F   8002         SJMP    ??bindRemoveClusterIdFromList_6
    439            }
    440            else
    441            {
    442              return ( FALSE );
   \                     ??bindRemoveClusterIdFromList_0:
   \   000071   7900         MOV     R1,#0x0
    443            }
   \                     ??bindRemoveClusterIdFromList_6:
   \   000073   02....       LJMP    ?Subroutine3 & 0xFFFF
    444          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EA           MOV     A,R2
   \   000001   2405         ADD     A,#0x5
   \   000003   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   3B           ADDC    A,R3
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   FE           MOV     R6,A
   \   000006   E9           MOV     A,R1
   \   000007   FF           MOV     R7,A
   \   000008   8E82         MOV     DPL,R6
   \   00000A   8F83         MOV     DPH,R7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F05         MOV     R7,#0x5
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    445          
    446          /*********************************************************************
    447           * @fn      bindAddClusterIdToList()
    448           *
    449           * @brief   Adds a ClusterID to a list of ClusterIDs.
    450           *
    451           * @param   enter - binding table entry
    452           * @param   clusterId  - Cluster ID to Add
    453           *
    454           * @return  TRUE if Added, FALSE if not
    455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    456          byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindAddClusterIdToList:
    457          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    458            if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6019         JZ      ??bindAddClusterIdToList_0
   \   000009   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00000C   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00000F   5011         JNC     ??bindAddClusterIdToList_0
    459            {
    460              // Add the new one
    461              entry->clusterIdList[entry->numClusterIds] = clusterId;
   \   000011   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000014   EC           MOV     A,R4
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   ED           MOV     A,R5
   \   000018   12....       LCALL   ?Subroutine31 & 0xFFFF
    462              entry->numClusterIds++;
   \                     ??CrossCallReturnLabel_57:
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   04           INC     A
   \   00001D   F0           MOVX    @DPTR,A
    463              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??bindAddClusterIdToList_1
    464            }
    465            return ( FALSE );
   \                     ??bindAddClusterIdToList_0:
   \   000022   7900         MOV     R1,#0x0
   \                     ??bindAddClusterIdToList_1:
   \   000024   02....       LJMP    ?Subroutine2 & 0xFFFF
    466          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   22           RET
    467          
    468          /*********************************************************************
    469           * @fn      bindFindExisting
    470           *
    471           * @brief   Finds an existing src/epint to dst/epint bind record
    472           *
    473           * @param   srcAddr - Source address
    474           * @param   srcEpInt - Source Endpoint/Interface
    475           * @param   dstAddr - Destination address
    476           * @param   dstEpInt - Destination Endpoint/Interface
    477           *
    478           * @return  pointer to existing entry or NULL
    479           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          BindingEntry_t *bindFindExisting( byte srcEpInt,
   \                     bindFindExisting:
    481                                            zAddrType_t *dstAddr, byte dstEpInt )
    482          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   8C..         MOV     ?V1,R4
    483            uint16 dstIdx;
    484            bindTableIndex_t x;
    485          
    486            // Find the records in the assoc list
    487            if ( dstAddr->addrMode == AddrGroup )
   \   00000E   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000011   7006         JNZ     ??bindFindExisting_0
    488            {
    489              dstIdx = dstAddr->addr.shortAddr;
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   802F         SJMP    ??bindFindExisting_1
    490            }
    491            else
    492            {
    493              dstIdx = bindingAddrMgsHelperFind( dstAddr );
   \                     ??bindFindExisting_0:
   \   000019   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00001C   700E         JNZ     ??bindFindExisting_2
   \   00001E   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000027   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00002A   8017         SJMP    ??bindFindExisting_3
   \                     ??bindFindExisting_2:
   \   00002C                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00002C   EA           MOV     A,R2
   \   00002D   FC           MOV     R4,A
   \   00002E   EB           MOV     A,R3
   \   00002F   FD           MOV     R5,A
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   AA82         MOV     R2,DPL
   \   000037   AB83         MOV     R3,DPH
   \   000039   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   00003C                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00003C   AA..         MOV     R2,?XSP + 0
   \   00003E   AB..         MOV     R3,?XSP + 1
   \   000040   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
    494            }
   \                     ??bindFindExisting_3:
   \   000043   740B         MOV     A,#0xb
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??bindFindExisting_1:
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FC           MOV     R4,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FD           MOV     R5,A
    495          
    496            if ( dstIdx == INVALID_NODE_ADDR )
   \   00004D   74FE         MOV     A,#-0x2
   \   00004F   6C           XRL     A,R4
   \   000050   7003         JNZ     ??bindFindExisting_4
   \   000052   74FF         MOV     A,#-0x1
   \   000054   6D           XRL     A,R5
   \                     ??bindFindExisting_4:
   \   000055   6077         JZ      ??bindFindExisting_5
    497            {
    498              return ( (BindingEntry_t *)NULL );
    499            }
    500          
    501            // Start at the beginning
    502            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000057   7A00         MOV     R2,#0x0
   \   000059   78..         MOV     R0,#BindingTable & 0xff
   \   00005B   79..         MOV     R1,#(BindingTable >> 8) & 0xff
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FB           MOV     R3,A
   \   000063   801C         SJMP    ??bindFindExisting_6
    503            {
    504              if ( (BindingTable[x].srcEP == srcEpInt) )
    505              {
    506                if ( ((dstAddr->addrMode == AddrGroup)
    507                        && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    508                        && (dstIdx == BindingTable[x].dstIdx))
    509                   || ((dstAddr->addrMode != AddrGroup)
    510                       && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    511                       && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
   \                     ??bindFindExisting_7:
   \   000065   7401         MOV     A,#0x1
   \   000067   6E           XRL     A,R6
   \   000068   700F         JNZ     ??bindFindExisting_8
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   6C           XRL     A,R4
   \   000072   7003         JNZ     ??bindFindExisting_9
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6D           XRL     A,R5
   \                     ??bindFindExisting_9:
   \   000077   6043         JZ      ??bindFindExisting_10
   \                     ??bindFindExisting_8:
   \   000079   0A           INC     R2
   \   00007A   E8           MOV     A,R0
   \   00007B   240E         ADD     A,#0xe
   \   00007D   F8           MOV     R0,A
   \   00007E   5001         JNC     ??bindFindExisting_6
   \   000080   09           INC     R1
   \                     ??bindFindExisting_6:
   \   000081   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000084   E4           CLR     A
   \   000085   93           MOVC    A,@A+DPTR
   \   000086   FE           MOV     R6,A
   \   000087   EA           MOV     A,R2
   \   000088   C3           CLR     C
   \   000089   9E           SUBB    A,R6
   \   00008A   5042         JNC     ??bindFindExisting_5
   \   00008C   8882         MOV     DPL,R0
   \   00008E   8983         MOV     DPH,R1
   \   000090   E0           MOVX    A,@DPTR
   \   000091   65..         XRL     A,?V0
   \   000093   70E4         JNZ     ??bindFindExisting_8
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FE           MOV     R6,A
   \   000098   7401         MOV     A,#0x1
   \   00009A   6B           XRL     A,R3
   \   00009B   60C8         JZ      ??bindFindExisting_7
   \   00009D   EE           MOV     A,R6
   \   00009E   70D9         JNZ     ??bindFindExisting_8
   \   0000A0   8882         MOV     DPL,R0
   \   0000A2   8983         MOV     DPH,R1
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   6C           XRL     A,R4
   \   0000A8   7003         JNZ     ??bindFindExisting_11
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   6D           XRL     A,R5
   \                     ??bindFindExisting_11:
   \   0000AD   70CA         JNZ     ??bindFindExisting_8
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   65..         XRL     A,?V1
   \   0000BA   70BD         JNZ     ??bindFindExisting_8
    512                {
    513                  return ( &BindingTable[x] );
   \                     ??bindFindExisting_10:
   \   0000BC   EA           MOV     A,R2
   \   0000BD   75F00E       MOV     B,#0xe
   \   0000C0   A4           MUL     AB
   \   0000C1   F8           MOV     R0,A
   \   0000C2   A9F0         MOV     R1,B
   \   0000C4   74..         MOV     A,#BindingTable & 0xff
   \   0000C6   28           ADD     A,R0
   \   0000C7   FA           MOV     R2,A
   \   0000C8   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0000CA   39           ADDC    A,R1
   \   0000CB   FB           MOV     R3,A
   \   0000CC   8004         SJMP    ??bindFindExisting_12
    514                }
    515              }
    516            }
    517          
    518            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindExisting_5:
   \   0000CE   7A00         MOV     R2,#0x0
   \   0000D0   7B00         MOV     R3,#0x0
   \                     ??bindFindExisting_12:
   \   0000D2   02....       LJMP    ?Subroutine0 & 0xFFFF
    519          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EA           MOV     A,R2
   \   000001   2408         ADD     A,#0x8
   \   000003   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   6401         XRL     A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   740D         MOV     A,#0xd
   \   000002                REQUIRE ??Subroutine38_0
   \   000002                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0
    520          
    521          /*********************************************************************
    522           * @fn       bindRemoveDev()
    523           *
    524           * @brief
    525           *
    526           *   Remove all bind(s) entries associated to a device address (destination).
    527           *   Updates binding table.
    528           *
    529           * @param   Addr - address of device to be removed from Binding Table
    530           *
    531           * @return  none
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          void bindRemoveDev( zAddrType_t *Addr )
   \                     bindRemoveDev:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
    535            uint16 idx;
    536            bindTableIndex_t x;
    537          
    538            if ( Addr->addrMode == AddrGroup )
   \   000005   EA           MOV     A,R2
   \   000006   2408         ADD     A,#0x8
   \   000008   F5..         MOV     ?V2,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F5..         MOV     ?V3,A
   \   00000E   85..82       MOV     DPL,?V2
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   6401         XRL     A,#0x1
   \   000016   700B         JNZ     ??bindRemoveDev_0
    539            {
    540              idx = Addr->addr.shortAddr;
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FE           MOV     R6,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
   \   000021   800B         SJMP    ??bindRemoveDev_1
    541            }
    542            else
    543            {
    544              idx = bindingAddrMgsHelperFind( Addr );
   \                     ??bindRemoveDev_0:
   \   000023                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000023   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000026   8A..         MOV     ?V0,R2
   \   000028   8B..         MOV     ?V1,R3
   \   00002A   AE..         MOV     R6,?V0
   \   00002C   AF..         MOV     R7,?V1
    545            }
    546          
    547            if ( idx == INVALID_NODE_ADDR )
   \                     ??bindRemoveDev_1:
   \   00002E   74FE         MOV     A,#-0x2
   \   000030   6E           XRL     A,R6
   \   000031   7003         JNZ     ??bindRemoveDev_2
   \   000033   74FF         MOV     A,#-0x1
   \   000035   6F           XRL     A,R7
   \                     ??bindRemoveDev_2:
   \   000036   6074         JZ      ??bindRemoveDev_3
    548            {
    549              return;
    550            }
    551          
    552            // Removes all the entries that match the destination Address/Index
    553            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000038   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00003B   E4           CLR     A
   \   00003C   93           MOVC    A,@A+DPTR
   \   00003D   6066         JZ      ??bindRemoveDev_4
   \   00003F   75....       MOV     ?V0,#(BindingTable + 1) & 0xff
   \   000042   75....       MOV     ?V1,#((BindingTable + 1) >> 8) & 0xff
   \   000045   E4           CLR     A
   \   000046   93           MOVC    A,@A+DPTR
   \   000047   F5..         MOV     ?V4,A
    554            {
    555              if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    556                                                   && (BindingTable[x].dstIdx == idx) ) ||
    557                   ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    558                                                   && (BindingTable[x].dstIdx == idx) ) )
   \                     ??bindRemoveDev_5:
   \   000049   85..82       MOV     DPL,?V0
   \   00004C   85..83       MOV     DPH,?V1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   85..82       MOV     DPL,?V2
   \   000054   85..83       MOV     DPH,?V3
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6401         XRL     A,#0x1
   \   00005A   7017         JNZ     ??bindRemoveDev_6
   \   00005C   7401         MOV     A,#0x1
   \   00005E   68           XRL     A,R0
   \   00005F   7034         JNZ     ??bindRemoveDev_7
   \   000061   85..82       MOV     DPL,?V0
   \   000064   85..83       MOV     DPH,?V1
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   6E           XRL     A,R6
   \   00006A   7003         JNZ     ??bindRemoveDev_8
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   6F           XRL     A,R7
   \                     ??bindRemoveDev_8:
   \   00006F   6015         JZ      ??bindRemoveDev_9
   \   000071   8022         SJMP    ??bindRemoveDev_7
   \                     ??bindRemoveDev_6:
   \   000073   E8           MOV     A,R0
   \   000074   701F         JNZ     ??bindRemoveDev_7
   \   000076   85..82       MOV     DPL,?V0
   \   000079   85..83       MOV     DPH,?V1
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6E           XRL     A,R6
   \   00007F   7003         JNZ     ??bindRemoveDev_10
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   6F           XRL     A,R7
   \                     ??bindRemoveDev_10:
   \   000084   700F         JNZ     ??bindRemoveDev_7
    559              {
    560                bindRemoveEntry( &BindingTable[x] );
   \                     ??bindRemoveDev_9:
   \   000086                ; Setup parameters for call to function osal_memset
   \   000086   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000089   E5..         MOV     A,?V0
   \   00008B   29           ADD     A,R1
   \   00008C   FA           MOV     R2,A
   \   00008D   E5..         MOV     A,?V1
   \   00008F   34FF         ADDC    A,#-0x1
   \   000091   FB           MOV     R3,A
   \   000092   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    561              }
    562            }
   \                     ??bindRemoveDev_7:
   \   000095   E5..         MOV     A,?V0
   \   000097   240E         ADD     A,#0xe
   \   000099   F5..         MOV     ?V0,A
   \   00009B   5002         JNC     ??bindRemoveDev_11
   \   00009D   05..         INC     ?V1
   \                     ??bindRemoveDev_11:
   \   00009F   15..         DEC     ?V4
   \   0000A1   E5..         MOV     A,?V4
   \   0000A3   70A4         JNZ     ??bindRemoveDev_5
    563          
    564            // If this is the last Bind Entry for that idx then clear BINDING
    565            // user from Address Manager
    566            bindAddressClear( idx );
   \                     ??bindRemoveDev_4:
   \   0000A5                ; Setup parameters for call to function bindAddressClear
   \   0000A5   EE           MOV     A,R6
   \   0000A6   FA           MOV     R2,A
   \   0000A7   EF           MOV     A,R7
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    567          }
   \                     ??bindRemoveDev_3:
   \   0000AC   02....       LJMP    ?Subroutine3 & 0xFFFF
    568          
    569          /*********************************************************************
    570           * @fn       bindRemoveSrcDev()
    571           *
    572           * @brief
    573           *
    574           *   Remove binds(s) associated to device address (source).
    575           *   Updates binding table.
    576           *
    577           * @param   srcAddr - address of device
    578           * @param   ep - endpoint to remove, 0xFF is all endpoints
    579           *
    580           * @return  none
    581           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    582          void bindRemoveSrcDev( uint8 ep )
   \                     bindRemoveSrcDev:
    583          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V3,R1
    584            bindTableIndex_t x;
    585          
    586            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00000C   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000F   E4           CLR     A
   \   000010   93           MOVC    A,@A+DPTR
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??bindRemoveSrcDev_0 & 0xFFFF
   \   000016   7E..         MOV     R6,#BindingTable & 0xff
   \   000018   7F..         MOV     R7,#(BindingTable >> 8) & 0xff
   \   00001A   E4           CLR     A
   \   00001B   93           MOVC    A,@A+DPTR
   \   00001C   F5..         MOV     ?V2,A
    587            {
    588              if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
   \                     ??bindRemoveSrcDev_1:
   \   00001E   74FF         MOV     A,#-0x1
   \   000020   65..         XRL     A,?V3
   \   000022   6009         JZ      ??bindRemoveSrcDev_2
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   E0           MOVX    A,@DPTR
   \   000029   65..         XRL     A,?V3
   \   00002B   7079         JNZ     ??bindRemoveSrcDev_3
    589              {
    590                uint16 idx = BindingTable[x].dstIdx;
   \                     ??bindRemoveSrcDev_2:
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V1,A
    591          
    592                bindRemoveEntry( &BindingTable[x] );
   \   00003A                ; Setup parameters for call to function osal_memset
   \   00003A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00003D   EE           MOV     A,R6
   \   00003E   FA           MOV     R2,A
   \   00003F   EF           MOV     A,R7
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    593          
    594                // If this is the last Bind Entry for that idx then clear BINDING
    595                // user from Address Manager
    596                bindAddressClear( idx );
   \   000044   74FE         MOV     A,#-0x2
   \   000046   65..         XRL     A,?V0
   \   000048   7004         JNZ     ??bindRemoveSrcDev_4
   \   00004A   74FF         MOV     A,#-0x1
   \   00004C   65..         XRL     A,?V1
   \                     ??bindRemoveSrcDev_4:
   \   00004E   6056         JZ      ??bindRemoveSrcDev_3
   \   000050   7A00         MOV     R2,#0x0
   \   000052   78..         MOV     R0,#(BindingTable + 1) & 0xff
   \   000054   79..         MOV     R1,#((BindingTable + 1) >> 8) & 0xff
   \   000056   8022         SJMP    ??bindRemoveSrcDev_5
   \                     ??bindRemoveSrcDev_6:
   \   000058   8882         MOV     DPL,R0
   \   00005A   8983         MOV     DPH,R1
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FB           MOV     R3,A
   \   00005E   7401         MOV     A,#0x1
   \   000060   6B           XRL     A,R3
   \   000061   600F         JZ      ??bindRemoveSrcDev_7
   \   000063   EB           MOV     A,R3
   \   000064   700C         JNZ     ??bindRemoveSrcDev_7
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   65..         XRL     A,?V0
   \   00006A   7004         JNZ     ??bindRemoveSrcDev_8
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   65..         XRL     A,?V1
   \                     ??bindRemoveSrcDev_8:
   \   000070   6034         JZ      ??bindRemoveSrcDev_3
   \                     ??bindRemoveSrcDev_7:
   \   000072   0A           INC     R2
   \   000073   E8           MOV     A,R0
   \   000074   240E         ADD     A,#0xe
   \   000076   F8           MOV     R0,A
   \   000077   5001         JNC     ??bindRemoveSrcDev_5
   \   000079   09           INC     R1
   \                     ??bindRemoveSrcDev_5:
   \   00007A   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00007D   E4           CLR     A
   \   00007E   93           MOVC    A,@A+DPTR
   \   00007F   FB           MOV     R3,A
   \   000080   EA           MOV     A,R2
   \   000081   C3           CLR     C
   \   000082   9B           SUBB    A,R3
   \   000083   40D3         JC      ??bindRemoveSrcDev_6
   \   000085   E4           CLR     A
   \   000086   93           MOVC    A,@A+DPTR
   \   000087   6A           XRL     A,R2
   \   000088   701C         JNZ     ??bindRemoveSrcDev_3
   \   00008A   85..82       MOV     DPL,?XSP + 0
   \   00008D   85..83       MOV     DPH,?XSP + 1
   \   000090   7404         MOV     A,#0x4
   \   000092   F0           MOVX    @DPTR,A
   \   000093   740B         MOV     A,#0xb
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E5..         MOV     A,?V0
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   A3           INC     DPTR
   \   00009C   E5..         MOV     A,?V1
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00009F   AA..         MOV     R2,?XSP + 0
   \   0000A1   AB..         MOV     R3,?XSP + 1
   \   0000A3   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
    597              }
    598            }
   \                     ??bindRemoveSrcDev_3:
   \   0000A6   EE           MOV     A,R6
   \   0000A7   240E         ADD     A,#0xe
   \   0000A9   FE           MOV     R6,A
   \   0000AA   5001         JNC     ??bindRemoveSrcDev_9
   \   0000AC   0F           INC     R7
   \                     ??bindRemoveSrcDev_9:
   \   0000AD   15..         DEC     ?V2
   \   0000AF   E5..         MOV     A,?V2
   \   0000B1   6003         JZ      $+5
   \   0000B3   02....       LJMP    ??bindRemoveSrcDev_1 & 0xFFFF
    599          }
   \                     ??bindRemoveSrcDev_0:
   \   0000B6                REQUIRE ?Subroutine4
   \   0000B6                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   740D         MOV     A,#0xd
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F04         MOV     R7,#0x4
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA
    600          
    601          /*********************************************************************
    602           * @fn          bindNumBoundTo
    603           *
    604           * @brief       Calculate the number items this device is bound to.
    605           *              When srcMode is set to TRUE, discard what value devAddr
    606           *              has, it returns number count bound to the local dev.
    607           *
    608           * @param       devAddr - device Address
    609           * @param       devEP - endpoint
    610           * @param       srcMode - TRUE - assume devHandle is a source address
    611           *                        FALSE - destination address
    612           *
    613           * @return      status
    614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    615          byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
   \                     bindNumBoundTo:
    616          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8C..         MOV     ?V2,R4
    617            BindingEntry_t *pBind;
    618            uint16 idx;
    619            byte   num;
    620            bindTableIndex_t x;
    621          
    622            // Init
    623            num = 0;
   \   00000E   75..00       MOV     ?V0,#0x0
    624          
    625            if ( devAddr->addrMode == AddrGroup )
   \   000011   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000014   7006         JNZ     ??bindNumBoundTo_0
    626            {
    627              idx = devAddr->addr.shortAddr;
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   802F         SJMP    ??bindNumBoundTo_1
    628            }
    629            else
    630            {
    631              idx = bindingAddrMgsHelperFind( devAddr );
   \                     ??bindNumBoundTo_0:
   \   00001C   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00001F   700E         JNZ     ??bindNumBoundTo_2
   \   000021   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00002A   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00002D   8017         SJMP    ??bindNumBoundTo_3
   \                     ??bindNumBoundTo_2:
   \   00002F                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00002F   EA           MOV     A,R2
   \   000030   FC           MOV     R4,A
   \   000031   EB           MOV     A,R3
   \   000032   FD           MOV     R5,A
   \   000033   7403         MOV     A,#0x3
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   AA82         MOV     R2,DPL
   \   00003A   AB83         MOV     R3,DPH
   \   00003C   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   00003F                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00003F   AA..         MOV     R2,?XSP + 0
   \   000041   AB..         MOV     R3,?XSP + 1
   \   000043   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
    632            }
   \                     ??bindNumBoundTo_3:
   \   000046   740B         MOV     A,#0xb
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??bindNumBoundTo_1:
   \   00004B   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    633          
    634            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??CrossCallReturnLabel_70:
   \   00004E   7C00         MOV     R4,#0x0
   \   000050   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000053   E4           CLR     A
   \   000054   93           MOVC    A,@A+DPTR
   \   000055   6069         JZ      ??bindNumBoundTo_4
   \   000057   78..         MOV     R0,#BindingTable & 0xff
   \   000059   79..         MOV     R1,#(BindingTable >> 8) & 0xff
    635            {
    636              pBind = &BindingTable[x];
    637              if ( srcMode )
   \                     ??bindNumBoundTo_5:
   \   00005B   E5..         MOV     A,?V2
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   6007         JZ      ??bindNumBoundTo_6
    638              {
    639                if ( pBind->srcEP == devEpInt )
   \   000063   E0           MOVX    A,@DPTR
   \   000064   65..         XRL     A,?V1
   \   000066   7045         JNZ     ??bindNumBoundTo_7
   \   000068   8041         SJMP    ??bindNumBoundTo_8
    640                {
    641                  num++;
    642                }
    643              }
    644              else
    645              {
    646                if ( ((devAddr->addrMode == AddrGroup)
    647                        && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
    648                    || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
    649                                          && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
   \                     ??bindNumBoundTo_6:
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FD           MOV     R5,A
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   E0           MOVX    A,@DPTR
   \   000072   6401         XRL     A,#0x1
   \   000074   7016         JNZ     ??bindNumBoundTo_9
   \   000076   7401         MOV     A,#0x1
   \   000078   6D           XRL     A,R5
   \   000079   7032         JNZ     ??bindNumBoundTo_7
   \   00007B   8882         MOV     DPL,R0
   \   00007D   8983         MOV     DPH,R1
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   6A           XRL     A,R2
   \   000083   7003         JNZ     ??bindNumBoundTo_10
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   6B           XRL     A,R3
   \                     ??bindNumBoundTo_10:
   \   000088   6021         JZ      ??bindNumBoundTo_8
   \   00008A   8021         SJMP    ??bindNumBoundTo_7
   \                     ??bindNumBoundTo_9:
   \   00008C   ED           MOV     A,R5
   \   00008D   701E         JNZ     ??bindNumBoundTo_7
   \   00008F   8882         MOV     DPL,R0
   \   000091   8983         MOV     DPH,R1
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   6A           XRL     A,R2
   \   000097   7003         JNZ     ??bindNumBoundTo_11
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   6B           XRL     A,R3
   \                     ??bindNumBoundTo_11:
   \   00009C   700F         JNZ     ??bindNumBoundTo_7
   \   00009E   8882         MOV     DPL,R0
   \   0000A0   8983         MOV     DPH,R1
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   65..         XRL     A,?V1
   \   0000A9   7002         JNZ     ??bindNumBoundTo_7
    650                {
    651                  num++;
   \                     ??bindNumBoundTo_8:
   \   0000AB   05..         INC     ?V0
    652                }
    653              }
    654            }
   \                     ??bindNumBoundTo_7:
   \   0000AD   0C           INC     R4
   \   0000AE   E8           MOV     A,R0
   \   0000AF   240E         ADD     A,#0xe
   \   0000B1   F8           MOV     R0,A
   \   0000B2   5001         JNC     ??bindNumBoundTo_12
   \   0000B4   09           INC     R1
   \                     ??bindNumBoundTo_12:
   \   0000B5   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000B8   E4           CLR     A
   \   0000B9   93           MOVC    A,@A+DPTR
   \   0000BA   FD           MOV     R5,A
   \   0000BB   EC           MOV     A,R4
   \   0000BC   C3           CLR     C
   \   0000BD   9D           SUBB    A,R5
   \   0000BE   409B         JC      ??bindNumBoundTo_5
    655          
    656            return num;
   \                     ??bindNumBoundTo_4:
   \   0000C0   A9..         MOV     R1,?V0
   \   0000C2   02....       LJMP    ?Subroutine4 & 0xFFFF
    657          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    658          
    659          /*********************************************************************
    660           * @fn          bindNumReflections
    661           *
    662           * @brief       Counts the number of reflections needed for a
    663           *              endpoint and cluster ID combo.
    664           *
    665           * @param       ep - source endpoint
    666           * @param       clusterID - matching clusterID
    667           *
    668           * @return      number of reflections needed.
    669           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    670          uint16 bindNumReflections( uint8 ep, uint16 clusterID )
   \                     bindNumReflections:
    671          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
    672            bindTableIndex_t x;
    673            BindingEntry_t *pBind;
    674            uint16 cnt = 0;
   \   00000B   7E00         MOV     R6,#0x0
   \   00000D   7F00         MOV     R7,#0x0
    675            uint8 bindEP;
    676          
    677            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00000F   75..00       MOV     ?V2,#0x0
   \   000012   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000015   E4           CLR     A
   \   000016   93           MOVC    A,@A+DPTR
   \   000017   6048         JZ      ??bindNumReflections_0
   \   000019   7A..         MOV     R2,#BindingTable & 0xff
   \   00001B   7B..         MOV     R3,#(BindingTable >> 8) & 0xff
    678            {
    679              pBind = &BindingTable[x];
    680              bindEP = pBind->srcEP;
    681          
    682              if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
   \                     ??bindNumReflections_1:
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   65..         XRL     A,?V4
   \   000024   702D         JNZ     ??bindNumReflections_2
   \   000026   75..00       MOV     ?V3,#0x0
   \   000029   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00002C   88..         MOV     ?V0,R0
   \   00002E   89..         MOV     ?V1,R1
   \   000030   8002         SJMP    ??bindNumReflections_3
   \                     ??bindNumReflections_4:
   \   000032   05..         INC     ?V3
   \                     ??bindNumReflections_3:
   \   000034   85..82       MOV     DPL,?V0
   \   000037   85..83       MOV     DPH,?V1
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   E5..         MOV     A,?V3
   \   00003E   C3           CLR     C
   \   00003F   98           SUBB    A,R0
   \   000040   5011         JNC     ??bindNumReflections_2
   \   000042   A8..         MOV     R0,?V3
   \   000044   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000047   7003         JNZ     ??bindNumReflections_5
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6D           XRL     A,R5
   \                     ??bindNumReflections_5:
   \   00004C   70E4         JNZ     ??bindNumReflections_4
    683              {
    684                cnt++;
   \   00004E   0E           INC     R6
   \   00004F   EE           MOV     A,R6
   \   000050   7001         JNZ     ??bindNumReflections_2
   \   000052   0F           INC     R7
    685              }
    686            }
   \                     ??bindNumReflections_2:
   \   000053   05..         INC     ?V2
   \   000055   EA           MOV     A,R2
   \   000056   240E         ADD     A,#0xe
   \   000058   FA           MOV     R2,A
   \   000059   5001         JNC     ??bindNumReflections_6
   \   00005B   0B           INC     R3
   \                     ??bindNumReflections_6:
   \   00005C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00005F   40BC         JC      ??bindNumReflections_1
    687          
    688            return ( cnt );
   \                     ??bindNumReflections_0:
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065                REQUIRE ?Subroutine3
   \   000065                ; // Fall through to label ?Subroutine3
    689          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   F8           MOV     R0,A
   \   000006   E5..         MOV     A,?V2
   \   000008   C3           CLR     C
   \   000009   98           SUBB    A,R0
   \   00000A   22           RET
    690          
    691          /*********************************************************************
    692           * @fn          bindFind
    693           *
    694           * @brief       Finds the binding entry for the source address, endpoint
    695           *              and cluster ID passed in as a parameter.
    696           *
    697           * @param       ep - source endpoint
    698           * @param       clusterID - matching clusterID
    699           * @param       skip - number of matches to skip before returning
    700           *
    701           * @return      pointer to the binding table entry, NULL if not found
    702           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    703          BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
   \                     bindFind:
    704          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V4,R4
    705            BindingEntry_t *pBind;
    706            byte skipped = 0;
   \   00000D   75..00       MOV     ?V1,#0x0
    707            bindTableIndex_t x;
    708          
    709            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000010   75..00       MOV     ?V0,#0x0
   \   000013   7A..         MOV     R2,#BindingTable & 0xff
   \   000015   7B..         MOV     R3,#(BindingTable >> 8) & 0xff
   \   000017   802E         SJMP    ??bindFind_0
    710            {
    711              pBind = &BindingTable[x];
    712          
    713              if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
   \                     ??bindFind_1:
   \   000019   05..         INC     ?V2
   \                     ??bindFind_2:
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   E5..         MOV     A,?V2
   \   000023   C3           CLR     C
   \   000024   98           SUBB    A,R0
   \   000025   5017         JNC     ??bindFind_3
   \   000027   A8..         MOV     R0,?V2
   \   000029   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6E           XRL     A,R6
   \   00002E   7003         JNZ     ??bindFind_4
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6F           XRL     A,R7
   \                     ??bindFind_4:
   \   000033   70E4         JNZ     ??bindFind_1
    714              {
    715                if ( skipped < skipping )
   \   000035   E5..         MOV     A,?V1
   \   000037   C3           CLR     C
   \   000038   95..         SUBB    A,?V4
   \   00003A   5030         JNC     ??bindFind_5
    716                {
    717                  skipped++;
   \   00003C   05..         INC     ?V1
    718                }
    719                else
    720                {
    721                  return ( pBind );
    722                }
    723              }
   \                     ??bindFind_3:
   \   00003E   05..         INC     ?V0
   \   000040   EA           MOV     A,R2
   \   000041   240E         ADD     A,#0xe
   \   000043   FA           MOV     R2,A
   \   000044   5001         JNC     ??bindFind_0
   \   000046   0B           INC     R3
   \                     ??bindFind_0:
   \   000047   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00004A   E4           CLR     A
   \   00004B   93           MOVC    A,@A+DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   E5..         MOV     A,?V0
   \   00004F   C3           CLR     C
   \   000050   98           SUBB    A,R0
   \   000051   5015         JNC     ??bindFind_6
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   E0           MOVX    A,@DPTR
   \   000058   65..         XRL     A,?V3
   \   00005A   70E2         JNZ     ??bindFind_3
   \   00005C   75..00       MOV     ?V2,#0x0
   \   00005F   12....       LCALL   ?Subroutine28 & 0xFFFF
    724            }
   \                     ??CrossCallReturnLabel_49:
   \   000062   E8           MOV     A,R0
   \   000063   FC           MOV     R4,A
   \   000064   E9           MOV     A,R1
   \   000065   FD           MOV     R5,A
   \   000066   80B3         SJMP    ??bindFind_2
    725          
    726            return ( (BindingEntry_t *)NULL );
   \                     ??bindFind_6:
   \   000068   7A00         MOV     R2,#0x0
   \   00006A   7B00         MOV     R3,#0x0
   \                     ??bindFind_5:
   \   00006C   02....       LJMP    ?Subroutine3 & 0xFFFF
    727          }
    728          
    729          /*********************************************************************
    730           * @fn      bindAddressClear
    731           *
    732           * @brief   Lookup a binding entry by specific Idx, if none is found
    733           *          clears the BINDING user from Address Manager.
    734           *
    735           * @param   dstIdx - Source Address Manager Index
    736           *
    737           * @return  none
    738           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    739          void bindAddressClear( uint16 dstIdx )
   \                     bindAddressClear:
    740          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    741            bindTableIndex_t i;
    742          
    743            if ( dstIdx != INVALID_NODE_ADDR )
   \   000009   74FE         MOV     A,#-0x2
   \   00000B   6A           XRL     A,R2
   \   00000C   7003         JNZ     ??bindAddressClear_0
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   6B           XRL     A,R3
   \                     ??bindAddressClear_0:
   \   000011   604C         JZ      ??bindAddressClear_1
    744            {
    745              // Looks for a specific Idx
    746              for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
   \   000013   7C00         MOV     R4,#0x0
   \   000015   78..         MOV     R0,#(BindingTable + 1) & 0xff
   \   000017   79..         MOV     R1,#((BindingTable + 1) >> 8) & 0xff
   \   000019   8020         SJMP    ??bindAddressClear_2
    747              {
    748                if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
    749                     ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
    750                     ( BindingTable[i].dstIdx == dstIdx ) )
   \                     ??bindAddressClear_3:
   \   00001B   8882         MOV     DPL,R0
   \   00001D   8983         MOV     DPH,R1
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FD           MOV     R5,A
   \   000021   7401         MOV     A,#0x1
   \   000023   6D           XRL     A,R5
   \   000024   600D         JZ      ??bindAddressClear_4
   \   000026   ED           MOV     A,R5
   \   000027   700A         JNZ     ??bindAddressClear_4
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6A           XRL     A,R2
   \   00002C   7003         JNZ     ??bindAddressClear_5
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6B           XRL     A,R3
   \                     ??bindAddressClear_5:
   \   000031   602C         JZ      ??bindAddressClear_1
    751                {
    752                  break;  // found at least one
    753                }
    754              }
   \                     ??bindAddressClear_4:
   \   000033   0C           INC     R4
   \   000034   E8           MOV     A,R0
   \   000035   240E         ADD     A,#0xe
   \   000037   F8           MOV     R0,A
   \   000038   5001         JNC     ??bindAddressClear_2
   \   00003A   09           INC     R1
   \                     ??bindAddressClear_2:
   \   00003B   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00003E   E4           CLR     A
   \   00003F   93           MOVC    A,@A+DPTR
   \   000040   FD           MOV     R5,A
   \   000041   EC           MOV     A,R4
   \   000042   C3           CLR     C
   \   000043   9D           SUBB    A,R5
   \   000044   40D5         JC      ??bindAddressClear_3
    755          
    756              if ( i == gNWK_MAX_BINDING_ENTRIES )
   \   000046   E4           CLR     A
   \   000047   93           MOVC    A,@A+DPTR
   \   000048   6C           XRL     A,R4
   \   000049   7014         JNZ     ??bindAddressClear_1
    757              {
    758                // No binding entry is associated with dstIdx.
    759                // Remove user binding bit from the address manager entry corresponding to dstIdx.
    760                AddrMgrEntry_t addrEntry;
    761          
    762                addrEntry.user = ADDRMGR_USER_BINDING;
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   7404         MOV     A,#0x4
   \   000053   F0           MOVX    @DPTR,A
    763                addrEntry.index = dstIdx;
   \   000054   740B         MOV     A,#0xb
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   12....       LCALL   ?Subroutine17 & 0xFFFF
    764          
    765                AddrMgrEntryRelease( &addrEntry );
    766              }
    767            }
   \                     ??CrossCallReturnLabel_26:
   \   00005C   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
    768          }
   \                     ??bindAddressClear_1:
   \   00005F   80..         SJMP    ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   740D         MOV     A,#0xd
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine37_0
   \   000005                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000005                ; Setup parameters for call to function AddrMgrEntryGet
   \   000005                ; Setup parameters for call to function AddrMgrEntryGet
   \   000005   AA..         MOV     R2,?XSP + 0
   \   000007   AB..         MOV     R3,?XSP + 1
   \   000009   22           RET
    769          
    770          /*********************************************************************
    771           * @fn          BindInitNV
    772           *
    773           * @brief       Initialize the Binding NV Item
    774           *
    775           * @param       none
    776           *
    777           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    778           *              exist in NV, NV_OPER_FAILED if failure.
    779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    780          byte BindInitNV( void )
   \                     BindInitNV:
    781          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    782            byte ret;
    783          
    784            // Initialize the device list
    785            ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
    786                            (uint16)( sizeof( nvBindingHdr_t ) + NV_BIND_ITEM_SIZE ), NULL );
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   F5..         MOV     ?V1,A
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000017   FC           MOV     R4,A
   \   000018   E4           CLR     A
   \   000019   39           ADDC    A,R1
   \   00001A   FD           MOV     R5,A
   \   00001B   7A41         MOV     R2,#0x41
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?DEALLOC_XSTACK8
   \   000027   E9           MOV     A,R1
   \   000028   FE           MOV     R6,A
    787          
    788            if ( ret != ZSUCCESS )
   \   000029   6021         JZ      ??BindInitNV_0
    789            {
    790              BindSetDefaultNV();
   \   00002B   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..02       MOV     ?V0,#0x2
   \   000034   75..00       MOV     ?V1,#0x0
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV     R4,#0x0
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7A41         MOV     R2,#0x41
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000047   7404         MOV     A,#0x4
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
    791            }
    792          
    793            return ( ret );
   \                     ??BindInitNV_0:
   \   00004C   EE           MOV     A,R6
   \   00004D   F9           MOV     R1,A
   \   00004E                REQUIRE ?Subroutine6
   \   00004E                ; // Fall through to label ?Subroutine6
    794          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV     A,#0x2
   \   000002   80..         SJMP    ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   F8           MOV     R0,A
   \   000006   7401         MOV     A,#0x1
   \   000008   93           MOVC    A,@A+DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000D   E4           CLR     A
   \   00000E   93           MOVC    A,@A+DPTR
   \   00000F   F5..         MOV     ?V0,A
   \   000011   E8           MOV     A,R0
   \   000012   85..F0       MOV     B,?V0
   \   000015   A4           MUL     AB
   \   000016   F8           MOV     R0,A
   \   000017   AAF0         MOV     R2,B
   \   000019   85..F0       MOV     B,?V0
   \   00001C   E9           MOV     A,R1
   \   00001D   A4           MUL     AB
   \   00001E   2A           ADD     A,R2
   \   00001F   F9           MOV     R1,A
   \   000020   E8           MOV     A,R0
   \   000021   2402         ADD     A,#0x2
   \   000023   22           RET
    795          
    796          /*********************************************************************
    797           * @fn          BindSetDefaultNV
    798           *
    799           * @brief       Write the defaults to NV
    800           *
    801           * @param       none
    802           *
    803           * @return      none
    804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    805          void BindSetDefaultNV( void )
   \                     BindSetDefaultNV:
    806          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    807            nvBindingHdr_t hdr;
    808          
    809            // Initialize the header
    810            hdr.numRecs = 0;
   \   00000A   12....       LCALL   ?Subroutine18 & 0xFFFF
    811          
    812            // Save off the header
    813            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
   \                     ??CrossCallReturnLabel_30:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..02       MOV     ?V0,#0x2
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A41         MOV     R2,#0x41
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
    814          }
   \   00002B   80..         SJMP    ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   F0           MOVX    @DPTR,A
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   A8..         MOV     R0,?XSP + 0
   \   00000C   A9..         MOV     R1,?XSP + 1
   \   00000E   88..         MOV     ?V0,R0
   \   000010   89..         MOV     ?V1,R1
   \   000012   78..         MOV     R0,#?V0
   \   000014   22           RET
    815          
    816          /*********************************************************************
    817           * @fn          BindCopyBackupToNewNV
    818           *
    819           * @brief       Creates the New NV item, copies the backup data into
    820           *              the New NV ID, and Deletes the duplicate NV item.
    821           *
    822           * @param       dupLen - NV item length of the old Binding table.
    823           * @param       newLen - NV item length of the new Binding table to be created.
    824           *
    825           * @return      ZSuccess - All the actions were successful.
    826           *              ZFailure - Any of the actions failed.
    827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen )
   \                     BindCopyBackupToNewNV:
    829          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
    830            uint16 bindLen;
    831            uint8 status = ZSuccess;
   \   000012   75..00       MOV     ?V2,#0x0
    832          
    833            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000015                ; Setup parameters for call to function osal_nv_item_len
   \   000015   7A41         MOV     R2,#0x41
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00001C   8A..         MOV     ?V4,R2
   \   00001E   8B..         MOV     ?V5,R3
   \   000020   AC..         MOV     R4,?V4
   \   000022   AD..         MOV     R5,?V5
    834          
    835          
    836            if ( ( bindLen > 0 ) && ( bindLen != newLen ) )
   \   000024   EC           MOV     A,R4
   \   000025   4D           ORL     A,R5
   \   000026   6011         JZ      ??BindCopyBackupToNewNV_0
   \   000028   E5..         MOV     A,?V0
   \   00002A   6C           XRL     A,R4
   \   00002B   7003         JNZ     ??BindCopyBackupToNewNV_1
   \   00002D   E5..         MOV     A,?V1
   \   00002F   6D           XRL     A,R5
   \                     ??BindCopyBackupToNewNV_1:
   \   000030   6007         JZ      ??BindCopyBackupToNewNV_0
    837            {
    838              // The existing item does not match the New length
    839              osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen );
   \   000032                ; Setup parameters for call to function osal_nv_delete
   \   000032   7A41         MOV     R2,#0x41
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
    840            }
    841          
    842            // Create Binding Table NV item with the NEW legth
    843            if ( osal_nv_item_init( ZCD_NV_BINDING_TABLE, newLen, NULL ) != NV_OPER_FAILED )
   \                     ??BindCopyBackupToNewNV_0:
   \   000039                ; Setup parameters for call to function osal_nv_item_init
   \   000039   E4           CLR     A
   \   00003A   F5..         MOV     ?V4,A
   \   00003C   F5..         MOV     ?V5,A
   \   00003E   78..         MOV     R0,#?V4
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   AC..         MOV     R4,?V0
   \   000045   AD..         MOV     R5,?V1
   \   000047   7A41         MOV     R2,#0x41
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   \   000053   E9           MOV     A,R1
   \   000054   640A         XRL     A,#0xa
   \   000056   7003         JNZ     $+5
   \   000058   02....       LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
    844            {
    845              nvBindingHdr_t hdrBackup;
    846          
    847              // Copy ONLY the valid records from the duplicate NV table into the new table
    848              // at the end of this process the table content will be compacted
    849              if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdrBackup ) == ZSuccess )
   \   00005B                ; Setup parameters for call to function osal_nv_read
   \   00005B   7402         MOV     A,#0x2
   \   00005D   12....       LCALL   ?XSTACK_DISP100_8
   \   000060   88..         MOV     ?V0,R0
   \   000062   89..         MOV     ?V1,R1
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   75..02       MOV     ?V0,#0x2
   \   00006C   75..00       MOV     ?V1,#0x0
   \   00006F   78..         MOV     R0,#?V0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   7C00         MOV     R4,#0x0
   \   000076   7D00         MOV     R5,#0x0
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7B03         MOV     R3,#0x3
   \   00007C   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007F   7404         MOV     A,#0x4
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   \   000084   E9           MOV     A,R1
   \   000085   6003         JZ      $+5
   \   000087   02....       LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
    850              {
    851                bindTableIndex_t i;
    852                uint16 validBackupRecs = 0;
   \   00008A   85..82       MOV     DPL,?XSP + 0
   \   00008D   85..83       MOV     DPH,?XSP + 1
   \   000090   E4           CLR     A
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   F0           MOVX    @DPTR,A
    853                BindingEntry_t backupRec;
    854          
    855                // Read in the device list. This loop will stop when:
    856                // The total number of valid records has been reached either because:
    857                //          The new table is full of valid records OR
    858                //          The old table has less valid records than the size of the table
    859                for ( i = 0; ( validBackupRecs < gNWK_MAX_BINDING_ENTRIES ) && ( validBackupRecs < hdrBackup.numRecs ); i++ )
   \   000094   75..00       MOV     ?V3,#0x0
   \   000097   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00009A   93           MOVC    A,@A+DPTR
   \   00009B   F5..         MOV     ?V0,A
   \   00009D   807E         SJMP    ??BindCopyBackupToNewNV_3
    860                {
    861                  if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE,
    862                                    (uint16)(sizeof(nvBindingHdr_t) + (i * NV_BIND_REC_SIZE)),
    863                                    NV_BIND_REC_SIZE, &backupRec ) == ZSuccess )
   \                     ??BindCopyBackupToNewNV_4:
   \   00009F                ; Setup parameters for call to function osal_nv_read
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?XSTACK_DISP100_8
   \   0000A4   88..         MOV     ?V4,R0
   \   0000A6   89..         MOV     ?V5,R1
   \   0000A8   78..         MOV     R0,#?V4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   0000B0   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   0000B3   A8..         MOV     R0,?V3
   \   0000B5   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000B8   F9           MOV     R1,A
   \   0000B9   E8           MOV     A,R0
   \   0000BA   2402         ADD     A,#0x2
   \   0000BC   FC           MOV     R4,A
   \   0000BD   E4           CLR     A
   \   0000BE   39           ADDC    A,R1
   \   0000BF   FD           MOV     R5,A
   \   0000C0   7A00         MOV     R2,#0x0
   \   0000C2   7B03         MOV     R3,#0x3
   \   0000C4   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000C7   7404         MOV     A,#0x4
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CC   E9           MOV     A,R1
   \   0000CD   6003         JZ      $+5
   \   0000CF   02....       LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
    864                  {
    865                    if ( backupRec.srcEP != NV_BIND_EMPTY )
   \   0000D2   7404         MOV     A,#0x4
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F4           CPL     A
   \   0000D9   6040         JZ      ??CrossCallReturnLabel_41
    866                    {
    867                      // Save the valid record into the NEW NV table.
    868                      if ( osal_nv_write( ZCD_NV_BINDING_TABLE,
    869                                          (uint16)((sizeof(nvBindingHdr_t)) + (validBackupRecs * NV_BIND_REC_SIZE)),
    870                                          NV_BIND_REC_SIZE, &backupRec ) != ZSuccess )
   \   0000DB                ; Setup parameters for call to function osal_nv_write
   \   0000DB   7404         MOV     A,#0x4
   \   0000DD   12....       LCALL   ?XSTACK_DISP100_8
   \   0000E0   88..         MOV     ?V4,R0
   \   0000E2   89..         MOV     ?V5,R1
   \   0000E4   78..         MOV     R0,#?V4
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E9   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   0000EC   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   0000EF   7404         MOV     A,#0x4
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000F7   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000FA   FA           MOV     R2,A
   \   0000FB   85..F0       MOV     B,?V4
   \   0000FE   E9           MOV     A,R1
   \   0000FF   A4           MUL     AB
   \   000100   2A           ADD     A,R2
   \   000101   F9           MOV     R1,A
   \   000102   E8           MOV     A,R0
   \   000103   2402         ADD     A,#0x2
   \   000105   FC           MOV     R4,A
   \   000106   E4           CLR     A
   \   000107   39           ADDC    A,R1
   \   000108   FD           MOV     R5,A
   \   000109   7A41         MOV     R2,#0x41
   \   00010B   7B00         MOV     R3,#0x0
   \   00010D   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000110   7404         MOV     A,#0x4
   \   000112   12....       LCALL   ?DEALLOC_XSTACK8
   \   000115   E9           MOV     A,R1
   \   000116   706F         JNZ     ??BindCopyBackupToNewNV_2
    871                      {
    872                         status = ZFailure;
    873                         break; // Terminate the loop as soon as a problem with NV is detected
    874                      }
    875          
    876                      validBackupRecs++;
   \   000118   12....       LCALL   ?Subroutine25 & 0xFFFF
    877                    }
    878                  }
    879                  else
    880                  {
    881                     status = ZFailure;
    882                     break; // Terminate the loop as soon as a problem with NV is detected
    883                  }
    884                }
   \                     ??CrossCallReturnLabel_41:
   \   00011B   05..         INC     ?V3
   \                     ??BindCopyBackupToNewNV_3:
   \   00011D   85..82       MOV     DPL,?XSP + 0
   \   000120   85..83       MOV     DPH,?XSP + 1
   \   000123   C3           CLR     C
   \   000124   E0           MOVX    A,@DPTR
   \   000125   95..         SUBB    A,?V0
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   9400         SUBB    A,#0x0
   \   00012B   5021         JNC     ??BindCopyBackupToNewNV_5
   \   00012D   85..82       MOV     DPL,?XSP + 0
   \   000130   85..83       MOV     DPH,?XSP + 1
   \   000133   C082         PUSH    DPL
   \   000135   C083         PUSH    DPH
   \   000137   7402         MOV     A,#0x2
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00013F   D083         POP     DPH
   \   000141   D082         POP     DPL
   \   000143   C3           CLR     C
   \   000144   E0           MOVX    A,@DPTR
   \   000145   98           SUBB    A,R0
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   99           SUBB    A,R1
   \   000149   5003         JNC     $+5
   \   00014B   02....       LJMP    ??BindCopyBackupToNewNV_4 & 0xFFFF
    885          
    886                // Only save the header and delete the duplicate element if the previous
    887                // process was successful
    888                if ( status == ZSuccess )
    889                {
    890                  // Save off the header
    891                  if ( osal_nv_write( ZCD_NV_BINDING_TABLE, 0,
    892                                      sizeof(nvBindingHdr_t), &validBackupRecs ) == ZSuccess )
   \                     ??BindCopyBackupToNewNV_5:
   \   00014E                ; Setup parameters for call to function osal_nv_write
   \   00014E   A8..         MOV     R0,?XSP + 0
   \   000150   A9..         MOV     R1,?XSP + 1
   \   000152   88..         MOV     ?V0,R0
   \   000154   89..         MOV     ?V1,R1
   \   000156   78..         MOV     R0,#?V0
   \   000158   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015B   75..02       MOV     ?V0,#0x2
   \   00015E   75..00       MOV     ?V1,#0x0
   \   000161   78..         MOV     R0,#?V0
   \   000163   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000166   7C00         MOV     R4,#0x0
   \   000168   7D00         MOV     R5,#0x0
   \   00016A   7A41         MOV     R2,#0x41
   \   00016C   7B00         MOV     R3,#0x0
   \   00016E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000171   7404         MOV     A,#0x4
   \   000173   12....       LCALL   ?DEALLOC_XSTACK8
   \   000176   E9           MOV     A,R1
   \   000177   700E         JNZ     ??BindCopyBackupToNewNV_2
    893                  {
    894                    // Delete the duplicate NV Item, once the data has been stored in the NEW table
    895                    if ( osal_nv_delete( ZCD_NV_DUPLICATE_BINDING_TABLE, dupLen ) != ZSuccess )
   \   000179                ; Setup parameters for call to function osal_nv_delete
   \   000179   EE           MOV     A,R6
   \   00017A   FC           MOV     R4,A
   \   00017B   EF           MOV     A,R7
   \   00017C   FD           MOV     R5,A
   \   00017D   7A00         MOV     R2,#0x0
   \   00017F   7B03         MOV     R3,#0x3
   \   000181   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   000184   E9           MOV     A,R1
   \   000185   6003         JZ      ??BindCopyBackupToNewNV_6
    896                    {
    897                      status = ZFailure;
    898                    }
    899                  }
    900                  else
    901                  {
    902                    status = ZFailure;
    903                  }
    904                }
    905              }
    906              else
    907              {
    908                status = ZFailure;
    909              }
    910            }
    911            else
    912            {
    913              status = ZFailure;
   \                     ??BindCopyBackupToNewNV_2:
   \   000187   75..01       MOV     ?V2,#0x1
    914            }
    915          
    916            return ( status );
   \                     ??BindCopyBackupToNewNV_6:
   \   00018A   A9..         MOV     R1,?V2
   \   00018C   7412         MOV     A,#0x12
   \   00018E   02....       LJMP    ??Subroutine40_0 & 0xFFFF
    917          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   F5..         MOV     ?V4,A
   \   000007   7401         MOV     A,#0x1
   \   000009   93           MOVC    A,@A+DPTR
   \   00000A   F5..         MOV     ?V5,A
   \   00000C   E8           MOV     A,R0
   \   00000D   85..F0       MOV     B,?V4
   \   000010   A4           MUL     AB
   \   000011   C8           XCH     A,R0
   \   000012   AAF0         MOV     R2,B
   \   000014   85..F0       MOV     B,?V5
   \   000017   A4           MUL     AB
   \   000018   2A           ADD     A,R2
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F06         MOV     R7,#0x6
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2401         ADD     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   22           RET
    918          
    919          /*********************************************************************
    920           * @fn          BindUpgradeTableInNV
    921           *
    922           * @brief       Verifies if the existing table in NV has different size
    923           *              than the table defined by parameters in the current code.
    924           *              If different, creates a backup table, deletes the existing
    925           *              table and creates the new table with the new size. After
    926           *              this process is done ZCD_NV_BINDING_TABLE NV item contains
    927           *              only valid records retrieved from the original table, up to
    928           *              the maximum number of records defined by gNWK_MAX_BINDING_ENTRIES
    929           *
    930           * @param       none
    931           *
    932           * @return      ZSuccess - the Update process was sucessful.
    933           *              ZFailure - otherwise.
    934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    935          static uint8 BindUpgradeTableInNV( void )
   \                     BindUpgradeTableInNV:
    936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    937            nvBindingHdr_t hdr;
    938            uint16 dupLen;
    939            uint16 bindLen;
    940            uint16 newLen;
    941            uint8 status = ZSuccess;
   \   00000A   75..00       MOV     ?V2,#0x0
    942            bool duplicateReady = FALSE;
    943          
    944            // Size of the Binding table based on current paramenters in the code
    945            newLen = sizeof(nvBindingHdr_t) + NV_BIND_ITEM_SIZE;
   \   00000D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000010   F5..         MOV     ?V0,A
   \   000012   E4           CLR     A
   \   000013   39           ADDC    A,R1
   \   000014   F5..         MOV     ?V1,A
    946          
    947            // Size of the Binding table NV item, this is the whole size of the item,
    948            // it could inculde invalid records also
    949            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000016                ; Setup parameters for call to function osal_nv_item_len
   \   000016   7A41         MOV     R2,#0x41
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00001D   8A..         MOV     ?V4,R2
   \   00001F   8B..         MOV     ?V5,R3
   \   000021   AE..         MOV     R6,?V4
   \   000023   AF..         MOV     R7,?V5
    950          
    951            // Get the number of valid records from the Binding table
    952            osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   A8..         MOV     R0,?XSP + 0
   \   000027   A9..         MOV     R1,?XSP + 1
   \   000029   88..         MOV     ?V4,R0
   \   00002B   89..         MOV     ?V5,R1
   \   00002D   78..         MOV     R0,#?V4
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   75..02       MOV     ?V4,#0x2
   \   000035   75..00       MOV     ?V5,#0x0
   \   000038   78..         MOV     R0,#?V4
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV     R4,#0x0
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A41         MOV     R2,#0x41
   \   000043   7B00         MOV     R3,#0x0
   \   000045   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000048   7404         MOV     A,#0x4
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
    953          
    954            // Identify if there is a duplicate NV item, if it is there, that means an
    955            // Upgrade process did not finish properly last time
    956            // The length function will return 0 if the Backup NV ID does not exist.
    957            dupLen = osal_nv_item_len( ZCD_NV_DUPLICATE_BINDING_TABLE );
   \   00004D                ; Setup parameters for call to function osal_nv_item_len
   \   00004D   7A00         MOV     R2,#0x0
   \   00004F   7B03         MOV     R3,#0x3
   \   000051   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000054   8A..         MOV     ?V4,R2
   \   000056   8B..         MOV     ?V5,R3
   \   000058   A8..         MOV     R0,?V4
   \   00005A   A9..         MOV     R1,?V5
    958          
    959            // A duplicate of the original Binding item will be done if:
    960            // 1) A duplicate NV item DOES NOT exist AND the size of the original Binding
    961            //    item in NV is different (larger/smaller) than the the length calculated
    962            //    from the parameters in the code. If they are the same there is no need
    963            //    to do the Upgrade process.
    964            // 2) A duplicate NV item exists (probably because the previous upgrade
    965            //    process was interrupted) and [the original Binding NV items exists AND
    966            //    has valid recods (it is important to make sure that valid records exist
    967            //    in the binding table because it is possible that the item was created
    968            //    but the data was not copied in the previous upgrade process).
    969            if ( ( ( dupLen == 0 ) && ( bindLen != newLen ) ) ||
    970                 ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs > 0 ) ) )
   \   00005C   E8           MOV     A,R0
   \   00005D   49           ORL     A,R1
   \   00005E   700C         JNZ     ??BindUpgradeTableInNV_0
   \   000060   E5..         MOV     A,?V0
   \   000062   6E           XRL     A,R6
   \   000063   7003         JNZ     ??BindUpgradeTableInNV_1
   \   000065   E5..         MOV     A,?V1
   \   000067   6F           XRL     A,R7
   \                     ??BindUpgradeTableInNV_1:
   \   000068   700D         JNZ     ??BindUpgradeTableInNV_2
   \   00006A   8041         SJMP    ??BindUpgradeTableInNV_3
   \                     ??BindUpgradeTableInNV_0:
   \   00006C   EE           MOV     A,R6
   \   00006D   4F           ORL     A,R7
   \   00006E   602B         JZ      ??BindUpgradeTableInNV_4
   \   000070   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000073   EA           MOV     A,R2
   \   000074   4B           ORL     A,R3
   \   000075   6024         JZ      ??BindUpgradeTableInNV_4
    971            {
    972              // Create a copy from original NV item into a duplicate NV item
    973              if ( ( status = nwkCreateDuplicateNV( ZCD_NV_BINDING_TABLE,
    974                                                    ZCD_NV_DUPLICATE_BINDING_TABLE ) ) == ZSuccess )
   \                     ??BindUpgradeTableInNV_2:
   \   000077                ; Setup parameters for call to function nwkCreateDuplicateNV
   \   000077   7C00         MOV     R4,#0x0
   \   000079   7D03         MOV     R5,#0x3
   \   00007B   7A41         MOV     R2,#0x41
   \   00007D   7B00         MOV     R3,#0x0
   \   00007F   12....       LCALL   `??nwkCreateDuplicateNV::?relay`; Banked call to: nwkCreateDuplicateNV
   \   000082   E9           MOV     A,R1
   \   000083   F8           MOV     R0,A
   \   000084   88..         MOV     ?V2,R0
   \   000086   7025         JNZ     ??BindUpgradeTableInNV_3
    975              {
    976                // Delete the original NV item once the duplicate is ready
    977                if ( osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen ) != ZSuccess )
   \   000088                ; Setup parameters for call to function osal_nv_delete
   \   000088   EE           MOV     A,R6
   \   000089   FC           MOV     R4,A
   \   00008A   EF           MOV     A,R7
   \   00008B   FD           MOV     R5,A
   \   00008C   7A41         MOV     R2,#0x41
   \   00008E   7B00         MOV     R3,#0x0
   \   000090   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   000093   E9           MOV     A,R1
   \   000094   6009         JZ      ??BindUpgradeTableInNV_5
    978                {
    979                  status = ZFailure;
   \   000096   75..01       MOV     ?V2,#0x1
   \   000099   8012         SJMP    ??BindUpgradeTableInNV_3
    980                }
    981                else
    982                {
    983                  duplicateReady = TRUE;
    984                }
    985              }
    986            }
    987            else if ( ( ( dupLen > 0 ) && ( bindLen == 0 ) ) ||
    988                      ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs == 0 ) ) )
    989            {
    990              // If for some reason a duplicate NV item was left in the system from a
    991              // previous upgrade process and:
    992              // 1) The original Binding NV item DOES NOT exist OR
    993              // 2) The original Binding NV item exist, but has no valid records.
    994              // it is necessary to rely in the data in the Duplicate item to create
    995              // the Binding table
    996              bindLen = dupLen;
   \                     ??BindUpgradeTableInNV_4:
   \   00009B   E8           MOV     A,R0
   \   00009C   FE           MOV     R6,A
   \   00009D   E9           MOV     A,R1
   \   00009E   FF           MOV     R7,A
    997          
    998              duplicateReady = TRUE;
    999            }
   1000          
   1001            if ( duplicateReady == TRUE )
   1002            {
   1003              // Creates the New Binding table, Copy data from backup and Delete backup NV ID
   1004              status = BindCopyBackupToNewNV( bindLen, newLen );
   \                     ??BindUpgradeTableInNV_5:
   \   00009F                ; Setup parameters for call to function BindCopyBackupToNewNV
   \   00009F   AC..         MOV     R4,?V0
   \   0000A1   AD..         MOV     R5,?V1
   \   0000A3   EE           MOV     A,R6
   \   0000A4   FA           MOV     R2,A
   \   0000A5   EF           MOV     A,R7
   \   0000A6   FB           MOV     R3,A
   \   0000A7   12....       LCALL   `??BindCopyBackupToNewNV::?relay`; Banked call to: BindCopyBackupToNewNV
   \   0000AA   E9           MOV     A,R1
   \   0000AB   F5..         MOV     ?V2,A
   1005            }
   1006          
   1007            return ( status );
   \                     ??BindUpgradeTableInNV_3:
   \   0000AD   A9..         MOV     R1,?V2
   \   0000AF                REQUIRE ?Subroutine5
   \   0000AF                ; // Fall through to label ?Subroutine5
   1008          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine41_0
   \   000006                ; // Fall through to label ??Subroutine41_0
   1009          
   1010          /*********************************************************************
   1011           * @fn          BindRestoreFromNV
   1012           *
   1013           * @brief       Restore the binding table from NV
   1014           *
   1015           * @param       none
   1016           *
   1017           * @return      Number of entries restored
   1018           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1019          uint16 BindRestoreFromNV( void )
   \                     BindRestoreFromNV:
   1020          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1021            nvBindingHdr_t hdr;
   1022          
   1023            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
   1024          
   1025            if ( BindUpgradeTableInNV() == ZSuccess )
   \   000014                ; Setup parameters for call to function BindUpgradeTableInNV
   \   000014   12....       LCALL   `??BindUpgradeTableInNV::?relay`; Banked call to: BindUpgradeTableInNV
   \   000017   E9           MOV     A,R1
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??BindRestoreFromNV_0 & 0xFFFF
   1026            {
   1027              if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
   \   00001D                ; Setup parameters for call to function osal_nv_read
   \   00001D   A8..         MOV     R0,?XSP + 0
   \   00001F   A9..         MOV     R1,?XSP + 1
   \   000021   88..         MOV     ?V0,R0
   \   000023   89..         MOV     ?V1,R1
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..02       MOV     ?V0,#0x2
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A41         MOV     R2,#0x41
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   \   000046   7066         JNZ     ??BindRestoreFromNV_0
   1028              {
   1029                bindTableIndex_t x;
   1030                uint16 validRecsCount = 0;
   \   000048   75..00       MOV     ?V0,#0x0
   1031          
   1032                // Read in the device list
   1033                for ( x = 0; ( x < gNWK_MAX_BINDING_ENTRIES ) && ( validRecsCount < hdr.numRecs ); x++ )
   \   00004B   75..00       MOV     ?V2,#0x0
   \   00004E   7E02         MOV     R6,#0x2
   \   000050   7F00         MOV     R7,#0x0
   \   000052   75....       MOV     ?V4,#BindingTable & 0xff
   \   000055   75....       MOV     ?V5,#(BindingTable >> 8) & 0xff
   \   000058   803D         SJMP    ??BindRestoreFromNV_1
   1034                {
   1035                  if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
   1036                                     (uint16)(sizeof(nvBindingHdr_t) + (x * NV_BIND_REC_SIZE)),
   1037                                     NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
   \                     ??BindRestoreFromNV_2:
   \   00005A                ; Setup parameters for call to function osal_nv_read
   \   00005A   78..         MOV     R0,#?V4
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000062   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   000065   EE           MOV     A,R6
   \   000066   FC           MOV     R4,A
   \   000067   EF           MOV     A,R7
   \   000068   FD           MOV     R5,A
   \   000069   7A41         MOV     R2,#0x41
   \   00006B   7B00         MOV     R3,#0x0
   \   00006D   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000070   7404         MOV     A,#0x4
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   \   000075   E9           MOV     A,R1
   \   000076   7012         JNZ     ??BindRestoreFromNV_3
   1038                  {
   1039                    if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   000078   85..82       MOV     DPL,?V4
   \   00007B   85..83       MOV     DPH,?V5
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F4           CPL     A
   \   000080   6008         JZ      ??BindRestoreFromNV_3
   1040                    {
   1041                      validRecsCount++;
   \   000082   05..         INC     ?V0
   \   000084   E5..         MOV     A,?V0
   \   000086   7002         JNZ     ??BindRestoreFromNV_3
   \   000088   05..         INC     ?V1
   1042                    }
   1043                  }
   1044                }
   \                     ??BindRestoreFromNV_3:
   \   00008A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00008D   E5..         MOV     A,?V4
   \   00008F   240E         ADD     A,#0xe
   \   000091   F5..         MOV     ?V4,A
   \   000093   5002         JNC     ??BindRestoreFromNV_1
   \   000095   05..         INC     ?V5
   \                     ??BindRestoreFromNV_1:
   \   000097   12....       LCALL   ?Subroutine13 & 0xFFFF
   1045              }
   1046            }
   \                     ??CrossCallReturnLabel_14:
   \   00009A   5012         JNC     ??BindRestoreFromNV_0
   \   00009C   85..82       MOV     DPL,?XSP + 0
   \   00009F   85..83       MOV     DPH,?XSP + 1
   \   0000A2   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000A5   C3           CLR     C
   \   0000A6   E5..         MOV     A,?V0
   \   0000A8   98           SUBB    A,R0
   \   0000A9   E5..         MOV     A,?V1
   \   0000AB   99           SUBB    A,R1
   \   0000AC   40AC         JC      ??BindRestoreFromNV_2
   1047            return ( hdr.numRecs );
   \                     ??BindRestoreFromNV_0:
   \   0000AE   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000B1   02....       LJMP    ?Subroutine5 & 0xFFFF
   1048          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   05..         INC     ?V2
   \   000002   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000005   E4           CLR     A
   \   000006   93           MOVC    A,@A+DPTR
   \   000007   2E           ADD     A,R6
   \   000008   FE           MOV     R6,A
   \   000009   A3           INC     DPTR
   \   00000A   E4           CLR     A
   \   00000B   93           MOVC    A,@A+DPTR
   \   00000C   3F           ADDC    A,R7
   \   00000D   FF           MOV     R7,A
   \   00000E   22           RET
   1049          
   1050          /*********************************************************************
   1051           * @fn          BindWriteNV
   1052           *
   1053           * @brief       Save the Binding Table in NV
   1054           *
   1055           * @param       none
   1056           *
   1057           * @return      none
   1058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1059          void BindWriteNV( void )
   \                     BindWriteNV:
   1060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1061            BindingEntry_t *pBind;
   1062            BindingEntry_t bind;
   1063            nvBindingHdr_t hdr;
   1064            bindTableIndex_t x;
   1065          
   1066            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
   1067          
   1068            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000014   75..00       MOV     ?V2,#0x0
   \   000017   7E02         MOV     R6,#0x2
   \   000019   FF           MOV     R7,A
   \   00001A   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001D   93           MOVC    A,@A+DPTR
   \   00001E   6067         JZ      ??BindWriteNV_0
   \   000020   75....       MOV     ?V0,#BindingTable & 0xff
   \   000023   75....       MOV     ?V1,#(BindingTable >> 8) & 0xff
   1069            {
   1070              pBind = &BindingTable[x];
   1071          
   1072              osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
   \                     ??BindWriteNV_1:
   \   000026                ; Setup parameters for call to function osal_memcpy
   \   000026   85....       MOV     ?V4,?V0
   \   000029   85....       MOV     ?V5,?V1
   \   00002C   75..00       MOV     ?V6,#0x0
   \   00002F   78..         MOV     R0,#?V4
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000034   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000037   7405         MOV     A,#0x5
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   1073          
   1074              // Save the record to NV
   1075              osal_nv_write( ZCD_NV_BINDING_TABLE,
   1076                             (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
   1077                             NV_BIND_REC_SIZE, &bind );
   \   000044                ; Setup parameters for call to function osal_nv_write
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP100_8
   \   000049   88..         MOV     ?V4,R0
   \   00004B   89..         MOV     ?V5,R1
   \   00004D   78..         MOV     R0,#?V4
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000055   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   000058   EE           MOV     A,R6
   \   000059   FC           MOV     R4,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FD           MOV     R5,A
   \   00005C   7A41         MOV     R2,#0x41
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000063   7404         MOV     A,#0x4
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
   1078          
   1079              if ( pBind->srcEP != NV_BIND_EMPTY )
   \   000068   85..82       MOV     DPL,?V0
   \   00006B   85..83       MOV     DPH,?V1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F4           CPL     A
   \   000070   6003         JZ      ??CrossCallReturnLabel_42
   1080              {
   1081                hdr.numRecs++;
   \   000072   12....       LCALL   ?Subroutine25 & 0xFFFF
   1082              }
   1083            }
   \                     ??CrossCallReturnLabel_42:
   \   000075   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000078   E5..         MOV     A,?V0
   \   00007A   240E         ADD     A,#0xe
   \   00007C   F5..         MOV     ?V0,A
   \   00007E   5002         JNC     ??BindWriteNV_2
   \   000080   05..         INC     ?V1
   \                     ??BindWriteNV_2:
   \   000082   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000085   409F         JC      ??BindWriteNV_1
   1084          
   1085            // Save off the header
   1086            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \                     ??BindWriteNV_0:
   \   000087                ; Setup parameters for call to function osal_nv_write
   \   000087   A8..         MOV     R0,?XSP + 0
   \   000089   A9..         MOV     R1,?XSP + 1
   \   00008B   88..         MOV     ?V0,R0
   \   00008D   89..         MOV     ?V1,R1
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   75..02       MOV     ?V0,#0x2
   \   000097   75..00       MOV     ?V1,#0x0
   \   00009A   78..         MOV     R0,#?V0
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009F   7C00         MOV     R4,#0x0
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   7A41         MOV     R2,#0x41
   \   0000A5   7B00         MOV     R3,#0x0
   \   0000A7   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000AA   7404         MOV     A,#0x4
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   1087          }
   \   0000AF   7410         MOV     A,#0x10
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B4   7F07         MOV     R7,#0x7
   \   0000B6   02....       LJMP    ?BANKED_LEAVE_XDATA
   1088          
   1089          /*********************************************************************
   1090           * @fn          bindUpdateAddr
   1091           *
   1092           * @brief       Update the network address in the binding table.
   1093           *
   1094           * @param       oldAddr - old network address
   1095           * @param       newAddr - new network address
   1096           *
   1097           * @return      none
   1098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1099          void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
   \                     bindUpdateAddr:
   1100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   1101            uint16 oldIdx;
   1102            uint16 newIdx;
   1103            zAddrType_t addr;
   1104            bindTableIndex_t x;
   1105            BindingEntry_t *pBind;
   1106          
   1107            addr.addrMode = Addr16Bit;
   \   00000E   7415         MOV     A,#0x15
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7402         MOV     A,#0x2
   \   000015   F0           MOVX    @DPTR,A
   1108            addr.addr.shortAddr = oldAddr;
   \   000016   740D         MOV     A,#0xd
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000022   740D         MOV     A,#0xd
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000030   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000033   740B         MOV     A,#0xb
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V1,A
   1109            oldIdx = bindingAddrMgsHelperFind( &addr );
   1110            addr.addr.shortAddr = newAddr;
   \   00003F   740D         MOV     A,#0xd
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   EE           MOV     A,R6
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   EF           MOV     A,R7
   \   000048   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00004B   7415         MOV     A,#0x15
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   E0           MOVX    A,@DPTR
   \   000051   6402         XRL     A,#0x2
   \   000053   7013         JNZ     ??bindUpdateAddr_0
   \   000055   740D         MOV     A,#0xd
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000063   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000066   8018         SJMP    ??bindUpdateAddr_1
   \                     ??bindUpdateAddr_0:
   \   000068                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000068   740D         MOV     A,#0xd
   \   00006A   12....       LCALL   ?XSTACK_DISP102_8
   \   00006D   7403         MOV     A,#0x3
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   AA82         MOV     R2,DPL
   \   000074   AB83         MOV     R3,DPH
   \   000076   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000079                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000079   AA..         MOV     R2,?XSP + 0
   \   00007B   AB..         MOV     R3,?XSP + 1
   \   00007D   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \                     ??bindUpdateAddr_1:
   \   000080   740B         MOV     A,#0xb
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   FE           MOV     R6,A
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   FF           MOV     R7,A
   1111            newIdx = bindingAddrMgsHelperFind( &addr );
   1112          
   1113            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00008A   7C00         MOV     R4,#0x0
   \   00008C   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00008F   E4           CLR     A
   \   000090   93           MOVC    A,@A+DPTR
   \   000091   6036         JZ      ??bindUpdateAddr_2
   \   000093   78..         MOV     R0,#BindingTable & 0xff
   \   000095   79..         MOV     R1,#(BindingTable >> 8) & 0xff
   1114            {
   1115              pBind = &BindingTable[x];
   1116          
   1117              if ( pBind->dstIdx == oldIdx )
   \                     ??bindUpdateAddr_3:
   \   000097   E8           MOV     A,R0
   \   000098   2402         ADD     A,#0x2
   \   00009A   FA           MOV     R2,A
   \   00009B   E4           CLR     A
   \   00009C   39           ADDC    A,R1
   \   00009D   FB           MOV     R3,A
   \   00009E   8A82         MOV     DPL,R2
   \   0000A0   8B83         MOV     DPH,R3
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   65..         XRL     A,?V0
   \   0000A5   7004         JNZ     ??bindUpdateAddr_4
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   65..         XRL     A,?V1
   \                     ??bindUpdateAddr_4:
   \   0000AB   7009         JNZ     ??bindUpdateAddr_5
   1118              {
   1119                pBind->dstIdx = newIdx;
   \   0000AD   8A82         MOV     DPL,R2
   \   0000AF   8B83         MOV     DPH,R3
   \   0000B1   EE           MOV     A,R6
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   EF           MOV     A,R7
   \   0000B5   F0           MOVX    @DPTR,A
   1120              }
   1121            }
   \                     ??bindUpdateAddr_5:
   \   0000B6   0C           INC     R4
   \   0000B7   E8           MOV     A,R0
   \   0000B8   240E         ADD     A,#0xe
   \   0000BA   F8           MOV     R0,A
   \   0000BB   5001         JNC     ??bindUpdateAddr_6
   \   0000BD   09           INC     R1
   \                     ??bindUpdateAddr_6:
   \   0000BE   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000C1   E4           CLR     A
   \   0000C2   93           MOVC    A,@A+DPTR
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EC           MOV     A,R4
   \   0000C5   C3           CLR     C
   \   0000C6   9A           SUBB    A,R2
   \   0000C7   40CE         JC      ??bindUpdateAddr_3
   1122          }
   \                     ??bindUpdateAddr_2:
   \   0000C9   7416         MOV     A,#0x16
   \   0000CB   02....       LJMP    ??Subroutine38_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   7404         MOV     A,#0x4
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   22           RET
   1123          
   1124          /*********************************************************************
   1125           * @fn      bindingAddrMgsHelperFind
   1126           *
   1127           * @brief   Turns an zAddrType_t to an Addr Manager index
   1128           *
   1129           * @param   addr - zAddrType_t
   1130           *
   1131           * @return  INVALID_NODE_ADDR if not found, otherwise an index
   1132           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine34_0
   \   000004                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   7401         MOV     A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   740B         MOV     A,#0xb
   \   000002                REQUIRE ??Subroutine35_0
   \   000002                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL   ?XSTACK_DISP0_8
   \   000003   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000006                REQUIRE ??Subroutine36_0
   \   000006                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000005                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000005                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000005                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000005                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000005                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000005   AA..         MOV     R2,?XSP + 0
   \   000007   AB..         MOV     R3,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1133          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
   \                     bindingAddrMgsHelperFind:
   1134          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1135            AddrMgrEntry_t entry;
   1136          
   1137            // Resolve addresses with the address manager
   1138            entry.user = ADDRMGR_USER_BINDING;
   \   000009   12....       LCALL   ?Subroutine16 & 0xFFFF
   1139            if ( addr->addrMode == Addr16Bit )
   \                     ??CrossCallReturnLabel_24:
   \   00000C   6402         XRL     A,#0x2
   \   00000E   700E         JNZ     ??bindingAddrMgsHelperFind_0
   1140            {
   1141              entry.nwkAddr = addr->addr.shortAddr;
   \   000010   12....       LCALL   ?Subroutine21 & 0xFFFF
   1142              AddrMgrEntryLookupNwk( &entry );
   1143            }
   \                     ??CrossCallReturnLabel_68:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000019   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00001C   8017         SJMP    ??bindingAddrMgsHelperFind_1
   1144            else
   1145            {
   1146              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \                     ??bindingAddrMgsHelperFind_0:
   \   00001E                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00001E   EA           MOV     A,R2
   \   00001F   FC           MOV     R4,A
   \   000020   EB           MOV     A,R3
   \   000021   FD           MOV     R5,A
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   AA82         MOV     R2,DPL
   \   000029   AB83         MOV     R3,DPH
   \   00002B   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1147              AddrMgrEntryLookupExt( &entry );
   \   00002E                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002E   AA..         MOV     R2,?XSP + 0
   \   000030   AB..         MOV     R3,?XSP + 1
   \   000032   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   1148            }
   1149          
   1150            return ( entry.index );
   \                     ??bindingAddrMgsHelperFind_1:
   \   000035   02....       LJMP    ?Subroutine1 & 0xFFFF
   1151          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7404         MOV     A,#0x4
   \   000008   F0           MOVX    @DPTR,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   22           RET
   1152          
   1153          /*********************************************************************
   1154           * @fn      bindingAddrMgsHelperConvert
   1155           *
   1156           * @brief   Convert an index into an zAddrType_t
   1157           *
   1158           * @param   idx -
   1159           * @param   addr - zAddrType_t
   1160           *
   1161           * @return  TRUE if found, FALSE if not
   1162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1163          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
   \                     bindingAddrMgsHelperConvert:
   1164          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   1165            AddrMgrEntry_t entry;
   1166            uint8 stat;
   1167          
   1168            // Resolve addresses with the address manager
   1169            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7404         MOV     A,#0x4
   \   000016   F0           MOVX    @DPTR,A
   1170            entry.index = idx;
   \   000017   740B         MOV     A,#0xb
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine17 & 0xFFFF
   1171            stat = AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_27:
   \   00001F   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000022   E9           MOV     A,R1
   \   000023   F5..         MOV     ?V0,A
   1172            if ( stat )
   \   000025   601D         JZ      ??bindingAddrMgsHelperConvert_0
   1173            {
   1174              addr->addrMode = Addr64Bit;
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   7403         MOV     A,#0x3
   \   000035   F0           MOVX    @DPTR,A
   1175              osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
   \   000036                ; Setup parameters for call to function sAddrExtCpy
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AC82         MOV     R4,DPL
   \   00003B   AD83         MOV     R5,DPH
   \   00003D   EE           MOV     A,R6
   \   00003E   FA           MOV     R2,A
   \   00003F   EF           MOV     A,R7
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1176            }
   1177          
   1178            return ( stat );
   \                     ??bindingAddrMgsHelperConvert_0:
   \   000044   A9..         MOV     R1,?V0
   \   000046   740D         MOV     A,#0xd
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   02....       LJMP    ?Subroutine2 & 0xFFFF
   1179          }
   1180          
   1181          /*********************************************************************
   1182           * @fn      bindingAddrMgsHelperConvertShort
   1183           *
   1184           * @brief   Convert an index into a short address
   1185           *
   1186           * @param   idx -
   1187           *
   1188           * @return  INVALID_NODE_ADDR if not available, otherwise the short address
   1189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1190          uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
   \                     bindingAddrMgsHelperConvertShort:
   1191          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1192            AddrMgrEntry_t entry;
   1193          
   1194            // Resolve addresses with the address manager
   1195            entry.user = ADDRMGR_USER_BINDING;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7404         MOV     A,#0x4
   \   000011   F0           MOVX    @DPTR,A
   1196            entry.index = idx;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine17 & 0xFFFF
   1197            AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_28:
   \   00001A   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   1198          
   1199            return ( entry.nwkAddr );
   \   00001D   7401         MOV     A,#0x1
   \   00001F   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   1200          }
   1201          
   1202          /*********************************************************************
   1203           * @fn      bindAddrMgrLocalLoad
   1204           *
   1205           * @brief   Load local(self and parent) address information into
   1206           *          Address Manager
   1207           *
   1208           * @param   none
   1209           *
   1210           * @return  none
   1211           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1212          void bindAddrMgrLocalLoad( void )
   \                     bindAddrMgrLocalLoad:
   1213          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1214            AddrMgrEntry_t entry;
   1215            uint16         parent;
   1216          
   1217            // add "local"(self and parent) address informtion into the Address
   1218            // Manager
   1219            if ( bindAddrMgrLocalLoaded == FALSE )
   \   00000A   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   707B         JNZ     ??bindAddrMgrLocalLoad_0
   1220            {
   1221              // add the device's address information
   1222              entry.user    = ADDRMGR_USER_BINDING;
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   7404         MOV     A,#0x4
   \   000018   F0           MOVX    @DPTR,A
   1223              entry.nwkAddr = _NIB.nwkDevAddress;
   \   000019   90....       MOV     DPTR,#_NIB + 20
   \   00001C   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E8           MOV     A,R0
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   E9           MOV     A,R1
   \   000026   F0           MOVX    @DPTR,A
   1224              AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
   \   000027                ; Setup parameters for call to function NLME_GetExtAddr
   \   000027   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00002A   8A..         MOV     ?V0,R2
   \   00002C   8B..         MOV     ?V1,R3
   \   00002E   AC..         MOV     R4,?V0
   \   000030   AD..         MOV     R5,?V1
   \   000032                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1225              AddrMgrEntryUpdate( &entry );
   \   00003E                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00003E   AA..         MOV     R2,?XSP + 0
   \   000040   AB..         MOV     R3,?XSP + 1
   \   000042   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1226          
   1227              // make sure parent address is valid
   1228              parent = NLME_GetCoordShortAddr();
   \   000045                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000045   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000048   8A..         MOV     ?V0,R2
   \   00004A   8B..         MOV     ?V1,R3
   \   00004C   A8..         MOV     R0,?V0
   \   00004E   A9..         MOV     R1,?V1
   1229              if ( ( parent != entry.nwkAddr     ) &&
   1230                   ( parent != INVALID_NODE_ADDR )    )
   \   000050   7401         MOV     A,#0x1
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   E0           MOVX    A,@DPTR
   \   000056   68           XRL     A,R0
   \   000057   7003         JNZ     ??bindAddrMgrLocalLoad_1
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   69           XRL     A,R1
   \                     ??bindAddrMgrLocalLoad_1:
   \   00005C   6027         JZ      ??bindAddrMgrLocalLoad_2
   \   00005E   74FE         MOV     A,#-0x2
   \   000060   68           XRL     A,R0
   \   000061   7003         JNZ     ??bindAddrMgrLocalLoad_3
   \   000063   74FF         MOV     A,#-0x1
   \   000065   69           XRL     A,R1
   \                     ??bindAddrMgrLocalLoad_3:
   \   000066   601D         JZ      ??bindAddrMgrLocalLoad_2
   1231              {
   1232                // add the parent's address information
   1233                entry.nwkAddr = parent;
   \   000068   7401         MOV     A,#0x1
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
   1234                NLME_GetCoordExtAddr( entry.extAddr );
   \   000072                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   AA82         MOV     R2,DPL
   \   000079   AB83         MOV     R3,DPH
   \   00007B   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1235                AddrMgrEntryUpdate( &entry );
   \   00007E                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00007E   AA..         MOV     R2,?XSP + 0
   \   000080   AB..         MOV     R3,?XSP + 1
   \   000082   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1236              }
   1237          
   1238              bindAddrMgrLocalLoaded = TRUE;
   \                     ??bindAddrMgrLocalLoad_2:
   \   000085   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   000088   7401         MOV     A,#0x1
   \   00008A   F0           MOVX    @DPTR,A
   1239            }
   1240          }
   \                     ??bindAddrMgrLocalLoad_0:
   \   00008B   02....       LJMP    ?Subroutine0 & 0xFFFF
   1241          
   1242          /*********************************************************************
   1243           * @fn      bindAddrIndexGet
   1244           *
   1245           * @brief   Get bind address index.
   1246           *
   1247           * @param   addr - <zAddrType_t>
   1248           *
   1249           * @return  (uint16) address index
   1250           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1251          uint16 bindAddrIndexGet( zAddrType_t* addr )
   \                     bindAddrIndexGet:
   1252          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1253            AddrMgrEntry_t entry;
   1254            uint8          update;
   1255          
   1256            update = FALSE;
   1257          
   1258            // sync binding addresses with the address manager
   1259            entry.user = ADDRMGR_USER_BINDING;
   \   000009   12....       LCALL   ?Subroutine16 & 0xFFFF
   1260          
   1261            if ( addr->addrMode == Addr16Bit )
   \                     ??CrossCallReturnLabel_25:
   \   00000C   F8           MOV     R0,A
   \   00000D   7402         MOV     A,#0x2
   \   00000F   68           XRL     A,R0
   \   000010   7011         JNZ     ??bindAddrIndexGet_0
   1262            {
   1263              entry.nwkAddr = addr->addr.shortAddr;
   \   000012   12....       LCALL   ?Subroutine21 & 0xFFFF
   1264          
   1265              if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
   1266              {
   1267                update = TRUE;
   1268              }
   1269            }
   \                     ??CrossCallReturnLabel_69:
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00001B   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00001E   E9           MOV     A,R1
   \   00001F   704C         JNZ     ??bindAddrIndexGet_1
   \   000021   801F         SJMP    ??bindAddrIndexGet_2
   1270            else if ( addr->addrMode == Addr64Bit )
   \                     ??bindAddrIndexGet_0:
   \   000023   7403         MOV     A,#0x3
   \   000025   68           XRL     A,R0
   \   000026   7023         JNZ     ??bindAddrIndexGet_3
   1271            {
   1272              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \   000028                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000028   EA           MOV     A,R2
   \   000029   FC           MOV     R4,A
   \   00002A   EB           MOV     A,R3
   \   00002B   FD           MOV     R5,A
   \   00002C   7403         MOV     A,#0x3
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1273          
   1274              if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
   \   000038                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000038   AA..         MOV     R2,?XSP + 0
   \   00003A   AB..         MOV     R3,?XSP + 1
   \   00003C   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00003F   E9           MOV     A,R1
   \   000040   702B         JNZ     ??bindAddrIndexGet_1
   1275              {
   1276                update = TRUE;
   1277              }
   1278            }
   1279            else if ( addr->addrMode == AddrGroup )
   1280            {
   1281              entry.index = addr->addr.shortAddr;
   1282            }
   1283            else
   1284            {
   1285              entry.index = INVALID_NODE_ADDR;
   1286            }
   1287          
   1288            if ( update )
   1289            {
   1290              AddrMgrEntryUpdate( &entry );
   \                     ??bindAddrIndexGet_2:
   \   000042                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000042   AA..         MOV     R2,?XSP + 0
   \   000044   AB..         MOV     R3,?XSP + 1
   \   000046   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000049   8022         SJMP    ??bindAddrIndexGet_1
   1291            }
   \                     ??bindAddrIndexGet_3:
   \   00004B   7401         MOV     A,#0x1
   \   00004D   68           XRL     A,R0
   \   00004E   7012         JNZ     ??bindAddrIndexGet_4
   \   000050   8A82         MOV     DPL,R2
   \   000052   8B83         MOV     DPH,R3
   \   000054   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000057   740B         MOV     A,#0xb
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E8           MOV     A,R0
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   E9           MOV     A,R1
   \   000060   800A         SJMP    ??bindAddrIndexGet_5
   \                     ??bindAddrIndexGet_4:
   \   000062   740B         MOV     A,#0xb
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   74FE         MOV     A,#-0x2
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   04           INC     A
   \                     ??bindAddrIndexGet_5:
   \   00006C   F0           MOVX    @DPTR,A
   1292          
   1293            return entry.index;
   \                     ??bindAddrIndexGet_1:
   \   00006D   02....       LJMP    ?Subroutine1 & 0xFFFF
   1294          }
   1295          
   1296          /*********************************************************************
   1297           * @fn      GetBindingTableEntry
   1298           *
   1299           * @brief   Get a pointer to the Nth valid binding table entry.
   1300           *
   1301           * @param   Nth valid entry being requested.
   1302           *
   1303           * @return  The Nth valid binding table entry.
   1304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1305          BindingEntry_t *GetBindingTableEntry( uint16 Nth )
   \                     GetBindingTableEntry:
   1306          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1307            BindingEntry_t *rtrn = NULL;
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   1308          
   1309          #if defined ( REFLECTOR )
   1310            bindTableIndex_t idx, cnt = 0;
   \   000009   75..00       MOV     ?V1,#0x0
   1311          
   1312            for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
   \   00000C   75..00       MOV     ?V0,#0x0
   \   00000F   7C..         MOV     R4,#BindingTable & 0xff
   \   000011   7D..         MOV     R5,#(BindingTable >> 8) & 0xff
   \   000013   800B         SJMP    ??GetBindingTableEntry_0
   1313            {
   1314              if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
   1315              {
   1316                if ( cnt++ == Nth )
   \                     ??GetBindingTableEntry_1:
   \   000015   05..         INC     ?V1
   \                     ??GetBindingTableEntry_2:
   \   000017   05..         INC     ?V0
   \   000019   EC           MOV     A,R4
   \   00001A   240E         ADD     A,#0xe
   \   00001C   FC           MOV     R4,A
   \   00001D   5001         JNC     ??GetBindingTableEntry_0
   \   00001F   0D           INC     R5
   \                     ??GetBindingTableEntry_0:
   \   000020   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000023   E4           CLR     A
   \   000024   93           MOVC    A,@A+DPTR
   \   000025   FE           MOV     R6,A
   \   000026   E5..         MOV     A,?V0
   \   000028   C3           CLR     C
   \   000029   9E           SUBB    A,R6
   \   00002A   5020         JNC     ??GetBindingTableEntry_3
   \   00002C   8C82         MOV     DPL,R4
   \   00002E   8D83         MOV     DPH,R5
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F4           CPL     A
   \   000032   60E3         JZ      ??GetBindingTableEntry_2
   \   000034   AE..         MOV     R6,?V1
   \   000036   EA           MOV     A,R2
   \   000037   6E           XRL     A,R6
   \   000038   4B           ORL     A,R3
   \   000039   70DA         JNZ     ??GetBindingTableEntry_1
   1317                {
   1318                  rtrn = BindingTable+idx;
   \   00003B   E5..         MOV     A,?V0
   \   00003D   75F00E       MOV     B,#0xe
   \   000040   A4           MUL     AB
   \   000041   F8           MOV     R0,A
   \   000042   A9F0         MOV     R1,B
   \   000044   74..         MOV     A,#BindingTable & 0xff
   \   000046   28           ADD     A,R0
   \   000047   F8           MOV     R0,A
   \   000048   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00004A   39           ADDC    A,R1
   \   00004B   F9           MOV     R1,A
   1319                  break;
   1320                }
   1321              }
   1322            }
   1323          #else
   1324            (void)Nth;
   1325          #endif
   1326          
   1327            return rtrn;
   \                     ??GetBindingTableEntry_3:
   \   00004C   E8           MOV     A,R0
   \   00004D   FA           MOV     R2,A
   \   00004E   E9           MOV     A,R1
   \   00004F   FB           MOV     R3,A
   \   000050   02....       LJMP    ??Subroutine39_0 & 0xFFFF
   1328          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7404         MOV     A,#0x4
   \   000008   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6402         XRL     A,#0x2
   \   00000E   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitBindingTable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBindingTable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFindEmpty::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindEmpty

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumOfEntries::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumOfEntries

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindCapacity::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindCapacity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindIsClusterIDinList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindIsClusterIDinList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveClusterIdFromList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveClusterIdFromList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddClusterIdToList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddClusterIdToList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFindExisting::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindExisting

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveSrcDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveSrcDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumBoundTo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumBoundTo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumReflections::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumReflections

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddressClear::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddressClear

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindInitNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindInitNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindSetDefaultNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindCopyBackupToNewNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindCopyBackupToNewNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindUpgradeTableInNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindUpgradeTableInNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindRestoreFromNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindRestoreFromNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindWriteNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindUpdateAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindUpdateAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperConvert::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvert

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperConvertShort::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvertShort

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddrMgrLocalLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrMgrLocalLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddrIndexGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrIndexGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GetBindingTableEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetBindingTableEntry
   1329          
   1330          /*********************************************************************
   1331          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     52   BindCopyBackupToNewNV
        0     32   -> osal_nv_delete
        0     34   -> osal_nv_item_init
        0     32   -> osal_nv_item_len
        0     36   -> osal_nv_read
        0     36   -> osal_nv_write
      0     16   BindInitNV
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_write
      0     20   BindRestoreFromNV
        0     16   -> BindUpgradeTableInNV
        0     20   -> osal_nv_read
      0     16   BindSetDefaultNV
        0     16   -> osal_nv_write
      0     36   BindUpgradeTableInNV
        0     16   -> BindCopyBackupToNewNV
        0     16   -> nwkCreateDuplicateNV
        0     16   -> osal_nv_delete
        0     16   -> osal_nv_item_len
        0     20   -> osal_nv_read
      0     35   BindWriteNV
        0     34   -> osal_memcpy
        0     35   -> osal_nv_write
      0     10   GetBindingTableEntry
      0     10   InitBindingTable
        0     10   -> osal_memset
      0      9   bindAddClusterIdToList
      1     23   bindAddEntry
        0     18   -> bindAddrIndexGet
        0     18   -> bindAddrMgrLocalLoad
        0     21   -> osal_memcpy
      2     31   bindAddrIndexGet
        2     13   -> AddrMgrEntryLookupExt
        2     13   -> AddrMgrEntryLookupNwk
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      0     41   bindAddrMgrLocalLoad
        0     23   -> AddrMgrEntryUpdate
        0     23   -> AddrMgrExtAddrSet
        0     23   -> NLME_GetCoordExtAddr
        0     23   -> NLME_GetCoordShortAddr
        0     23   -> NLME_GetExtAddr
      2     26   bindAddressClear
        2     13   -> AddrMgrEntryRelease
      0      9   bindCapacity
      0     13   bindFind
      2      0   bindFindEmpty
      0     23   bindFindExisting
        0     23   -> AddrMgrEntryLookupExt
        0     23   -> AddrMgrEntryLookupNwk
        0     23   -> AddrMgrExtAddrSet
      0      9   bindIsClusterIDinList
      0     25   bindNumBoundTo
        0     25   -> AddrMgrEntryLookupExt
        0     25   -> AddrMgrEntryLookupNwk
        0     25   -> AddrMgrExtAddrSet
      0      9   bindNumOfEntries
      0     13   bindNumReflections
      0     13   bindRemoveClusterIdFromList
      0     13   bindRemoveDev
        0     13   -> bindAddressClear
        0     13   -> bindingAddrMgsHelperFind
        0     13   -> osal_memset
      2      0   bindRemoveEntry
        2      0   -> osal_memset
      0     25   bindRemoveSrcDev
        0     25   -> AddrMgrEntryRelease
        0     25   -> osal_memset
      0     32   bindUpdateAddr
        0     32   -> AddrMgrEntryLookupExt
        0     32   -> AddrMgrEntryLookupNwk
        0     32   -> AddrMgrExtAddrSet
      0     22   bindingAddrMgsHelperConvert
        0     22   -> AddrMgrEntryGet
        0     22   -> sAddrExtCpy
      2     13   bindingAddrMgsHelperConvertShort
        2     13   -> AddrMgrEntryGet
      2     26   bindingAddrMgsHelperFind
        2     13   -> AddrMgrEntryLookupExt
        2     13   -> AddrMgrEntryLookupNwk
        2     13   -> AddrMgrExtAddrSet


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ??Subroutine34_0
       6  ??Subroutine35_0
       5  ??Subroutine36_0
       7  ??Subroutine37_0
       3  ??Subroutine38_0
       5  ??Subroutine39_0
       8  ??Subroutine40_0
       6  ??Subroutine41_0
       2  ?Subroutine0
       2  ?Subroutine1
      15  ?Subroutine10
       4  ?Subroutine11
       6  ?Subroutine12
      11  ?Subroutine13
      15  ?Subroutine14
      10  ?Subroutine15
      23  ?Subroutine16
      10  ?Subroutine17
      21  ?Subroutine18
      11  ?Subroutine19
       5  ?Subroutine2
      15  ?Subroutine20
       4  ?Subroutine21
      12  ?Subroutine22
       6  ?Subroutine23
       6  ?Subroutine24
      16  ?Subroutine25
       7  ?Subroutine26
      10  ?Subroutine27
       8  ?Subroutine28
      15  ?Subroutine29
       5  ?Subroutine3
      11  ?Subroutine30
       6  ?Subroutine31
      13  ?Subroutine32
      10  ?Subroutine33
      10  ?Subroutine4
       2  ?Subroutine5
       4  ?Subroutine6
      36  ?Subroutine7
      26  ?Subroutine8
       6  ?Subroutine9
     401  BindCopyBackupToNewNV
       6  BindCopyBackupToNewNV::?relay
      78  BindInitNV
       6  BindInitNV::?relay
     180  BindRestoreFromNV
       6  BindRestoreFromNV::?relay
      45  BindSetDefaultNV
       6  BindSetDefaultNV::?relay
     175  BindUpgradeTableInNV
       6  BindUpgradeTableInNV::?relay
     185  BindWriteNV
       6  BindWriteNV::?relay
      83  GetBindingTableEntry
       6  GetBindingTableEntry::?relay
     117  InitBindingTable
       6  InitBindingTable::?relay
      39  bindAddClusterIdToList
       6  bindAddClusterIdToList::?relay
     463  bindAddEntry
       6  bindAddEntry::?relay
     112  bindAddrIndexGet
       6  bindAddrIndexGet::?relay
     142  bindAddrMgrLocalLoad
       6  bindAddrMgrLocalLoad::?relay
       1  bindAddrMgrLocalLoaded
      97  bindAddressClear
       6  bindAddressClear::?relay
      66  bindCapacity
       6  bindCapacity::?relay
     111  bindFind
       6  bindFind::?relay
      64  bindFindEmpty
       6  bindFindEmpty::?relay
     213  bindFindExisting
       6  bindFindExisting::?relay
      53  bindIsClusterIDinList
       6  bindIsClusterIDinList::?relay
     197  bindNumBoundTo
       6  bindNumBoundTo::?relay
      58  bindNumOfEntries
       6  bindNumOfEntries::?relay
     101  bindNumReflections
       6  bindNumReflections::?relay
     118  bindRemoveClusterIdFromList
       6  bindRemoveClusterIdFromList::?relay
     175  bindRemoveDev
       6  bindRemoveDev::?relay
      15  bindRemoveEntry
       6  bindRemoveEntry::?relay
     182  bindRemoveSrcDev
       6  bindRemoveSrcDev::?relay
     206  bindUpdateAddr
       6  bindUpdateAddr::?relay
      78  bindingAddrMgsHelperConvert
       6  bindingAddrMgsHelperConvert::?relay
      34  bindingAddrMgsHelperConvertShort
       6  bindingAddrMgsHelperConvertShort::?relay
      56  bindingAddrMgsHelperFind
       6  bindingAddrMgsHelperFind::?relay
       2  pBindInitNV
       2  pBindRestoreFromNV
       2  pBindSetDefaultNV
       2  pBindWriteNV
       2  pbindAddEntry
       2  pbindNumOfEntries
       2  pbindRemoveDev

 
 4 255 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
    15 bytes in segment XDATA_Z
 
 4 429 bytes of CODE  memory
    15 bytes of XDATA memory

Errors: none
Warnings: none
