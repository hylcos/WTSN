///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.20.1.2476 for 8051               10/Mar/2016  12:27:06
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\af\AF.c
//    Command line       =  
//        -f
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x04000000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440
//        C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\af\AF.c -D
//        NWK_AUTO_POLL -D HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
//        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
//        -lA
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\
//        --diag_suppress Pe001,Pa010,Pe1665 -o
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\Obj\
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\Source\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Oh --require_prototypes
//    List file          =  
//        C:\Users\Bart\Documents\GitHub\WTSN\Projects\zstack\Project\Eindopdracht\CC2530DB\SensorEB\List\AF.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME AF

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,0203H
        PUBLIC `??AF_DataRequestSrcRtg::?relay`
        FUNCTION `??AF_DataRequestSrcRtg::?relay`,0203H
        PUBLIC `??afAPSF_ConfigGet::?relay`
        FUNCTION `??afAPSF_ConfigGet::?relay`,0203H
        PUBLIC `??afAPSF_ConfigSet::?relay`
        FUNCTION `??afAPSF_ConfigSet::?relay`,0203H
        FUNCTION `??afBuildMSGIncoming::?relay`,0203H
        PUBLIC `??afCopyAddress::?relay`
        FUNCTION `??afCopyAddress::?relay`,0203H
        PUBLIC `??afDataConfirm::?relay`
        FUNCTION `??afDataConfirm::?relay`,0203H
        PUBLIC `??afDataReqMTU::?relay`
        FUNCTION `??afDataReqMTU::?relay`,0203H
        PUBLIC `??afDelete::?relay`
        FUNCTION `??afDelete::?relay`,0203H
        PUBLIC `??afEndPoints::?relay`
        FUNCTION `??afEndPoints::?relay`,0203H
        PUBLIC `??afFindEndPointDesc::?relay`
        FUNCTION `??afFindEndPointDesc::?relay`,0203H
        PUBLIC `??afFindSimpleDesc::?relay`
        FUNCTION `??afFindSimpleDesc::?relay`,0203H
        PUBLIC `??afGetMatch::?relay`
        FUNCTION `??afGetMatch::?relay`,0203H
        PUBLIC `??afIncomingData::?relay`
        FUNCTION `??afIncomingData::?relay`,0203H
        PUBLIC `??afNumEndPoints::?relay`
        FUNCTION `??afNumEndPoints::?relay`,0203H
        PUBLIC `??afReflectError::?relay`
        FUNCTION `??afReflectError::?relay`,0203H
        PUBLIC `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,0203H
        PUBLIC `??afRegisterExtended::?relay`
        FUNCTION `??afRegisterExtended::?relay`,0203H
        PUBLIC `??afSetApplCB::?relay`
        FUNCTION `??afSetApplCB::?relay`,0203H
        PUBLIC `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,0203H
        PUBLIC AF_DataRequest
        FUNCTION AF_DataRequest,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC AF_DataRequestDiscoverRoute
        PUBLIC AF_DataRequestSrcRtg
        FUNCTION AF_DataRequestSrcRtg,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC afAPSF_ConfigGet
        FUNCTION afAPSF_ConfigGet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afAPSF_ConfigSet
        FUNCTION afAPSF_ConfigSet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION afBuildMSGIncoming,0a1203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC afCopyAddress
        FUNCTION afCopyAddress,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDataConfirm
        FUNCTION afDataConfirm,0a1203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afDataReqMTU
        FUNCTION afDataReqMTU,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDelete
        FUNCTION afDelete,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afEndPoints
        FUNCTION afEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afFindSimpleDesc
        FUNCTION afFindSimpleDesc,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afGetMatch
        FUNCTION afGetMatch,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afIncomingData
        FUNCTION afIncomingData,0a1203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC afNumEndPoints
        FUNCTION afNumEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afReflectError
        FUNCTION afReflectError,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC afRegister
        FUNCTION afRegister,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afRegisterExtended
        FUNCTION afRegisterExtended,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afSetApplCB
        FUNCTION afSetApplCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afSetMatch
        FUNCTION afSetMatch,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC epList
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSDE_DataReq       SYMBOL "APSDE_DataReq"
`??APSDE_DataReq::?relay` SYMBOL "?relay", APSDE_DataReq
APSDE_DataReqMTU    SYMBOL "APSDE_DataReqMTU"
`??APSDE_DataReqMTU::?relay` SYMBOL "?relay", APSDE_DataReqMTU
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_IsAddressBroadcast SYMBOL "NLME_IsAddressBroadcast"
`??NLME_IsAddressBroadcast::?relay` SYMBOL "?relay", NLME_IsAddressBroadcast
RTG_AddSrcRtgEntry_Guaranteed SYMBOL "RTG_AddSrcRtgEntry_Guaranteed"
`??RTG_AddSrcRtgEntry_Guaranteed::?relay` SYMBOL "?relay", RTG_AddSrcRtgEntry_Guaranteed
RTG_CheckRtStatus   SYMBOL "RTG_CheckRtStatus"
`??RTG_CheckRtStatus::?relay` SYMBOL "?relay", RTG_CheckRtStatus
aps_FindGroupForEndpoint SYMBOL "aps_FindGroupForEndpoint"
`??aps_FindGroupForEndpoint::?relay` SYMBOL "?relay", aps_FindGroupForEndpoint
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
AF_DataRequestSrcRtg SYMBOL "AF_DataRequestSrcRtg"
`??AF_DataRequestSrcRtg::?relay` SYMBOL "?relay", AF_DataRequestSrcRtg
afAPSF_ConfigGet    SYMBOL "afAPSF_ConfigGet"
`??afAPSF_ConfigGet::?relay` SYMBOL "?relay", afAPSF_ConfigGet
afAPSF_ConfigSet    SYMBOL "afAPSF_ConfigSet"
`??afAPSF_ConfigSet::?relay` SYMBOL "?relay", afAPSF_ConfigSet
afCopyAddress       SYMBOL "afCopyAddress"
`??afCopyAddress::?relay` SYMBOL "?relay", afCopyAddress
afDataConfirm       SYMBOL "afDataConfirm"
`??afDataConfirm::?relay` SYMBOL "?relay", afDataConfirm
afDataReqMTU        SYMBOL "afDataReqMTU"
`??afDataReqMTU::?relay` SYMBOL "?relay", afDataReqMTU
afDelete            SYMBOL "afDelete"
`??afDelete::?relay` SYMBOL "?relay", afDelete
afEndPoints         SYMBOL "afEndPoints"
`??afEndPoints::?relay` SYMBOL "?relay", afEndPoints
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
`??afFindEndPointDesc::?relay` SYMBOL "?relay", afFindEndPointDesc
afFindSimpleDesc    SYMBOL "afFindSimpleDesc"
`??afFindSimpleDesc::?relay` SYMBOL "?relay", afFindSimpleDesc
afGetMatch          SYMBOL "afGetMatch"
`??afGetMatch::?relay` SYMBOL "?relay", afGetMatch
afIncomingData      SYMBOL "afIncomingData"
`??afIncomingData::?relay` SYMBOL "?relay", afIncomingData
afNumEndPoints      SYMBOL "afNumEndPoints"
`??afNumEndPoints::?relay` SYMBOL "?relay", afNumEndPoints
afReflectError      SYMBOL "afReflectError"
`??afReflectError::?relay` SYMBOL "?relay", afReflectError
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afRegisterExtended  SYMBOL "afRegisterExtended"
`??afRegisterExtended::?relay` SYMBOL "?relay", afRegisterExtended
afSetApplCB         SYMBOL "afSetApplCB"
`??afSetApplCB::?relay` SYMBOL "?relay", afSetApplCB
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch

        EXTERN `??APSDE_DataReq::?relay`
        FUNCTION `??APSDE_DataReq::?relay`,00H
        EXTERN `??APSDE_DataReqMTU::?relay`
        FUNCTION `??APSDE_DataReqMTU::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_IsAddressBroadcast::?relay`
        FUNCTION `??NLME_IsAddressBroadcast::?relay`,00H
        EXTERN `??RTG_AddSrcRtgEntry_Guaranteed::?relay`
        FUNCTION `??RTG_AddSrcRtgEntry_Guaranteed::?relay`,00H
        EXTERN `??RTG_CheckRtStatus::?relay`
        FUNCTION `??RTG_CheckRtStatus::?relay`,00H
        EXTERN `??aps_FindGroupForEndpoint::?relay`
        FUNCTION `??aps_FindGroupForEndpoint::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN APSDE_DataReq
        FUNCTION APSDE_DataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSDE_DataReqMTU
        FUNCTION APSDE_DataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_AddSrcRtgEntry_Guaranteed
        FUNCTION RTG_AddSrcRtgEntry_Guaranteed,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_CheckRtStatus
        FUNCTION RTG_CheckRtStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroupForEndpoint
        FUNCTION aps_FindGroupForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN apsfSendFragmented
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\Bart\Documents\GitHub\WTSN\Components\stack\af\AF.c
//    1 /**************************************************************************************************
//    2   Filename:       AF.c
//    3   Revised:        $Date: 2014-06-30 16:29:17 -0700 (Mon, 30 Jun 2014) $
//    4   Revision:       $Revision: 39295 $
//    5 
//    6   Description:    Application Framework - Device Description helper functions
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "nwk_globals.h"
//   47 #include "nwk_util.h"
//   48 #include "aps_groups.h"
//   49 #include "ZDProfile.h"
//   50 #include "aps_frag.h"
//   51 #include "rtg.h"
//   52 
//   53 #if defined ( MT_AF_CB_FUNC )
//   54   #include "MT_AF.h"
//   55 #endif
//   56 
//   57 #if defined ( INTER_PAN )
//   58   #include "stub_aps.h"
//   59 #endif
//   60 
//   61 /*********************************************************************
//   62  * MACROS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * @fn      afSend
//   67  *
//   68  * @brief   Helper macro for V1 API to invoke V2 API.
//   69  *
//   70  * input parameters
//   71  *
//   72  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//   73  * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
//   74  * @param   cID - A valid cluster ID as specified by the Profile.
//   75  * @param   len - Number of bytes of data pointed to by next param.
//   76  * @param  *buf - A pointer to the data bytes to send.
//   77  * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
//   78  * @param  *transID - A pointer to a byte which can be modified and which will
//   79  *                    be used as the transaction sequence number of the msg.
//   80  *
//   81  * output parameters
//   82  *
//   83  * @param  *transID - Incremented by one if the return value is success.
//   84  *
//   85  * @return  afStatus_t - See previous definition of afStatus_... types.
//   86  */
//   87 #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \ 
//   88         AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \ 
//   89                           (cID), (len), (buf), (transID), (options), (radius) )
//   90 
//   91 /*********************************************************************
//   92  * GLOBAL VARIABLES
//   93  */
//   94 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   95 epList_t *epList;
epList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   96 
//   97 /*********************************************************************
//   98  * LOCAL FUNCTIONS
//   99  */
//  100 
//  101 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  102                 zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  103                 uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
//  104 
//  105 static epList_t *afFindEndPointDescList( uint8 EndPoint );
//  106 
//  107 static pDescCB afGetDescCB( endPointDesc_t *epDesc );
//  108 
//  109 /*********************************************************************
//  110  * PUBLIC FUNCTIONS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * @fn      afInit
//  115  *
//  116  * @brief   Initialization function for the AF.
//  117  *
//  118  * @param   none
//  119  *
//  120  * @return  none
//  121 void afInit( void )
//  122 {
//  123 }
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * @fn      afRegisterExtended
//  128  *
//  129  * @brief   Register an Application's EndPoint description.
//  130  *
//  131  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  132  * @param   descFn - pointer to descriptor callback function
//  133  * @param   applFn - pointer to the Application callback function
//  134  *
//  135  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  136  *
//  137  * @return  Pointer to epList_t on success, NULL otherwise.
//  138  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  139 epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
afRegisterExtended:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function afRegisterExtended
        CODE
//  140 {
        FUNCALL afRegisterExtended, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
//  141   epList_t *ep = osal_mem_alloc(sizeof(epList_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
//  142 
//  143   if (ep != NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_116
//  144   {
//  145     ep->nextDesc = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ??Subroutine50_0 & 0xFFFF
//  146     epList = ep;
??CrossCallReturnLabel_115:
        MOV     DPTR,#epList
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine34 & 0xFFFF
//  147     ep->epDesc = epDesc;
??CrossCallReturnLabel_67:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine33 & 0xFFFF
//  148     ep->pfnDescCB = descFn;
??CrossCallReturnLabel_65:
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        LCALL   ?Subroutine32 & 0xFFFF
//  149     ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
??CrossCallReturnLabel_63:
        INC     DPTR
        MOV     A,#0x32
        LCALL   ?Subroutine30 & 0xFFFF
//  150     ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
??CrossCallReturnLabel_59:
        MOV     A,#0x1
        LCALL   ?Subroutine30 & 0xFFFF
//  151     ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
??CrossCallReturnLabel_60:
        INC     DPTR
        MOVX    @DPTR,A
//  152     ep->pfnApplCB = applFn;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
//  153   }
??CrossCallReturnLabel_33:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine50_0 & 0xFFFF
//  154 
//  155   return ep;
??CrossCallReturnLabel_116:
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  156 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI VB SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function afRegisterExtended
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_80:
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond2) CFA_SP SP+0
          CFI (cfiCond3) CFA_SP SP+0
          CFI (cfiPicker4) CFA_SP SP+0
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function afRegisterExtended
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI (cfiCond5) CFA_SP SP+0
          CFI (cfiCond6) CFA_SP SP+0
          CFI (cfiPicker7) CFA_SP SP+0
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
//  157 
//  158 /*********************************************************************
//  159  * @fn      afRegister
//  160  *
//  161  * @brief   Register an Application's EndPoint description.
//  162  *
//  163  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  164  *
//  165  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  166  *
//  167  * @return  afStatus_SUCCESS - Registered
//  168  *          afStatus_MEM_FAIL - not enough memory to add descriptor
//  169  *          afStatus_INVALID_PARAMETER - duplicate endpoint
//  170  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  171 afStatus_t afRegister( endPointDesc_t *epDesc )
afRegister:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function afRegister
        CODE
//  172 {
        FUNCALL afRegister, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  173   if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#epList
        SJMP    ??afRegister_0
??afRegister_1:
        MOV     DPL,R0
        MOV     DPH,R1
??afRegister_0:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ      ??afRegister_2
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_30:
        JNZ     ??afRegister_1
//  174   {
//  175     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??afRegister_3
//  176   }
//  177 
//  178   return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
??afRegister_2:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     A,R0
        ORL     A,R1
        JZ      ??afRegister_4
        MOV     DPTR,#epList
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_126:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPTR,#epList
        LCALL   ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_117:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_74:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     A,#0x32
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_62:
        INC     DPTR
        MOV     A,#0x1
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_56:
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     R1,#0x0
        SJMP    ??afRegister_3
??afRegister_4:
        MOV     R1,#0x10
??afRegister_3:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
//  179 }
          CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function afRegister
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function afRegister
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_76:
        RET
          CFI (cfiCond9) CFA_SP SP+0
          CFI (cfiCond10) CFA_SP SP+0
          CFI (cfiPicker11) CFA_SP SP+0
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function afRegister
          CFI Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function afRegister
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_62
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-4
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function afRegister
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_55
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-4
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function afRegister
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_56
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-4
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiPicker16) CFA_SP SP+0
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function afRegister
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function afRegister
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_75:
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond17) CFA_SP SP+0
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiPicker19) CFA_SP SP+0
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
//  180 
//  181 /*********************************************************************
//  182  * @fn      afDelete
//  183  *
//  184  * @brief   Delete an Application's EndPoint descriptor and frees the memory
//  185  *
//  186  * @param   EndPoint - Application Endpoint to delete
//  187  *
//  188  * @return  afStatus_SUCCESS - endpoint deleted
//  189  *          afStatus_INVALID_PARAMETER - endpoint not found
//  190  *          afStatus_FAILED - endpoint list empty
//  191  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  192 afStatus_t afDelete( uint8 EndPoint )
afDelete:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function afDelete
        CODE
//  193 {
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  194   epList_t *epCurrent;
//  195   epList_t *epPrevious;
//  196 
//  197   if ( epList != NULL )
        MOV     DPTR,#epList
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ      ??afDelete_0
//  198   {
//  199     epPrevious = epCurrent = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_127:
        MOV     R1,A
//  200 
//  201     // first element of the list matches
//  202     if ( epCurrent->epDesc->endPoint == EndPoint )
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        JNZ     ??afDelete_1
//  203     {
//  204       epList = epCurrent->nextDesc;
        MOV     DPTR,#epList
        SJMP    ??afDelete_2
//  205       osal_mem_free( epCurrent );
//  206 
//  207       return ( afStatus_SUCCESS );
//  208     }
//  209     else
//  210     {
//  211       // search the list
//  212       for ( epCurrent = epPrevious->nextDesc;
//  213             epCurrent != NULL;
//  214             epCurrent = epCurrent->nextDesc )
//  215       {
//  216         if ( epCurrent->epDesc->endPoint == EndPoint )
//  217         {
//  218           epPrevious->nextDesc = epCurrent->nextDesc;
//  219           osal_mem_free( epCurrent );
//  220 
//  221           // delete the entry and free the memory
//  222           return ( afStatus_SUCCESS );
//  223         }
//  224         epPrevious = epCurrent;
??afDelete_3:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
??afDelete_1:
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??afDelete_4
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ     ??afDelete_3
        MOV     DPL,R0
        MOV     DPH,R1
??afDelete_2:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV     R1,#0x0
        SJMP    ??afDelete_5
//  225       }
//  226     }
//  227 
//  228     // no endpoint found
//  229     return ( afStatus_INVALID_PARAMETER );
??afDelete_4:
        MOV     R1,#0x2
        SJMP    ??afDelete_5
//  230   }
//  231   else
//  232   {
//  233     // epList is empty
//  234     return ( afStatus_FAILED );
??afDelete_0:
        MOV     R1,#0x1
//  235   }
??afDelete_5:
        LJMP    ?Subroutine1 & 0xFFFF
//  236 }
          CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function afDelete
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R7
        MOVX    A,@DPTR
        XRL     A,R6
        RET
          CFI (cfiCond21) CFA_SP SP+0
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiPicker23) CFA_SP SP+0
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23
//  237 
//  238 /*********************************************************************
//  239  * @fn          afDataConfirm
//  240  *
//  241  * @brief       This function will generate the Data Confirm back to
//  242  *              the application.
//  243  *
//  244  * @param       endPoint - confirm end point
//  245  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  246  * @param       status - status of APSDE_DATA_REQUEST
//  247  *
//  248  * @return      none
//  249  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  250 void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
afDataConfirm:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function afDataConfirm
        CODE
//  251 {
        FUNCALL afDataConfirm, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     ?V2,R3
//  252   endPointDesc_t *epDesc;
//  253   afDataConfirm_t *msgPtr;
//  254 
//  255   // Find the endpoint description
//  256   epDesc = afFindEndPointDesc( endPoint );
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_47:
        SJMP    ??CrossCallReturnLabel_103
??afDataConfirm_0:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_103:
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??afDataConfirm_1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_97:
        XRL     A,?V0
        JNZ     ??afDataConfirm_0
        MOV     R6,DPL
        MOV     R7,DPH
//  257   if ( epDesc == NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afDataConfirm_1
//  258     return;
//  259 
//  260   // Determine the incoming command type
//  261   msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  262   if ( msgPtr )
        MOV     A,R2
        ORL     A,R3
        JZ      ??afDataConfirm_1
//  263   {
//  264     // Build the Data Confirm message
//  265     msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x3
        MOVX    @DPTR,A
//  266     msgPtr->hdr.status = status;
        INC     DPTR
        MOV     A,?V2
        LCALL   ?Subroutine34 & 0xFFFF
//  267     msgPtr->endpoint = endPoint;
//  268     msgPtr->transID = transID;
//  269 
//  270 #if defined ( MT_AF_CB_FUNC )
//  271     /* If MT has subscribed for this callback, don't send as a message. */
//  272     if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
//  273     {
//  274       /* Send callback if it's subscribed */
//  275       MT_AfDataConfirm ((void *)msgPtr);
//  276       /* Release the memory. */
//  277       osal_msg_deallocate( (void *)msgPtr );
//  278     }
//  279     else
//  280 #endif
//  281     {
//  282       /* send message through task message */
//  283       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
//  284     }
//  285   }
??CrossCallReturnLabel_68:
        MOV     A,?V0
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_93:
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  286 }
??afDataConfirm_1:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function afDataConfirm
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function afDataConfirm
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function afReflectError
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function afReflectError
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond25) CFA_SP SP+0
          CFI (cfiCond26) CFA_SP SP+0
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiCond29) CFA_SP SP+0
          CFI (cfiPicker30) CFA_SP SP+0
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function afReflectError
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_msg_send
        ; Setup parameters for call to function osal_msg_send
        MOV     DPL,R6
        MOV     DPH,R7
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_95
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function afDataConfirm
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function afReflectError
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        LCALL   ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_147:
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI (cfiCond34) CFA_SP SP+0
          CFI (cfiCond35) CFA_SP SP+0
          CFI (cfiCond36) CFA_SP SP+0
          CFI (cfiPicker37) CFA_SP SP+0
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37
//  287 
//  288 /*********************************************************************
//  289  * @fn          afReflectError
//  290  *
//  291  * @brief       This function will generate the Reflect Error message to
//  292  *              the application.
//  293  *
//  294  * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
//  295  * @param       dstAddr - intended destination
//  296  * @param       endPoint - confirm end point
//  297  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  298  * @param       status - status of APSDE_DATA_REQUEST
//  299  *
//  300  * @return      none
//  301  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  302 void afReflectError( uint8 dstAddrMode, uint16 dstAddr, uint8 endPoint, uint8 transID, ZStatus_t status )
afReflectError:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function afReflectError
        CODE
//  303 {
        FUNCALL afReflectError, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afReflectError, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V3,R4
        MOV     ?V4,R5
//  304   endPointDesc_t *epDesc;
//  305   afReflectError_t *msgPtr;
//  306 
//  307   // Find the endpoint description
//  308   epDesc = afFindEndPointDesc( endPoint );
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_48:
        SJMP    ??CrossCallReturnLabel_104
??afReflectError_0:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??afReflectError_1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_98:
        XRL     A,?V3
        JNZ     ??afReflectError_0
        MOV     R6,DPL
        MOV     R7,DPH
//  309   if ( epDesc == NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afReflectError_1
//  310     return;
//  311 
//  312   // Determine the incoming command type
//  313   msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x7
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  314   if ( msgPtr )
        MOV     A,R2
        ORL     A,R3
        JZ      ??afReflectError_1
//  315   {
//  316     // Build the Data Confirm message
//  317     msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  318     msgPtr->hdr.status = status;
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine34 & 0xFFFF
//  319     msgPtr->endpoint = endPoint;
//  320     msgPtr->transID = transID;
//  321     msgPtr->dstAddrMode = dstAddrMode;
//  322     msgPtr->dstAddr = dstAddr;
//  323 
//  324 #if defined ( MT_AF_CB_FUNC )
//  325     /* If MT has subscribed for this callback, don't send as a message. */
//  326     if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
//  327     {
//  328       /* Send callback if it's subscribed */
//  329       MT_AfReflectError( (void *)msgPtr );
//  330       /* Release the memory. */
//  331       osal_msg_deallocate( (void *)msgPtr );
//  332     }
//  333     else
//  334 #endif
//  335     {
//  336       /* send message through task message */
//  337       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
//  338     }
//  339   }
??CrossCallReturnLabel_70:
        MOV     A,?V3
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_71:
        INC     DPTR
        MOV     A,?V4
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     A,?V2
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV     A,?V0
        MOVX    @DPTR,A
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  340 }
??afReflectError_1:
          CFI EndBlock cfiBlock38
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI VB SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndBlock cfiBlock39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond40 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function afReflectError
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_91:
        RET
          CFI (cfiCond40) CFA_SP SP+0
          CFI (cfiCond41) CFA_SP SP+0
          CFI (cfiPicker42) CFA_SP SP+0
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function afReflectError
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_66
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-4
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function afRegisterExtended
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_59
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-6
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function afRegisterExtended
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_60
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-6
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function afRegisterExtended
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_63
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-6
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function afReflectError
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_64
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-6
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond45) CFA_SP SP+-4
          CFI (cfiCond46) CFA_SP SP+-4
          CFI (cfiCond47) CFA_SP SP+-4
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiPicker49) CFA_SP SP+0
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function afReflectError
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_81:
        RET
          CFI (cfiCond50) CFA_SP SP+0
          CFI (cfiCond51) CFA_SP SP+0
          CFI (cfiPicker52) CFA_SP SP+0
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function afRegisterExtended
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_60
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-4
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function afRegisterExtended
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_63
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-4
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function afReflectError
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_64
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_92:
        INC     DPTR
        RET
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiPicker57) CFA_SP SP+0
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function afReflectError
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function afIncomingData
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function afDataConfirm
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function afReflectError
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function afIncomingData
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_100:
        RET
          CFI (cfiCond62) CFA_SP SP+0
          CFI (cfiCond63) CFA_SP SP+0
          CFI (cfiCond64) CFA_SP SP+0
          CFI (cfiCond65) CFA_SP SP+0
          CFI (cfiPicker66) CFA_SP SP+0
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function afReflectError
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_98
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function afIncomingData
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_99
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-4
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function afBuildMSGIncoming
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_96
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function afIncomingData
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_16
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function afIncomingData
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_17
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_113:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiPicker73) CFA_SP SP+0
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_103
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function afReflectError
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function afIncomingData
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function afIncomingData
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function afIncomingData
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG XDATA_I:XDATA:NOROOT(0)
AF_DataRequestDiscoverRoute:
        DATA8
        DS 1
        REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_102
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function afDataConfirm
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function afReflectError
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function afIncomingData
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function afIncomingData
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function afIncomingData
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_110:
        MOV     R2,A
        MOV     A,R1
        RET
          CFI (cfiCond80) CFA_SP SP+0
          CFI (cfiCond81) CFA_SP SP+0
          CFI (cfiCond82) CFA_SP SP+0
          CFI (cfiCond83) CFA_SP SP+0
          CFI (cfiCond84) CFA_SP SP+0
          CFI (cfiCond85) CFA_SP SP+0
          CFI (cfiPicker86) CFA_SP SP+0
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86
//  341 
//  342 /*********************************************************************
//  343  * @fn          afIncomingData
//  344  *
//  345  * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
//  346  *
//  347  * @param       aff  - pointer to APS frame format
//  348  * @param       SrcAddress  - Source address
//  349  * @param       SrcPanId  - Source PAN ID
//  350  * @param       sig - incoming message's link quality
//  351  * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
//  352  * @param       SecurityUse - Security enable/disable
//  353  * @param       timestamp - the MAC Timer2 timestamp at Rx.
//  354  * @param       radius - incoming messages received radius
//  355  *
//  356  * @return      none
//  357  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  358 void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
afIncomingData:
          CFI Block cfiBlock87 Using cfiCommon0
          CFI Function afIncomingData
        CODE
//  359                      NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
//  360                      uint32 timestamp, uint8 radius )
//  361 {
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afBuildMSGIncoming
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     ?V14,R2
        MOV     ?V15,R3
//  362   endPointDesc_t *epDesc = NULL;
//  363   epList_t *pList = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine39 & 0xFFFF
//  364 #if !defined ( APS_NO_GROUPS )
//  365   uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
??CrossCallReturnLabel_82:
        MOV     ?V2,#-0x2
//  366 #endif
//  367 
//  368   if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ANL     A,#0xc
        XRL     A,#0xc
        JNZ     ??afIncomingData_0
//  369   {
//  370 #if !defined ( APS_NO_GROUPS )
//  371     // Find the first endpoint for this group
//  372     grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,#-0x2
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_135:
        LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
        MOV     A,R1
        MOV     ?V2,A
//  373     if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
        MOV     A,#-0x2
        XRL     A,?V2
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  374       return;   // No endpoint found
//  375 
//  376     epDesc = afFindEndPointDesc( grpEp );
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_49:
        SJMP    ??CrossCallReturnLabel_105
??afIncomingData_2:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_105:
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??afIncomingData_3
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_16:
        JNZ     ??afIncomingData_2
        SJMP    ??afIncomingData_4
??afIncomingData_3:
        MOV     DPL,#0x0
        MOV     DPH,#0x0
??afIncomingData_4:
        MOV     R6,DPL
        MOV     R7,DPH
//  377     if ( epDesc == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??afIncomingData_5
//  378       return;   // Endpoint descriptor not found
        LJMP    ??afIncomingData_1 & 0xFFFF
//  379 
//  380     pList = afFindEndPointDescList( epDesc->endPoint );
//  381 #else
//  382     return; // Not supported
//  383 #endif
//  384   }
//  385   else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_0:
        MOV     A,R2
        ADD     A,#0x2
        MOV     ?V8,A
        CLR     A
        ADDC    A,?V15
        MOV     DPL,?V8
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??afIncomingData_6
//  386   {
//  387     // Set the list
//  388     if ( pList != NULL )
        MOV     A,?V0
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  389     {
//  390       epDesc = pList->epDesc;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??afIncomingData_7:
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        SJMP    ??afIncomingData_8
//  391     }
//  392   }
//  393   else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
??afIncomingData_6:
        MOV     A,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_50:
        SJMP    ??CrossCallReturnLabel_106
??afIncomingData_9:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??afIncomingData_10
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV     R4,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??afIncomingData_9
        SJMP    ??afIncomingData_11
??afIncomingData_10:
        MOV     R0,#0x0
        MOV     R1,#0x0
??afIncomingData_11:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  394   {
//  395     pList = afFindEndPointDescList( epDesc->endPoint );
??afIncomingData_5:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#epList
        SJMP    ??afIncomingData_12
??afIncomingData_13:
        MOV     DPL,?V0
        MOV     DPH,?V1
??afIncomingData_12:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ      ??afIncomingData_7
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_144:
        XRL     A,R1
        JNZ     ??afIncomingData_13
//  396   }
??afIncomingData_14:
        SJMP    ??afIncomingData_7
//  397 
//  398   while ( epDesc )
//  399   {
//  400     uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
//  401 
//  402     if ( pList->pfnDescCB )
//  403     {
//  404       uint16 *pID = (uint16 *)(pList->pfnDescCB(
//  405                                  AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
//  406       if ( pID )
//  407       {
//  408         epProfileID = *pID;
//  409         osal_mem_free( pID );
//  410       }
//  411     }
//  412     else if ( epDesc->simpleDesc )
//  413     {
//  414       epProfileID = epDesc->simpleDesc->AppProfId;
//  415     }
//  416 
//  417     // First part of verification is to make sure that:
//  418     // the local Endpoint ProfileID matches the received ProfileID OR
//  419     // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
//  420     // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
//  421     if ( (aff->ProfileID == epProfileID) ||
//  422          ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
//  423          ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
//  424     {
//  425       // Save original endpoint
//  426       uint8 endpoint = aff->DstEndPoint;
//  427 
//  428       // overwrite with descriptor's endpoint
//  429       aff->DstEndPoint = epDesc->endPoint;
//  430 
//  431       afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
//  432                          nwkSeqNum, SecurityUse, timestamp, radius );
//  433 
//  434       // Restore with original endpoint
//  435       aff->DstEndPoint = endpoint;
//  436     }
//  437 
//  438     if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
//  439     {
//  440 #if !defined ( APS_NO_GROUPS )
//  441       // Find the next endpoint for this group
//  442       grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
//  443       if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
//  444         return;   // No endpoint found
//  445 
//  446       epDesc = afFindEndPointDesc( grpEp );
//  447       if ( epDesc == NULL )
//  448         return;   // Endpoint descriptor not found
//  449 
//  450       pList = afFindEndPointDescList( epDesc->endPoint );
//  451 #else
//  452       return;
//  453 #endif
//  454     }
//  455     else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
//  456     {
//  457       pList = pList->nextDesc;
//  458       if ( pList )
//  459         epDesc = pList->epDesc;
??afIncomingData_15:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??afIncomingData_8:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
        SJMP    ??afIncomingData_16
??afIncomingData_17:
        MOV     DPL,?V0
        MOV     DPH,?V1
??afIncomingData_18:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        JZ      ??afIncomingData_16
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_145:
        XRL     A,R1
        JNZ     ??afIncomingData_17
??afIncomingData_16:
        MOV     ?V8,#-0x2
        MOV     ?V9,#-0x1
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     DPL,R6
        MOV     DPH,R7
        JZ      ??afIncomingData_19
        ; Setup parameters for indirect call
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ?CALL_IND
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_23
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??CrossCallReturnLabel_23
??afIncomingData_19:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ      ??CrossCallReturnLabel_23
        INC     DPTR
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_34:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V8
        XRL     A,R0
        JNZ     ??afIncomingData_20
        MOV     A,?V9
        XRL     A,R1
??afIncomingData_20:
        JZ      ??afIncomingData_21
        MOV     A,R2
        JNZ     ??afIncomingData_22
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??afIncomingData_23 & 0xFFFF
        SJMP    ??afIncomingData_21
??afIncomingData_22:
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??afIncomingData_24
        MOV     A,#-0x1
        XRL     A,R1
??afIncomingData_24:
        JNZ     ??afIncomingData_23
??afIncomingData_21:
        MOV     A,?V14
        ADD     A,#0x2
        MOV     ?V8,A
        CLR     A
        ADDC    A,?V15
        MOV     ?V9,A
        MOV     DPL,?V8
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    @DPTR,A
        ; Setup parameters for call to function afBuildMSGIncoming
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V14
        MOV     R3,?V15
        LCALL   `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPL,?V8
        MOV     DPH,?V9
        MOVX    @DPTR,A
??afIncomingData_23:
        MOV     DPL,?V14
        MOV     DPH,?V15
        MOVX    A,@DPTR
        ANL     A,#0xc
        XRL     A,#0xc
        JNZ     ??afIncomingData_25
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,?V2
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_136:
        LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
        MOV     A,R1
        MOV     ?V2,A
        MOV     A,#-0x2
        XRL     A,?V2
        JZ      ??afIncomingData_1
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_51:
        SJMP    ??CrossCallReturnLabel_107
??afIncomingData_26:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_107:
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??afIncomingData_27
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_17:
        JNZ     ??afIncomingData_26
        SJMP    ??afIncomingData_28
??afIncomingData_27:
        MOV     R0,#0x0
        MOV     R1,#0x0
??afIncomingData_28:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      ??afIncomingData_1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#epList
        LJMP    ??afIncomingData_18 & 0xFFFF
??afIncomingData_25:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??afIncomingData_1
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine8 & 0xFFFF
//  460       else
//  461         epDesc = NULL;
//  462     }
??CrossCallReturnLabel_15:
        JZ      $+5
        LJMP    ??afIncomingData_15 & 0xFFFF
//  463     else
//  464       epDesc = NULL;
//  465   }
//  466 }
??afIncomingData_1:
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function afReflectError
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function afIncomingData
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function afIncomingData
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function afIncomingData
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function AF_DataRequest
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker94 Using cfiCommon1
          CFI (cfiPicker94) NoFunction
          CFI (cfiPicker94) Picker
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI (cfiCond88) CFA_SP SP+0
          CFI (cfiCond89) CFA_SP SP+0
          CFI (cfiCond90) CFA_SP SP+0
          CFI (cfiCond91) CFA_SP SP+0
          CFI (cfiCond92) CFA_SP SP+0
          CFI (cfiCond93) CFA_SP SP+0
          CFI (cfiPicker94) CFA_SP SP+0
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function afIncomingData
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_101:
        XRL     A,?V2
        RET
          CFI (cfiCond95) CFA_SP SP+0
          CFI (cfiCond96) CFA_SP SP+0
          CFI (cfiPicker97) CFA_SP SP+0
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond98 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function afIncomingData
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function afIncomingData
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     A,?V0
        ORL     A,?V1
        RET
          CFI (cfiCond98) CFA_SP SP+0
          CFI (cfiCond99) CFA_SP SP+0
          CFI (cfiCond100) CFA_SP SP+0
          CFI (cfiPicker101) CFA_SP SP+0
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function afIncomingData
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_13
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-4
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function afIncomingData
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_14
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-4
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function afIncomingData
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_15
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-4
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function AF_DataRequest
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        RET
          CFI (cfiCond102) CFA_SP SP+0
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond106) CFA_SP SP+0
          CFI (cfiPicker107) CFA_SP SP+0
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107
//  467 
//  468 /*********************************************************************
//  469  * @fn          afBuildMSGIncoming
//  470  *
//  471  * @brief       Build the message for the app
//  472  *
//  473  * @param
//  474  *
//  475  * @return      pointer to next in data buffer
//  476  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  477 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
afBuildMSGIncoming:
          CFI Block cfiBlock108 Using cfiCommon0
          CFI Function afBuildMSGIncoming
        CODE
//  478                  zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  479                  uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
//  480 {
        FUNCALL afBuildMSGIncoming, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, afCopyAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V4,R4
        MOV     ?V5,R5
        MOV     ?V6,R1
//  481   afIncomingMSGPacket_t *MSGpkt;
//  482   const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
//  483   uint8 *asdu = aff->asdu;
        MOV     A,R2
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ?Subroutine17 & 0xFFFF
//  484   MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
??CrossCallReturnLabel_24:
        MOV     A,R2
        ADD     A,#0x10
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V3,A
        ; Setup parameters for call to function osal_msg_allocate
        MOV     DPL,?V2
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x27
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     R6,?V10
        MOV     R7,?V11
//  485 
//  486   if ( MSGpkt == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
//  487   {
//  488     return;
//  489   }
//  490 
//  491   MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1a
        LCALL   ?Subroutine37 & 0xFFFF
//  492   MSGpkt->groupId = aff->GroupID;
??CrossCallReturnLabel_77:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?Subroutine28 & 0xFFFF
//  493   MSGpkt->clusterId = aff->ClusterID;
??CrossCallReturnLabel_57:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_21:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine50_0 & 0xFFFF
//  494   afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
??CrossCallReturnLabel_118:
        ; Setup parameters for call to function afCopyAddress
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??afCopyAddress::?relay`; Banked call to: afCopyAddress
//  495   MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  496   MSGpkt->endPoint = epDesc->endPoint;
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  497   MSGpkt->wasBroadcast = aff->wasBroadcast;
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine48_0 & 0xFFFF
//  498   MSGpkt->LinkQuality = sig->LinkQuality;
??CrossCallReturnLabel_96:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine35 & 0xFFFF
//  499   MSGpkt->correlation = sig->correlation;
??CrossCallReturnLabel_72:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine35 & 0xFFFF
//  500   MSGpkt->rssi = sig->rssi;
??CrossCallReturnLabel_73:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  501   MSGpkt->SecurityUse = SecurityUse;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  502   MSGpkt->timestamp = timestamp;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     A,R6
        ADD     A,#0x1a
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
//  503   MSGpkt->nwkSeqNum = nwkSeqNum;
        MOV     A,R6
        ADD     A,#0x1e
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,?V6
        MOVX    @DPTR,A
//  504   MSGpkt->macSrcAddr = aff->macSrcAddr;
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_36:
        ADD     A,#0x24
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine28 & 0xFFFF
//  505   MSGpkt->macDestAddr = aff->macDestAddr;
??CrossCallReturnLabel_58:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_37:
        ADD     A,#0x12
        LCALL   ?Subroutine29 & 0xFFFF
//  506   MSGpkt->srcAddr.panId = SrcPanId;
??CrossCallReturnLabel_124:
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_38:
        ADD     A,#0x10
        LCALL   ?Subroutine29 & 0xFFFF
//  507   MSGpkt->cmd.TransSeqNumber = 0;
??CrossCallReturnLabel_125:
        MOV     A,R6
        ADD     A,#0x1f
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
//  508   MSGpkt->cmd.DataLength = aff->asduLength;
        MOV     A,R6
        ADD     A,#0x20
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  509   MSGpkt->radius = radius;
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x26
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  510 
//  511   if ( MSGpkt->cmd.DataLength )
        MOV     A,R6
        ADD     A,#0x22
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_128:
        MOV     A,R2
        ORL     A,R3
        JZ      ??afBuildMSGIncoming_1
//  512   {
//  513     MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        MOV     A,R6
        ADD     A,#0x27
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  514     osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine18 & 0xFFFF
//  515   }
??CrossCallReturnLabel_26:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP    ??afBuildMSGIncoming_2
//  516   else
//  517   {
//  518     MSGpkt->cmd.Data = NULL;
??afBuildMSGIncoming_1:
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  519   }
//  520 
//  521 #if defined ( MT_AF_CB_FUNC )
//  522   // If ZDO or SAPI have registered for this endpoint, dont intercept it here
//  523   if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
//  524   {
//  525     MT_AfIncomingMsg( (void *)MSGpkt );
//  526     // Release the memory.
//  527     osal_msg_deallocate( (void *)MSGpkt );
//  528   }
//  529   else
//  530 #endif
//  531   {
//  532     // Send message through task message.
//  533     osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
??afBuildMSGIncoming_2:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ??Subroutine47_0 & 0xFFFF
//  534   }
??CrossCallReturnLabel_95:
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  535 }
??afBuildMSGIncoming_0:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock108

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond109 Using cfiCommon0
          CFI Function afRegister
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function afBuildMSGIncoming
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function afBuildMSGIncoming
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        RET
          CFI (cfiCond109) CFA_SP SP+0
          CFI (cfiCond110) CFA_SP SP+0
          CFI (cfiCond111) CFA_SP SP+0
          CFI (cfiPicker112) CFA_SP SP+0
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_124
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function afBuildMSGIncoming
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_115
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function afRegisterExtended
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function afRegister
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function afBuildMSGIncoming
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function AF_DataRequest
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function AF_DataRequest
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function AF_DataRequest
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function AF_DataRequest
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function afCopyAddress
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function afBuildMSGIncoming
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function afBuildMSGIncoming
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI (cfiCond116) CFA_SP SP+0
          CFI (cfiCond117) CFA_SP SP+0
          CFI (cfiCond118) CFA_SP SP+0
          CFI (cfiCond119) CFA_SP SP+0
          CFI (cfiCond120) CFA_SP SP+0
          CFI (cfiCond121) CFA_SP SP+0
          CFI (cfiCond122) CFA_SP SP+0
          CFI (cfiCond123) CFA_SP SP+0
          CFI (cfiCond124) CFA_SP SP+0
          CFI (cfiCond125) CFA_SP SP+0
          CFI (cfiCond126) CFA_SP SP+0
          CFI (cfiPicker127) CFA_SP SP+0
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function afBuildMSGIncoming
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_78:
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond128) CFA_SP SP+0
          CFI (cfiCond129) CFA_SP SP+0
          CFI (cfiPicker130) CFA_SP SP+0
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond131 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function afBuildMSGIncoming
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_57
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function afBuildMSGIncoming
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_58
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function AF_DataRequest
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        RET
          CFI (cfiCond131) CFA_SP SP+0
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond134) CFA_SP SP+0
          CFI (cfiPicker135) CFA_SP SP+0
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function afBuildMSGIncoming
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function afBuildMSGIncoming
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker139 Using cfiCommon1
          CFI (cfiPicker139) NoFunction
          CFI (cfiPicker139) Picker
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV     A,R6
        RET
          CFI (cfiCond136) CFA_SP SP+0
          CFI (cfiCond137) CFA_SP SP+0
          CFI (cfiCond138) CFA_SP SP+0
          CFI (cfiPicker139) CFA_SP SP+0
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiPicker139

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond140 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function afIncomingData
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function afBuildMSGIncoming
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
        RET
          CFI (cfiCond140) CFA_SP SP+0
          CFI (cfiCond141) CFA_SP SP+0
          CFI (cfiCond142) CFA_SP SP+0
          CFI (cfiPicker143) CFA_SP SP+0
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function afBuildMSGIncoming
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_85:
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond144) CFA_SP SP+0
          CFI (cfiCond145) CFA_SP SP+0
          CFI (cfiPicker146) CFA_SP SP+0
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146
//  536 
//  537 /*********************************************************************
//  538  * @fn      AF_DataRequest
//  539  *
//  540  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  541  *          SendMulti and MSG-Send.
//  542  *
//  543  * input parameters
//  544  *
//  545  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  546  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  547  * @param   cID - A valid cluster ID as specified by the Profile.
//  548  * @param   len - Number of bytes of data pointed to by next param.
//  549  * @param  *buf - A pointer to the data bytes to send.
//  550  * @param  *transID - A pointer to a byte which can be modified and which will
//  551  *                    be used as the transaction sequence number of the msg.
//  552  * @param   options - Valid bit mask of Tx options.
//  553  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  554  *
//  555  * output parameters
//  556  *
//  557  * @param  *transID - Incremented by one if the return value is success.
//  558  *
//  559  * @return  afStatus_t - See previous definition of afStatus_... types.
//  560  */
//  561 uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  562 afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequest:
          CFI Block cfiBlock147 Using cfiCommon0
          CFI Function AF_DataRequest
        CODE
//  563                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  564                            uint8 options, uint8 radius )
//  565 {
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, RTG_CheckRtStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, APSDE_DataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, APSDE_DataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V2,R1
//  566   pDescCB pfnDescCB;
//  567   ZStatus_t stat;
//  568   APSDE_DataReq_t req;
//  569   afDataReqMTU_t mtu;
//  570   epList_t *pList;
//  571 
//  572   // Verify source end point
//  573   if ( srcEP == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??AF_DataRequest_0 & 0xFFFF
//  574   {
//  575     return afStatus_INVALID_PARAMETER;
//  576   }
//  577 
//  578 #if !defined( REFLECTOR )
//  579   if ( dstAddr->addrMode == afAddrNotPresent )
//  580   {
//  581     return afStatus_INVALID_PARAMETER;
//  582   }
//  583 #endif
//  584 
//  585   // Check if route is available before sending data
//  586   if ( options & AF_LIMIT_CONCENTRATOR  )
        MOV     A,R2
        ADD     A,#0x8
        MOV     ?V0,A
        CLR     A
        ADDC    A,?V5
        MOV     ?V1,A
        MOV     A,R1
        MOV     C,0xE0 /* A   */.3
        JNC     ??AF_DataRequest_1
//  587   {
//  588     if ( dstAddr->addrMode != afAddr16Bit )
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??AF_DataRequest_0 & 0xFFFF
//  589     {
//  590       return ( afStatus_INVALID_PARAMETER );
//  591     }
//  592 
//  593     // First, make sure the destination is not its self, then check for an existing route.
//  594     if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
//  595         && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_129:
        MOV     A,?V6
        XRL     A,R2
        JNZ     ??AF_DataRequest_2
        MOV     A,?V7
        XRL     A,R3
??AF_DataRequest_2:
        JZ      ??AF_DataRequest_1
        ; Setup parameters for call to function RTG_CheckRtStatus
        MOV     R4,#0x3
        MOV     R1,#0x1
        LCALL   `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
        MOV     A,R1
        JZ      ??AF_DataRequest_1
//  596     {
//  597       // A valid route to a concentrator wasn't found
//  598       return ( afStatus_NO_ROUTE );
        MOV     R1,#-0x33
        LJMP    ??AF_DataRequest_3 & 0xFFFF
//  599     }
//  600   }
//  601 
//  602   // Validate broadcasting
//  603   if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
//  604        ( dstAddr->addrMode == afAddrBroadcast )    )
??AF_DataRequest_1:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x2
        XRL     A,R0
        JZ      ??AF_DataRequest_4
        MOV     A,#0xf
        XRL     A,R0
        JNZ     ??AF_DataRequest_5
//  605   {
//  606     // Check for valid broadcast values
//  607     if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
??AF_DataRequest_4:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_130:
        LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
        MOV     A,R1
        MOV     DPL,?V0
        MOV     DPH,?V1
        JZ      ??AF_DataRequest_6
//  608     {
//  609       // Force mode to broadcast
//  610       dstAddr->addrMode = afAddrBroadcast;
        MOV     A,#0xf
        MOVX    @DPTR,A
//  611     }
//  612     else
//  613     {
//  614       // Address is not a valid broadcast type
//  615       if ( dstAddr->addrMode == afAddrBroadcast )
//  616       {
//  617         return afStatus_INVALID_PARAMETER;
//  618       }
//  619     }
//  620   }
//  621   else if ( dstAddr->addrMode != afAddr64Bit &&
//  622             dstAddr->addrMode != afAddrGroup &&
//  623             dstAddr->addrMode != afAddrNotPresent )
//  624   {
//  625     return afStatus_INVALID_PARAMETER;
//  626   }
//  627 
//  628   // Set destination address
//  629   req.dstAddr.addrMode = dstAddr->addrMode;
??AF_DataRequest_7:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine37 & 0xFFFF
//  630   if ( dstAddr->addrMode == afAddr64Bit )
??CrossCallReturnLabel_79:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??AF_DataRequest_8
//  631   {
//  632     osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V4
        MOV     R5,?V5
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??CrossCallReturnLabel_119
//  633   }
??AF_DataRequest_6:
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??AF_DataRequest_7
        SJMP    ??AF_DataRequest_0
??AF_DataRequest_5:
        MOV     A,#0x3
        XRL     A,R0
        JZ      ??AF_DataRequest_7
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??AF_DataRequest_7
        MOV     A,R0
        JZ      ??AF_DataRequest_7
??AF_DataRequest_0:
        MOV     R1,#0x2
        LJMP    ??AF_DataRequest_3 & 0xFFFF
//  634   else
//  635   {
//  636     req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
??AF_DataRequest_8:
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ?Subroutine23 & 0xFFFF
//  637   }
??CrossCallReturnLabel_39:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine50_0 & 0xFFFF
//  638 
//  639   // This option is to use Wildcard ProfileID in outgoing packets
//  640   if ( options & AF_WILDCARD_PROFILEID )
??CrossCallReturnLabel_119:
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.1
        MOV     A,#0x11
        JNC     ??AF_DataRequest_9
//  641   {
//  642     req.profileID = ZDO_WILDCARD_PROFILE_ID;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??AF_DataRequest_10
//  643   }
//  644   else
//  645   {
//  646     req.profileID = ZDO_PROFILE_ID;
??AF_DataRequest_9:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  647 
//  648     if ( (pfnDescCB = afGetDescCB( srcEP )) )
        MOV     DPTR,#epList
??AF_DataRequest_11:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        JZ      ??AF_DataRequest_12
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_133:
        MOV     A,R6
        XRL     A,R2
        JNZ     ??AF_DataRequest_13
        MOV     A,R7
        XRL     A,R3
??AF_DataRequest_13:
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??AF_DataRequest_11
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_18:
        JZ      ??AF_DataRequest_12
//  649     {
//  650       uint16 *pID = (uint16 *)(pfnDescCB(
//  651                                    AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
        ; Setup parameters for indirect call
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ?CALL_IND
//  652       if ( pID )
        MOV     A,R2
        ORL     A,R3
        JZ      ??AF_DataRequest_14
//  653       {
//  654         req.profileID = *pID;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine50_0 & 0xFFFF
//  655         osal_mem_free( pID );
??CrossCallReturnLabel_120:
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??AF_DataRequest_14
//  656       }
//  657     }
//  658     else if ( srcEP->simpleDesc )
??AF_DataRequest_12:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ      ??AF_DataRequest_14
//  659     {
//  660       req.profileID = srcEP->simpleDesc->AppProfId;
        INC     DPTR
        LCALL   ?Subroutine23 & 0xFFFF
//  661     }
//  662   }
??CrossCallReturnLabel_41:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??AF_DataRequest_10:
        MOVX    @DPTR,A
//  663 
//  664   req.txOptions = 0;
??AF_DataRequest_14:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  665 
//  666   if ( ( options & AF_ACK_REQUEST              ) &&
//  667        ( req.dstAddr.addrMode != AddrBroadcast ) &&
//  668        ( req.dstAddr.addrMode != AddrGroup     )    )
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.4
        JNC     ??AF_DataRequest_15
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0xf
        XRL     A,R0
        JZ      ??AF_DataRequest_15
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??AF_DataRequest_15
//  669   {
//  670     req.txOptions |=  APS_TX_OPTIONS_ACK;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  671   }
//  672 
//  673   if ( options & AF_SKIP_ROUTING )
??AF_DataRequest_15:
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.7
        JNC     ??AF_DataRequest_16
//  674   {
//  675     req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x10
        MOVX    @DPTR,A
//  676   }
//  677 
//  678   if ( options & AF_EN_SECURITY )
??AF_DataRequest_16:
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.6
        JNC     ??AF_DataRequest_17
//  679   {
//  680     req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
//  681     mtu.aps.secure = TRUE;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??AF_DataRequest_18
//  682   }
//  683   else
//  684   {
//  685     mtu.aps.secure = FALSE;
??AF_DataRequest_17:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??AF_DataRequest_18:
        MOVX    @DPTR,A
//  686   }
//  687 
//  688   if ( options & AF_PREPROCESS )
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.2
        JNC     ??AF_DataRequest_19
//  689   {
//  690     req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x40
        MOVX    @DPTR,A
//  691   }
//  692 
//  693   mtu.kvp = FALSE;
??AF_DataRequest_19:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  694 
//  695   if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.5
        JNC     ??AF_DataRequest_20
//  696   {
//  697     req.discoverRoute = DISC_ROUTE_INITIATE;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        SJMP    ??AF_DataRequest_21
//  698   }
//  699   else
//  700   {
//  701     req.discoverRoute = AF_DataRequestDiscoverRoute;
??AF_DataRequest_20:
        MOV     DPTR,#AF_DataRequestDiscoverRoute
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
??AF_DataRequest_21:
        MOVX    @DPTR,A
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
//  702   }
        LCALL   ?Subroutine39 & 0xFFFF
//  703 
//  704   req.transID       = *transID;
??CrossCallReturnLabel_83:
        MOV     DPL,?V0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  705   req.srcEP         = srcEP->endPoint;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  706   req.dstEP         = dstAddr->endPoint;
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  707   req.clusterID     = cID;
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_121:
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
//  708   req.asduLen       = len;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V5
        MOVX    @DPTR,A
//  709   req.asdu          = buf;
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine50_0 & 0xFFFF
//  710   req.radiusCounter = radius;
??CrossCallReturnLabel_122:
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  711 #if defined ( INTER_PAN )
//  712   req.dstPanId      = dstAddr->panId;
//  713 #endif // INTER_PAN
//  714 
//  715   // Look if there is a Callback function registered for this endpoint
//  716   // The callback is used to control the AF Transaction ID used when sending messages
//  717   pList = afFindEndPointDescList( srcEP->endPoint );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R4,A
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_52:
        SJMP    ??CrossCallReturnLabel_102
??AF_DataRequest_22:
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??AF_DataRequest_23
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_140:
        XRL     A,R4
        MOV     DPL,R2
        MOV     DPH,R3
        JNZ     ??AF_DataRequest_22
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        JZ      ??AF_DataRequest_23
//  718 
//  719   if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
//  720   {
//  721     pList->pfnApplCB( &req );
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   ?CALL_IND
//  722   }
//  723 
//  724 #if defined ( INTER_PAN )
//  725   if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
//  726   {
//  727     if ( len > INTERP_DataReqMTU() )
//  728     {
//  729       stat = afStatus_INVALID_PARAMETER;
//  730     }
//  731     else
//  732     {
//  733       stat = INTERP_DataReq( &req );
//  734     }
//  735   }
//  736   else
//  737 #endif // INTER_PAN
//  738   {
//  739     if (len > afDataReqMTU( &mtu ) )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??AF_DataRequest_23
        MOV     ?V3,#0x8
        SJMP    ??AF_DataRequest_24
??AF_DataRequest_23:
        MOV     ?V3,#0x0
??AF_DataRequest_24:
        ; Setup parameters for call to function APSDE_DataReqMTU
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
        MOV     A,R1
        CLR     C
        SUBB    A,?V3
        CLR     C
        SUBB    A,?V4
        CLR     A
        SUBB    A,?V5
        JNC     ??AF_DataRequest_25
//  740     {
//  741       if (apsfSendFragmented)
        MOV     DPTR,#apsfSendFragmented
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        JZ      ??AF_DataRequest_26
//  742       {
//  743         stat = (*apsfSendFragmented)( &req );
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??Subroutine56_0 & 0xFFFF
//  744       }
??CrossCallReturnLabel_146:
        LCALL   ?CALL_IND
        SJMP    ??AF_DataRequest_27
//  745       else
//  746       {
//  747         stat = afStatus_INVALID_PARAMETER;
??AF_DataRequest_26:
        MOV     ?V3,#0x2
        SJMP    ??AF_DataRequest_28
//  748       }
//  749     }
//  750     else
//  751     {
//  752       stat = APSDE_DataReq( &req );
??AF_DataRequest_25:
        ; Setup parameters for call to function APSDE_DataReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
??AF_DataRequest_27:
        MOV     A,R1
        MOV     ?V3,A
//  753     }
//  754   }
//  755 
//  756   /*
//  757    * If this is an EndPoint-to-EndPoint message on the same device, it will not
//  758    * get added to the NWK databufs. So it will not go OTA and it will not get
//  759    * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
//  760    * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
//  761    * message with the first in line TransSeqNumber, even on a multi message.
//  762    * Also note that a reflected msg will not have its confirmation generated
//  763    * here.
//  764    */
//  765   if ( (req.dstAddr.addrMode == Addr16Bit) &&
//  766        (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
??AF_DataRequest_28:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??AF_DataRequest_29
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??AF_DataRequest_30
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??AF_DataRequest_30:
        JNZ     ??AF_DataRequest_29
//  767   {
//  768     afDataConfirm( srcEP->endPoint, *transID, stat );
        ; Setup parameters for call to function afDataConfirm
        MOV     R3,?V3
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
//  769   }
//  770 
//  771   if ( stat == afStatus_SUCCESS )
??AF_DataRequest_29:
        MOV     A,?V3
        JNZ     ??AF_DataRequest_31
//  772   {
//  773     (*transID)++;
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  774   }
//  775 
//  776   return (afStatus_t)stat;
??AF_DataRequest_31:
        MOV     R1,?V3
??AF_DataRequest_3:
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        LJMP    ?Subroutine2 & 0xFFFF
//  777 }
          CFI EndBlock cfiBlock147

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function AF_DataRequest
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker150 Using cfiCommon1
          CFI (cfiPicker150) NoFunction
          CFI (cfiPicker150) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x2
        MOV     DPL,R4
        MOV     DPH,R5
        RET
          CFI (cfiCond148) CFA_SP SP+0
          CFI (cfiCond149) CFA_SP SP+0
          CFI (cfiPicker150) CFA_SP SP+0
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiPicker150

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond151 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function AF_DataRequest
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker153 Using cfiCommon1
          CFI (cfiPicker153) NoFunction
          CFI (cfiPicker153) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_109:
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        RET
          CFI (cfiCond151) CFA_SP SP+0
          CFI (cfiCond152) CFA_SP SP+0
          CFI (cfiPicker153) CFA_SP SP+0
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiPicker153

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond154 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_103
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function afReflectError
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_104
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function afIncomingData
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_105
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function afIncomingData
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_106
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-4
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function afIncomingData
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_107
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-4
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function AF_DataRequest
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_102
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function afIncomingData
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_19
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function AF_DataRequest
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_18
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function afRegister
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_1
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function afDelete
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_2
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-4
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function AF_DataRequest
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_0
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-4
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function AF_DataRequest
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_3
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-4
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function afGetMatch
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_4
          CFI (cfiCond166) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond166) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond166) CFA_SP SP+-9
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function afSetMatch
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_5
          CFI (cfiCond167) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond167) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond167) CFA_SP SP+-9
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function afAPSF_ConfigGet
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_6
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-4
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function afSetApplCB
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_7
          CFI (cfiCond169) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond169) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond169) CFA_SP SP+-9
          CFI Block cfiPicker170 Using cfiCommon1
          CFI (cfiPicker170) NoFunction
          CFI (cfiPicker170) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_114:
        MOV     A,R0
        RET
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond166) CFA_SP SP+-7
          CFI (cfiCond167) CFA_SP SP+-7
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond169) CFA_SP SP+-7
          CFI (cfiPicker170) CFA_SP SP+0
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiPicker170

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function AF_DataRequest
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function AF_DataRequest
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker174 Using cfiCommon1
          CFI (cfiPicker174) NoFunction
          CFI (cfiPicker174) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,DPL
        ORL     A,DPH
        RET
          CFI (cfiCond171) CFA_SP SP+0
          CFI (cfiCond172) CFA_SP SP+0
          CFI (cfiCond173) CFA_SP SP+0
          CFI (cfiPicker174) CFA_SP SP+0
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiPicker174
//  778 
//  779 #if defined ( ZIGBEE_SOURCE_ROUTING )
//  780 /*********************************************************************
//  781  * @fn      AF_DataRequestSrcRtg
//  782  *
//  783  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  784  *          SendMulti and MSG-Send.
//  785  *
//  786  * input parameters
//  787  *
//  788  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  789  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  790  * @param   cID - A valid cluster ID as specified by the Profile.
//  791  * @param   len - Number of bytes of data pointed to by next param.
//  792  * @param  *buf - A pointer to the data bytes to send.
//  793  * @param  *transID - A pointer to a byte which can be modified and which will
//  794  *                    be used as the transaction sequence number of the msg.
//  795  * @param   options - Valid bit mask of Tx options.
//  796  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  797  * @param   relayCnt - Number of devices in the relay list
//  798  * @param   pRelayList - Pointer to the relay list
//  799  *
//  800  * output parameters
//  801  *
//  802  * @param  *transID - Incremented by one if the return value is success.
//  803  *
//  804  * @return  afStatus_t - See previous definition of afStatus_... types.
//  805  */
//  806 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  807 afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequestSrcRtg:
          CFI Block cfiBlock175 Using cfiCommon0
          CFI Function AF_DataRequestSrcRtg
        CODE
//  808                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  809                            uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
//  810 {
        FUNCALL AF_DataRequestSrcRtg, RTG_AddSrcRtgEntry_Guaranteed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequestSrcRtg, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V2,R1
//  811   uint8 status;
//  812 
//  813   /* Add the source route to the source routing table */
//  814   status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
//  815                                          pRelayList );
        ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_131:
        LCALL   `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
        MOV     A,R1
        MOV     R1,A
//  816 
//  817   if( status == RTG_SUCCESS)
        JNZ     ??AF_DataRequestSrcRtg_0
//  818   {
//  819     /* Call AF_DataRequest to send the data */
//  820     status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
        ; Setup parameters for call to function AF_DataRequest
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,?V2
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        MOV     R1,A
        SJMP    ??AF_DataRequestSrcRtg_1
//  821   }
//  822   else if( status == RTG_INVALID_PATH )
??AF_DataRequestSrcRtg_0:
        MOV     A,#0x5
        XRL     A,R1
        JNZ     ??AF_DataRequestSrcRtg_2
//  823   {
//  824     /* The source route relay count is exceeding the network limit */
//  825     status = afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??AF_DataRequestSrcRtg_1
//  826   }
//  827   else
//  828   {
//  829     /* The guaranteed adding entry fails due to memory failure */
//  830     status = afStatus_MEM_FAIL;
??AF_DataRequestSrcRtg_2:
        MOV     R1,#0x10
//  831   }
//  832   return status;
??AF_DataRequestSrcRtg_1:
        LJMP    ?Subroutine0 & 0xFFFF
//  833 }
          CFI EndBlock cfiBlock175

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond176 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_135
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function afIncomingData
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker178 Using cfiCommon1
          CFI (cfiPicker178) NoFunction
          CFI (cfiPicker178) Picker
        INC     DPTR
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiPicker178
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond179 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_134
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function afIncomingData
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function afIncomingData
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker182 Using cfiCommon1
          CFI (cfiPicker182) NoFunction
          CFI (cfiPicker182) Picker
        INC     DPTR
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiPicker182
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond183 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_133
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function afFindSimpleDesc
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function afIncomingData
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function afIncomingData
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker187 Using cfiCommon1
          CFI (cfiPicker187) NoFunction
          CFI (cfiPicker187) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiPicker187
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond188 Using cfiCommon0
          CFI Function afRegister
          CFI Conditional ??CrossCallReturnLabel_126
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function afDelete
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function afBuildMSGIncoming
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function AF_DataRequest
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function AF_DataRequest
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function AF_DataRequestSrcRtg
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function afFindEndPointDesc
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond194) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond194) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond194) CFA_SP SP+-7
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function AF_DataRequest
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function afFindSimpleDesc
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function afIncomingData
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond197) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond197) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond197) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function afIncomingData
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond198) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-2
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker199 Using cfiCommon1
          CFI (cfiPicker199) NoFunction
          CFI (cfiPicker199) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI (cfiCond188) CFA_SP SP+0
          CFI (cfiCond189) CFA_SP SP+0
          CFI (cfiCond190) CFA_SP SP+0
          CFI (cfiCond191) CFA_SP SP+0
          CFI (cfiCond192) CFA_SP SP+0
          CFI (cfiCond193) CFA_SP SP+0
          CFI (cfiCond194) CFA_SP SP+-5
          CFI (cfiCond195) CFA_SP SP+0
          CFI (cfiCond196) CFA_SP SP+0
          CFI (cfiCond197) CFA_SP SP+0
          CFI (cfiCond198) CFA_SP SP+0
          CFI (cfiPicker199) CFA_SP SP+0
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiPicker199
//  834 
//  835 #endif
//  836 
//  837 /*********************************************************************
//  838  * @fn      afFindEndPointDescList
//  839  *
//  840  * @brief   Find the endpoint description entry from the endpoint
//  841  *          number.
//  842  *
//  843  * @param   EndPoint - Application Endpoint to look for
//  844  *
//  845  * @return  the address to the endpoint/interface description entry
//  846  */
//  847 static epList_t *afFindEndPointDescList( uint8 EndPoint )
//  848 {
//  849   epList_t *epSearch;
//  850 
//  851   for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
//  852   {
//  853     if (epSearch->epDesc->endPoint == EndPoint)
//  854     {
//  855       break;
//  856     }
//  857   }
//  858 
//  859   return epSearch;
//  860 }
//  861 
//  862 /*********************************************************************
//  863  * @fn      afFindEndPointDesc
//  864  *
//  865  * @brief   Find the endpoint description entry from the endpoint
//  866  *          number.
//  867  *
//  868  * @param   EndPoint - Application Endpoint to look for
//  869  *
//  870  * @return  the address to the endpoint/interface description entry
//  871  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  872 endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
afFindEndPointDesc:
          CFI Block cfiBlock200 Using cfiCommon0
          CFI Function afFindEndPointDesc
        CODE
//  873 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  874   epList_t *epSearch;
//  875 
//  876   // Look for the endpoint
//  877   epSearch = afFindEndPointDescList( EndPoint );
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        SJMP    ??afFindEndPointDesc_0
??afFindEndPointDesc_1:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_132:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
??afFindEndPointDesc_0:
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??afFindEndPointDesc_2
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_138:
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??afFindEndPointDesc_1
//  878 
//  879   if ( epSearch )
//  880     return ( epSearch->epDesc );
        SJMP    ??afFindEndPointDesc_3
//  881   else
//  882     return ( (endPointDesc_t *)NULL );
??afFindEndPointDesc_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??afFindEndPointDesc_3:
        LJMP    ?Subroutine3 & 0xFFFF
//  883 }
          CFI EndBlock cfiBlock200

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function afFindEndPointDesc
          CFI Conditional ??CrossCallReturnLabel_138
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function afFindSimpleDesc
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker203 Using cfiCommon1
          CFI (cfiPicker203) NoFunction
          CFI (cfiPicker203) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiPicker203
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond204 Using cfiCommon0
          CFI Function afNumEndPoints
          CFI Conditional ??CrossCallReturnLabel_137
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function afFindEndPointDesc
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond205) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond205) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond205) CFA_SP SP+-7
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function afFindSimpleDesc
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker207 Using cfiCommon1
          CFI (cfiPicker207) NoFunction
          CFI (cfiPicker207) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI (cfiCond204) CFA_SP SP+-5
          CFI (cfiCond205) CFA_SP SP+-5
          CFI (cfiCond206) CFA_SP SP+0
          CFI (cfiPicker207) CFA_SP SP+0
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiPicker207
//  884 
//  885 /*********************************************************************
//  886  * @fn      afFindSimpleDesc
//  887  *
//  888  * @brief   Find the Simple Descriptor from the endpoint number.
//  889  *
//  890  * @param   EP - Application Endpoint to look for.
//  891  *
//  892  * @return  Non-zero to indicate that the descriptor memory must be freed.
//  893  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  894 uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
afFindSimpleDesc:
          CFI Block cfiBlock208 Using cfiCommon0
          CFI Function afFindSimpleDesc
        CODE
//  895 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R1
//  896   epList_t *epItem = afFindEndPointDescList( EP );
        MOV     DPTR,#epList
        SJMP    ??afFindSimpleDesc_0
??afFindSimpleDesc_1:
        MOV     DPL,R4
        MOV     DPH,R5
??afFindSimpleDesc_0:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     A,R4
        ORL     A,R5
        JZ      ??afFindSimpleDesc_2
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_141:
        XRL     A,?V0
        JNZ     ??afFindSimpleDesc_1
//  897   uint8 rtrn = FALSE;
??afFindSimpleDesc_2:
        MOV     R1,#0x0
//  898 
//  899   if ( epItem )
        MOV     A,R4
        ORL     A,R5
        JZ      ??afFindSimpleDesc_3
//  900   {
//  901     if ( epItem->pfnDescCB )
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_139:
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afFindSimpleDesc_4
//  902     {
//  903       *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
        ; Setup parameters for indirect call
        MOV     R2,?V0
        INC     R1
        LCALL   ?CALL_IND
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  904       rtrn = TRUE;
        MOV     R1,#0x1
        SJMP    ??afFindSimpleDesc_5
//  905     }
//  906     else
//  907     {
//  908       *ppDesc = epItem->epDesc->simpleDesc;
??afFindSimpleDesc_4:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine44 & 0xFFFF
//  909     }
//  910   }
??CrossCallReturnLabel_148:
        LCALL   ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_134:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??afFindSimpleDesc_6
//  911   else
//  912   {
//  913     *ppDesc = NULL;
??afFindSimpleDesc_3:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??afFindSimpleDesc_6:
        MOVX    @DPTR,A
//  914   }
//  915 
//  916   return rtrn;
??afFindSimpleDesc_5:
        SJMP    ?Subroutine1
//  917 }
          CFI EndBlock cfiBlock208

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond209 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_148
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function afIncomingData
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_144
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond210) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-4
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function afIncomingData
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_145
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond211) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond211) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond211) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond211) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond211) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-4
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function AF_DataRequest
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_140
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-4
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function afFindSimpleDesc
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_141
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-4
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function afEndPoints
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_142
          CFI (cfiCond214) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond214) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond214) CFA_SP SP+-9
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function afAPSF_ConfigSet
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_143
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-4
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker216 Using cfiCommon1
          CFI (cfiPicker216) NoFunction
          CFI (cfiPicker216) Picker
        INC     DPTR
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiPicker216
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiCond217 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function afReflectError
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_94
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-4
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function afBuildMSGIncoming
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_95
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-4
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function afFindSimpleDesc
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function afIncomingData
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_144
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond221) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond221) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond221) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-4
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function afIncomingData
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_145
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-4
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function AF_DataRequest
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_140
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-4
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function afFindSimpleDesc
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_141
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-4
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function afEndPoints
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_142
          CFI (cfiCond225) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond225) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond225) CFA_SP SP+-9
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function afAPSF_ConfigSet
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_143
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-4
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker227 Using cfiCommon1
          CFI (cfiPicker227) NoFunction
          CFI (cfiPicker227) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiPicker227
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond228 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_146
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function afDataConfirm
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_93
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-4
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function afReflectError
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_94
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-4
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function afBuildMSGIncoming
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_95
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-4
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function afFindSimpleDesc
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function afIncomingData
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_144
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-4
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function afIncomingData
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_145
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-4
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function AF_DataRequest
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_140
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-4
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function afFindSimpleDesc
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_141
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-4
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function afEndPoints
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_142
          CFI (cfiCond237) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond237) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond237) CFA_SP SP+-9
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function afAPSF_ConfigSet
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_143
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-4
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker239 Using cfiCommon1
          CFI (cfiPicker239) NoFunction
          CFI (cfiPicker239) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI (cfiCond228) CFA_SP SP+0
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond232) CFA_SP SP+0
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond235) CFA_SP SP+-2
          CFI (cfiCond236) CFA_SP SP+-2
          CFI (cfiCond237) CFA_SP SP+-7
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiPicker239) CFA_SP SP+0
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiPicker239

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond240 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function afBuildMSGIncoming
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function AF_DataRequestSrcRtg
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-2
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function afFindSimpleDesc
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function afEndPoints
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond244) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond244) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond244) CFA_SP SP+-7
          CFI Block cfiPicker245 Using cfiCommon1
          CFI (cfiPicker245) NoFunction
          CFI (cfiPicker245) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI (cfiCond240) CFA_SP SP+0
          CFI (cfiCond241) CFA_SP SP+0
          CFI (cfiCond242) CFA_SP SP+0
          CFI (cfiCond243) CFA_SP SP+0
          CFI (cfiCond244) CFA_SP SP+-5
          CFI (cfiPicker245) CFA_SP SP+0
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiPicker245
//  918 
//  919 /*********************************************************************
//  920  * @fn      afGetDescCB
//  921  *
//  922  * @brief   Get the Descriptor callback function.
//  923  *
//  924  * @param   epDesc - pointer to the endpoint descriptor
//  925  *
//  926  * @return  function pointer or NULL
//  927  */
//  928 static pDescCB afGetDescCB( endPointDesc_t *epDesc )
//  929 {
//  930   epList_t *epSearch;
//  931 
//  932   // Start at the beginning
//  933   epSearch = epList;
//  934 
//  935   // Look through the list until the end
//  936   while ( epSearch )
//  937   {
//  938     // Is there a match?
//  939     if ( epSearch->epDesc == epDesc )
//  940     {
//  941       return ( epSearch->pfnDescCB );
//  942     }
//  943     else
//  944       epSearch = epSearch->nextDesc;  // Next entry
//  945   }
//  946 
//  947   return ( (pDescCB)NULL );
//  948 }
//  949 
//  950 /*********************************************************************
//  951  * @fn      afDataReqMTU
//  952  *
//  953  * @brief   Get the Data Request MTU(Max Transport Unit).
//  954  *
//  955  * @param   fields - afDataReqMTU_t
//  956  *
//  957  * @return  uint8(MTU)
//  958  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  959 uint8 afDataReqMTU( afDataReqMTU_t* fields )
afDataReqMTU:
          CFI Block cfiBlock246 Using cfiCommon0
          CFI Function afDataReqMTU
        CODE
//  960 {
        FUNCALL afDataReqMTU, APSDE_DataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  961   uint8 len;
//  962   uint8 hdr;
//  963 
//  964   if ( fields->kvp == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??afDataReqMTU_0
//  965   {
//  966     hdr = AF_HDR_KVP_MAX_LEN;
        MOV     R6,#0x8
        SJMP    ??afDataReqMTU_1
//  967   }
//  968   else
//  969   {
//  970     hdr = AF_HDR_V1_1_MAX_LEN;
??afDataReqMTU_0:
        MOV     R6,#0x0
//  971   }
//  972 
//  973   len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
//  974 
//  975   return len;
??afDataReqMTU_1:
        ; Setup parameters for call to function APSDE_DataReqMTU
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
        MOV     A,R1
        CLR     C
        SUBB    A,R6
        MOV     R1,A
          CFI EndBlock cfiBlock246
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  976 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock247 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI VB SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndBlock cfiBlock247
//  977 
//  978 /*********************************************************************
//  979  * @fn      afGetMatch
//  980  *
//  981  * @brief   Set the allow response flag.
//  982  *
//  983  * @param   ep - Application Endpoint to look for
//  984  * @param   action - true - allow response, false - no response
//  985  *
//  986  * @return  TRUE allow responses, FALSE no response
//  987  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  988 uint8 afGetMatch( uint8 ep )
afGetMatch:
          CFI Block cfiBlock248 Using cfiCommon0
          CFI Function afGetMatch
        CODE
//  989 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
//  990   epList_t *epSearch;
//  991 
//  992   // Look for the endpoint
//  993   epSearch = afFindEndPointDescList( ep );
        MOV     DPTR,#epList
??afGetMatch_0:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??afGetMatch_1
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??afGetMatch_0
//  994 
//  995   if ( epSearch )
//  996   {
//  997     if ( epSearch->flags & eEP_AllowMatch )
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??afGetMatch_1
//  998       return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afGetMatch_2
//  999     else
// 1000       return ( FALSE );
// 1001   }
// 1002   else
// 1003     return ( FALSE );
??afGetMatch_1:
        MOV     R1,#0x0
??afGetMatch_2:
        SJMP    ?Subroutine3
// 1004 }
          CFI EndBlock cfiBlock248

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond249 Using cfiCommon0
          CFI Function afRegister
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function afGetMatch
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond250) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond250) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond250) CFA_SP SP+-7
          CFI Block cfiPicker251 Using cfiCommon1
          CFI (cfiPicker251) NoFunction
          CFI (cfiPicker251) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R3
        MOVX    A,@DPTR
        XRL     A,R2
        RET
          CFI (cfiCond249) CFA_SP SP+0
          CFI (cfiCond250) CFA_SP SP+-5
          CFI (cfiPicker251) CFA_SP SP+0
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiPicker251

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond252 Using cfiCommon0
          CFI Function afRegister
          CFI Conditional ??CrossCallReturnLabel_1
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function afDelete
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-2
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function AF_DataRequest
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function AF_DataRequest
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-2
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond256 Using cfiCommon0
          CFI (cfiCond256) Function afGetMatch
          CFI (cfiCond256) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond256) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond256) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond256) CFA_SP SP+-7
          CFI Block cfiCond257 Using cfiCommon0
          CFI (cfiCond257) Function afSetMatch
          CFI (cfiCond257) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond257) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond257) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond257) CFA_SP SP+-7
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function afAPSF_ConfigGet
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-2
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function afSetApplCB
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond259) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond259) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond259) CFA_SP SP+-7
          CFI Block cfiPicker260 Using cfiCommon1
          CFI (cfiPicker260) NoFunction
          CFI (cfiPicker260) Picker
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_108:
        ORL     A,R1
        RET
          CFI (cfiCond252) CFA_SP SP+0
          CFI (cfiCond253) CFA_SP SP+0
          CFI (cfiCond254) CFA_SP SP+0
          CFI (cfiCond255) CFA_SP SP+0
          CFI (cfiCond256) CFA_SP SP+-5
          CFI (cfiCond257) CFA_SP SP+-5
          CFI (cfiCond258) CFA_SP SP+0
          CFI (cfiCond259) CFA_SP SP+-5
          CFI (cfiPicker260) CFA_SP SP+0
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiCond256
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiPicker260
// 1005 
// 1006 /*********************************************************************
// 1007  * @fn      afSetMatch
// 1008  *
// 1009  * @brief   Set the allow response flag.
// 1010  *
// 1011  * @param   ep - Application Endpoint to look for
// 1012  * @param   action - true - allow response, false - no response
// 1013  *
// 1014  * @return  TRUE if success, FALSE if endpoint not found
// 1015  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1016 uint8 afSetMatch( uint8 ep, uint8 action )
afSetMatch:
          CFI Block cfiBlock261 Using cfiCommon0
          CFI Function afSetMatch
        CODE
// 1017 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R3,A
// 1018   epList_t *epSearch;
// 1019 
// 1020   // Look for the endpoint
// 1021   epSearch = afFindEndPointDescList( ep );
        MOV     DPTR,#epList
        SJMP    ??afSetMatch_0
??afSetMatch_1:
        MOV     DPL,R0
        MOV     DPH,R1
??afSetMatch_0:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??afSetMatch_2
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_45:
        XRL     A,R3
        JNZ     ??afSetMatch_1
// 1022 
// 1023   if ( epSearch )
// 1024   {
// 1025     if ( action )
        MOV     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R2
        JZ      ??afSetMatch_3
// 1026     {
// 1027       epSearch->flags |= eEP_AllowMatch;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        SJMP    ??afSetMatch_4
// 1028     }
// 1029     else
// 1030     {
// 1031       epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
??afSetMatch_3:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
??afSetMatch_4:
        MOVX    @DPTR,A
// 1032     }
// 1033     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afSetMatch_5
// 1034   }
// 1035   else
// 1036     return ( FALSE );
??afSetMatch_2:
        MOV     R1,#0x0
??afSetMatch_5:
        SJMP    ?Subroutine3
// 1037 }
          CFI EndBlock cfiBlock261
// 1038 
// 1039 /*********************************************************************
// 1040  * @fn      afNumEndPoints
// 1041  *
// 1042  * @brief   Returns the number of endpoints defined (including 0)
// 1043  *
// 1044  * @param   none
// 1045  *
// 1046  * @return  number of endpoints
// 1047  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1048 uint8 afNumEndPoints( void )
afNumEndPoints:
          CFI Block cfiBlock262 Using cfiCommon0
          CFI Function afNumEndPoints
        CODE
// 1049 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1050   epList_t *epSearch;
// 1051   uint8 endpoints;
// 1052 
// 1053   // Start at the beginning
// 1054   epSearch = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     DPL,R0
        MOV     DPH,R1
// 1055   endpoints = 0;
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_137
// 1056 
// 1057   while ( epSearch )
// 1058   {
// 1059     endpoints++;
??afNumEndPoints_0:
        INC     R1
// 1060     epSearch = epSearch->nextDesc;
        LCALL   ??Subroutine54_0 & 0xFFFF
// 1061   }
??CrossCallReturnLabel_137:
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??afNumEndPoints_0
// 1062 
// 1063   return ( endpoints );
          CFI EndBlock cfiBlock262
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
// 1064 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock263 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock263

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond264 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function AF_DataRequest
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function AF_DataRequest
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond266) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-2
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function AF_DataRequest
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond267) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond267) CFA_SP SP+-2
          CFI (cfiCond267) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function AF_DataRequest
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+-2
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function afNumEndPoints
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond269) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond269) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond269) CFA_SP SP+-7
          CFI Block cfiPicker270 Using cfiCommon1
          CFI (cfiPicker270) NoFunction
          CFI (cfiPicker270) Picker
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_90:
        RET
          CFI (cfiCond264) CFA_SP SP+0
          CFI (cfiCond265) CFA_SP SP+0
          CFI (cfiCond266) CFA_SP SP+0
          CFI (cfiCond267) CFA_SP SP+0
          CFI (cfiCond268) CFA_SP SP+0
          CFI (cfiCond269) CFA_SP SP+-5
          CFI (cfiPicker270) CFA_SP SP+0
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiPicker270

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond271 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function afRegisterExtended
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_33
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+-4
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function afBuildMSGIncoming
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_36
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond273) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond273) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond273) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond273) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond273) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+-4
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function afBuildMSGIncoming
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_37
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond274) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond274) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond274) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond274) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond274) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-4
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function afBuildMSGIncoming
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_38
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond275) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond275) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond275) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond275) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond275) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-4
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function afIncomingData
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_8
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond276) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond276) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond276) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond276) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond276) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond276) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond276) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond276) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond276) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond276) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+-4
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function AF_DataRequest
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_9
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond277) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-4
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function AF_DataRequest
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_10
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond278) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond278) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-4
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function AF_DataRequest
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_39
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond279) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-4
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function AF_DataRequest
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_40
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-4
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function AF_DataRequest
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_41
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond281) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond281) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-4
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function AF_DataRequest
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_42
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-4
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function AF_DataRequest
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_43
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond283) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond283) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+-4
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function afNumEndPoints
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_44
          CFI (cfiCond284) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond284) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond284) CFA_SP SP+-9
          CFI Block cfiPicker285 Using cfiCommon1
          CFI (cfiPicker285) NoFunction
          CFI (cfiPicker285) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_112:
        RET
          CFI (cfiCond271) CFA_SP SP+-2
          CFI (cfiCond272) CFA_SP SP+-2
          CFI (cfiCond273) CFA_SP SP+-2
          CFI (cfiCond274) CFA_SP SP+-2
          CFI (cfiCond275) CFA_SP SP+-2
          CFI (cfiCond276) CFA_SP SP+-2
          CFI (cfiCond277) CFA_SP SP+-2
          CFI (cfiCond278) CFA_SP SP+-2
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond280) CFA_SP SP+-2
          CFI (cfiCond281) CFA_SP SP+-2
          CFI (cfiCond282) CFA_SP SP+-2
          CFI (cfiCond283) CFA_SP SP+-2
          CFI (cfiCond284) CFA_SP SP+-7
          CFI (cfiPicker285) CFA_SP SP+0
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiPicker285

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond286 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function afReflectError
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_98
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond287) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond287) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond287) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond287) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-6
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function afIncomingData
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_99
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond288) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond288) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond288) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond288) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond288) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond288) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond288) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond288) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond288) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-6
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function afBuildMSGIncoming
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_96
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond289) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond289) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond289) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond289) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond289) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-6
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function afIncomingData
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_16
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond290) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond290) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond290) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond290) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond290) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond290) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond290) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+-6
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function afIncomingData
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_17
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond291) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond291) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond291) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond291) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond291) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond291) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond291) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond291) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond291) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond291) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond291) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+-6
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function afDataConfirm
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_103
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-6
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function afReflectError
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_104
          CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond293) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond293) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond293) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond293) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond293) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond293) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond293) CFA_SP SP+-6
          CFI (cfiCond293) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function afIncomingData
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_105
          CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond294) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond294) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond294) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond294) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond294) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond294) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond294) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond294) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond294) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond294) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond294) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond294) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond294) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond294) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond294) CFA_SP SP+-6
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function afIncomingData
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_106
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond295) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond295) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond295) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond295) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond295) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond295) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond295) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond295) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond295) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-6
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function afIncomingData
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_107
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond296) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond296) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond296) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond296) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond296) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond296) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond296) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond296) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond296) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond296) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond296) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-6
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function AF_DataRequest
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_102
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond297) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond297) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond297) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond297) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-6
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function afIncomingData
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_19
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond298) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond298) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond298) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond298) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond298) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond298) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond298) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond298) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond298) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-6
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function AF_DataRequest
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_18
          CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond299) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond299) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond299) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond299) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond299) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond299) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond299) CFA_SP SP+-6
          CFI (cfiCond299) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function afRegister
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_1
          CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond300) CFA_SP SP+-6
          CFI (cfiCond300) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function afDelete
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_2
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-6
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function AF_DataRequest
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_0
          CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond302) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond302) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond302) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond302) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond302) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond302) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond302) CFA_SP SP+-6
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function AF_DataRequest
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_3
          CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond303) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond303) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond303) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond303) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond303) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond303) CFA_SP SP+-6
          CFI (cfiCond303) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function afGetMatch
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_4
          CFI (cfiCond304) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond304) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond304) CFA_SP SP+-11
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function afSetMatch
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_5
          CFI (cfiCond305) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond305) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond305) CFA_SP SP+-11
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function afAPSF_ConfigGet
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_6
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+-6
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function afSetApplCB
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_7
          CFI (cfiCond307) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond307) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond307) CFA_SP SP+-11
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function afRegisterExtended
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_32
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+-6
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function afRegisterExtended
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_33
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-6
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function afBuildMSGIncoming
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_36
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond310) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond310) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond310) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond310) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-6
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function afBuildMSGIncoming
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_37
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond311) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond311) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond311) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond311) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+-6
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function afBuildMSGIncoming
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_38
          CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond312) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond312) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond312) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond312) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond312) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond312) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond312) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond312) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond312) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond312) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond312) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond312) CFA_SP SP+-6
          CFI (cfiCond312) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function afIncomingData
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_8
          CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond313) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond313) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond313) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond313) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond313) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond313) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond313) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond313) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond313) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond313) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond313) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond313) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond313) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond313) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond313) CFA_SP SP+-6
          CFI (cfiCond313) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond314 Using cfiCommon0
          CFI (cfiCond314) Function AF_DataRequest
          CFI (cfiCond314) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_9
          CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond314) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond314) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond314) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond314) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond314) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond314) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond314) CFA_SP SP+-6
          CFI (cfiCond314) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function AF_DataRequest
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_10
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond315) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-6
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function AF_DataRequest
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_39
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-6
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond317 Using cfiCommon0
          CFI (cfiCond317) Function AF_DataRequest
          CFI (cfiCond317) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_40
          CFI (cfiCond317) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond317) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond317) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond317) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond317) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond317) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond317) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond317) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond317) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond317) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond317) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond317) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond317) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond317) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond317) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond317) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond317) CFA_SP SP+-6
          CFI (cfiCond317) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function AF_DataRequest
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_41
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond318) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond318) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond318) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-6
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function AF_DataRequest
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_42
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond319) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond319) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+-6
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function AF_DataRequest
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_43
          CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond320) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond320) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond320) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond320) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond320) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond320) CFA_SP SP+-6
          CFI (cfiCond320) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function afNumEndPoints
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_44
          CFI (cfiCond321) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond321) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond321) CFA_SP SP+-11
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function afBuildMSGIncoming
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_20
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond322) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond322) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+-6
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond323 Using cfiCommon0
          CFI (cfiCond323) Function afBuildMSGIncoming
          CFI (cfiCond323) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_21
          CFI (cfiCond323) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond323) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond323) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond323) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond323) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond323) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond323) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond323) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond323) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond323) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond323) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond323) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond323) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond323) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond323) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond323) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond323) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond323) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond323) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond323) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond323) CFA_SP SP+-6
          CFI (cfiCond323) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond324 Using cfiCommon0
          CFI (cfiCond324) Function afIncomingData
          CFI (cfiCond324) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_34
          CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond324) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond324) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond324) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond324) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond324) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond324) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond324) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond324) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond324) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond324) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond324) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond324) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond324) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond324) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond324) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond324) CFA_SP SP+-6
          CFI (cfiCond324) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function afCopyAddress
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_35
          CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond325) CFA_SP SP+-6
          CFI (cfiCond325) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker326 Using cfiCommon1
          CFI (cfiPicker326) NoFunction
          CFI (cfiPicker326) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI (cfiCond286) CFA_SP SP+-4
          CFI (cfiCond287) CFA_SP SP+-4
          CFI (cfiCond288) CFA_SP SP+-4
          CFI (cfiCond289) CFA_SP SP+-4
          CFI (cfiCond290) CFA_SP SP+-4
          CFI (cfiCond291) CFA_SP SP+-4
          CFI (cfiCond292) CFA_SP SP+-4
          CFI (cfiCond293) CFA_SP SP+-4
          CFI (cfiCond294) CFA_SP SP+-4
          CFI (cfiCond295) CFA_SP SP+-4
          CFI (cfiCond296) CFA_SP SP+-4
          CFI (cfiCond297) CFA_SP SP+-4
          CFI (cfiCond298) CFA_SP SP+-4
          CFI (cfiCond299) CFA_SP SP+-4
          CFI (cfiCond300) CFA_SP SP+-4
          CFI (cfiCond301) CFA_SP SP+-4
          CFI (cfiCond302) CFA_SP SP+-4
          CFI (cfiCond303) CFA_SP SP+-4
          CFI (cfiCond304) CFA_SP SP+-9
          CFI (cfiCond305) CFA_SP SP+-9
          CFI (cfiCond306) CFA_SP SP+-4
          CFI (cfiCond307) CFA_SP SP+-9
          CFI (cfiCond308) CFA_SP SP+-4
          CFI (cfiCond309) CFA_SP SP+-4
          CFI (cfiCond310) CFA_SP SP+-4
          CFI (cfiCond311) CFA_SP SP+-4
          CFI (cfiCond312) CFA_SP SP+-4
          CFI (cfiCond313) CFA_SP SP+-4
          CFI (cfiCond314) CFA_SP SP+-4
          CFI (cfiCond315) CFA_SP SP+-4
          CFI (cfiCond316) CFA_SP SP+-4
          CFI (cfiCond317) CFA_SP SP+-4
          CFI (cfiCond318) CFA_SP SP+-4
          CFI (cfiCond319) CFA_SP SP+-4
          CFI (cfiCond320) CFA_SP SP+-4
          CFI (cfiCond321) CFA_SP SP+-9
          CFI (cfiCond322) CFA_SP SP+-4
          CFI (cfiCond323) CFA_SP SP+-4
          CFI (cfiCond324) CFA_SP SP+-4
          CFI (cfiCond325) CFA_SP SP+-4
          CFI (cfiPicker326) CFA_SP SP+0
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiCond323
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiPicker326
// 1065 
// 1066 /*********************************************************************
// 1067  * @fn      afEndPoints
// 1068  *
// 1069  * @brief   Fills in the passed in buffer with the endpoint (numbers).
// 1070  *          Use afNumEndPoints to find out how big a buffer to supply.
// 1071  *
// 1072  * @param   epBuf - pointer to mem used
// 1073  *
// 1074  * @return  void
// 1075  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1076 void afEndPoints( uint8 *epBuf, uint8 skipZDO )
afEndPoints:
          CFI Block cfiBlock327 Using cfiCommon0
          CFI Function afEndPoints
        CODE
// 1077 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1078   epList_t *epSearch;
// 1079   uint8 endPoint;
// 1080 
// 1081   // Start at the beginning
// 1082   epSearch = epList;
        MOV     DPTR,#epList
        SJMP    ??afEndPoints_0
// 1083 
// 1084   while ( epSearch )
// 1085   {
// 1086     endPoint = epSearch->epDesc->endPoint;
??afEndPoints_1:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_142:
        MOV     R0,A
// 1087 
// 1088     if ( !skipZDO || endPoint != 0 )
        MOV     A,R1
        JZ      ??afEndPoints_2
        MOV     A,R0
        JZ      ??afEndPoints_3
// 1089       *epBuf++ = endPoint;
??afEndPoints_2:
        MOV     A,R0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 1090 
// 1091     epSearch = epSearch->nextDesc;
??afEndPoints_3:
        MOV     DPL,R4
        MOV     DPH,R5
// 1092   }
??afEndPoints_0:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     A,R4
        ORL     A,R5
        JNZ     ??afEndPoints_1
// 1093 }
        SJMP    ?Subroutine3
          CFI EndBlock cfiBlock327

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond328 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_144
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function afIncomingData
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond329) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond329) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond329) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond329) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond329) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond329) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond329) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond329) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond329) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond329) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+-2
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker330 Using cfiCommon1
          CFI (cfiPicker330) NoFunction
          CFI (cfiPicker330) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiPicker330
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond331 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_140
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function afFindSimpleDesc
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond332) CFA_SP SP+-2
          CFI (cfiCond332) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function afEndPoints
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond333) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond333) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond333) CFA_SP SP+-7
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function afAPSF_ConfigSet
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond334) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond334) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond334) CFA_SP SP+-2
          CFI (cfiCond334) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond335 Using cfiCommon0
          CFI (cfiCond335) Function afIncomingData
          CFI (cfiCond335) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond335) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond335) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond335) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond335) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond335) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond335) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond335) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond335) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond335) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond335) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond335) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond335) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond335) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond335) CFA_SP SP+-2
          CFI (cfiCond335) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond336 Using cfiCommon0
          CFI (cfiCond336) Function afIncomingData
          CFI (cfiCond336) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond336) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond336) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond336) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond336) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond336) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond336) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond336) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond336) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond336) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond336) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond336) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond336) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond336) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond336) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond336) CFA_SP SP+-2
          CFI (cfiCond336) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker337 Using cfiCommon1
          CFI (cfiPicker337) NoFunction
          CFI (cfiPicker337) Picker
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_149:
        MOVX    A,@DPTR
        RET
          CFI (cfiCond331) CFA_SP SP+0
          CFI (cfiCond332) CFA_SP SP+0
          CFI (cfiCond333) CFA_SP SP+-5
          CFI (cfiCond334) CFA_SP SP+0
          CFI (cfiCond335) CFA_SP SP+0
          CFI (cfiCond336) CFA_SP SP+0
          CFI (cfiPicker337) CFA_SP SP+0
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiCond335
          CFI EndBlock cfiCond336
          CFI EndBlock cfiPicker337
// 1094 
// 1095 /*********************************************************************
// 1096  * @fn      afCopyAddress
// 1097  *
// 1098  * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
// 1099  *          from the zAddrType_t parameter.
// 1100  *
// 1101  * @param   epBuf - pointer to mem used
// 1102  *
// 1103  * @return  void
// 1104  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1105 void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
afCopyAddress:
          CFI Block cfiBlock338 Using cfiCommon0
          CFI Function afCopyAddress
        CODE
// 1106 {
        FUNCALL afCopyAddress, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1107   afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
        MOV     A,R4
        ADD     A,#0x8
        MOV     R0,A
        CLR     A
        ADDC    A,R5
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 1108   if ( zAddr->addrMode == Addr64Bit )
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??afCopyAddress_0
// 1109   {
// 1110     (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??CrossCallReturnLabel_123
// 1111   }
// 1112   else
// 1113   {
// 1114     afAddr->addr.shortAddr = zAddr->addr.shortAddr;
??afCopyAddress_0:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine21 & 0xFFFF
// 1115   }
??CrossCallReturnLabel_35:
        LCALL   ??Subroutine50_0 & 0xFFFF
// 1116 
// 1117   // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
// 1118   afAddr->panId = 0;
??CrossCallReturnLabel_123:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1119 }
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock338

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond339 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond340 Using cfiCommon0
          CFI (cfiCond340) Function afCopyAddress
          CFI (cfiCond340) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond340) CFA_SP SP+-2
          CFI (cfiCond340) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker341 Using cfiCommon1
          CFI (cfiPicker341) NoFunction
          CFI (cfiPicker341) Picker
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_86:
        RET
          CFI (cfiCond339) CFA_SP SP+0
          CFI (cfiCond340) CFA_SP SP+0
          CFI (cfiPicker341) CFA_SP SP+0
          CFI EndBlock cfiCond339
          CFI EndBlock cfiCond340
          CFI EndBlock cfiPicker341

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond342 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond343 Using cfiCommon0
          CFI (cfiCond343) Function afBuildMSGIncoming
          CFI (cfiCond343) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_21
          CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond343) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond343) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond343) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond343) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond343) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond343) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond343) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond343) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond343) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond343) CFA_SP SP+-4
          CFI (cfiCond343) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond344 Using cfiCommon0
          CFI (cfiCond344) Function afIncomingData
          CFI (cfiCond344) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_34
          CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond344) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond344) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond344) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond344) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond344) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond344) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond344) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond344) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond344) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond344) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond344) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond344) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond344) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond344) CFA_SP SP+-4
          CFI (cfiCond344) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond345 Using cfiCommon0
          CFI (cfiCond345) Function afCopyAddress
          CFI (cfiCond345) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_35
          CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond345) CFA_SP SP+-4
          CFI (cfiCond345) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker346 Using cfiCommon1
          CFI (cfiPicker346) NoFunction
          CFI (cfiPicker346) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_111:
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI (cfiCond342) CFA_SP SP+-2
          CFI (cfiCond343) CFA_SP SP+-2
          CFI (cfiCond344) CFA_SP SP+-2
          CFI (cfiCond345) CFA_SP SP+-2
          CFI (cfiPicker346) CFA_SP SP+0
          CFI EndBlock cfiCond342
          CFI EndBlock cfiCond343
          CFI EndBlock cfiCond344
          CFI EndBlock cfiCond345
          CFI EndBlock cfiPicker346
// 1120 
// 1121 /**************************************************************************************************
// 1122  * @fn          afAPSF_ConfigGet
// 1123  *
// 1124  * @brief       This function ascertains the fragmentation configuration that corresponds to
// 1125  *              the specified EndPoint.
// 1126  *
// 1127  * input parameters
// 1128  *
// 1129  * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
// 1130  *
// 1131  * output parameters
// 1132  *
// 1133  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1134  *
// 1135  * @return      None.
// 1136  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1137 void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigGet:
          CFI Block cfiBlock347 Using cfiCommon0
          CFI Function afAPSF_ConfigGet
        CODE
// 1138 {
        FUNCALL afAPSF_ConfigGet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1139   epList_t *pList = afFindEndPointDescList(endPoint);
        MOV     DPTR,#epList
        SJMP    ??afAPSF_ConfigGet_0
??afAPSF_ConfigGet_1:
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_46:
        XRL     A,R6
        JZ      ??afAPSF_ConfigGet_2
        MOV     DPL,R0
        MOV     DPH,R1
??afAPSF_ConfigGet_0:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        JNZ     ??afAPSF_ConfigGet_1
// 1140 
// 1141   if (pList == NULL)
// 1142   {
// 1143     pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x32
        MOVX    @DPTR,A
// 1144     pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??afAPSF_ConfigGet_3
// 1145   }
// 1146   else
// 1147   {
// 1148     (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigGet_2:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R0
        ADD     A,#0x6
        MOV     ?V0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1149   }
// 1150 }
??afAPSF_ConfigGet_3:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock347

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond348 Using cfiCommon0
          CFI Function afSetMatch
          CFI Conditional ??CrossCallReturnLabel_45
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function afAPSF_ConfigGet
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+-2
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker350 Using cfiCommon1
          CFI (cfiPicker350) NoFunction
          CFI (cfiPicker350) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R4
        MOVX    A,@DPTR
        RET
          CFI (cfiCond348) CFA_SP SP+-5
          CFI (cfiCond349) CFA_SP SP+0
          CFI (cfiPicker350) CFA_SP SP+0
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiPicker350
// 1151 
// 1152 /**************************************************************************************************
// 1153  * @fn          afAPSF_ConfigSet
// 1154  *
// 1155  * @brief       This function attempts to set the fragmentation configuration that corresponds to
// 1156  *              the specified EndPoint.
// 1157  *
// 1158  * input parameters
// 1159  *
// 1160  * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
// 1161  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1162  *
// 1163  * output parameters
// 1164  *
// 1165  * None.
// 1166  *
// 1167  * @return      afStatus_SUCCESS for success.
// 1168  *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
// 1169  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1170 afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigSet:
          CFI Block cfiBlock351 Using cfiCommon0
          CFI Function afAPSF_ConfigSet
        CODE
// 1171 {
        FUNCALL afAPSF_ConfigSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V3,R1
// 1172   epList_t *pList = afFindEndPointDescList(endPoint);
        MOV     DPTR,#epList
        SJMP    ??afAPSF_ConfigSet_0
??afAPSF_ConfigSet_1:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_143:
        XRL     A,?V3
        JZ      ??afAPSF_ConfigSet_2
        MOV     DPL,R6
        MOV     DPH,R7
??afAPSF_ConfigSet_0:
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JNZ     ??afAPSF_ConfigSet_1
// 1173 
// 1174   if (pList == NULL)
// 1175   {
// 1176     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??afAPSF_ConfigSet_3
// 1177   }
// 1178 
// 1179   (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigSet_2:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1180   return afStatus_SUCCESS;
        MOV     R1,#0x0
??afAPSF_ConfigSet_3:
        LJMP    ?Subroutine0 & 0xFFFF
// 1181 }
          CFI EndBlock cfiBlock351
// 1182 
// 1183 /**************************************************************************************************
// 1184  * @fn          afSetApplCB
// 1185  *
// 1186  * @brief       Sets the pointer to the Application Callback function for a
// 1187  *              specific EndPoint.
// 1188  *
// 1189  * input parameters
// 1190  *
// 1191  * @param       endPoint - The specific EndPoint for which to set Application Callback.
// 1192  * @param       pApplFn - A pointer to the Application Callback function.
// 1193  *
// 1194  * output parameters
// 1195  *
// 1196  * None.
// 1197  *
// 1198  * @return      TRUE if success, FALSE if endpoint not found
// 1199  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1200 uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
afSetApplCB:
          CFI Block cfiBlock352 Using cfiCommon0
          CFI Function afSetApplCB
        CODE
// 1201 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
// 1202   if ( pApplFn != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??afSetApplCB_0
// 1203   {
// 1204     epList_t *epSearch;
// 1205 
// 1206     // Look for the endpoint
// 1207     epSearch = afFindEndPointDescList( endPoint );
        MOV     DPTR,#epList
??afSetApplCB_1:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ      ??afSetApplCB_0
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R5
        MOVX    A,@DPTR
        XRL     A,R4
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??afSetApplCB_1
// 1208 
// 1209     if ( epSearch )
// 1210     {
// 1211       epSearch->pfnApplCB = pApplFn;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1212 
// 1213       return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afSetApplCB_2
// 1214     }
// 1215   }
// 1216 
// 1217   return ( FALSE );
??afSetApplCB_0:
        MOV     R1,#0x0
??afSetApplCB_2:
        LJMP    ?Subroutine3 & 0xFFFF
// 1218 }
          CFI EndBlock cfiBlock352

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AF_DataRequestDiscoverRoute>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afRegisterExtended::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegisterExtended

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afRegister::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDelete::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDelete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDataConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afReflectError::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afReflectError

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afIncomingData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afIncomingData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afBuildMSGIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afBuildMSGIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AF_DataRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AF_DataRequestSrcRtg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequestSrcRtg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindEndPointDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindSimpleDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindSimpleDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDataReqMTU::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataReqMTU

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afGetMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afGetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afSetMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afNumEndPoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afNumEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afEndPoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afCopyAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afCopyAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afAPSF_ConfigGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afAPSF_ConfigSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afSetApplCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetApplCB

        END
// 1219 
// 1220 /**************************************************************************************************
// 1221 */
// 
// 3 583 bytes in segment BANKED_CODE
//   120 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     2 bytes in segment XDATA_Z
// 
// 3 704 bytes of CODE  memory
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
