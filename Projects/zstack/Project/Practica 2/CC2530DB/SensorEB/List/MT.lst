###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                02/Mar/2016  12:17:10
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  E:\Projects\WTSN\Components\mt\MT.c
#    Command line       =  
#        -f "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg" (-DCPU32MHZ
#        -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6
#        -DMAC_CFG_RX_MAX=3) -f
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO
#        -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00008000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 E:\Projects\WTSN\Components\mt\MT.c -D
#        NWK_AUTO_POLL -D HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\SensorEB\List\" -lA
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\SensorEB\List\" --diag_suppress Pe001,Pa010,Pe1665 -o
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\SensorEB\Obj\" -e --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica 2\CC2530DB\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\Source\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\ZMain\TI2530DB\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\hal\include\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\mac\include\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\mac\high_level\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\mt\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\osal\include\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\services\saddr\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\services\sdata\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\stack\af\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\stack\sapi\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\stack\sec\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\stack\sys\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\zmac\" -I
#        "E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\..\..\..\..\..\Components\zmac\f8w\" -Oh
#        --require_prototypes
#    List file          =  
#        E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\SensorEB\List\MT.lst
#    Object file        =  
#        E:\Projects\WTSN\Projects\zstack\Project\Practica
#        2\CC2530DB\SensorEB\Obj\MT.r51
#
###############################################################################

E:\Projects\WTSN\Components\mt\MT.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2014-03-21 17:08:59 -0700 (Fri, 21 Mar 2014) $
      4            Revision:       $Revision: 37840 $
      5          
      6            Description:    MonitorTest Event Loop functions.
      7                            Everything in the MonitorTest Task (except the serial driver).
      8          
      9          
     10            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40           **************************************************************************************************/
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          
     46          #include "ZComDef.h"
     47          #include "MT.h"
     48          #include "MT_APP.h"
     49          #include "MT_DEBUG.h"
     50          #include "MT_UTIL.h"
     51          #include "MT_SYS.h"
     52          
     53          #include "OnBoard.h"
     54          #include "OSAL.h"
     55          #include "OSAL_Memory.h"
     56          #include "OSAL_Nv.h"
     57          
     58          #include "DebugTrace.h"
     59          #include "ZMAC.h"
     60          
     61          #if !defined ( NONWK )
     62            #include "NLMEDE.h"
     63            #include "nwk_bufs.h"
     64            #include "ZDObject.h"
     65            #include "ssp.h"
     66            #include "nwk_util.h"
     67            #include "AF.h"
     68            #include "MT_SAPI.h"
     69          #endif
     70          
     71          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     72            #include "MT_MAC.h"
     73          #endif
     74          #if defined( MT_NWK_FUNC ) || defined( MT_NWK_CB_FUNC )
     75            #include "MT_NWK.h"
     76            #include "nwk.h"
     77            #include "nwk_bufs.h"
     78          #endif
     79          #if defined( MT_AF_FUNC ) || defined( MT_AF_CB_FUNC )
     80            #include "MT_AF.h"
     81          #endif
     82          #if defined( MT_USER_TEST_FUNC )
     83            #include "AF.h"
     84          #endif
     85          #if defined( MT_ZDO_FUNC )
     86            #include "MT_ZDO.h"
     87          #endif
     88          #if defined (MT_SAPI_FUNC)
     89          	#include "MT_SAPI.h"
     90          #endif
     91          #if defined (MT_OTA_FUNC)
     92            #include "MT_OTA.h"
     93          #endif
     94          
     95          #if defined( APP_TP )
     96           #include "TestProfile.h"
     97          #endif
     98          #if defined( APP_TP2 )
     99           #include "TestProfile2.h"
    100          #endif
    101          
    102          #if defined(APP_TGEN)
    103            #include "TrafficGenApp.h"
    104          #endif
    105          #if defined(APP_DEBUG)
    106          	#include "DebugApp.h"
    107          #endif
    108          #if defined (NWK_TEST)
    109          	#include "HWTTApp.h"
    110          #endif
    111          #if defined (MT_UBL_FUNC)
    112            extern uint8 MT_UblCommandProcessing(uint8 *pBuf);
    113          #endif
    114          #if defined (MT_ZNP_FUNC)
    115            #include "MT_ZNP.h"
    116          #endif
    117          #if defined (MT_MAC_PROTOBUF_FUNC)
    118            #include "mtmacpb.h"
    119          #endif
    120          #if defined (MT_GP_FUNC)
    121            #include "MT_GP.h"
    122          #endif
    123          
    124          #include "hal_uart.h"
    125          #include "hal_led.h"
    126          #include "hal_key.h"
    127          #include "MT_UART.h"
    128          
    129          /**************************************************************************************************
    130           * CONSTANTS
    131           **************************************************************************************************/
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          mtProcessMsg_t mtProcessIncoming[] =
   \                     mtProcessIncoming:
   \   000000                DS 44
   \   00002C                REQUIRE __INIT_XDATA_Z
    134          {
    135            NULL,                               // MT_RPC_SYS_RES0
    136          
    137          #if defined (MT_SYS_FUNC)
    138            MT_SysCommandProcessing,            // MT_RPC_SYS_SYS
    139          #else
    140            NULL,
    141          #endif
    142          
    143          #if defined (MT_MAC_FUNC)
    144            MT_MacCommandProcessing,            // MT_RPC_SYS_MAC
    145          #else
    146            NULL,
    147          #endif
    148          
    149          #if defined (MT_NWK_FUNC)
    150            MT_NwkCommandProcessing,            // MT_RPC_SYS_NWK
    151          #else
    152            NULL,
    153          #endif
    154          
    155          #if defined (MT_AF_FUNC)
    156            MT_AfCommandProcessing,             // MT_RPC_SYS_AF
    157          #else
    158            NULL,
    159          #endif
    160          
    161          #if defined (MT_ZDO_FUNC)
    162            MT_ZdoCommandProcessing,            // MT_RPC_SYS_ZDO
    163          #else
    164            NULL,
    165          #endif
    166          
    167          #if defined (MT_SAPI_FUNC)
    168            MT_SapiCommandProcessing,           // MT_RPC_SYS_SAPI
    169          #else
    170            NULL,
    171          #endif
    172          
    173          #if defined (MT_UTIL_FUNC)
    174            MT_UtilCommandProcessing,           // MT_RPC_SYS_UTIL
    175          #else
    176            NULL,
    177          #endif
    178          
    179          #if defined (MT_DEBUG_FUNC)
    180            MT_DebugCommandProcessing,          // MT_RPC_SYS_DBG
    181          #else
    182            NULL,
    183          #endif
    184          
    185          #if defined (MT_APP_FUNC)
    186            MT_AppCommandProcessing,            // MT_RPC_SYS_APP
    187          #else
    188            NULL,
    189          #endif
    190          
    191          #if defined (MT_OTA_FUNC)
    192            MT_OtaCommandProcessing,            // MT_RPC_SYS_OTA
    193          #else
    194            NULL,
    195          #endif
    196          
    197          #if defined (MT_ZNP_FUNC)
    198            MT_ZnpCommandProcessing,
    199          #else
    200            NULL,
    201          #endif
    202          
    203            NULL,  // Spare sub-system 12.
    204          
    205          #if defined (MT_UBL_FUNC)
    206            MT_UblCommandProcessing,
    207          #else
    208            NULL,
    209          #endif
    210          
    211            NULL,                               // MT_RPC_SYS_RESERVED14
    212            NULL,                               // MT_RPC_SYS_RESERVED15
    213            NULL,                               // MT_RPC_SYS_RESERVED16
    214          #if defined (MT_MAC_PROTOBUF_FUNC)
    215            MT_MacPBCmdProc,                    // MT_RPC_SYS_PROTOBUF
    216          #else
    217            NULL,
    218          #endif
    219            NULL,                               // MT_RPC_SYS_RES18
    220            NULL,                               // MT_RPC_SYS_RES19
    221            NULL,                               // MT_RPC_SYS_RES20
    222          #if defined (MT_GP_FUNC)
    223            MT_GpCommandProcessing,
    224          #else
    225            NULL,
    226          #endif
    227          };
    228          
    229          /**************************************************************************************************
    230           * GLOBAL VARIABLES
    231           **************************************************************************************************/
    232          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    233          byte debugThreshold;
   \                     debugThreshold:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    234          byte debugCompId;
   \                     debugCompId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    235          
    236          /**************************************************************************************************
    237           * LOCAL FUNCTIONS
    238           **************************************************************************************************/
    239          
    240          void MT_MsgQueueInit( void );
    241          void MT_ResetMsgQueue( void );
    242          byte MT_QueueMsg( byte *msg , byte len );
    243          void MT_ProcessQueue( void );
    244          
    245          #if defined ( MT_USER_TEST_FUNC )
    246          void MT_ProcessAppUserCmd( byte *pData );
    247          #endif
    248          
    249          /**************************************************************************************************
    250           * @fn         MT_Init
    251           *
    252           * @brief      This function is the secondary initialization that resolves conflicts during
    253           *             osalInitTasks(). For example, since MT is the highest priority task, and
    254           *             specifically because the MT task is initialized before the ZDApp task, if MT_Init()
    255           *             registers anything with ZDO_RegisterForZdoCB(), it is wiped out when ZDApp task
    256           *             initialization invokes ZDApp_InitZdoCBFunc().
    257           *             There may be other existing or future such races, so try to do all possible
    258           *             MT initialization here vice in MT_TaskInit().
    259           *
    260           * input parameters
    261           *
    262           * None.
    263           *
    264           * output parameters
    265           *
    266           * None.
    267           *
    268           * @return      None.
    269           **************************************************************************************************
    270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          void MT_Init(uint8 taskID)
   \                     MT_Init:
    272          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    273            MT_TaskID = taskID;
   \   000006   90....       MOV     DPTR,#MT_TaskID
   \   000009   F0           MOVX    @DPTR,A
    274            debugThreshold = 0;
   \   00000A   90....       MOV     DPTR,#debugThreshold
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    275            debugCompId = 0;
   \   00000F   90....       MOV     DPTR,#debugCompId
   \   000012   F0           MOVX    @DPTR,A
    276          
    277          #if defined (MT_ZDO_FUNC)
    278            MT_ZdoInit();
    279          #endif
    280            MT_SysResetInd();
   \   000013                ; Setup parameters for call to function MT_SysResetInd
   \   000013   12....       LCALL   `??MT_SysResetInd::?relay`; Banked call to: MT_SysResetInd
    281          }
   \   000016                REQUIRE ?Subroutine0
   \   000016                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    282          
    283          /***************************************************************************************************
    284           * @fn      MT_BuildAndSendZToolResponse
    285           *
    286           * @brief   Build and send a ZTOOL msg
    287           * @param   uint8 cmdType - include type and subsystem
    288           *          uint8 cmdId - command ID
    289           *          byte dataLen
    290           *          byte *pData
    291           *
    292           * @return  void
    293           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void MT_BuildAndSendZToolResponse(uint8 cmdType, uint8 cmdId, uint8 dataLen, uint8 *pData)
   \                     MT_BuildAndSendZToolResponse:
    295          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V3,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    296            uint8 *msg_ptr;
    297          
    298            if ((msg_ptr = MT_TransportAlloc((mtRpcCmdType_t)(cmdType & 0xE0), dataLen)) != NULL)
   \   00000F                ; Setup parameters for call to function MT_TransportAlloc
   \   00000F   AA..         MOV     R2,?V7
   \   000011   74E0         MOV     A,#-0x20
   \   000013   55..         ANL     A,?V2
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??MT_TransportAlloc::?relay`; Banked call to: MT_TransportAlloc
   \   000019   8A..         MOV     ?V0,R2
   \   00001B   8B..         MOV     ?V1,R3
   \   00001D   EA           MOV     A,R2
   \   00001E   45..         ORL     A,?V1
   \   000020   6030         JZ      ??MT_BuildAndSendZToolResponse_0
    299            {
    300              msg_ptr[MT_RPC_POS_LEN] = dataLen;
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   E5..         MOV     A,?V7
   \   000028   F0           MOVX    @DPTR,A
    301              msg_ptr[MT_RPC_POS_CMD0] = cmdType;
   \   000029   A3           INC     DPTR
   \   00002A   E5..         MOV     A,?V2
   \   00002C   12....       LCALL   ?Subroutine2 & 0xFFFF
    302              msg_ptr[MT_RPC_POS_CMD1] = cmdId;
   \                     ??CrossCallReturnLabel_2:
   \   00002F   E5..         MOV     A,?V3
   \   000031   12....       LCALL   ?Subroutine4 & 0xFFFF
    303              (void)osal_memcpy(msg_ptr+MT_RPC_POS_DAT0, pData, dataLen);
   \                     ??CrossCallReturnLabel_8:
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000037   AC..         MOV     R4,?V7
   \   000039   7D00         MOV     R5,#0x0
   \   00003B   EA           MOV     A,R2
   \   00003C   2403         ADD     A,#0x3
   \   00003E   FA           MOV     R2,A
   \   00003F   E4           CLR     A
   \   000040   35..         ADDC    A,?V1
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000046   7403         MOV     A,#0x3
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
    304          
    305              MT_TransportSend(msg_ptr);
   \   00004B                ; Setup parameters for call to function MT_TransportSend
   \   00004B   AA..         MOV     R2,?V0
   \   00004D   AB..         MOV     R3,?V1
   \   00004F   12....       LCALL   `??MT_TransportSend::?relay`; Banked call to: MT_TransportSend
    306            }
    307          }
   \                     ??MT_BuildAndSendZToolResponse_0:
   \   000052   7F08         MOV     R7,#0x8
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E..         MOV     ?V4,R6
   \   000003   8F..         MOV     ?V5,R7
   \   000005   75..00       MOV     ?V6,#0x0
   \   000008   78..         MOV     R0,#?V4
   \   00000A   22           RET
    308          
    309          /***************************************************************************************************
    310           * @fn      MT_ProcessIncoming
    311           *
    312           * @brief  Process Incoming Message.
    313           *
    314           * @param   byte *pBuf - pointer to event message
    315           *
    316           * @return  void
    317           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          void MT_ProcessIncoming(uint8 *pBuf)
   \                     MT_ProcessIncoming:
    319          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    320            mtProcessMsg_t func;
    321            uint8 rsp[MT_RPC_FRAME_HDR_SZ];
    322          
    323            /* pre-build response message:  | status | cmd0 | cmd1 | */
    324            rsp[1] = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   7401         MOV     A,#0x1
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E8           MOV     A,R0
   \   000017   12....       LCALL   ?Subroutine2 & 0xFFFF
    325            rsp[2] = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_3:
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   C0E0         PUSH    A
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   D0E0         POP     A
   \   000024   F0           MOVX    @DPTR,A
    326          
    327            /* check length */
    328            if (pBuf[MT_RPC_POS_LEN] > MT_RPC_DATA_MAX)
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C3           CLR     C
   \   00002B   94FB         SUBB    A,#-0x5
   \   00002D   400A         JC      ??MT_ProcessIncoming_0
    329            {
    330              rsp[0] = MT_RPC_ERR_LENGTH;
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   7404         MOV     A,#0x4
   \   000037   8038         SJMP    ??MT_ProcessIncoming_1
    331            }
    332            /* check subsystem range */
    333            else if ((rsp[1] & MT_RPC_SUBSYSTEM_MASK) < MT_RPC_SYS_MAX)
   \                     ??MT_ProcessIncoming_0:
   \   000039   741F         MOV     A,#0x1f
   \   00003B   58           ANL     A,R0
   \   00003C   C3           CLR     C
   \   00003D   9416         SUBB    A,#0x16
   \   00003F   5028         JNC     ??MT_ProcessIncoming_2
    334            {
    335              /* look up processing function */
    336              func = mtProcessIncoming[rsp[1] & MT_RPC_SUBSYSTEM_MASK];
   \   000041   E8           MOV     A,R0
   \   000042   541F         ANL     A,#0x1f
   \   000044   25E0         ADD     A,0xE0 /* A   */
   \   000046   F8           MOV     R0,A
   \   000047   74..         MOV     A,#mtProcessIncoming & 0xff
   \   000049   28           ADD     A,R0
   \   00004A   F582         MOV     DPL,A
   \   00004C   E4           CLR     A
   \   00004D   34..         ADDC    A,#(mtProcessIncoming >> 8) & 0xff
   \   00004F   F583         MOV     DPH,A
   \   000051   12....       LCALL   ?Subroutine12 & 0xFFFF
    337              if (func)
   \                     ??CrossCallReturnLabel_24:
   \   000054   E582         MOV     A,DPL
   \   000056   4583         ORL     A,DPH
   \   000058   600F         JZ      ??MT_ProcessIncoming_2
    338              {
    339                /* execute processing function */
    340                rsp[0] = (*func)(pBuf);
   \   00005A                ; Setup parameters for indirect call
   \   00005A   12....       LCALL   ?CALL_IND
   \   00005D   E9           MOV     A,R1
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   F0           MOVX    @DPTR,A
    341              }
    342              else
    343              {
    344                rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    345              }
    346            }
    347            else
    348            {
    349              rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    350            }
    351          
    352            /* if error and this was an SREQ, send error message */
    353            if ((rsp[0] != MT_RPC_SUCCESS) && ((rsp[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ))
   \   000065   700B         JNZ     ??MT_ProcessIncoming_3
   \   000067   805F         SJMP    ??MT_ProcessIncoming_4
   \                     ??MT_ProcessIncoming_2:
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   7401         MOV     A,#0x1
   \                     ??MT_ProcessIncoming_1:
   \   000071   F0           MOVX    @DPTR,A
   \                     ??MT_ProcessIncoming_3:
   \   000072   7401         MOV     A,#0x1
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   54E0         ANL     A,#0xe0
   \   00007A   6420         XRL     A,#0x20
   \   00007C   704A         JNZ     ??MT_ProcessIncoming_4
    354            {
    355              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_RES0), 0,
    356                                                                            MT_RPC_FRAME_HDR_SZ, rsp);
   \   00007E                ; Setup parameters for call to function MT_TransportAlloc
   \   00007E   7A03         MOV     R2,#0x3
   \   000080   7960         MOV     R1,#0x60
   \   000082   12....       LCALL   `??MT_TransportAlloc::?relay`; Banked call to: MT_TransportAlloc
   \   000085   8A..         MOV     ?V0,R2
   \   000087   8B..         MOV     ?V1,R3
   \   000089   AE..         MOV     R6,?V0
   \   00008B   AF..         MOV     R7,?V1
   \   00008D   EE           MOV     A,R6
   \   00008E   4F           ORL     A,R7
   \   00008F   6037         JZ      ??MT_ProcessIncoming_4
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   7403         MOV     A,#0x3
   \   000097   F0           MOVX    @DPTR,A
   \   000098   A3           INC     DPTR
   \   000099   7460         MOV     A,#0x60
   \   00009B   12....       LCALL   ?Subroutine3 & 0xFFFF
    357            }
   \                     ??CrossCallReturnLabel_7:
   \   00009E   E4           CLR     A
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0                ; Setup parameters for call to function osal_memcpy
   \   0000A0   A8..         MOV     R0,?XSP + 0
   \   0000A2   A9..         MOV     R1,?XSP + 1
   \   0000A4   88..         MOV     ?V0,R0
   \   0000A6   89..         MOV     ?V1,R1
   \   0000A8   F5..         MOV     ?V2,A
   \   0000AA   78..         MOV     R0,#?V0
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AF   7C03         MOV     R4,#0x3
   \   0000B1   7D00         MOV     R5,#0x0
   \   0000B3   EE           MOV     A,R6
   \   0000B4   2C           ADD     A,R4
   \   0000B5   FA           MOV     R2,A
   \   0000B6   E4           CLR     A
   \   0000B7   3F           ADDC    A,R7
   \   0000B8   FB           MOV     R3,A
   \   0000B9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000BC   7403         MOV     A,#0x3
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1                ; Setup parameters for call to function MT_TransportSend
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FB           MOV     R3,A
   \   0000C5   12....       LCALL   `??MT_TransportSend::?relay`; Banked call to: MT_TransportSend
    358          }
   \                     ??MT_ProcessIncoming_4:
   \   0000C8   7403         MOV     A,#0x3
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   7F03         MOV     R7,#0x3
   \   0000CF   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
    359          
    360          /***************************************************************************************************
    361           * @fn      MTProcessAppRspMsg
    362           *
    363           * @brief   Process the User App Response Message
    364           *
    365           * @param   data - output serial buffer.  The first byte must be the
    366           *          endpoint that send this message.
    367           * @param   len - data length
    368           *
    369           * @return  none
    370           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          void MTProcessAppRspMsg( byte *pData, byte len )
   \                     MTProcessAppRspMsg:
    372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V2,R1
    373            /* Send out Reset Response message */
    374            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), MT_APP_RSP, len, pData );
   \   00000B                ; Setup parameters for call to function MT_TransportAlloc
   \   00000B   AA..         MOV     R2,?V2
   \   00000D   7960         MOV     R1,#0x60
   \   00000F   12....       LCALL   `??MT_TransportAlloc::?relay`; Banked call to: MT_TransportAlloc
   \   000012   8A..         MOV     ?V0,R2
   \   000014   8B..         MOV     ?V1,R3
   \   000016   EA           MOV     A,R2
   \   000017   45..         ORL     A,?V1
   \   000019   6030         JZ      ??MTProcessAppRspMsg_0
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   E5..         MOV     A,?V2
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   7469         MOV     A,#0x69
   \   000025   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000028   7480         MOV     A,#-0x80
   \   00002A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000030   AC..         MOV     R4,?V2
   \   000032   7D00         MOV     R5,#0x0
   \   000034   EA           MOV     A,R2
   \   000035   2403         ADD     A,#0x3
   \   000037   FA           MOV     R2,A
   \   000038   E4           CLR     A
   \   000039   35..         ADDC    A,?V1
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044                ; Setup parameters for call to function MT_TransportSend
   \   000044   AA..         MOV     R2,?V0
   \   000046   AB..         MOV     R3,?V1
   \   000048   12....       LCALL   `??MT_TransportSend::?relay`; Banked call to: MT_TransportSend
    375          }
   \                     ??MTProcessAppRspMsg_0:
   \   00004B   7F07         MOV     R7,#0x7
   \   00004D   02....       LJMP    ?BANKED_LEAVE_XDATA
    376          
    377          
    378          /***************************************************************************************************
    379           * @fn      MT_ReverseBytes
    380           *
    381           * @brief
    382           *
    383           *   Reverses bytes within an array
    384           *
    385           * @param   data - ptr to data buffer to reverse
    386           * @param    len - number of bytes in buffer
    387           *
    388           * @return  void
    389           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          void MT_ReverseBytes( byte *pData, byte len )
   \                     MT_ReverseBytes:
    391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    392            byte i,j;
    393            byte temp;
    394          
    395            for ( i = 0, j = len-1; len > 1; len-=2 )
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   74FF         MOV     A,#-0x1
   \   00000A   29           ADD     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   04           INC     A
   \   00000D   C3           CLR     C
   \   00000E   9402         SUBB    A,#0x2
   \   000010   4035         JC      ??MT_ReverseBytes_0
   \   000012   E9           MOV     A,R1
   \   000013   C3           CLR     C
   \   000014   13           RRC     A
   \   000015   FE           MOV     R6,A
    396            {
    397              temp = pData[i];
   \                     ??MT_ReverseBytes_1:
   \   000016   A8..         MOV     R0,?V0
   \   000018   EA           MOV     A,R2
   \   000019   28           ADD     A,R0
   \   00001A   F8           MOV     R0,A
   \   00001B   E4           CLR     A
   \   00001C   3B           ADDC    A,R3
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   FC           MOV     R4,A
   \   000020   E9           MOV     A,R1
   \   000021   FD           MOV     R5,A
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V2,A
    398              pData[i++] = pData[j];
   \   000029   EF           MOV     A,R7
   \   00002A   F8           MOV     R0,A
   \   00002B   EA           MOV     A,R2
   \   00002C   28           ADD     A,R0
   \   00002D   F8           MOV     R0,A
   \   00002E   E4           CLR     A
   \   00002F   3B           ADDC    A,R3
   \   000030   F9           MOV     R1,A
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \   000035   E0           MOVX    A,@DPTR
   \   000036   8C82         MOV     DPL,R4
   \   000038   8D83         MOV     DPH,R5
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   05..         INC     ?V0
    399              pData[j--] = temp;
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   E5..         MOV     A,?V2
   \   000043   F0           MOVX    @DPTR,A
   \   000044   1F           DEC     R7
    400            }
   \   000045   DECF         DJNZ    R6,??MT_ReverseBytes_1
    401          }
   \                     ??MT_ReverseBytes_0:
   \   000047   7F04         MOV     R7,#0x4
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
    402          
    403          
    404          /***************************************************************************************************
    405           * @fn      MT_Word2Buf
    406           *
    407           * @brief   Copy a uint16 array to a byte array, little endian.
    408           *
    409           * @param   pBuf - byte array
    410           * @param   pWord - uint16 array
    411           * @param   len - length of uint16 array
    412           *
    413           * @return  pointer to end of byte array
    414           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          uint8 *MT_Word2Buf( uint8 *pBuf, uint16 *pWord, uint8 len )
   \                     MT_Word2Buf:
    416          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   6029         JZ      ??MT_Word2Buf_0
   \   000008   F8           MOV     R0,A
    417            while ( len-- > 0 )
    418            {
    419              *pBuf++ = LO_UINT16( *pWord );
   \                     ??MT_Word2Buf_1:
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   F0           MOVX    @DPTR,A
    420              *pBuf++ = HI_UINT16( *pWord );
   \   000013   8C82         MOV     DPL,R4
   \   000015   8D83         MOV     DPH,R5
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   EA           MOV     A,R2
   \   000020   2402         ADD     A,#0x2
   \   000022   FA           MOV     R2,A
   \   000023   5001         JNC     ??MT_Word2Buf_2
   \   000025   0B           INC     R3
    421              pWord++;
   \                     ??MT_Word2Buf_2:
   \   000026   EC           MOV     A,R4
   \   000027   2402         ADD     A,#0x2
   \   000029   FC           MOV     R4,A
   \   00002A   5001         JNC     ??MT_Word2Buf_3
   \   00002C   0D           INC     R5
    422            }
   \                     ??MT_Word2Buf_3:
   \   00002D   18           DEC     R0
   \   00002E   E8           MOV     A,R0
   \   00002F   70D8         JNZ     ??MT_Word2Buf_1
    423          
    424            return pBuf;
   \                     ??MT_Word2Buf_0:
   \   000031   02....       LJMP    ?Subroutine0 & 0xFFFF
    425          }
    426          #if !defined(NONWK)
    427          /***************************************************************************************************
    428           * @fn      MT_BuildEndpointDesc
    429           *
    430           * @brief   Build endpoint descriptor and simple descriptor structure from incoming buffer
    431           *
    432           * @param   pBuf - byte array
    433           *
    434           * @return  epDesc - pointer to the endpoint descriptor
    435           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    436          uint8 MT_BuildEndpointDesc( uint8 *pBuf, void *param )
   \                     MT_BuildEndpointDesc:
    437          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
    438            uint8 i;
    439            uint8 ret = ZSuccess;
   \   00000D   75..00       MOV     ?V0,#0x0
    440            endPointDesc_t *epDesc;
    441          
    442            epDesc = (endPointDesc_t *)param;
    443            /* check if this endpoint is already registered */
    444            if ( afFindEndPointDesc( *pBuf ) != NULL )
   \   000010                ; Setup parameters for call to function afFindEndPointDesc
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000019   8B..         MOV     ?V5,R3
   \   00001B   EA           MOV     A,R2
   \   00001C   45..         ORL     A,?V5
   \   00001E   6006         JZ      ??MT_BuildEndpointDesc_0
    445            {
    446              ret = ZApsDuplicateEntry;
   \   000020   75..B8       MOV     ?V0,#-0x48
   \   000023   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    447            }
    448            else if ( epDesc )
   \                     ??MT_BuildEndpointDesc_0:
   \   000026   E5..         MOV     A,?V2
   \   000028   45..         ORL     A,?V3
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    449            {
    450              epDesc->endPoint = *pBuf;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   85..82       MOV     DPL,?V2
   \   000037   85..83       MOV     DPH,?V3
   \   00003A   F0           MOVX    @DPTR,A
    451          
    452              /* Ignore the latency reqs */
    453              epDesc->latencyReq = noLatencyReqs;
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
    454          
    455              /* allocate memory for the simple descriptor */
    456              epDesc->simpleDesc = (SimpleDescriptionFormat_t *) osal_mem_alloc(sizeof(SimpleDescriptionFormat_t));
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   7A0C         MOV     R2,#0xc
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV     ?V4,R2
   \   00004A   8B..         MOV     ?V5,R3
   \   00004C   A8..         MOV     R0,?V4
   \   00004E   A9..         MOV     R1,?V5
   \   000050   E5..         MOV     A,?V2
   \   000052   2403         ADD     A,#0x3
   \   000054   F5..         MOV     ?V2,A
   \   000056   5002         JNC     ??MT_BuildEndpointDesc_2
   \   000058   05..         INC     ?V3
   \                     ??MT_BuildEndpointDesc_2:
   \   00005A   F582         MOV     DPL,A
   \   00005C   85..83       MOV     DPH,?V3
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    457              if (epDesc->simpleDesc)
   \   000064   E8           MOV     A,R0
   \   000065   49           ORL     A,R1
   \   000066   7003         JNZ     $+5
   \   000068   02....       LJMP    ??MT_BuildEndpointDesc_3 & 0xFFFF
    458              {
    459                /* Endpoint */
    460                epDesc->simpleDesc->EndPoint = *pBuf++;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   12....       LCALL   ?Subroutine5 & 0xFFFF
    461          
    462                /* AppProfId */
    463                epDesc->simpleDesc->AppProfId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_10:
   \   000077   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00007A   E8           MOV     A,R0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E9           MOV     A,R1
   \   00007E   F0           MOVX    @DPTR,A
    464                pBuf += sizeof(uint16);
   \   00007F   EE           MOV     A,R6
   \   000080   2402         ADD     A,#0x2
   \   000082   FE           MOV     R6,A
   \   000083   5001         JNC     ??MT_BuildEndpointDesc_4
   \   000085   0F           INC     R7
    465          
    466                /* AppDeviceId */
    467                epDesc->simpleDesc->AppDeviceId = BUILD_UINT16(pBuf[0],pBuf[1]);
   \                     ??MT_BuildEndpointDesc_4:
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E8           MOV     A,R0
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   E9           MOV     A,R1
   \   000093   12....       LCALL   ?Subroutine3 & 0xFFFF
    468                pBuf += sizeof(uint16);
    469          
    470                /* AppDevVer */
    471                epDesc->simpleDesc->AppDevVer = (*pBuf++) & AF_APP_DEV_VER_MASK ;
   \                     ??CrossCallReturnLabel_5:
   \   000096   E0           MOVX    A,@DPTR
   \   000097   540F         ANL     A,#0xf
   \   000099   FA           MOV     R2,A
   \   00009A   85..82       MOV     DPL,?V2
   \   00009D   85..83       MOV     DPH,?V3
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   2405         ADD     A,#0x5
   \   0000A3   F8           MOV     R0,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   3400         ADDC    A,#0x0
   \   0000A8   F9           MOV     R1,A
   \   0000A9   8882         MOV     DPL,R0
   \   0000AB   8983         MOV     DPH,R1
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   54F0         ANL     A,#0xf0
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   4A           ORL     A,R2
   \   0000B2   12....       LCALL   ?Subroutine3 & 0xFFFF
    472          
    473                /* LatencyReq */
    474                pBuf++;
    475          
    476                /* AppNumInClusters */
    477                epDesc->simpleDesc->AppNumInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_6:
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   C0E0         PUSH    A
   \   0000BA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000BD   D0E0         POP     A
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   EE           MOV     A,R6
   \   0000C1   2405         ADD     A,#0x5
   \   0000C3   FE           MOV     R6,A
   \   0000C4   5001         JNC     ??MT_BuildEndpointDesc_5
   \   0000C6   0F           INC     R7
   \                     ??MT_BuildEndpointDesc_5:
   \   0000C7   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FA           MOV     R2,A
   \   0000CC   6034         JZ      ??MT_BuildEndpointDesc_6
    478                if (epDesc->simpleDesc->AppNumInClusters)
    479                {
    480                  epDesc->simpleDesc->pAppInClusterList = (uint16 *)
    481                            osal_mem_alloc((epDesc->simpleDesc->AppNumInClusters)*sizeof(uint16));
   \   0000CE                ; Setup parameters for call to function osal_mem_alloc
   \   0000CE   25E0         ADD     A,0xE0 /* A   */
   \   0000D0   FA           MOV     R2,A
   \   0000D1   E4           CLR     A
   \   0000D2   33           RLC     A
   \   0000D3   FB           MOV     R3,A
   \   0000D4   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000D7   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000DA   CA           XCH     A,R2
   \   0000DB   2407         ADD     A,#0x7
   \   0000DD   12....       LCALL   ?Subroutine1 & 0xFFFF
    482                  if ( epDesc->simpleDesc->pAppInClusterList )
   \                     ??CrossCallReturnLabel_0:
   \   0000E0   2407         ADD     A,#0x7
   \   0000E2   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000E5   6018         JZ      ??MT_BuildEndpointDesc_7
    483                  {
    484                    for (i=0; i<(epDesc->simpleDesc->AppNumInClusters); i++)
   \   0000E7   7A00         MOV     R2,#0x0
   \                     ??MT_BuildEndpointDesc_8:
   \   0000E9   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F8           MOV     R0,A
   \   0000EE   EA           MOV     A,R2
   \   0000EF   C3           CLR     C
   \   0000F0   98           SUBB    A,R0
   \   0000F1   500F         JNC     ??MT_BuildEndpointDesc_6
    485                    {
    486                      epDesc->simpleDesc->pAppInClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   0000F3   12....       LCALL   ?Subroutine7 & 0xFFFF
    487                      pBuf += 2;
    488                    }
   \                     ??CrossCallReturnLabel_14:
   \   0000F6   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000F9   5001         JNC     ??MT_BuildEndpointDesc_9
   \   0000FB   0F           INC     R7
   \                     ??MT_BuildEndpointDesc_9:
   \   0000FC   0A           INC     R2
   \   0000FD   80EA         SJMP    ??MT_BuildEndpointDesc_8
    489                  }
    490                  else
    491                  {
    492                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_7:
   \   0000FF   75..10       MOV     ?V0,#0x10
    493                  }
    494                }
    495          
    496                /* AppNumOutClusters */
    497                epDesc->simpleDesc->AppNumOutClusters = *pBuf++;
   \                     ??MT_BuildEndpointDesc_6:
   \   000102   8E82         MOV     DPL,R6
   \   000104   8F83         MOV     DPH,R7
   \   000106   E0           MOVX    A,@DPTR
   \   000107   C0E0         PUSH    A
   \   000109   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00010C   D0E0         POP     A
   \   00010E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000111   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000114   E0           MOVX    A,@DPTR
   \   000115   FA           MOV     R2,A
   \   000116   603C         JZ      ??MT_BuildEndpointDesc_10
    498                if (epDesc->simpleDesc->AppNumOutClusters)
    499                {
    500                  epDesc->simpleDesc->pAppOutClusterList = (uint16 *)
    501                                    osal_mem_alloc((epDesc->simpleDesc->AppNumOutClusters)*sizeof(uint16));
   \   000118                ; Setup parameters for call to function osal_mem_alloc
   \   000118   25E0         ADD     A,0xE0 /* A   */
   \   00011A   FA           MOV     R2,A
   \   00011B   E4           CLR     A
   \   00011C   33           RLC     A
   \   00011D   FB           MOV     R3,A
   \   00011E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000121   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000124   CA           XCH     A,R2
   \   000125   240A         ADD     A,#0xa
   \   000127   12....       LCALL   ?Subroutine1 & 0xFFFF
    502                  if (epDesc->simpleDesc->pAppOutClusterList)
   \                     ??CrossCallReturnLabel_1:
   \   00012A   240A         ADD     A,#0xa
   \   00012C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00012F   601E         JZ      ??MT_BuildEndpointDesc_11
    503                  {
    504                    for (i=0; i<(epDesc->simpleDesc->AppNumOutClusters); i++)
   \   000131   7A00         MOV     R2,#0x0
   \                     ??MT_BuildEndpointDesc_12:
   \   000133   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   F8           MOV     R0,A
   \   00013B   EA           MOV     A,R2
   \   00013C   C3           CLR     C
   \   00013D   98           SUBB    A,R0
   \   00013E   5014         JNC     ??MT_BuildEndpointDesc_10
    505                    {
    506                      epDesc->simpleDesc->pAppOutClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   000140   12....       LCALL   ?Subroutine7 & 0xFFFF
    507                      pBuf += 2;
    508                    }
   \                     ??CrossCallReturnLabel_15:
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000149   5001         JNC     ??MT_BuildEndpointDesc_13
   \   00014B   0F           INC     R7
   \                     ??MT_BuildEndpointDesc_13:
   \   00014C   0A           INC     R2
   \   00014D   80E4         SJMP    ??MT_BuildEndpointDesc_12
    509                  }
    510                  else
    511                  {
    512                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_11:
   \   00014F   75..10       MOV     ?V0,#0x10
   \   000152   8006         SJMP    ??MT_BuildEndpointDesc_14
    513                  }
    514                }
    515          
    516                /* if any list cannot be allocated...free all */
    517                if ( ret == ZMemError )
   \                     ??MT_BuildEndpointDesc_10:
   \   000154   7410         MOV     A,#0x10
   \   000156   65..         XRL     A,?V0
   \   000158   704C         JNZ     ??MT_BuildEndpointDesc_1
   \                     ??MT_BuildEndpointDesc_14:
   \   00015A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00015D   2407         ADD     A,#0x7
   \   00015F   F582         MOV     DPL,A
   \   000161   E4           CLR     A
   \   000162   38           ADDC    A,R0
   \   000163   F583         MOV     DPH,A
   \   000165   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000168   FB           MOV     R3,A
   \   000169   EA           MOV     A,R2
   \   00016A   4B           ORL     A,R3
   \   00016B   6003         JZ      ??MT_BuildEndpointDesc_15
    518                {
    519                  if (epDesc->simpleDesc->pAppInClusterList)
    520                  {
    521                    osal_mem_free(epDesc->simpleDesc->pAppInClusterList);
   \   00016D                ; Setup parameters for call to function osal_mem_free
   \   00016D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    522                  }
    523          
    524                  if (epDesc->simpleDesc->AppNumOutClusters)
   \                     ??MT_BuildEndpointDesc_15:
   \   000170   85..82       MOV     DPL,?V2
   \   000173   85..83       MOV     DPH,?V3
   \   000176   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   E0           MOVX    A,@DPTR
   \   000183   6015         JZ      ??MT_BuildEndpointDesc_16
    525                  {
    526                    osal_mem_free(epDesc->simpleDesc->pAppOutClusterList);
   \   000185                ; Setup parameters for call to function osal_mem_free
   \   000185   8882         MOV     DPL,R0
   \   000187   8983         MOV     DPH,R1
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   12....       LCALL   ??Subroutine17_0 & 0xFFFF
    527                  }
   \                     ??CrossCallReturnLabel_33:
   \   000196   FB           MOV     R3,A
   \   000197   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    528          
    529                  osal_mem_free(epDesc->simpleDesc);
   \                     ??MT_BuildEndpointDesc_16:
   \   00019A                ; Setup parameters for call to function osal_mem_free
   \   00019A   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    530                }
    531              }
   \                     ??CrossCallReturnLabel_35:
   \   00019D   FB           MOV     R3,A
   \   00019E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001A1   8003         SJMP    ??MT_BuildEndpointDesc_1
    532              else
    533              {
    534                ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_3:
   \   0001A3   75..10       MOV     ?V0,#0x10
    535              }
    536            }
    537          
    538            return ret;
   \                     ??MT_BuildEndpointDesc_1:
   \   0001A6   A9..         MOV     R1,?V0
   \   0001A8   7F06         MOV     R7,#0x6
   \   0001AA   02....       LJMP    ?BANKED_LEAVE_XDATA
    539          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   49           ORL     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   2409         ADD     A,#0x9
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   2406         ADD     A,#0x6
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   FC           MOV     R4,A
   \   00000D   E9           MOV     A,R1
   \   00000E   FD           MOV     R5,A
   \   00000F   8C82         MOV     DPL,R4
   \   000011   8D83         MOV     DPH,R5
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000009   F583         MOV     DPH,A
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8A..         MOV     ?V4,R2
   \   000002                REQUIRE ??Subroutine16_0
   \   000002                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine17_0
   \   000006                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   E4           CLR     A
   \   00000B   C8           XCH     A,R0
   \   00000C   F9           MOV     R1,A
   \   00000D   E5..         MOV     A,?V4
   \   00000F   28           ADD     A,R0
   \   000010   E4           CLR     A
   \   000011   39           ADDC    A,R1
   \   000012   F5..         MOV     ?V5,A
   \   000014   EA           MOV     A,R2
   \   000015   25E0         ADD     A,0xE0 /* A   */
   \   000017   F8           MOV     R0,A
   \   000018   E4           CLR     A
   \   000019   33           RLC     A
   \   00001A   F9           MOV     R1,A
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FB           MOV     R3,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   39           ADDC    A,R1
   \   00000D   8B82         MOV     DPL,R3
   \   00000F   F583         MOV     DPH,A
   \   000011   E5..         MOV     A,?V4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E5..         MOV     A,?V5
   \   000017   F0           MOVX    @DPTR,A
   \   000018   EE           MOV     A,R6
   \   000019   2402         ADD     A,#0x2
   \   00001B   FE           MOV     R6,A
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   AE82         MOV     R6,DPL
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3A           ADDC    A,R2
   \   000004   F583         MOV     DPH,A
   \   000006   E5..         MOV     A,?V4
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   EB           MOV     A,R3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   C8           XCH     A,R0
   \   00000B   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildAndSendZToolResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildAndSendZToolResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MTProcessAppRspMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MTProcessAppRspMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ReverseBytes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ReverseBytes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_Word2Buf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Word2Buf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildEndpointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildEndpointDesc
    540          #endif
    541          /***************************************************************************************************
    542          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     18   MTProcessAppRspMsg
        0     15   -> MT_TransportAlloc
        0     15   -> MT_TransportSend
        0     18   -> osal_memcpy
      1     19   MT_BuildAndSendZToolResponse
        0     16   -> MT_TransportAlloc
        0     16   -> MT_TransportSend
        0     19   -> osal_memcpy
      1     14   MT_BuildEndpointDesc
        0     14   -> afFindEndPointDesc
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      0      9   MT_Init
        0      9   -> MT_SysResetInd
      1     17   MT_ProcessIncoming
        0     14   -> MT_TransportAlloc
        0     14   -> MT_TransportSend
        0     17   -> osal_memcpy
      1     12   MT_ReverseBytes
      1      9   MT_Word2Buf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine16_0
       5  ??Subroutine17_0
       5  ?Subroutine0
      16  ?Subroutine1
      12  ?Subroutine10
      12  ?Subroutine11
      10  ?Subroutine12
      14  ?Subroutine13
      12  ?Subroutine14
       2  ?Subroutine15
       8  ?Subroutine2
       8  ?Subroutine3
      11  ?Subroutine4
      11  ?Subroutine5
      29  ?Subroutine6
      32  ?Subroutine7
      15  ?Subroutine8
      26  ?Subroutine9
      80  MTProcessAppRspMsg
       6  MTProcessAppRspMsg::?relay
      87  MT_BuildAndSendZToolResponse
       6  MT_BuildAndSendZToolResponse::?relay
     429  MT_BuildEndpointDesc
       6  MT_BuildEndpointDesc::?relay
      22  MT_Init
       6  MT_Init::?relay
     210  MT_ProcessIncoming
       6  MT_ProcessIncoming::?relay
      76  MT_ReverseBytes
       6  MT_ReverseBytes::?relay
      52  MT_Word2Buf
       6  MT_Word2Buf::?relay
       1  debugCompId
       1  debugThreshold
      44  mtProcessIncoming

 
 1 190 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    46 bytes in segment XDATA_Z
 
 1 232 bytes of CODE  memory
    46 bytes of XDATA memory

Errors: none
Warnings: none
