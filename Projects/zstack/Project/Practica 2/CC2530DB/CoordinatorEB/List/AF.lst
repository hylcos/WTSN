###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                17/Feb/2016  12:57:07
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Components\stack\af\AF.c
#    Command line       =  
#        -f "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "E:\Sensordinges\Z-Stack Mesh
#        1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00008000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack
#        Mesh 1.0.0\Components\stack\af\AF.c" -D HOLD_AUTO_START -D
#        BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D xNV_RESTORE -D ZTOOL_P1
#        -lC "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\"
#        -lA "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\"
#        --diag_suppress Pe001,Pa010,Pe1665 -o "E:\Sensordinges\Z-Stack Mesh
#        1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\" -e
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\" -I
#        "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\" -I
#        "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Oh --require_prototypes
#    List file          =  
#        E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\AF.lst
#    Object file        =  
#        E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\AF.r51
#
###############################################################################

E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh 1.0.0\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-06-30 16:29:17 -0700 (Mon, 30 Jun 2014) $
      4            Revision:       $Revision: 39295 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    102                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    103                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    104          
    105          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    106          
    107          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    108          
    109          /*********************************************************************
    110           * PUBLIC FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * @fn      afInit
    115           *
    116           * @brief   Initialization function for the AF.
    117           *
    118           * @param   none
    119           *
    120           * @return  none
    121          void afInit( void )
    122          {
    123          }
    124           */
    125          
    126          /*********************************************************************
    127           * @fn      afRegisterExtended
    128           *
    129           * @brief   Register an Application's EndPoint description.
    130           *
    131           * @param   epDesc - pointer to the Application's endpoint descriptor.
    132           * @param   descFn - pointer to descriptor callback function
    133           * @param   applFn - pointer to the Application callback function
    134           *
    135           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    136           *
    137           * @return  Pointer to epList_t on success, NULL otherwise.
    138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    141            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0B         MOV     R2,#0xb
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    142          
    143            if (ep != NULL)
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   6044         JZ      ??CrossCallReturnLabel_116
    144            {
    145              ep->nextDesc = epList;
   \   000018   90....       MOV     DPTR,#epList
   \   00001B   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00001E   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    146              epList = ep;
   \                     ??CrossCallReturnLabel_115:
   \   000021   90....       MOV     DPTR,#epList
   \   000024   EA           MOV     A,R2
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   EB           MOV     A,R3
   \   000028   12....       LCALL   ?Subroutine34 & 0xFFFF
    147              ep->epDesc = epDesc;
   \                     ??CrossCallReturnLabel_67:
   \   00002B   EE           MOV     A,R6
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   EF           MOV     A,R7
   \   00002F   12....       LCALL   ?Subroutine33 & 0xFFFF
    148              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_65:
   \   000032   E5..         MOV     A,?V0
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E5..         MOV     A,?V1
   \   000038   12....       LCALL   ?Subroutine32 & 0xFFFF
    149              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \                     ??CrossCallReturnLabel_63:
   \   00003B   A3           INC     DPTR
   \   00003C   7432         MOV     A,#0x32
   \   00003E   12....       LCALL   ?Subroutine30 & 0xFFFF
    150              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \                     ??CrossCallReturnLabel_59:
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?Subroutine30 & 0xFFFF
    151              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \                     ??CrossCallReturnLabel_60:
   \   000046   A3           INC     DPTR
   \   000047   F0           MOVX    @DPTR,A
    152              ep->pfnApplCB = applFn;
   \   000048   740C         MOV     A,#0xc
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   12....       LCALL   ?Subroutine20 & 0xFFFF
    153            }
   \                     ??CrossCallReturnLabel_33:
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    154          
    155            return ep;
   \                     ??CrossCallReturnLabel_116:
   \   00005C                REQUIRE ?Subroutine0
   \   00005C                ; // Fall through to label ?Subroutine0
    156          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    157          
    158          /*********************************************************************
    159           * @fn      afRegister
    160           *
    161           * @brief   Register an Application's EndPoint description.
    162           *
    163           * @param   epDesc - pointer to the Application's endpoint descriptor.
    164           *
    165           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    166           *
    167           * @return  afStatus_SUCCESS - Registered
    168           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    169           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    173            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FA           MOV     R2,A
   \   00000F   90....       MOV     DPTR,#epList
   \   000012   8004         SJMP    ??afRegister_0
   \                     ??afRegister_1:
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??afRegister_0:
   \   000018   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00001B   6009         JZ      ??afRegister_2
   \   00001D   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000020   70F2         JNZ     ??afRegister_1
    174            {
    175              return afStatus_INVALID_PARAMETER;
   \   000022   7902         MOV     R1,#0x2
   \   000024   8057         SJMP    ??afRegister_3
    176            }
    177          
    178            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_2:
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   7A0B         MOV     R2,#0xb
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV     ?V0,R2
   \   00002F   8B..         MOV     ?V1,R3
   \   000031   A8..         MOV     R0,?V0
   \   000033   A9..         MOV     R1,?V1
   \   000035   E8           MOV     A,R0
   \   000036   49           ORL     A,R1
   \   000037   6042         JZ      ??afRegister_4
   \   000039   90....       MOV     DPTR,#epList
   \   00003C   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   EA           MOV     A,R2
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   EB           MOV     A,R3
   \   000047   F0           MOVX    @DPTR,A
   \   000048   90....       MOV     DPTR,#epList
   \   00004B   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00004E   8882         MOV     DPL,R0
   \   000050   8983         MOV     DPH,R1
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   EE           MOV     A,R6
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   EF           MOV     A,R7
   \   000058   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000064   7432         MOV     A,#0x32
   \   000066   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000069   A3           INC     DPTR
   \   00006A   7401         MOV     A,#0x1
   \   00006C   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00006F   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000072   A3           INC     DPTR
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
   \   000077   7900         MOV     R1,#0x0
   \   000079   8002         SJMP    ??afRegister_3
   \                     ??afRegister_4:
   \   00007B   7910         MOV     R1,#0x10
   \                     ??afRegister_3:
   \   00007D   7F02         MOV     R7,#0x2
   \   00007F   02....       LJMP    ?BANKED_LEAVE_XDATA
    179          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F583         MOV     DPH,A
   \   00000C   8B82         MOV     DPL,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6A           XRL     A,R2
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   49           ORL     A,R1
   \   000004   22           RET
    180          
    181          /*********************************************************************
    182           * @fn      afDelete
    183           *
    184           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    185           *
    186           * @param   EndPoint - Application Endpoint to delete
    187           *
    188           * @return  afStatus_SUCCESS - endpoint deleted
    189           *          afStatus_INVALID_PARAMETER - endpoint not found
    190           *          afStatus_FAILED - endpoint list empty
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    193          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    194            epList_t *epCurrent;
    195            epList_t *epPrevious;
    196          
    197            if ( epList != NULL )
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00000D   6036         JZ      ??afDelete_0
    198            {
    199              epPrevious = epCurrent = epList;
   \   00000F   90....       MOV     DPTR,#epList
   \   000012   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000015   F9           MOV     R1,A
    200          
    201              // first element of the list matches
    202              if ( epCurrent->epDesc->endPoint == EndPoint )
   \   000016   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000019   7009         JNZ     ??afDelete_1
    203              {
    204                epList = epCurrent->nextDesc;
   \   00001B   90....       MOV     DPTR,#epList
   \   00001E   8015         SJMP    ??afDelete_2
    205                osal_mem_free( epCurrent );
    206          
    207                return ( afStatus_SUCCESS );
    208              }
    209              else
    210              {
    211                // search the list
    212                for ( epCurrent = epPrevious->nextDesc;
    213                      epCurrent != NULL;
    214                      epCurrent = epCurrent->nextDesc )
    215                {
    216                  if ( epCurrent->epDesc->endPoint == EndPoint )
    217                  {
    218                    epPrevious->nextDesc = epCurrent->nextDesc;
    219                    osal_mem_free( epCurrent );
    220          
    221                    // delete the entry and free the memory
    222                    return ( afStatus_SUCCESS );
    223                  }
    224                  epPrevious = epCurrent;
   \                     ??afDelete_3:
   \   000020   EA           MOV     A,R2
   \   000021   F8           MOV     R0,A
   \   000022   EB           MOV     A,R3
   \   000023   F9           MOV     R1,A
   \                     ??afDelete_1:
   \   000024   EC           MOV     A,R4
   \   000025   FA           MOV     R2,A
   \   000026   ED           MOV     A,R5
   \   000027   FB           MOV     R3,A
   \   000028   EA           MOV     A,R2
   \   000029   4B           ORL     A,R3
   \   00002A   6015         JZ      ??afDelete_4
   \   00002C   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00002F   70EF         JNZ     ??afDelete_3
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \                     ??afDelete_2:
   \   000035   EC           MOV     A,R4
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   ED           MOV     A,R5
   \   000039   F0           MOVX    @DPTR,A
   \   00003A                ; Setup parameters for call to function osal_mem_free
   \   00003A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   8006         SJMP    ??afDelete_5
    225                }
    226              }
    227          
    228              // no endpoint found
    229              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_4:
   \   000041   7902         MOV     R1,#0x2
   \   000043   8002         SJMP    ??afDelete_5
    230            }
    231            else
    232            {
    233              // epList is empty
    234              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   000045   7901         MOV     R1,#0x1
    235            }
   \                     ??afDelete_5:
   \   000047   02....       LJMP    ?Subroutine1 & 0xFFFF
    236          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FD           MOV     R5,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F583         MOV     DPH,A
   \   000015   8F82         MOV     DPL,R7
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6E           XRL     A,R6
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    237          
    238          /*********************************************************************
    239           * @fn          afDataConfirm
    240           *
    241           * @brief       This function will generate the Data Confirm back to
    242           *              the application.
    243           *
    244           * @param       endPoint - confirm end point
    245           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    246           * @param       status - status of APSDE_DATA_REQUEST
    247           *
    248           * @return      none
    249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   8B..         MOV     ?V2,R3
    252            endPointDesc_t *epDesc;
    253            afDataConfirm_t *msgPtr;
    254          
    255            // Find the endpoint description
    256            epDesc = afFindEndPointDesc( endPoint );
   \   00000B   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00000E   8003         SJMP    ??CrossCallReturnLabel_103
   \                     ??afDataConfirm_0:
   \   000010   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000013   FB           MOV     R3,A
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   6032         JZ      ??afDataConfirm_1
   \   000018   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00001B   65..         XRL     A,?V0
   \   00001D   70F1         JNZ     ??afDataConfirm_0
   \   00001F   AE82         MOV     R6,DPL
   \   000021   AF83         MOV     R7,DPH
    257            if ( epDesc == NULL )
   \   000023   EE           MOV     A,R6
   \   000024   4F           ORL     A,R7
   \   000025   6023         JZ      ??afDataConfirm_1
    258              return;
    259          
    260            // Determine the incoming command type
    261            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000027                ; Setup parameters for call to function osal_msg_allocate
   \   000027   7A04         MOV     R2,#0x4
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    262            if ( msgPtr )
   \   00002E   EA           MOV     A,R2
   \   00002F   4B           ORL     A,R3
   \   000030   6018         JZ      ??afDataConfirm_1
    263            {
    264              // Build the Data Confirm message
    265              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   74FD         MOV     A,#-0x3
   \   000038   F0           MOVX    @DPTR,A
    266              msgPtr->hdr.status = status;
   \   000039   A3           INC     DPTR
   \   00003A   E5..         MOV     A,?V2
   \   00003C   12....       LCALL   ?Subroutine34 & 0xFFFF
    267              msgPtr->endpoint = endPoint;
    268              msgPtr->transID = transID;
    269          
    270          #if defined ( MT_AF_CB_FUNC )
    271              /* If MT has subscribed for this callback, don't send as a message. */
    272              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    273              {
    274                /* Send callback if it's subscribed */
    275                MT_AfDataConfirm ((void *)msgPtr);
    276                /* Release the memory. */
    277                osal_msg_deallocate( (void *)msgPtr );
    278              }
    279              else
    280          #endif
    281              {
    282                /* send message through task message */
    283                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
    284              }
    285            }
   \                     ??CrossCallReturnLabel_68:
   \   00003F   E5..         MOV     A,?V0
   \   000041   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000044   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000047   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    286          }
   \                     ??afDataConfirm_1:
   \   00004A   7F06         MOV     R7,#0x6
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001   E5..         MOV     A,?V1
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function osal_msg_send
   \   000004                ; Setup parameters for call to function osal_msg_send
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008                REQUIRE ??Subroutine47_0
   \   000008                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine56_0
   \   000004                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
    287          
    288          /*********************************************************************
    289           * @fn          afReflectError
    290           *
    291           * @brief       This function will generate the Reflect Error message to
    292           *              the application.
    293           *
    294           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    295           * @param       dstAddr - intended destination
    296           * @param       endPoint - confirm end point
    297           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    298           * @param       status - status of APSDE_DATA_REQUEST
    299           *
    300           * @return      none
    301           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    302          void afReflectError( uint8 dstAddrMode, uint16 dstAddr, uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afReflectError:
    303          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   8C..         MOV     ?V3,R4
   \   00000D   8D..         MOV     ?V4,R5
    304            endPointDesc_t *epDesc;
    305            afReflectError_t *msgPtr;
    306          
    307            // Find the endpoint description
    308            epDesc = afFindEndPointDesc( endPoint );
   \   00000F   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000012   8003         SJMP    ??CrossCallReturnLabel_104
   \                     ??afReflectError_0:
   \   000014   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000017   FB           MOV     R3,A
   \   000018   EA           MOV     A,R2
   \   000019   4B           ORL     A,R3
   \   00001A   6048         JZ      ??afReflectError_1
   \   00001C   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00001F   65..         XRL     A,?V3
   \   000021   70F1         JNZ     ??afReflectError_0
   \   000023   AE82         MOV     R6,DPL
   \   000025   AF83         MOV     R7,DPH
    309            if ( epDesc == NULL )
   \   000027   EE           MOV     A,R6
   \   000028   4F           ORL     A,R7
   \   000029   6039         JZ      ??afReflectError_1
    310              return;
    311          
    312            // Determine the incoming command type
    313            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   00002B                ; Setup parameters for call to function osal_msg_allocate
   \   00002B   7A07         MOV     R2,#0x7
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    314            if ( msgPtr )
   \   000032   EA           MOV     A,R2
   \   000033   4B           ORL     A,R3
   \   000034   602E         JZ      ??afReflectError_1
    315            {
    316              // Build the Data Confirm message
    317              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   74FE         MOV     A,#-0x2
   \   00003C   F0           MOVX    @DPTR,A
    318              msgPtr->hdr.status = status;
   \   00003D   7410         MOV     A,#0x10
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   A3           INC     DPTR
   \   000048   12....       LCALL   ?Subroutine34 & 0xFFFF
    319              msgPtr->endpoint = endPoint;
    320              msgPtr->transID = transID;
    321              msgPtr->dstAddrMode = dstAddrMode;
    322              msgPtr->dstAddr = dstAddr;
    323          
    324          #if defined ( MT_AF_CB_FUNC )
    325              /* If MT has subscribed for this callback, don't send as a message. */
    326              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    327              {
    328                /* Send callback if it's subscribed */
    329                MT_AfReflectError( (void *)msgPtr );
    330                /* Release the memory. */
    331                osal_msg_deallocate( (void *)msgPtr );
    332              }
    333              else
    334          #endif
    335              {
    336                /* send message through task message */
    337                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
    338              }
    339            }
   \                     ??CrossCallReturnLabel_70:
   \   00004B   E5..         MOV     A,?V3
   \   00004D   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000050   A3           INC     DPTR
   \   000051   E5..         MOV     A,?V4
   \   000053   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000056   E5..         MOV     A,?V2
   \   000058   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00005B   E5..         MOV     A,?V0
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000061   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    340          }
   \                     ??afReflectError_1:
   \   000064                REQUIRE ?Subroutine2
   \   000064                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    341          
    342          /*********************************************************************
    343           * @fn          afIncomingData
    344           *
    345           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    346           *
    347           * @param       aff  - pointer to APS frame format
    348           * @param       SrcAddress  - Source address
    349           * @param       SrcPanId  - Source PAN ID
    350           * @param       sig - incoming message's link quality
    351           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    352           * @param       SecurityUse - Security enable/disable
    353           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    354           * @param       radius - incoming messages received radius
    355           *
    356           * @return      none
    357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    359                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    360                               uint32 timestamp, uint8 radius )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E9           MOV     A,R1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   8A..         MOV     ?V14,R2
   \   00001D   8B..         MOV     ?V15,R3
    362            endPointDesc_t *epDesc = NULL;
    363            epList_t *pList = epList;
   \   00001F   90....       MOV     DPTR,#epList
   \   000022   12....       LCALL   ?Subroutine39 & 0xFFFF
    364          #if !defined ( APS_NO_GROUPS )
    365            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \                     ??CrossCallReturnLabel_82:
   \   000025   75..FE       MOV     ?V2,#-0x2
    366          #endif
    367          
    368            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   540C         ANL     A,#0xc
   \   00002F   640C         XRL     A,#0xc
   \   000031   7039         JNZ     ??afIncomingData_0
    369            {
    370          #if !defined ( APS_NO_GROUPS )
    371              // Find the first endpoint for this group
    372              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000033                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000033   79FE         MOV     R1,#-0x2
   \   000035   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000038   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00003B   E9           MOV     A,R1
   \   00003C   F5..         MOV     ?V2,A
    373              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   00003E   74FE         MOV     A,#-0x2
   \   000040   65..         XRL     A,?V2
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    374                return;   // No endpoint found
    375          
    376              epDesc = afFindEndPointDesc( grpEp );
   \   000047   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00004A   8003         SJMP    ??CrossCallReturnLabel_105
   \                     ??afIncomingData_2:
   \   00004C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00004F   FB           MOV     R3,A
   \   000050   EA           MOV     A,R2
   \   000051   4B           ORL     A,R3
   \   000052   6007         JZ      ??afIncomingData_3
   \   000054   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000057   70F3         JNZ     ??afIncomingData_2
   \   000059   8006         SJMP    ??afIncomingData_4
   \                     ??afIncomingData_3:
   \   00005B   758200       MOV     DPL,#0x0
   \   00005E   758300       MOV     DPH,#0x0
   \                     ??afIncomingData_4:
   \   000061   AE82         MOV     R6,DPL
   \   000063   AF83         MOV     R7,DPH
    377              if ( epDesc == NULL )
   \   000065   EE           MOV     A,R6
   \   000066   4F           ORL     A,R7
   \   000067   7079         JNZ     ??afIncomingData_5
    378                return;   // Endpoint descriptor not found
   \   000069   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    379          
    380              pList = afFindEndPointDescList( epDesc->endPoint );
    381          #else
    382              return; // Not supported
    383          #endif
    384            }
    385            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   00006C   EA           MOV     A,R2
   \   00006D   2402         ADD     A,#0x2
   \   00006F   F5..         MOV     ?V8,A
   \   000071   E4           CLR     A
   \   000072   35..         ADDC    A,?V15
   \   000074   85..82       MOV     DPL,?V8
   \   000077   F583         MOV     DPH,A
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   74FF         MOV     A,#-0x1
   \   00007D   68           XRL     A,R0
   \   00007E   702E         JNZ     ??afIncomingData_6
    386            {
    387              // Set the list
    388              if ( pList != NULL )
   \   000080   E5..         MOV     A,?V0
   \   000082   45..         ORL     A,?V1
   \   000084   7003         JNZ     $+5
   \   000086   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    389              {
    390                epDesc = pList->epDesc;
   \   000089   85..82       MOV     DPL,?V0
   \   00008C   85..83       MOV     DPH,?V1
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FE           MOV     R6,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FF           MOV     R7,A
   \                     ??afIncomingData_7:
   \   000096   741C         MOV     A,#0x1c
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F5..         MOV     ?V10,A
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F5..         MOV     ?V11,A
   \   0000A2   7421         MOV     A,#0x21
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   78..         MOV     R0,#?V4
   \   0000A9   12....       LCALL   ?L_MOV_X
   \   0000AC   805F         SJMP    ??afIncomingData_8
    391              }
    392            }
    393            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_6:
   \   0000AE   E8           MOV     A,R0
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000B9   8003         SJMP    ??CrossCallReturnLabel_106
   \                     ??afIncomingData_9:
   \   0000BB   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000BE   FB           MOV     R3,A
   \   0000BF   EA           MOV     A,R2
   \   0000C0   4B           ORL     A,R3
   \   0000C1   6010         JZ      ??afIncomingData_10
   \   0000C3   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000C6   FC           MOV     R4,A
   \   0000C7   85..82       MOV     DPL,?XSP + 0
   \   0000CA   85..83       MOV     DPH,?XSP + 1
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   6C           XRL     A,R4
   \   0000CF   70EA         JNZ     ??afIncomingData_9
   \   0000D1   8004         SJMP    ??afIncomingData_11
   \                     ??afIncomingData_10:
   \   0000D3   7800         MOV     R0,#0x0
   \   0000D5   7900         MOV     R1,#0x0
   \                     ??afIncomingData_11:
   \   0000D7   E8           MOV     A,R0
   \   0000D8   FE           MOV     R6,A
   \   0000D9   E9           MOV     A,R1
   \   0000DA   FF           MOV     R7,A
   \   0000DB   EE           MOV     A,R6
   \   0000DC   4F           ORL     A,R7
   \   0000DD   7003         JNZ     $+5
   \   0000DF   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    394            {
    395              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_5:
   \   0000E2   8E82         MOV     DPL,R6
   \   0000E4   8F83         MOV     DPH,R7
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   90....       MOV     DPTR,#epList
   \   0000EB   8006         SJMP    ??afIncomingData_12
   \                     ??afIncomingData_13:
   \   0000ED   85..82       MOV     DPL,?V0
   \   0000F0   85..83       MOV     DPH,?V1
   \                     ??afIncomingData_12:
   \   0000F3   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000F6   609E         JZ      ??afIncomingData_7
   \   0000F8   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000FB   69           XRL     A,R1
   \   0000FC   70EF         JNZ     ??afIncomingData_13
    396            }
   \                     ??afIncomingData_14:
   \   0000FE   8096         SJMP    ??afIncomingData_7
    397          
    398            while ( epDesc )
    399            {
    400              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
    401          
    402              if ( pList->pfnDescCB )
    403              {
    404                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    405                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    406                if ( pID )
    407                {
    408                  epProfileID = *pID;
    409                  osal_mem_free( pID );
    410                }
    411              }
    412              else if ( epDesc->simpleDesc )
    413              {
    414                epProfileID = epDesc->simpleDesc->AppProfId;
    415              }
    416          
    417              // First part of verification is to make sure that:
    418              // the local Endpoint ProfileID matches the received ProfileID OR
    419              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    420              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    421              if ( (aff->ProfileID == epProfileID) ||
    422                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    423                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    424              {
    425                // Save original endpoint
    426                uint8 endpoint = aff->DstEndPoint;
    427          
    428                // overwrite with descriptor's endpoint
    429                aff->DstEndPoint = epDesc->endPoint;
    430          
    431                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    432                                   nwkSeqNum, SecurityUse, timestamp, radius );
    433          
    434                // Restore with original endpoint
    435                aff->DstEndPoint = endpoint;
    436              }
    437          
    438              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    439              {
    440          #if !defined ( APS_NO_GROUPS )
    441                // Find the next endpoint for this group
    442                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    443                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    444                  return;   // No endpoint found
    445          
    446                epDesc = afFindEndPointDesc( grpEp );
    447                if ( epDesc == NULL )
    448                  return;   // Endpoint descriptor not found
    449          
    450                pList = afFindEndPointDescList( epDesc->endPoint );
    451          #else
    452                return;
    453          #endif
    454              }
    455              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    456              {
    457                pList = pList->nextDesc;
    458                if ( pList )
    459                  epDesc = pList->epDesc;
   \                     ??afIncomingData_15:
   \   000100   85..82       MOV     DPL,?V0
   \   000103   85..83       MOV     DPH,?V1
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   FE           MOV     R6,A
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   FF           MOV     R7,A
   \                     ??afIncomingData_8:
   \   00010D   EE           MOV     A,R6
   \   00010E   4F           ORL     A,R7
   \   00010F   7003         JNZ     $+5
   \   000111   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   000114   8011         SJMP    ??afIncomingData_16
   \                     ??afIncomingData_17:
   \   000116   85..82       MOV     DPL,?V0
   \   000119   85..83       MOV     DPH,?V1
   \                     ??afIncomingData_18:
   \   00011C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00011F   6006         JZ      ??afIncomingData_16
   \   000121   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000124   69           XRL     A,R1
   \   000125   70EF         JNZ     ??afIncomingData_17
   \                     ??afIncomingData_16:
   \   000127   75..FE       MOV     ?V8,#-0x2
   \   00012A   75..FF       MOV     ?V9,#-0x1
   \   00012D   85..82       MOV     DPL,?V0
   \   000130   85..83       MOV     DPH,?V1
   \   000133   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000136   8E82         MOV     DPL,R6
   \   000138   8F83         MOV     DPH,R7
   \   00013A   6016         JZ      ??afIncomingData_19
   \   00013C                ; Setup parameters for indirect call
   \   00013C   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00013F   12....       LCALL   ?CALL_IND
   \   000142   EA           MOV     A,R2
   \   000143   4B           ORL     A,R3
   \   000144   6015         JZ      ??CrossCallReturnLabel_23
   \   000146   8A82         MOV     DPL,R2
   \   000148   8B83         MOV     DPH,R3
   \   00014A   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00014D                ; Setup parameters for call to function osal_mem_free
   \   00014D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000150   8009         SJMP    ??CrossCallReturnLabel_23
   \                     ??afIncomingData_19:
   \   000152   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000155   6004         JZ      ??CrossCallReturnLabel_23
   \   000157   A3           INC     DPTR
   \   000158   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00015B   85..82       MOV     DPL,?V14
   \   00015E   85..83       MOV     DPH,?V15
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   FA           MOV     R2,A
   \   00016E   E5..         MOV     A,?V8
   \   000170   68           XRL     A,R0
   \   000171   7003         JNZ     ??afIncomingData_20
   \   000173   E5..         MOV     A,?V9
   \   000175   69           XRL     A,R1
   \                     ??afIncomingData_20:
   \   000176   6016         JZ      ??afIncomingData_21
   \   000178   EA           MOV     A,R2
   \   000179   7009         JNZ     ??afIncomingData_22
   \   00017B   E8           MOV     A,R0
   \   00017C   49           ORL     A,R1
   \   00017D   6003         JZ      $+5
   \   00017F   02....       LJMP    ??afIncomingData_23 & 0xFFFF
   \   000182   800A         SJMP    ??afIncomingData_21
   \                     ??afIncomingData_22:
   \   000184   74FF         MOV     A,#-0x1
   \   000186   68           XRL     A,R0
   \   000187   7003         JNZ     ??afIncomingData_24
   \   000189   74FF         MOV     A,#-0x1
   \   00018B   69           XRL     A,R1
   \                     ??afIncomingData_24:
   \   00018C   7079         JNZ     ??afIncomingData_23
   \                     ??afIncomingData_21:
   \   00018E   E5..         MOV     A,?V14
   \   000190   2402         ADD     A,#0x2
   \   000192   F5..         MOV     ?V8,A
   \   000194   E4           CLR     A
   \   000195   35..         ADDC    A,?V15
   \   000197   F5..         MOV     ?V9,A
   \   000199   85..82       MOV     DPL,?V8
   \   00019C   F583         MOV     DPH,A
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   85..82       MOV     DPL,?XSP + 0
   \   0001A2   85..83       MOV     DPH,?XSP + 1
   \   0001A5   F0           MOVX    @DPTR,A
   \   0001A6   EA           MOV     A,R2
   \   0001A7   85..82       MOV     DPL,?V8
   \   0001AA   85..83       MOV     DPH,?V9
   \   0001AD   F0           MOVX    @DPTR,A
   \   0001AE                ; Setup parameters for call to function afBuildMSGIncoming
   \   0001AE   7425         MOV     A,#0x25
   \   0001B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F5..         MOV     ?V3,A
   \   0001B6   78..         MOV     R0,#?V3
   \   0001B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001BB   78..         MOV     R0,#?V4
   \   0001BD   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0001C0   7425         MOV     A,#0x25
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   F5..         MOV     ?V3,A
   \   0001C8   78..         MOV     R0,#?V3
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CD   7424         MOV     A,#0x24
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001D5   78..         MOV     R0,#?V10
   \   0001D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DA   740C         MOV     A,#0xc
   \   0001DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DF   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001E2   740D         MOV     A,#0xd
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   F9           MOV     R1,A
   \   0001E9   EE           MOV     A,R6
   \   0001EA   FC           MOV     R4,A
   \   0001EB   EF           MOV     A,R7
   \   0001EC   FD           MOV     R5,A
   \   0001ED   AA..         MOV     R2,?V14
   \   0001EF   AB..         MOV     R3,?V15
   \   0001F1   12....       LCALL   `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   0001F4   740C         MOV     A,#0xc
   \   0001F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F9   85..82       MOV     DPL,?XSP + 0
   \   0001FC   85..83       MOV     DPH,?XSP + 1
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   85..82       MOV     DPL,?V8
   \   000203   85..83       MOV     DPH,?V9
   \   000206   F0           MOVX    @DPTR,A
   \                     ??afIncomingData_23:
   \   000207   85..82       MOV     DPL,?V14
   \   00020A   85..83       MOV     DPH,?V15
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   540C         ANL     A,#0xc
   \   000210   640C         XRL     A,#0xc
   \   000212   703D         JNZ     ??afIncomingData_25
   \   000214                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000214   A9..         MOV     R1,?V2
   \   000216   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000219   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00021C   E9           MOV     A,R1
   \   00021D   F5..         MOV     ?V2,A
   \   00021F   74FE         MOV     A,#-0x2
   \   000221   65..         XRL     A,?V2
   \   000223   6040         JZ      ??afIncomingData_1
   \   000225   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000228   8003         SJMP    ??CrossCallReturnLabel_107
   \                     ??afIncomingData_26:
   \   00022A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00022D   FB           MOV     R3,A
   \   00022E   EA           MOV     A,R2
   \   00022F   4B           ORL     A,R3
   \   000230   6007         JZ      ??afIncomingData_27
   \   000232   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000235   70F3         JNZ     ??afIncomingData_26
   \   000237   8004         SJMP    ??afIncomingData_28
   \                     ??afIncomingData_27:
   \   000239   7800         MOV     R0,#0x0
   \   00023B   7900         MOV     R1,#0x0
   \                     ??afIncomingData_28:
   \   00023D   E8           MOV     A,R0
   \   00023E   FE           MOV     R6,A
   \   00023F   E9           MOV     A,R1
   \   000240   FF           MOV     R7,A
   \   000241   EE           MOV     A,R6
   \   000242   4F           ORL     A,R7
   \   000243   6020         JZ      ??afIncomingData_1
   \   000245   8E82         MOV     DPL,R6
   \   000247   8F83         MOV     DPH,R7
   \   000249   E0           MOVX    A,@DPTR
   \   00024A   F9           MOV     R1,A
   \   00024B   90....       MOV     DPTR,#epList
   \   00024E   02....       LJMP    ??afIncomingData_18 & 0xFFFF
   \                     ??afIncomingData_25:
   \   000251   A3           INC     DPTR
   \   000252   A3           INC     DPTR
   \   000253   E0           MOVX    A,@DPTR
   \   000254   F4           CPL     A
   \   000255   700E         JNZ     ??afIncomingData_1
   \   000257   85..82       MOV     DPL,?V0
   \   00025A   85..83       MOV     DPH,?V1
   \   00025D   12....       LCALL   ?Subroutine8 & 0xFFFF
    460                else
    461                  epDesc = NULL;
    462              }
   \                     ??CrossCallReturnLabel_15:
   \   000260   6003         JZ      $+5
   \   000262   02....       LJMP    ??afIncomingData_15 & 0xFFFF
    463              else
    464                epDesc = NULL;
    465            }
    466          }
   \                     ??afIncomingData_1:
   \   000265   7404         MOV     A,#0x4
   \   000267   12....       LCALL   ?DEALLOC_XSTACK8
   \   00026A   7F10         MOV     R7,#0x10
   \   00026C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   E5..         MOV     A,?V0
   \   000005   45..         ORL     A,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   7902         MOV     R1,#0x2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000007   FC           MOV     R4,A
   \   000008   E9           MOV     A,R1
   \   000009   FD           MOV     R5,A
   \   00000A   EC           MOV     A,R4
   \   00000B   4D           ORL     A,R5
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   E582         MOV     A,DPL
   \   00000C   4583         ORL     A,DPH
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine51_0
   \   000001                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine52_0
   \   000001                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   22           RET
    467          
    468          /*********************************************************************
    469           * @fn          afBuildMSGIncoming
    470           *
    471           * @brief       Build the message for the app
    472           *
    473           * @param
    474           *
    475           * @return      pointer to next in data buffer
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    478                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    479                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V6,R1
    481            afIncomingMSGPacket_t *MSGpkt;
    482            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    483            uint8 *asdu = aff->asdu;
   \   00000F   EA           MOV     A,R2
   \   000010   240E         ADD     A,#0xe
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   12....       LCALL   ?Subroutine17 & 0xFFFF
    484            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_24:
   \   00001C   EA           MOV     A,R2
   \   00001D   2410         ADD     A,#0x10
   \   00001F   F5..         MOV     ?V2,A
   \   000021   E4           CLR     A
   \   000022   35..         ADDC    A,?V1
   \   000024   F5..         MOV     ?V3,A
   \   000026                ; Setup parameters for call to function osal_msg_allocate
   \   000026   85..82       MOV     DPL,?V2
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   2427         ADD     A,#0x27
   \   00002E   FA           MOV     R2,A
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000034   8A..         MOV     ?V10,R2
   \   000036   8B..         MOV     ?V11,R3
   \   000038   AE..         MOV     R6,?V10
   \   00003A   AF..         MOV     R7,?V11
    485          
    486            if ( MSGpkt == NULL )
   \   00003C   EE           MOV     A,R6
   \   00003D   4F           ORL     A,R7
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
    487            {
    488              return;
    489            }
    490          
    491            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   741A         MOV     A,#0x1a
   \   000049   12....       LCALL   ?Subroutine37 & 0xFFFF
    492            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_77:
   \   00004C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00004F   12....       LCALL   ?Subroutine28 & 0xFFFF
    493            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_57:
   \   000052   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    494            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_118:
   \   00005A                ; Setup parameters for call to function afCopyAddress
   \   00005A   7414         MOV     A,#0x14
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000062   EE           MOV     A,R6
   \   000063   2406         ADD     A,#0x6
   \   000065   FA           MOV     R2,A
   \   000066   E4           CLR     A
   \   000067   3F           ADDC    A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    495            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   00006C   85..82       MOV     DPL,?V0
   \   00006F   85..83       MOV     DPH,?V1
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   C0E0         PUSH    A
   \   000078   EE           MOV     A,R6
   \   000079   240F         ADD     A,#0xf
   \   00007B   F582         MOV     DPL,A
   \   00007D   E4           CLR     A
   \   00007E   3F           ADDC    A,R7
   \   00007F   F583         MOV     DPH,A
   \   000081   D0E0         POP     A
   \   000083   F0           MOVX    @DPTR,A
    496            MSGpkt->endPoint = epDesc->endPoint;
   \   000084   85..82       MOV     DPL,?V4
   \   000087   85..83       MOV     DPH,?V5
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   C0E0         PUSH    A
   \   00008D   EE           MOV     A,R6
   \   00008E   2414         ADD     A,#0x14
   \   000090   F582         MOV     DPL,A
   \   000092   E4           CLR     A
   \   000093   3F           ADDC    A,R7
   \   000094   F583         MOV     DPH,A
   \   000096   D0E0         POP     A
   \   000098   F0           MOVX    @DPTR,A
    497            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   000099   E5..         MOV     A,?V0
   \   00009B   240C         ADD     A,#0xc
   \   00009D   F582         MOV     DPL,A
   \   00009F   E4           CLR     A
   \   0000A0   35..         ADDC    A,?V1
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C0E0         PUSH    A
   \   0000A7   EE           MOV     A,R6
   \   0000A8   2415         ADD     A,#0x15
   \   0000AA   F582         MOV     DPL,A
   \   0000AC   E4           CLR     A
   \   0000AD   3F           ADDC    A,R7
   \   0000AE   F583         MOV     DPH,A
   \   0000B0   D0E0         POP     A
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   7418         MOV     A,#0x18
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL   ??Subroutine48_0 & 0xFFFF
    498            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_96:
   \   0000BB   C0E0         PUSH    A
   \   0000BD   EE           MOV     A,R6
   \   0000BE   2416         ADD     A,#0x16
   \   0000C0   F582         MOV     DPL,A
   \   0000C2   E4           CLR     A
   \   0000C3   3F           ADDC    A,R7
   \   0000C4   F583         MOV     DPH,A
   \   0000C6   D0E0         POP     A
   \   0000C8   12....       LCALL   ?Subroutine35 & 0xFFFF
    499            MSGpkt->correlation = sig->correlation;
   \                     ??CrossCallReturnLabel_72:
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   C0E0         PUSH    A
   \   0000CE   EE           MOV     A,R6
   \   0000CF   2417         ADD     A,#0x17
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   E4           CLR     A
   \   0000D4   3F           ADDC    A,R7
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   D0E0         POP     A
   \   0000D9   12....       LCALL   ?Subroutine35 & 0xFFFF
    500            MSGpkt->rssi = sig->rssi;
   \                     ??CrossCallReturnLabel_73:
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   C0E0         PUSH    A
   \   0000E0   EE           MOV     A,R6
   \   0000E1   2418         ADD     A,#0x18
   \   0000E3   F582         MOV     DPL,A
   \   0000E5   E4           CLR     A
   \   0000E6   3F           ADDC    A,R7
   \   0000E7   F583         MOV     DPH,A
   \   0000E9   D0E0         POP     A
   \   0000EB   F0           MOVX    @DPTR,A
    501            MSGpkt->SecurityUse = SecurityUse;
   \   0000EC   741A         MOV     A,#0x1a
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   C0E0         PUSH    A
   \   0000F4   EE           MOV     A,R6
   \   0000F5   2419         ADD     A,#0x19
   \   0000F7   F582         MOV     DPL,A
   \   0000F9   E4           CLR     A
   \   0000FA   3F           ADDC    A,R7
   \   0000FB   F583         MOV     DPH,A
   \   0000FD   D0E0         POP     A
   \   0000FF   F0           MOVX    @DPTR,A
    502            MSGpkt->timestamp = timestamp;
   \   000100   741B         MOV     A,#0x1b
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   12....       LCALL   ?XLOAD_R0123
   \   000108   EE           MOV     A,R6
   \   000109   241A         ADD     A,#0x1a
   \   00010B   F582         MOV     DPL,A
   \   00010D   E4           CLR     A
   \   00010E   3F           ADDC    A,R7
   \   00010F   F583         MOV     DPH,A
   \   000111   12....       LCALL   ?XSTORE_R0123
    503            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   000114   EE           MOV     A,R6
   \   000115   241E         ADD     A,#0x1e
   \   000117   F582         MOV     DPL,A
   \   000119   E4           CLR     A
   \   00011A   3F           ADDC    A,R7
   \   00011B   F583         MOV     DPH,A
   \   00011D   E5..         MOV     A,?V6
   \   00011F   F0           MOVX    @DPTR,A
    504            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   000120   E5..         MOV     A,?V0
   \   000122   2415         ADD     A,#0x15
   \   000124   F582         MOV     DPL,A
   \   000126   E4           CLR     A
   \   000127   35..         ADDC    A,?V1
   \   000129   F583         MOV     DPH,A
   \   00012B   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00012E   2424         ADD     A,#0x24
   \   000130   F582         MOV     DPL,A
   \   000132   E4           CLR     A
   \   000133   3F           ADDC    A,R7
   \   000134   F583         MOV     DPH,A
   \   000136   12....       LCALL   ?Subroutine28 & 0xFFFF
    505            MSGpkt->macDestAddr = aff->macDestAddr;
   \                     ??CrossCallReturnLabel_58:
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000144   2412         ADD     A,#0x12
   \   000146   12....       LCALL   ?Subroutine29 & 0xFFFF
    506            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_124:
   \   000149   7416         MOV     A,#0x16
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000151   2410         ADD     A,#0x10
   \   000153   12....       LCALL   ?Subroutine29 & 0xFFFF
    507            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_125:
   \   000156   EE           MOV     A,R6
   \   000157   241F         ADD     A,#0x1f
   \   000159   F582         MOV     DPL,A
   \   00015B   E4           CLR     A
   \   00015C   3F           ADDC    A,R7
   \   00015D   F583         MOV     DPH,A
   \   00015F   E4           CLR     A
   \   000160   F0           MOVX    @DPTR,A
    508            MSGpkt->cmd.DataLength = aff->asduLength;
   \   000161   EE           MOV     A,R6
   \   000162   2420         ADD     A,#0x20
   \   000164   FC           MOV     R4,A
   \   000165   E4           CLR     A
   \   000166   3F           ADDC    A,R7
   \   000167   FD           MOV     R5,A
   \   000168   85..82       MOV     DPL,?V2
   \   00016B   85..83       MOV     DPH,?V3
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   8C82         MOV     DPL,R4
   \   000171   8D83         MOV     DPH,R5
   \   000173   F0           MOVX    @DPTR,A
   \   000174   A3           INC     DPTR
   \   000175   E4           CLR     A
   \   000176   F0           MOVX    @DPTR,A
    509            MSGpkt->radius = radius;
   \   000177   741F         MOV     A,#0x1f
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   C0E0         PUSH    A
   \   00017F   EE           MOV     A,R6
   \   000180   2426         ADD     A,#0x26
   \   000182   F582         MOV     DPL,A
   \   000184   E4           CLR     A
   \   000185   3F           ADDC    A,R7
   \   000186   F583         MOV     DPH,A
   \   000188   D0E0         POP     A
   \   00018A   F0           MOVX    @DPTR,A
    510          
    511            if ( MSGpkt->cmd.DataLength )
   \   00018B   EE           MOV     A,R6
   \   00018C   2422         ADD     A,#0x22
   \   00018E   F8           MOV     R0,A
   \   00018F   E4           CLR     A
   \   000190   3F           ADDC    A,R7
   \   000191   F9           MOV     R1,A
   \   000192   8C82         MOV     DPL,R4
   \   000194   8D83         MOV     DPH,R5
   \   000196   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000199   EA           MOV     A,R2
   \   00019A   4B           ORL     A,R3
   \   00019B   6029         JZ      ??afBuildMSGIncoming_1
    512            {
    513              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   00019D   EE           MOV     A,R6
   \   00019E   2427         ADD     A,#0x27
   \   0001A0   FA           MOV     R2,A
   \   0001A1   E4           CLR     A
   \   0001A2   3F           ADDC    A,R7
   \   0001A3   FB           MOV     R3,A
   \   0001A4   8882         MOV     DPL,R0
   \   0001A6   8983         MOV     DPH,R1
   \   0001A8   EA           MOV     A,R2
   \   0001A9   F0           MOVX    @DPTR,A
   \   0001AA   A3           INC     DPTR
   \   0001AB   EB           MOV     A,R3
   \   0001AC   F0           MOVX    @DPTR,A
    514              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   0001AD                ; Setup parameters for call to function osal_memcpy
   \   0001AD   75..00       MOV     ?V10,#0x0
   \   0001B0   78..         MOV     R0,#?V8
   \   0001B2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001B5   8C82         MOV     DPL,R4
   \   0001B7   8D83         MOV     DPH,R5
   \   0001B9   12....       LCALL   ?Subroutine18 & 0xFFFF
    515            }
   \                     ??CrossCallReturnLabel_26:
   \   0001BC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001BF   7403         MOV     A,#0x3
   \   0001C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C4   8008         SJMP    ??afBuildMSGIncoming_2
    516            else
    517            {
    518              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   0001C6   8882         MOV     DPL,R0
   \   0001C8   8983         MOV     DPH,R1
   \   0001CA   E4           CLR     A
   \   0001CB   F0           MOVX    @DPTR,A
   \   0001CC   A3           INC     DPTR
   \   0001CD   F0           MOVX    @DPTR,A
    519            }
    520          
    521          #if defined ( MT_AF_CB_FUNC )
    522            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    523            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    524            {
    525              MT_AfIncomingMsg( (void *)MSGpkt );
    526              // Release the memory.
    527              osal_msg_deallocate( (void *)MSGpkt );
    528            }
    529            else
    530          #endif
    531            {
    532              // Send message through task message.
    533              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   0001CE                ; Setup parameters for call to function osal_msg_send
   \   0001CE   EE           MOV     A,R6
   \   0001CF   FA           MOV     R2,A
   \   0001D0   EF           MOV     A,R7
   \   0001D1   FB           MOV     R3,A
   \   0001D2   85..82       MOV     DPL,?V4
   \   0001D5   85..83       MOV     DPH,?V5
   \   0001D8   12....       LCALL   ??Subroutine47_0 & 0xFFFF
    534            }
   \                     ??CrossCallReturnLabel_95:
   \   0001DB   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    535          }
   \                     ??afBuildMSGIncoming_0:
   \   0001DE   7F0C         MOV     R7,#0xc
   \   0001E0   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET
    536          
    537          /*********************************************************************
    538           * @fn      AF_DataRequest
    539           *
    540           * @brief   Common functionality for invoking APSDE_DataReq() for both
    541           *          SendMulti and MSG-Send.
    542           *
    543           * input parameters
    544           *
    545           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    546           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    547           * @param   cID - A valid cluster ID as specified by the Profile.
    548           * @param   len - Number of bytes of data pointed to by next param.
    549           * @param  *buf - A pointer to the data bytes to send.
    550           * @param  *transID - A pointer to a byte which can be modified and which will
    551           *                    be used as the transaction sequence number of the msg.
    552           * @param   options - Valid bit mask of Tx options.
    553           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    554           *
    555           * output parameters
    556           *
    557           * @param  *transID - Incremented by one if the return value is success.
    558           *
    559           * @return  afStatus_t - See previous definition of afStatus_... types.
    560           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    561          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   FA           MOV     R2,A
   \   000004   E9           MOV     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV     DPTR,#epList
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    563                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    564                                     uint8 options, uint8 radius )
    565          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
    566            pDescCB pfnDescCB;
    567            ZStatus_t stat;
    568            APSDE_DataReq_t req;
    569            afDataReqMTU_t mtu;
    570            epList_t *pList;
    571          
    572            // Verify source end point
    573            if ( srcEP == NULL )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??AF_DataRequest_0 & 0xFFFF
    574            {
    575              return afStatus_INVALID_PARAMETER;
    576            }
    577          
    578          #if !defined( REFLECTOR )
    579            if ( dstAddr->addrMode == afAddrNotPresent )
    580            {
    581              return afStatus_INVALID_PARAMETER;
    582            }
    583          #endif
    584          
    585            // Check if route is available before sending data
    586            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   00001B   EA           MOV     A,R2
   \   00001C   2408         ADD     A,#0x8
   \   00001E   F5..         MOV     ?V0,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V5
   \   000023   F5..         MOV     ?V1,A
   \   000025   E9           MOV     A,R1
   \   000026   A2E3         MOV     C,0xE0 /* A   */.3
   \   000028   5037         JNC     ??AF_DataRequest_1
    587            {
    588              if ( dstAddr->addrMode != afAddr16Bit )
   \   00002A   85..82       MOV     DPL,?V0
   \   00002D   85..83       MOV     DPH,?V1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6402         XRL     A,#0x2
   \   000033   6003         JZ      $+5
   \   000035   02....       LJMP    ??AF_DataRequest_0 & 0xFFFF
    589              {
    590                return ( afStatus_INVALID_PARAMETER );
    591              }
    592          
    593              // First, make sure the destination is not its self, then check for an existing route.
    594              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    595                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000038                ; Setup parameters for call to function NLME_GetShortAddr
   \   000038   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00003B   8A..         MOV     ?V6,R2
   \   00003D   8B..         MOV     ?V7,R3
   \   00003F   85..82       MOV     DPL,?V4
   \   000042   85..83       MOV     DPH,?V5
   \   000045   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000048   E5..         MOV     A,?V6
   \   00004A   6A           XRL     A,R2
   \   00004B   7003         JNZ     ??AF_DataRequest_2
   \   00004D   E5..         MOV     A,?V7
   \   00004F   6B           XRL     A,R3
   \                     ??AF_DataRequest_2:
   \   000050   600F         JZ      ??AF_DataRequest_1
   \   000052                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000052   7C03         MOV     R4,#0x3
   \   000054   7901         MOV     R1,#0x1
   \   000056   12....       LCALL   `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000059   E9           MOV     A,R1
   \   00005A   6005         JZ      ??AF_DataRequest_1
    596              {
    597                // A valid route to a concentrator wasn't found
    598                return ( afStatus_NO_ROUTE );
   \   00005C   79CD         MOV     R1,#-0x33
   \   00005E   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    599              }
    600            }
    601          
    602            // Validate broadcasting
    603            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    604                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000061   85..82       MOV     DPL,?V0
   \   000064   85..83       MOV     DPH,?V1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   7402         MOV     A,#0x2
   \   00006B   68           XRL     A,R0
   \   00006C   6005         JZ      ??AF_DataRequest_4
   \   00006E   740F         MOV     A,#0xf
   \   000070   68           XRL     A,R0
   \   000071   703F         JNZ     ??AF_DataRequest_5
    605            {
    606              // Check for valid broadcast values
    607              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   000073                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000073   85..82       MOV     DPL,?V4
   \   000076   85..83       MOV     DPH,?V5
   \   000079   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00007C   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00007F   E9           MOV     A,R1
   \   000080   85..82       MOV     DPL,?V0
   \   000083   85..83       MOV     DPH,?V1
   \   000086   6023         JZ      ??AF_DataRequest_6
    608              {
    609                // Force mode to broadcast
    610                dstAddr->addrMode = afAddrBroadcast;
   \   000088   740F         MOV     A,#0xf
   \   00008A   F0           MOVX    @DPTR,A
    611              }
    612              else
    613              {
    614                // Address is not a valid broadcast type
    615                if ( dstAddr->addrMode == afAddrBroadcast )
    616                {
    617                  return afStatus_INVALID_PARAMETER;
    618                }
    619              }
    620            }
    621            else if ( dstAddr->addrMode != afAddr64Bit &&
    622                      dstAddr->addrMode != afAddrGroup &&
    623                      dstAddr->addrMode != afAddrNotPresent )
    624            {
    625              return afStatus_INVALID_PARAMETER;
    626            }
    627          
    628            // Set destination address
    629            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   C0E0         PUSH    A
   \   00008E   740A         MOV     A,#0xa
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   D0E0         POP     A
   \   000095   12....       LCALL   ?Subroutine37 & 0xFFFF
    630            if ( dstAddr->addrMode == afAddr64Bit )
   \                     ??CrossCallReturnLabel_79:
   \   000098   E0           MOVX    A,@DPTR
   \   000099   6403         XRL     A,#0x3
   \   00009B   7027         JNZ     ??AF_DataRequest_8
    631            {
    632              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   00009D                ; Setup parameters for call to function sAddrExtCpy
   \   00009D   AC..         MOV     R4,?V4
   \   00009F   AD..         MOV     R5,?V5
   \   0000A1   7402         MOV     A,#0x2
   \   0000A3   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A6   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000A9   802A         SJMP    ??CrossCallReturnLabel_119
    633            }
   \                     ??AF_DataRequest_6:
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   640F         XRL     A,#0xf
   \   0000AE   70DB         JNZ     ??AF_DataRequest_7
   \   0000B0   800D         SJMP    ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000B2   7403         MOV     A,#0x3
   \   0000B4   68           XRL     A,R0
   \   0000B5   60D4         JZ      ??AF_DataRequest_7
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9   68           XRL     A,R0
   \   0000BA   60CF         JZ      ??AF_DataRequest_7
   \   0000BC   E8           MOV     A,R0
   \   0000BD   60CC         JZ      ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   0000BF   7902         MOV     R1,#0x2
   \   0000C1   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    634            else
    635            {
    636              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000C4   85..82       MOV     DPL,?V4
   \   0000C7   85..83       MOV     DPH,?V5
   \   0000CA   12....       LCALL   ?Subroutine23 & 0xFFFF
    637            }
   \                     ??CrossCallReturnLabel_39:
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    638          
    639            // This option is to use Wildcard ProfileID in outgoing packets
    640            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??CrossCallReturnLabel_119:
   \   0000D5   E5..         MOV     A,?V2
   \   0000D7   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000D9   7411         MOV     A,#0x11
   \   0000DB   5009         JNC     ??AF_DataRequest_9
    641            {
    642              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   74FF         MOV     A,#-0x1
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   805F         SJMP    ??AF_DataRequest_10
    643            }
    644            else
    645            {
    646              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_9:
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   E4           CLR     A
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   F0           MOVX    @DPTR,A
    647          
    648              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000ED   90....       MOV     DPTR,#epList
   \                     ??AF_DataRequest_11:
   \   0000F0   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F3   603A         JZ      ??AF_DataRequest_12
   \   0000F5   8882         MOV     DPL,R0
   \   0000F7   8983         MOV     DPH,R1
   \   0000F9   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0000FC   EE           MOV     A,R6
   \   0000FD   6A           XRL     A,R2
   \   0000FE   7002         JNZ     ??AF_DataRequest_13
   \   000100   EF           MOV     A,R7
   \   000101   6B           XRL     A,R3
   \                     ??AF_DataRequest_13:
   \   000102   8882         MOV     DPL,R0
   \   000104   8983         MOV     DPH,R1
   \   000106   70E8         JNZ     ??AF_DataRequest_11
   \   000108   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00010B   6022         JZ      ??AF_DataRequest_12
    649              {
    650                uint16 *pID = (uint16 *)(pfnDescCB(
    651                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   00010D                ; Setup parameters for indirect call
   \   00010D   8E82         MOV     DPL,R6
   \   00010F   8F83         MOV     DPH,R7
   \   000111   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000114   12....       LCALL   ?CALL_IND
    652                if ( pID )
   \   000117   EA           MOV     A,R2
   \   000118   4B           ORL     A,R3
   \   000119   602B         JZ      ??AF_DataRequest_14
    653                {
    654                  req.profileID = *pID;
   \   00011B   8A82         MOV     DPL,R2
   \   00011D   8B83         MOV     DPH,R3
   \   00011F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000122   7411         MOV     A,#0x11
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    655                  osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_120:
   \   00012A                ; Setup parameters for call to function osal_mem_free
   \   00012A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012D   8017         SJMP    ??AF_DataRequest_14
    656                }
    657              }
    658              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   00012F   8E82         MOV     DPL,R6
   \   000131   8F83         MOV     DPH,R7
   \   000133   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000136   600E         JZ      ??AF_DataRequest_14
    659              {
    660                req.profileID = srcEP->simpleDesc->AppProfId;
   \   000138   A3           INC     DPTR
   \   000139   12....       LCALL   ?Subroutine23 & 0xFFFF
    661              }
    662            }
   \                     ??CrossCallReturnLabel_41:
   \   00013C   7411         MOV     A,#0x11
   \   00013E   12....       LCALL   ?XSTACK_DISP0_8
   \   000141   E8           MOV     A,R0
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   E9           MOV     A,R1
   \                     ??AF_DataRequest_10:
   \   000145   F0           MOVX    @DPTR,A
    663          
    664            req.txOptions = 0;
   \                     ??AF_DataRequest_14:
   \   000146   7417         MOV     A,#0x17
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   E4           CLR     A
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   A3           INC     DPTR
   \   00014E   F0           MOVX    @DPTR,A
    665          
    666            if ( ( options & AF_ACK_REQUEST              ) &&
    667                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    668                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   00014F   E5..         MOV     A,?V2
   \   000151   A2E4         MOV     C,0xE0 /* A   */.4
   \   000153   501C         JNC     ??AF_DataRequest_15
   \   000155   740A         MOV     A,#0xa
   \   000157   12....       LCALL   ?XSTACK_DISP0_8
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F8           MOV     R0,A
   \   00015C   740F         MOV     A,#0xf
   \   00015E   68           XRL     A,R0
   \   00015F   6010         JZ      ??AF_DataRequest_15
   \   000161   7401         MOV     A,#0x1
   \   000163   68           XRL     A,R0
   \   000164   600B         JZ      ??AF_DataRequest_15
    669            {
    670              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000166   7417         MOV     A,#0x17
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   7404         MOV     A,#0x4
   \   00016D   F0           MOVX    @DPTR,A
   \   00016E   A3           INC     DPTR
   \   00016F   E4           CLR     A
   \   000170   F0           MOVX    @DPTR,A
    671            }
    672          
    673            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_15:
   \   000171   E5..         MOV     A,?V2
   \   000173   A2E7         MOV     C,0xE0 /* A   */.7
   \   000175   5009         JNC     ??AF_DataRequest_16
    674            {
    675              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000177   7417         MOV     A,#0x17
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   4410         ORL     A,#0x10
   \   00017F   F0           MOVX    @DPTR,A
    676            }
    677          
    678            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_16:
   \   000180   E5..         MOV     A,?V2
   \   000182   A2E6         MOV     C,0xE0 /* A   */.6
   \   000184   5012         JNC     ??AF_DataRequest_17
    679            {
    680              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000186   7417         MOV     A,#0x17
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   4401         ORL     A,#0x1
   \   00018E   F0           MOVX    @DPTR,A
    681              mtu.aps.secure = TRUE;
   \   00018F   7401         MOV     A,#0x1
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   7401         MOV     A,#0x1
   \   000196   8006         SJMP    ??AF_DataRequest_18
    682            }
    683            else
    684            {
    685              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_17:
   \   000198   7401         MOV     A,#0x1
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   E4           CLR     A
   \                     ??AF_DataRequest_18:
   \   00019E   F0           MOVX    @DPTR,A
    686            }
    687          
    688            if ( options & AF_PREPROCESS )
   \   00019F   E5..         MOV     A,?V2
   \   0001A1   A2E2         MOV     C,0xE0 /* A   */.2
   \   0001A3   5009         JNC     ??AF_DataRequest_19
    689            {
    690              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   0001A5   7417         MOV     A,#0x17
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   4440         ORL     A,#0x40
   \   0001AD   F0           MOVX    @DPTR,A
    691            }
    692          
    693            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_19:
   \   0001AE   85..82       MOV     DPL,?XSP + 0
   \   0001B1   85..83       MOV     DPH,?XSP + 1
   \   0001B4   E4           CLR     A
   \   0001B5   F0           MOVX    @DPTR,A
    694          
    695            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   0001B6   E5..         MOV     A,?V2
   \   0001B8   A2E5         MOV     C,0xE0 /* A   */.5
   \   0001BA   5009         JNC     ??AF_DataRequest_20
    696            {
    697              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   0001BC   741A         MOV     A,#0x1a
   \   0001BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C1   7404         MOV     A,#0x4
   \   0001C3   800D         SJMP    ??AF_DataRequest_21
    698            }
    699            else
    700            {
    701              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_20:
   \   0001C5   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   C0E0         PUSH    A
   \   0001CB   741A         MOV     A,#0x1a
   \   0001CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D0   D0E0         POP     A
   \                     ??AF_DataRequest_21:
   \   0001D2   F0           MOVX    @DPTR,A
   \   0001D3   7434         MOV     A,#0x34
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
    702            }
   \   0001D8   12....       LCALL   ?Subroutine39 & 0xFFFF
    703          
    704            req.transID       = *transID;
   \                     ??CrossCallReturnLabel_83:
   \   0001DB   85..82       MOV     DPL,?V0
   \   0001DE   F583         MOV     DPH,A
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   C0E0         PUSH    A
   \   0001E3   7419         MOV     A,#0x19
   \   0001E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E8   D0E0         POP     A
   \   0001EA   F0           MOVX    @DPTR,A
    705            req.srcEP         = srcEP->endPoint;
   \   0001EB   8E82         MOV     DPL,R6
   \   0001ED   8F83         MOV     DPH,R7
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   C0E0         PUSH    A
   \   0001F2   740B         MOV     A,#0xb
   \   0001F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F7   D0E0         POP     A
   \   0001F9   F0           MOVX    @DPTR,A
    706            req.dstEP         = dstAddr->endPoint;
   \   0001FA   85..82       MOV     DPL,?V4
   \   0001FD   85..83       MOV     DPH,?V5
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   E0           MOVX    A,@DPTR
   \   00020A   C0E0         PUSH    A
   \   00020C   740C         MOV     A,#0xc
   \   00020E   12....       LCALL   ?XSTACK_DISP0_8
   \   000211   D0E0         POP     A
   \   000213   F0           MOVX    @DPTR,A
    707            req.clusterID     = cID;
   \   000214   742E         MOV     A,#0x2e
   \   000216   12....       LCALL   ?XSTACK_DISP0_8
   \   000219   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00021C   740F         MOV     A,#0xf
   \   00021E   12....       LCALL   ?XSTACK_DISP0_8
   \   000221   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000224   7430         MOV     A,#0x30
   \   000226   12....       LCALL   ?XSTACK_DISP0_8
   \   000229   E0           MOVX    A,@DPTR
   \   00022A   F5..         MOV     ?V4,A
   \   00022C   A3           INC     DPTR
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   F5..         MOV     ?V5,A
    708            req.asduLen       = len;
   \   000230   7413         MOV     A,#0x13
   \   000232   12....       LCALL   ?XSTACK_DISP0_8
   \   000235   E5..         MOV     A,?V4
   \   000237   F0           MOVX    @DPTR,A
   \   000238   A3           INC     DPTR
   \   000239   E5..         MOV     A,?V5
   \   00023B   F0           MOVX    @DPTR,A
    709            req.asdu          = buf;
   \   00023C   7432         MOV     A,#0x32
   \   00023E   12....       LCALL   ?XSTACK_DISP0_8
   \   000241   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000244   7415         MOV     A,#0x15
   \   000246   12....       LCALL   ?XSTACK_DISP0_8
   \   000249   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    710            req.radiusCounter = radius;
   \                     ??CrossCallReturnLabel_122:
   \   00024C   7436         MOV     A,#0x36
   \   00024E   12....       LCALL   ?XSTACK_DISP0_8
   \   000251   E0           MOVX    A,@DPTR
   \   000252   C0E0         PUSH    A
   \   000254   741B         MOV     A,#0x1b
   \   000256   12....       LCALL   ?XSTACK_DISP0_8
   \   000259   D0E0         POP     A
   \   00025B   F0           MOVX    @DPTR,A
    711          #if defined ( INTER_PAN )
    712            req.dstPanId      = dstAddr->panId;
    713          #endif // INTER_PAN
    714          
    715            // Look if there is a Callback function registered for this endpoint
    716            // The callback is used to control the AF Transaction ID used when sending messages
    717            pList = afFindEndPointDescList( srcEP->endPoint );
   \   00025C   8E82         MOV     DPL,R6
   \   00025E   8F83         MOV     DPH,R7
   \   000260   E0           MOVX    A,@DPTR
   \   000261   FC           MOV     R4,A
   \   000262   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000265   8003         SJMP    ??CrossCallReturnLabel_102
   \                     ??AF_DataRequest_22:
   \   000267   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00026A   FB           MOV     R3,A
   \   00026B   EA           MOV     A,R2
   \   00026C   4B           ORL     A,R3
   \   00026D   6031         JZ      ??AF_DataRequest_23
   \   00026F   8A82         MOV     DPL,R2
   \   000271   8B83         MOV     DPH,R3
   \   000273   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000276   6C           XRL     A,R4
   \   000277   8A82         MOV     DPL,R2
   \   000279   8B83         MOV     DPH,R3
   \   00027B   70EA         JNZ     ??AF_DataRequest_22
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   A3           INC     DPTR
   \   000281   A3           INC     DPTR
   \   000282   A3           INC     DPTR
   \   000283   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000286   6018         JZ      ??AF_DataRequest_23
    718          
    719            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
    720            {
    721              pList->pfnApplCB( &req );
   \   000288                ; Setup parameters for indirect call
   \   000288   7402         MOV     A,#0x2
   \   00028A   12....       LCALL   ?XSTACK_DISP101_8
   \   00028D   12....       LCALL   ?CALL_IND
    722            }
    723          
    724          #if defined ( INTER_PAN )
    725            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    726            {
    727              if ( len > INTERP_DataReqMTU() )
    728              {
    729                stat = afStatus_INVALID_PARAMETER;
    730              }
    731              else
    732              {
    733                stat = INTERP_DataReq( &req );
    734              }
    735            }
    736            else
    737          #endif // INTER_PAN
    738            {
    739              if (len > afDataReqMTU( &mtu ) )
   \   000290   85..82       MOV     DPL,?XSP + 0
   \   000293   85..83       MOV     DPH,?XSP + 1
   \   000296   E0           MOVX    A,@DPTR
   \   000297   6401         XRL     A,#0x1
   \   000299   7005         JNZ     ??AF_DataRequest_23
   \   00029B   75..08       MOV     ?V3,#0x8
   \   00029E   8003         SJMP    ??AF_DataRequest_24
   \                     ??AF_DataRequest_23:
   \   0002A0   75..00       MOV     ?V3,#0x0
   \                     ??AF_DataRequest_24:
   \   0002A3                ; Setup parameters for call to function APSDE_DataReqMTU
   \   0002A3   7401         MOV     A,#0x1
   \   0002A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A8   AA82         MOV     R2,DPL
   \   0002AA   AB83         MOV     R3,DPH
   \   0002AC   12....       LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   0002AF   E9           MOV     A,R1
   \   0002B0   C3           CLR     C
   \   0002B1   95..         SUBB    A,?V3
   \   0002B3   C3           CLR     C
   \   0002B4   95..         SUBB    A,?V4
   \   0002B6   E4           CLR     A
   \   0002B7   95..         SUBB    A,?V5
   \   0002B9   501A         JNC     ??AF_DataRequest_25
    740              {
    741                if (apsfSendFragmented)
   \   0002BB   90....       MOV     DPTR,#apsfSendFragmented
   \   0002BE   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0002C1   600D         JZ      ??AF_DataRequest_26
    742                {
    743                  stat = (*apsfSendFragmented)( &req );
   \   0002C3                ; Setup parameters for indirect call
   \   0002C3   7402         MOV     A,#0x2
   \   0002C5   12....       LCALL   ?XSTACK_DISP101_8
   \   0002C8   12....       LCALL   ??Subroutine56_0 & 0xFFFF
    744                }
   \                     ??CrossCallReturnLabel_146:
   \   0002CB   12....       LCALL   ?CALL_IND
   \   0002CE   800D         SJMP    ??AF_DataRequest_27
    745                else
    746                {
    747                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_26:
   \   0002D0   75..02       MOV     ?V3,#0x2
   \   0002D3   800B         SJMP    ??AF_DataRequest_28
    748                }
    749              }
    750              else
    751              {
    752                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_25:
   \   0002D5                ; Setup parameters for call to function APSDE_DataReq
   \   0002D5   7402         MOV     A,#0x2
   \   0002D7   12....       LCALL   ?XSTACK_DISP101_8
   \   0002DA   12....       LCALL   `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_27:
   \   0002DD   E9           MOV     A,R1
   \   0002DE   F5..         MOV     ?V3,A
    753              }
    754            }
    755          
    756            /*
    757             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    758             * get added to the NWK databufs. So it will not go OTA and it will not get
    759             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    760             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    761             * message with the first in line TransSeqNumber, even on a multi message.
    762             * Also note that a reflected msg will not have its confirmation generated
    763             * here.
    764             */
    765            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    766                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_28:
   \   0002E0   740A         MOV     A,#0xa
   \   0002E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E5   E0           MOVX    A,@DPTR
   \   0002E6   6402         XRL     A,#0x2
   \   0002E8   702C         JNZ     ??AF_DataRequest_29
   \   0002EA                ; Setup parameters for call to function NLME_GetShortAddr
   \   0002EA   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0002ED   8A..         MOV     ?V4,R2
   \   0002EF   8B..         MOV     ?V5,R3
   \   0002F1   A8..         MOV     R0,?V4
   \   0002F3   A9..         MOV     R1,?V5
   \   0002F5   7402         MOV     A,#0x2
   \   0002F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FA   E0           MOVX    A,@DPTR
   \   0002FB   68           XRL     A,R0
   \   0002FC   7003         JNZ     ??AF_DataRequest_30
   \   0002FE   A3           INC     DPTR
   \   0002FF   E0           MOVX    A,@DPTR
   \   000300   69           XRL     A,R1
   \                     ??AF_DataRequest_30:
   \   000301   7013         JNZ     ??AF_DataRequest_29
    767            {
    768              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000303                ; Setup parameters for call to function afDataConfirm
   \   000303   AB..         MOV     R3,?V3
   \   000305   85..82       MOV     DPL,?V0
   \   000308   85..83       MOV     DPH,?V1
   \   00030B   E0           MOVX    A,@DPTR
   \   00030C   FA           MOV     R2,A
   \   00030D   8E82         MOV     DPL,R6
   \   00030F   8F83         MOV     DPH,R7
   \   000311   E0           MOVX    A,@DPTR
   \   000312   F9           MOV     R1,A
   \   000313   12....       LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    769            }
    770          
    771            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_29:
   \   000316   E5..         MOV     A,?V3
   \   000318   7009         JNZ     ??AF_DataRequest_31
    772            {
    773              (*transID)++;
   \   00031A   85..82       MOV     DPL,?V0
   \   00031D   85..83       MOV     DPH,?V1
   \   000320   E0           MOVX    A,@DPTR
   \   000321   04           INC     A
   \   000322   F0           MOVX    @DPTR,A
    774            }
    775          
    776            return (afStatus_t)stat;
   \                     ??AF_DataRequest_31:
   \   000323   A9..         MOV     R1,?V3
   \                     ??AF_DataRequest_3:
   \   000325   741E         MOV     A,#0x1e
   \   000327   12....       LCALL   ?DEALLOC_XSTACK8
   \   00032A   02....       LJMP    ?Subroutine2 & 0xFFFF
    777          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine55_0
   \   000001                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    778          
    779          #if defined ( ZIGBEE_SOURCE_ROUTING )
    780          /*********************************************************************
    781           * @fn      AF_DataRequestSrcRtg
    782           *
    783           * @brief   Common functionality for invoking APSDE_DataReq() for both
    784           *          SendMulti and MSG-Send.
    785           *
    786           * input parameters
    787           *
    788           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    789           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    790           * @param   cID - A valid cluster ID as specified by the Profile.
    791           * @param   len - Number of bytes of data pointed to by next param.
    792           * @param  *buf - A pointer to the data bytes to send.
    793           * @param  *transID - A pointer to a byte which can be modified and which will
    794           *                    be used as the transaction sequence number of the msg.
    795           * @param   options - Valid bit mask of Tx options.
    796           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    797           * @param   relayCnt - Number of devices in the relay list
    798           * @param   pRelayList - Pointer to the relay list
    799           *
    800           * output parameters
    801           *
    802           * @param  *transID - Incremented by one if the return value is success.
    803           *
    804           * @return  afStatus_t - See previous definition of afStatus_... types.
    805           */
    806          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    807          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    808                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    809                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    810          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V2,R1
    811            uint8 status;
    812          
    813            /* Add the source route to the source routing table */
    814            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    815                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000017   7415         MOV     A,#0x15
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000025   12....       LCALL   `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000028   E9           MOV     A,R1
   \   000029   F9           MOV     R1,A
    816          
    817            if( status == RTG_SUCCESS)
   \   00002A   7043         JNZ     ??AF_DataRequestSrcRtg_0
    818            {
    819              /* Call AF_DataRequest to send the data */
    820              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   00002C                ; Setup parameters for call to function AF_DataRequest
   \   00002C   7414         MOV     A,#0x14
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   7413         MOV     A,#0x13
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000041   7413         MOV     A,#0x13
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000049   7413         MOV     A,#0x13
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000051   7413         MOV     A,#0x13
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000059   A9..         MOV     R1,?V2
   \   00005B   AC..         MOV     R4,?V0
   \   00005D   AD..         MOV     R5,?V1
   \   00005F   EE           MOV     A,R6
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000066   7409         MOV     A,#0x9
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006B   E9           MOV     A,R1
   \   00006C   F9           MOV     R1,A
   \   00006D   800B         SJMP    ??AF_DataRequestSrcRtg_1
    821            }
    822            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   00006F   7405         MOV     A,#0x5
   \   000071   69           XRL     A,R1
   \   000072   7004         JNZ     ??AF_DataRequestSrcRtg_2
    823            {
    824              /* The source route relay count is exceeding the network limit */
    825              status = afStatus_INVALID_PARAMETER;
   \   000074   7902         MOV     R1,#0x2
   \   000076   8002         SJMP    ??AF_DataRequestSrcRtg_1
    826            }
    827            else
    828            {
    829              /* The guaranteed adding entry fails due to memory failure */
    830              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   000078   7910         MOV     R1,#0x10
    831            }
    832            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   00007A   02....       LJMP    ?Subroutine0 & 0xFFFF
    833          }
    834          
    835          #endif
    836          
    837          /*********************************************************************
    838           * @fn      afFindEndPointDescList
    839           *
    840           * @brief   Find the endpoint description entry from the endpoint
    841           *          number.
    842           *
    843           * @param   EndPoint - Application Endpoint to look for
    844           *
    845           * @return  the address to the endpoint/interface description entry
    846           */
    847          static epList_t *afFindEndPointDescList( uint8 EndPoint )
    848          {
    849            epList_t *epSearch;
    850          
    851            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
    852            {
    853              if (epSearch->epDesc->endPoint == EndPoint)
    854              {
    855                break;
    856              }
    857            }
    858          
    859            return epSearch;
    860          }
    861          
    862          /*********************************************************************
    863           * @fn      afFindEndPointDesc
    864           *
    865           * @brief   Find the endpoint description entry from the endpoint
    866           *          number.
    867           *
    868           * @param   EndPoint - Application Endpoint to look for
    869           *
    870           * @return  the address to the endpoint/interface description entry
    871           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    872          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    873          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    874            epList_t *epSearch;
    875          
    876            // Look for the endpoint
    877            epSearch = afFindEndPointDescList( EndPoint );
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   800A         SJMP    ??afFindEndPointDesc_0
   \                     ??afFindEndPointDesc_1:
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000014   EA           MOV     A,R2
   \   000015   FC           MOV     R4,A
   \   000016   EB           MOV     A,R3
   \                     ??afFindEndPointDesc_0:
   \   000017   FD           MOV     R5,A
   \   000018   EC           MOV     A,R4
   \   000019   4D           ORL     A,R5
   \   00001A   600D         JZ      ??afFindEndPointDesc_2
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000023   E0           MOVX    A,@DPTR
   \   000024   69           XRL     A,R1
   \   000025   70E6         JNZ     ??afFindEndPointDesc_1
    878          
    879            if ( epSearch )
    880              return ( epSearch->epDesc );
   \   000027   8004         SJMP    ??afFindEndPointDesc_3
    881            else
    882              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_2:
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_3:
   \   00002D   02....       LJMP    ?Subroutine3 & 0xFFFF
    883          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine54_0
   \   000002                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    884          
    885          /*********************************************************************
    886           * @fn      afFindSimpleDesc
    887           *
    888           * @brief   Find the Simple Descriptor from the endpoint number.
    889           *
    890           * @param   EP - Application Endpoint to look for.
    891           *
    892           * @return  Non-zero to indicate that the descriptor memory must be freed.
    893           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    894          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    895          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    896            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B   90....       MOV     DPTR,#epList
   \   00000E   8004         SJMP    ??afFindSimpleDesc_0
   \                     ??afFindSimpleDesc_1:
   \   000010   8C82         MOV     DPL,R4
   \   000012   8D83         MOV     DPH,R5
   \                     ??afFindSimpleDesc_0:
   \   000014   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000017   EC           MOV     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   600B         JZ      ??afFindSimpleDesc_2
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000022   65..         XRL     A,?V0
   \   000024   70EA         JNZ     ??afFindSimpleDesc_1
    897            uint8 rtrn = FALSE;
   \                     ??afFindSimpleDesc_2:
   \   000026   7900         MOV     R1,#0x0
    898          
    899            if ( epItem )
   \   000028   EC           MOV     A,R4
   \   000029   4D           ORL     A,R5
   \   00002A   6036         JZ      ??afFindSimpleDesc_3
    900            {
    901              if ( epItem->pfnDescCB )
   \   00002C   8C82         MOV     DPL,R4
   \   00002E   8D83         MOV     DPH,R5
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000035   E582         MOV     A,DPL
   \   000037   4583         ORL     A,DPH
   \   000039   6013         JZ      ??afFindSimpleDesc_4
    902              {
    903                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00003B                ; Setup parameters for indirect call
   \   00003B   AA..         MOV     R2,?V0
   \   00003D   09           INC     R1
   \   00003E   12....       LCALL   ?CALL_IND
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   EA           MOV     A,R2
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   EB           MOV     A,R3
   \   000049   F0           MOVX    @DPTR,A
    904                rtrn = TRUE;
   \   00004A   7901         MOV     R1,#0x1
   \   00004C   801C         SJMP    ??afFindSimpleDesc_5
    905              }
    906              else
    907              {
    908                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_4:
   \   00004E   8C82         MOV     DPL,R4
   \   000050   8D83         MOV     DPH,R5
   \   000052   12....       LCALL   ?Subroutine44 & 0xFFFF
    909              }
    910            }
   \                     ??CrossCallReturnLabel_148:
   \   000055   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   EA           MOV     A,R2
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   EB           MOV     A,R3
   \   000060   8007         SJMP    ??afFindSimpleDesc_6
    911            else
    912            {
    913              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_3:
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   E4           CLR     A
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \                     ??afFindSimpleDesc_6:
   \   000069   F0           MOVX    @DPTR,A
    914            }
    915          
    916            return rtrn;
   \                     ??afFindSimpleDesc_5:
   \   00006A   80..         SJMP    ?Subroutine1
    917          }
    918          
    919          /*********************************************************************
    920           * @fn      afGetDescCB
    921           *
    922           * @brief   Get the Descriptor callback function.
    923           *
    924           * @param   epDesc - pointer to the endpoint descriptor
    925           *
    926           * @return  function pointer or NULL
    927           */
    928          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    929          {
    930            epList_t *epSearch;
    931          
    932            // Start at the beginning
    933            epSearch = epList;
    934          
    935            // Look through the list until the end
    936            while ( epSearch )
    937            {
    938              // Is there a match?
    939              if ( epSearch->epDesc == epDesc )
    940              {
    941                return ( epSearch->pfnDescCB );
    942              }
    943              else
    944                epSearch = epSearch->nextDesc;  // Next entry
    945            }
    946          
    947            return ( (pDescCB)NULL );
    948          }
    949          
    950          /*********************************************************************
    951           * @fn      afDataReqMTU
    952           *
    953           * @brief   Get the Data Request MTU(Max Transport Unit).
    954           *
    955           * @param   fields - afDataReqMTU_t
    956           *
    957           * @return  uint8(MTU)
    958           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    959          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    960          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    961            uint8 len;
    962            uint8 hdr;
    963          
    964            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    965            {
    966              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    967            }
    968            else
    969            {
    970              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    971            }
    972          
    973            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    974          
    975            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
   \   000020                REQUIRE ?Subroutine1
   \   000020                ; // Fall through to label ?Subroutine1
    976          }
    977          
    978          /*********************************************************************
    979           * @fn      afGetMatch
    980           *
    981           * @brief   Set the allow response flag.
    982           *
    983           * @param   ep - Application Endpoint to look for
    984           * @param   action - true - allow response, false - no response
    985           *
    986           * @return  TRUE allow responses, FALSE no response
    987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    988          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    989          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
    990            epList_t *epSearch;
    991          
    992            // Look for the endpoint
    993            epSearch = afFindEndPointDescList( ep );
   \   000006   90....       MOV     DPTR,#epList
   \                     ??afGetMatch_0:
   \   000009   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00000C   601A         JZ      ??afGetMatch_1
   \   00000E   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000011   8882         MOV     DPL,R0
   \   000013   8983         MOV     DPH,R1
   \   000015   70F2         JNZ     ??afGetMatch_0
    994          
    995            if ( epSearch )
    996            {
    997              if ( epSearch->flags & eEP_AllowMatch )
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   A2E0         MOV     C,0xE0 /* A   */.0
   \   000022   5004         JNC     ??afGetMatch_1
    998                return ( TRUE );
   \   000024   7901         MOV     R1,#0x1
   \   000026   8002         SJMP    ??afGetMatch_2
    999              else
   1000                return ( FALSE );
   1001            }
   1002            else
   1003              return ( FALSE );
   \                     ??afGetMatch_1:
   \   000028   7900         MOV     R1,#0x0
   \                     ??afGetMatch_2:
   \   00002A   80..         SJMP    ?Subroutine3
   1004          }
   1005          
   1006          /*********************************************************************
   1007           * @fn      afSetMatch
   1008           *
   1009           * @brief   Set the allow response flag.
   1010           *
   1011           * @param   ep - Application Endpoint to look for
   1012           * @param   action - true - allow response, false - no response
   1013           *
   1014           * @return  TRUE if success, FALSE if endpoint not found
   1015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1017          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FB           MOV     R3,A
   1018            epList_t *epSearch;
   1019          
   1020            // Look for the endpoint
   1021            epSearch = afFindEndPointDescList( ep );
   \   000006   90....       MOV     DPTR,#epList
   \   000009   8004         SJMP    ??afSetMatch_0
   \                     ??afSetMatch_1:
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \                     ??afSetMatch_0:
   \   00000F   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000012   601F         JZ      ??afSetMatch_2
   \   000014   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000017   6B           XRL     A,R3
   \   000018   70F1         JNZ     ??afSetMatch_1
   1022          
   1023            if ( epSearch )
   1024            {
   1025              if ( action )
   \   00001A   E8           MOV     A,R0
   \   00001B   2408         ADD     A,#0x8
   \   00001D   F582         MOV     DPL,A
   \   00001F   E4           CLR     A
   \   000020   39           ADDC    A,R1
   \   000021   F583         MOV     DPH,A
   \   000023   EA           MOV     A,R2
   \   000024   6005         JZ      ??afSetMatch_3
   1026              {
   1027                epSearch->flags |= eEP_AllowMatch;
   \   000026   E0           MOVX    A,@DPTR
   \   000027   D2E0         SETB    0xE0 /* A   */.0
   \   000029   8003         SJMP    ??afSetMatch_4
   1028              }
   1029              else
   1030              {
   1031                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_3:
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_4:
   \   00002E   F0           MOVX    @DPTR,A
   1032              }
   1033              return ( TRUE );
   \   00002F   7901         MOV     R1,#0x1
   \   000031   8002         SJMP    ??afSetMatch_5
   1034            }
   1035            else
   1036              return ( FALSE );
   \                     ??afSetMatch_2:
   \   000033   7900         MOV     R1,#0x0
   \                     ??afSetMatch_5:
   \   000035   80..         SJMP    ?Subroutine3
   1037          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FC           MOV     R4,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F583         MOV     DPH,A
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET
   1038          
   1039          /*********************************************************************
   1040           * @fn      afNumEndPoints
   1041           *
   1042           * @brief   Returns the number of endpoints defined (including 0)
   1043           *
   1044           * @param   none
   1045           *
   1046           * @return  number of endpoints
   1047           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1048          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1049          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1050            epList_t *epSearch;
   1051            uint8 endpoints;
   1052          
   1053            // Start at the beginning
   1054            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
   1055            endpoints = 0;
   \   00000E   7900         MOV     R1,#0x0
   \   000010   8004         SJMP    ??CrossCallReturnLabel_137
   1056          
   1057            while ( epSearch )
   1058            {
   1059              endpoints++;
   \                     ??afNumEndPoints_0:
   \   000012   09           INC     R1
   1060              epSearch = epSearch->nextDesc;
   \   000013   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   1061            }
   \                     ??CrossCallReturnLabel_137:
   \   000016   E582         MOV     A,DPL
   \   000018   4583         ORL     A,DPH
   \   00001A   70F6         JNZ     ??afNumEndPoints_0
   1062          
   1063            return ( endpoints );
   \   00001C                REQUIRE ?Subroutine3
   \   00001C                ; // Fall through to label ?Subroutine3
   1064          }
   1065          
   1066          /*********************************************************************
   1067           * @fn      afEndPoints
   1068           *
   1069           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1070           *          Use afNumEndPoints to find out how big a buffer to supply.
   1071           *
   1072           * @param   epBuf - pointer to mem used
   1073           *
   1074           * @return  void
   1075           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1076          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1077          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1078            epList_t *epSearch;
   1079            uint8 endPoint;
   1080          
   1081            // Start at the beginning
   1082            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   801D         SJMP    ??afEndPoints_0
   1083          
   1084            while ( epSearch )
   1085            {
   1086              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000010   F8           MOV     R0,A
   1087          
   1088              if ( !skipZDO || endPoint != 0 )
   \   000011   E9           MOV     A,R1
   \   000012   6003         JZ      ??afEndPoints_2
   \   000014   E8           MOV     A,R0
   \   000015   600B         JZ      ??afEndPoints_3
   1089                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000017   E8           MOV     A,R0
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   1090          
   1091              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   1092            }
   \                     ??afEndPoints_0:
   \   000026   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000029   EC           MOV     A,R4
   \   00002A   4D           ORL     A,R5
   \   00002B   70DC         JNZ     ??afEndPoints_1
   1093          }
   \   00002D   80..         SJMP    ?Subroutine3
   1094          
   1095          /*********************************************************************
   1096           * @fn      afCopyAddress
   1097           *
   1098           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1099           *          from the zAddrType_t parameter.
   1100           *
   1101           * @param   epBuf - pointer to mem used
   1102           *
   1103           * @return  void
   1104           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1105          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1106          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1107            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV     A,R4
   \   00000A   2408         ADD     A,#0x8
   \   00000C   F8           MOV     R0,A
   \   00000D   E4           CLR     A
   \   00000E   3D           ADDC    A,R5
   \   00000F   F9           MOV     R1,A
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
   1108            if ( zAddr->addrMode == Addr64Bit )
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6403         XRL     A,#0x3
   \   000029   7005         JNZ     ??afCopyAddress_0
   1109            {
   1110              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00002B                ; Setup parameters for call to function sAddrExtCpy
   \   00002B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00002E   800A         SJMP    ??CrossCallReturnLabel_123
   1111            }
   1112            else
   1113            {
   1114              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000030   8C82         MOV     DPL,R4
   \   000032   8D83         MOV     DPH,R5
   \   000034   12....       LCALL   ?Subroutine21 & 0xFFFF
   1115            }
   \                     ??CrossCallReturnLabel_35:
   \   000037   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   1116          
   1117            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1118            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_123:
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   F0           MOVX    @DPTR,A
   1119          }
   \   00004C   02....       LJMP    ?Subroutine1 & 0xFFFF
   1120          
   1121          /**************************************************************************************************
   1122           * @fn          afAPSF_ConfigGet
   1123           *
   1124           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1125           *              the specified EndPoint.
   1126           *
   1127           * input parameters
   1128           *
   1129           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1130           *
   1131           * output parameters
   1132           *
   1133           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1134           *
   1135           * @return      None.
   1136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1137          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1139            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   800A         SJMP    ??afAPSF_ConfigGet_0
   \                     ??afAPSF_ConfigGet_1:
   \   00000C   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00000F   6E           XRL     A,R6
   \   000010   6016         JZ      ??afAPSF_ConfigGet_2
   \   000012   8882         MOV     DPL,R0
   \   000014   8983         MOV     DPH,R1
   \                     ??afAPSF_ConfigGet_0:
   \   000016   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000019   70F1         JNZ     ??afAPSF_ConfigGet_1
   1140          
   1141            if (pList == NULL)
   1142            {
   1143              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   7432         MOV     A,#0x32
   \   000021   F0           MOVX    @DPTR,A
   1144              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   000022   A3           INC     DPTR
   \   000023   7401         MOV     A,#0x1
   \   000025   F0           MOVX    @DPTR,A
   \   000026   801D         SJMP    ??afAPSF_ConfigGet_3
   1145            }
   1146            else
   1147            {
   1148              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_2:
   \   000028                ; Setup parameters for call to function osal_memcpy
   \   000028   E8           MOV     A,R0
   \   000029   2406         ADD     A,#0x6
   \   00002B   F5..         MOV     ?V0,A
   \   00002D   E4           CLR     A
   \   00002E   39           ADDC    A,R1
   \   00002F   F5..         MOV     ?V1,A
   \   000031   75..00       MOV     ?V2,#0x0
   \   000034   78..         MOV     R0,#?V0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000039   7C02         MOV     R4,#0x2
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   1149            }
   1150          }
   \                     ??afAPSF_ConfigGet_3:
   \   000045   7F03         MOV     R7,#0x3
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
   1151          
   1152          /**************************************************************************************************
   1153           * @fn          afAPSF_ConfigSet
   1154           *
   1155           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1156           *              the specified EndPoint.
   1157           *
   1158           * input parameters
   1159           *
   1160           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1161           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1162           *
   1163           * output parameters
   1164           *
   1165           * None.
   1166           *
   1167           * @return      afStatus_SUCCESS for success.
   1168           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1170          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1171          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   1172            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   800F         SJMP    ??afAPSF_ConfigSet_0
   \                     ??afAPSF_ConfigSet_1:
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000013   65..         XRL     A,?V3
   \   000015   6011         JZ      ??afAPSF_ConfigSet_2
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \                     ??afAPSF_ConfigSet_0:
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FE           MOV     R6,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FF           MOV     R7,A
   \   000020   EE           MOV     A,R6
   \   000021   4F           ORL     A,R7
   \   000022   70E8         JNZ     ??afAPSF_ConfigSet_1
   1173          
   1174            if (pList == NULL)
   1175            {
   1176              return afStatus_INVALID_PARAMETER;
   \   000024   7902         MOV     R1,#0x2
   \   000026   8021         SJMP    ??afAPSF_ConfigSet_3
   1177            }
   1178          
   1179            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_2:
   \   000028                ; Setup parameters for call to function osal_memcpy
   \   000028   8A..         MOV     ?V0,R2
   \   00002A   8B..         MOV     ?V1,R3
   \   00002C   75..00       MOV     ?V2,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000034   7C02         MOV     R4,#0x2
   \   000036   7D00         MOV     R5,#0x0
   \   000038   EE           MOV     A,R6
   \   000039   2406         ADD     A,#0x6
   \   00003B   FA           MOV     R2,A
   \   00003C   E4           CLR     A
   \   00003D   3F           ADDC    A,R7
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000042   7403         MOV     A,#0x3
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   1180            return afStatus_SUCCESS;
   \   000047   7900         MOV     R1,#0x0
   \                     ??afAPSF_ConfigSet_3:
   \   000049   02....       LJMP    ?Subroutine0 & 0xFFFF
   1181          }
   1182          
   1183          /**************************************************************************************************
   1184           * @fn          afSetApplCB
   1185           *
   1186           * @brief       Sets the pointer to the Application Callback function for a
   1187           *              specific EndPoint.
   1188           *
   1189           * input parameters
   1190           *
   1191           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1192           * @param       pApplFn - A pointer to the Application Callback function.
   1193           *
   1194           * output parameters
   1195           *
   1196           * None.
   1197           *
   1198           * @return      TRUE if success, FALSE if endpoint not found
   1199           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1200          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1201          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   1202            if ( pApplFn != NULL )
   \   000006   EA           MOV     A,R2
   \   000007   4B           ORL     A,R3
   \   000008   6030         JZ      ??afSetApplCB_0
   1203            {
   1204              epList_t *epSearch;
   1205          
   1206              // Look for the endpoint
   1207              epSearch = afFindEndPointDescList( endPoint );
   \   00000A   90....       MOV     DPTR,#epList
   \                     ??afSetApplCB_1:
   \   00000D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000010   6028         JZ      ??afSetApplCB_0
   \   000012   8882         MOV     DPL,R0
   \   000014   8983         MOV     DPH,R1
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FD           MOV     R5,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F583         MOV     DPH,A
   \   00001E   8D82         MOV     DPL,R5
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6C           XRL     A,R4
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   70E5         JNZ     ??afSetApplCB_1
   1208          
   1209              if ( epSearch )
   1210              {
   1211                epSearch->pfnApplCB = pApplFn;
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   EA           MOV     A,R2
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   EB           MOV     A,R3
   \   000035   F0           MOVX    @DPTR,A
   1212          
   1213                return ( TRUE );
   \   000036   7901         MOV     R1,#0x1
   \   000038   8002         SJMP    ??afSetApplCB_2
   1214              }
   1215            }
   1216          
   1217            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   00003A   7900         MOV     R1,#0x0
   \                     ??afSetApplCB_2:
   \   00003C   02....       LJMP    ?Subroutine3 & 0xFFFF
   1218          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine48_0
   \   000006                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine49_0
   \   000004                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000009   65..         XRL     A,?V2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006                REQUIRE ??Subroutine57_0
   \   000006                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetApplCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetApplCB
   1219          
   1220          /**************************************************************************************************
   1221          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     67   AF_DataRequest
        0     46   -> APSDE_DataReq
        0     46   -> APSDE_DataReqMTU
        0     46   -> NLME_GetShortAddr
        0     46   -> NLME_IsAddressBroadcast
        0     46   -> RTG_CheckRtStatus
        0     46   -> afDataConfirm
        0     46   -> osal_mem_free
        0     46   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     14   afAPSF_ConfigGet
        0     14   -> osal_memcpy
      0     15   afAPSF_ConfigSet
        0     15   -> osal_memcpy
      1     63   afBuildMSGIncoming
        0     20   -> afCopyAddress
        0     23   -> osal_memcpy
        0     20   -> osal_msg_allocate
        0     20   -> osal_msg_send
      1     29   afCopyAddress
        0      9   -> sAddrExtCpy
      1     60   afDataConfirm
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0      9   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      2      0   afFindEndPointDesc
      0      9   afFindSimpleDesc
      2      0   afGetMatch
      1     50   afIncomingData
        0     40   -> afBuildMSGIncoming
        0     28   -> aps_FindGroupForEndpoint
        0     28   -> osal_mem_free
      2      0   afNumEndPoints
      1     17   afReflectError
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     10   afRegister
        0     10   -> osal_mem_alloc
      0     14   afRegisterExtended
        0     12   -> osal_mem_alloc
      2      0   afSetApplCB
      2      0   afSetMatch


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       6  ??Subroutine47_0
       4  ??Subroutine48_0
       6  ??Subroutine49_0
       6  ??Subroutine50_0
       1  ??Subroutine51_0
       2  ??Subroutine52_0
       6  ??Subroutine53_0
      10  ??Subroutine54_0
       4  ??Subroutine55_0
       6  ??Subroutine56_0
       5  ??Subroutine57_0
       5  ?Subroutine0
       5  ?Subroutine1
       6  ?Subroutine10
       2  ?Subroutine11
       1  ?Subroutine12
      12  ?Subroutine13
       6  ?Subroutine14
      13  ?Subroutine15
      10  ?Subroutine16
       8  ?Subroutine17
       6  ?Subroutine18
      17  ?Subroutine19
       5  ?Subroutine2
       8  ?Subroutine20
       4  ?Subroutine21
       5  ?Subroutine22
       4  ?Subroutine23
      16  ?Subroutine24
       8  ?Subroutine25
       9  ?Subroutine26
       6  ?Subroutine27
      10  ?Subroutine28
       6  ?Subroutine29
       7  ?Subroutine3
       6  ?Subroutine30
       4  ?Subroutine31
       4  ?Subroutine32
       4  ?Subroutine33
       8  ?Subroutine34
       7  ?Subroutine35
      12  ?Subroutine36
       8  ?Subroutine37
       5  ?Subroutine38
       8  ?Subroutine39
       5  ?Subroutine4
       9  ?Subroutine40
       5  ?Subroutine41
       8  ?Subroutine42
       4  ?Subroutine43
       1  ?Subroutine44
      10  ?Subroutine45
       6  ?Subroutine46
       4  ?Subroutine5
      15  ?Subroutine6
      26  ?Subroutine7
       8  ?Subroutine8
       8  ?Subroutine9
     813  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     125  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
      74  afAPSF_ConfigGet
       6  afAPSF_ConfigGet::?relay
      76  afAPSF_ConfigSet
       6  afAPSF_ConfigSet::?relay
     483  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      79  afCopyAddress
       6  afCopyAddress::?relay
      79  afDataConfirm
       6  afDataConfirm::?relay
      32  afDataReqMTU
       6  afDataReqMTU::?relay
      74  afDelete
       6  afDelete::?relay
      47  afEndPoints
       6  afEndPoints::?relay
      48  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
     108  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      44  afGetMatch
       6  afGetMatch::?relay
     623  afIncomingData
       6  afIncomingData::?relay
      28  afNumEndPoints
       6  afNumEndPoints::?relay
     100  afReflectError
       6  afReflectError::?relay
     130  afRegister
       6  afRegister::?relay
      92  afRegisterExtended
       6  afRegisterExtended::?relay
      63  afSetApplCB
       6  afSetApplCB::?relay
      55  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 3 583 bytes in segment BANKED_CODE
   120 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 3 704 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
