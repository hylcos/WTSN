###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                17/Feb/2016  14:01:50
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Components\stack\nwk\stub_aps.c
#    Command line       =  
#        -f "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "E:\Sensordinges\Z-Stack
#        Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00008000 -DZDAPP_CONFIG_PAN_ID=0x0EEE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack
#        Mesh 1.0.0\Components\stack\nwk\stub_aps.c" -D NWK_AUTO_POLL -D
#        HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
#        "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\SensorEB\List\" -lA
#        "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\SensorEB\List\"
#        --diag_suppress Pe001,Pa010,Pe1665 -o "E:\Sensordinges\Z-Stack Mesh
#        1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\SensorEB\Obj\" -e
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\" -I
#        "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\" -I
#        "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Oh --require_prototypes
#    List file          =  
#        E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\SensorEB\List\stub_aps.lst
#    Object file        =  
#        E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\SensorEB\Obj\stub_aps.r51
#
###############################################################################

E:\Sensordinges\Z-Stack Mesh 1.0.0\Z-Stack Mesh 1.0.0\Components\stack\nwk\stub_aps.c
      1          /**************************************************************************************************
      2            Filename:       stub_aps.c
      3            Revised:        $Date: 2014-03-26 10:01:05 -0700 (Wed, 26 Mar 2014) $
      4            Revision:       $Revision: 37899 $
      5          
      6            Description:    Stub APS processing functions
      7          
      8          
      9            Copyright 2008 - 2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "OSAL.h"
     44          #include "mac_spec.h"
     45          #include "nwk_util.h"
     46          #include "AF.h"
     47          
     48          #include "stub_aps.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          // Stub NWK header length
     59          #define STUB_NWK_HDR_LEN                2
     60          
     61          // Start of the Stub APS header in the Inter-PAN frame
     62          #define STUB_APS_HDR_FRAME_CTRL         STUB_NWK_HDR_LEN
     63          
     64          // Stub APS event identifiers
     65          #define CHANNEL_CHANGE_EVT              0x0001
     66          
     67          #define CHANNEL_CHANGE_RETRY_TIMEOUT    100
     68          
     69          /*********************************************************************
     70           * TYPEDEFS
     71           */
     72          typedef struct
     73          {
     74            zAddrType_t addr;
     75            uint16 panId;
     76          } pan_t;
     77          
     78          /*********************************************************************
     79           * GLOBAL VARIABLES
     80           */
     81          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 StubAPS_TaskID = 0xFF;    // Task ID for internal task/event processing
   \                     StubAPS_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for StubAPS_TaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
     83          
     84          /*********************************************************************
     85           * EXTERNAL VARIABLES
     86           */
     87          
     88          
     89          /*********************************************************************
     90           * EXTERNAL FUNCTIONS
     91           */
     92          
     93          
     94          /*********************************************************************
     95           * LOCAL VARIABLES
     96           */
     97          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          static uint8 newChannel;
   \                     newChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          static uint8 channelChangeInProgress = FALSE;
   \                     channelChangeInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          
    101          // Application info

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          static uint8 appTaskID = 0xFF;  // Application task id
   \                     appTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for appTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 appEndPoint = 0;   // Application endpoint
   \                     appEndPoint:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          
    106          /*********************************************************************
    107           * LOCAL FUNCTIONS
    108           */
    109          
    110          static void StubNWK_ParseMsg( uint8 *buf, uint8 bufLength, NLDE_FrameFormat_t *snff );
    111          static void StubAPS_ParseMsg( NLDE_FrameFormat_t *snff, aps_FrameFormat_t *saff );
    112          static void StubNWK_BuildMsg( uint8 *nwkHdr );
    113          static void StubAPS_BuildMsg( uint8 *apsHdr, uint8 frmCtrl, uint16 groupID, APSDE_DataReq_t *req );
    114          static ZStatus_t StubAPS_BuildFrameControl( uint8 *frmCtrl, zAddrType_t *dstAddr,
    115                                                      uint16 *groupID, APSDE_DataReq_t *req );
    116          static ZStatus_t StubAPS_SetNewChannel( uint8 channel );
    117          static void StubAPS_NotifyApp( uint8 status );
    118          
    119          uint8 StubAPS_ZMacCallback( uint8 *msgPtr );
    120          
    121          /*********************************************************************
    122           * @fn      StubAPS_Init()
    123           *
    124           * @brief   Initialize stub APS layer
    125           *
    126           * @param   task_id - Task identifier for the desired task
    127           *
    128           * @return  none
    129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    130          void StubAPS_Init( uint8 task_id )
   \                     StubAPS_Init:
    131          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    132            StubAPS_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#StubAPS_TaskID
   \   000008   F0           MOVX    @DPTR,A
    133          
    134            // register with ZMAC
    135            pZMac_AppCallback = StubAPS_ZMacCallback;
   \   000009   90....       MOV     DPTR,#pZMac_AppCallback
   \   00000C   74..         MOV     A,#`??StubAPS_ZMacCallback::?relay` & 0xff
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   74..         MOV     A,#(`??StubAPS_ZMacCallback::?relay` >> 8) & 0xff
   \   000012   02....       LJMP    ?Subroutine0 & 0xFFFF
    136          
    137          } /* StubAPS_Init() */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine12_0
   \   000001                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    138          
    139          /*********************************************************************
    140           * @fn      StubAPS_ProcessEvent()
    141           *
    142           * @brief   Main event loop for Stub APS task. This function should be called
    143           *          at periodic intervals when event occur.
    144           *
    145           * @param   task_id - Task ID
    146           * @param   events  - Bitmap of events
    147           *
    148           * @return  none
    149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          UINT16 StubAPS_ProcessEvent( uint8 task_id, uint16 events )
   \                     StubAPS_ProcessEvent:
    151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    152            (void)task_id; // Intentionally unreferenced parameter
    153          
    154            if ( events & SYS_EVENT_MSG )
   \   00000E   EB           MOV     A,R3
   \   00000F   5480         ANL     A,#0x80
   \   000011   704C         JNZ     ??StubAPS_ProcessEvent_0
    155            {
    156              osal_event_hdr_t *msg_ptr;
    157          
    158              while ( (msg_ptr = (osal_event_hdr_t *)osal_msg_receive( StubAPS_TaskID )) != NULL )
    159              {
    160                if ( msg_ptr->event == MAC_MCPS_DATA_CNF )
    161                {
    162                  INTERP_DataConfirm( (ZMacDataCnf_t *)msg_ptr );
    163                }
    164                else if ( msg_ptr->event == MAC_MCPS_DATA_IND )
    165                {
    166                  INTERP_DataIndication( (macMcpsDataInd_t *)msg_ptr );
    167                }
    168          
    169                osal_msg_deallocate( (uint8 *)msg_ptr );
    170              }
    171          
    172              // Return unproccessed events
    173              return ( events ^ SYS_EVENT_MSG );
    174            }
    175          
    176            if ( events & CHANNEL_CHANGE_EVT )
   \   000013   EA           MOV     A,R2
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   4003         JC      $+5
   \   000018   02....       LJMP    ??StubAPS_ProcessEvent_1 & 0xFFFF
    177            {
    178              // try to change to the new channel
    179              ZStatus_t status = StubAPS_SetNewChannel( newChannel );
   \   00001B   90....       MOV     DPTR,#newChannel
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   C0E0         PUSH    A
   \   000021   7401         MOV     A,#0x1
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   D0E0         POP     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029                ; Setup parameters for call to function nwkDB_CountTypes
   \   000029   7902         MOV     R1,#0x2
   \   00002B   12....       LCALL   `??nwkDB_CountTypes::?relay`; Banked call to: nwkDB_CountTypes
   \   00002E   E9           MOV     A,R1
   \   00002F   706B         JNZ     ??StubAPS_ProcessEvent_2
   \   000031                ; Setup parameters for call to function ZMacStateIdle
   \   000031   12....       LCALL   `??ZMacStateIdle::?relay`; Banked call to: ZMacStateIdle
   \   000034   E9           MOV     A,R1
   \   000035   6065         JZ      ??StubAPS_ProcessEvent_2
   \   000037                ; Setup parameters for call to function ZMacSetReq
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   79E1         MOV     R1,#-0x1f
   \   00003E   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000041   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000044   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000047   90....       MOV     DPTR,#channelChangeInProgress
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   7E00         MOV     R6,#0x0
   \   00004E   8065         SJMP    ??StubAPS_ProcessEvent_3
   \                     ??StubAPS_ProcessEvent_4:
   \   000050   740D         MOV     A,#0xd
   \   000052   68           XRL     A,R0
   \   000053   7003         JNZ     ??StubAPS_ProcessEvent_5
   \   000055                ; Setup parameters for call to function INTERP_DataIndication
   \   000055   12....       LCALL   `??INTERP_DataIndication::?relay`; Banked call to: INTERP_DataIndication
   \                     ??StubAPS_ProcessEvent_5:
   \   000058                ; Setup parameters for call to function osal_msg_deallocate
   \   000058   EE           MOV     A,R6
   \   000059   FA           MOV     R2,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FB           MOV     R3,A
   \   00005C   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??StubAPS_ProcessEvent_0:
   \   00005F                ; Setup parameters for call to function osal_msg_receive
   \   00005F   90....       MOV     DPTR,#StubAPS_TaskID
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000067   8A..         MOV     ?V2,R2
   \   000069   8B..         MOV     ?V3,R3
   \   00006B   AE..         MOV     R6,?V2
   \   00006D   AF..         MOV     R7,?V3
   \   00006F   EE           MOV     A,R6
   \   000070   4F           ORL     A,R7
   \   000071   6020         JZ      ??StubAPS_ProcessEvent_6
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F8           MOV     R0,A
   \   000079   740C         MOV     A,#0xc
   \   00007B   68           XRL     A,R0
   \   00007C   70D2         JNZ     ??StubAPS_ProcessEvent_4
   \   00007E                ; Setup parameters for call to function afDataConfirm
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FB           MOV     R3,A
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FA           MOV     R2,A
   \   000089   90....       MOV     DPTR,#appEndPoint
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F9           MOV     R1,A
   \   00008E   12....       LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
   \   000091   80C5         SJMP    ??StubAPS_ProcessEvent_5
   \                     ??StubAPS_ProcessEvent_6:
   \   000093   AA..         MOV     R2,?V0
   \   000095   E5..         MOV     A,?V1
   \   000097   6480         XRL     A,#0x80
   \   000099   FB           MOV     R3,A
   \   00009A   8043         SJMP    ??StubAPS_ProcessEvent_7
   \                     ??StubAPS_ProcessEvent_2:
   \   00009C   7E01         MOV     R6,#0x1
    180              if ( status != ZSuccess )
    181              {
    182                // turn MAC receiver back on
    183                uint8 rxOnIdle = true;
   \   00009E   85..82       MOV     DPL,?XSP + 0
   \   0000A1   85..83       MOV     DPH,?XSP + 1
   \   0000A4   EE           MOV     A,R6
   \   0000A5   12....       LCALL   ??Subroutine11_0 & 0xFFFF
    184                ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_17:
   \   0000A8   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    185          
    186                // set NWK task to run
    187                nwk_setStateIdle( FALSE );
   \   0000AB                ; Setup parameters for call to function nwk_setStateIdle
   \   0000AB   7900         MOV     R1,#0x0
   \   0000AD   12....       LCALL   `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    188          
    189                channelChangeInProgress = FALSE;
   \   0000B0   90....       MOV     DPTR,#channelChangeInProgress
   \   0000B3   E4           CLR     A
   \   0000B4   F0           MOVX    @DPTR,A
    190              }
    191          
    192              // notify the application
    193              StubAPS_NotifyApp( status );
   \                     ??StubAPS_ProcessEvent_3:
   \   0000B5                ; Setup parameters for call to function osal_msg_allocate
   \   0000B5   7A02         MOV     R2,#0x2
   \   0000B7   7B00         MOV     R3,#0x0
   \   0000B9   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0000BC   EA           MOV     A,R2
   \   0000BD   4B           ORL     A,R3
   \   0000BE   6012         JZ      ??StubAPS_ProcessEvent_8
   \   0000C0   8A82         MOV     DPL,R2
   \   0000C2   8B83         MOV     DPH,R3
   \   0000C4   7433         MOV     A,#0x33
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   EE           MOV     A,R6
   \   0000C8   A3           INC     DPTR
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA                ; Setup parameters for call to function osal_msg_send
   \   0000CA   90....       MOV     DPTR,#appTaskID
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F9           MOV     R1,A
   \   0000CF   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    194          
    195              return ( events ^ CHANNEL_CHANGE_EVT );
   \                     ??StubAPS_ProcessEvent_8:
   \   0000D2   E5..         MOV     A,?V0
   \   0000D4   6401         XRL     A,#0x1
   \   0000D6   FA           MOV     R2,A
   \   0000D7   AB..         MOV     R3,?V1
   \   0000D9   8004         SJMP    ??StubAPS_ProcessEvent_7
    196            }
    197          
    198            // If reach here, the events are unknown
    199            // Discard or make more handlers
    200            return 0;
   \                     ??StubAPS_ProcessEvent_1:
   \   0000DB   7A00         MOV     R2,#0x0
   \   0000DD   7B00         MOV     R3,#0x0
   \                     ??StubAPS_ProcessEvent_7:
   \   0000DF   7402         MOV     A,#0x2
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   7F04         MOV     R7,#0x4
   \   0000E6   02....       LJMP    ?BANKED_LEAVE_XDATA
    201          
    202          } /* StubAPS_ProcessEvent() */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7401         MOV     A,#0x1
   \   000008                REQUIRE ??Subroutine11_0
   \   000008                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001   AA..         MOV     R2,?XSP + 0
   \   000003   AB..         MOV     R3,?XSP + 1
   \   000005   7952         MOV     R1,#0x52
   \   000007   22           RET
    203          
    204          
    205          /*********************************************************************
    206           * @fn          StubNWK_ParseMsg
    207           *
    208           * @brief       Call this function to parse an incoming Stub NWK frame.
    209           *
    210           * @param       buf - pointer incoming message buffer
    211           * @param       bufLength - length of incoming message
    212           * @param       snff  - pointer Frame Format Parameters
    213           *
    214           * @return      pointer to network packet, NULL if error
    215           */
    216          static void StubNWK_ParseMsg( uint8 *buf, uint8 bufLength, NLDE_FrameFormat_t *snff )
    217          {
    218            uint16 fc;
    219          
    220            osal_memset( snff, 0, sizeof(NLDE_FrameFormat_t) );
    221          
    222            snff->bufLength = bufLength;
    223          
    224            // get the frame control
    225            fc = BUILD_UINT16( buf[NWK_HDR_FRAME_CTRL_LSB], buf[NWK_HDR_FRAME_CTRL_MSB] );
    226          
    227            // parse the frame control
    228            NLDE_ParseFrameControl( fc, snff );
    229          
    230            snff->hdrLen = STUB_NWK_HDR_LEN;
    231          
    232            // Stub NWK payload
    233            snff->nsdu = buf + snff->hdrLen;
    234            snff->nsduLength = snff->bufLength - snff->hdrLen;
    235          
    236          } /* StubNWK_ParseMsg */
    237          
    238          /*********************************************************************
    239           * @fn          StubAPS_ParseMsg
    240           *
    241           * @brief       Call this function to parse an incoming Stub APS frame.
    242           *
    243           * @param       naff  - pointer Stub NWK Frame Format Parameters
    244           * @param       saff  - pointer Stub APS Format Parameters
    245           *
    246           * @return      none
    247           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          static void StubAPS_ParseMsg( NLDE_FrameFormat_t *snff, aps_FrameFormat_t *saff )
   \                     StubAPS_ParseMsg:
    249          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    250            uint8 fcb;
    251            uint8 *asdu;
    252          
    253            osal_memset( saff, 0, sizeof(aps_FrameFormat_t) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C17         MOV     R4,#0x17
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    254          
    255            saff->asduLength = snff->nsduLength;
   \   00001A   EE           MOV     A,R6
   \   00001B   2410         ADD     A,#0x10
   \   00001D   F8           MOV     R0,A
   \   00001E   E4           CLR     A
   \   00001F   3F           ADDC    A,R7
   \   000020   F9           MOV     R1,A
   \   000021   E8           MOV     A,R0
   \   000022   FA           MOV     R2,A
   \   000023   E9           MOV     A,R1
   \   000024   FB           MOV     R3,A
   \   000025   E5..         MOV     A,?V0
   \   000027   2417         ADD     A,#0x17
   \   000029   F8           MOV     R0,A
   \   00002A   E4           CLR     A
   \   00002B   35..         ADDC    A,?V1
   \   00002D   F9           MOV     R1,A
   \   00002E   E8           MOV     A,R0
   \   00002F   FC           MOV     R4,A
   \   000030   E9           MOV     A,R1
   \   000031   FD           MOV     R5,A
   \   000032   8C82         MOV     DPL,R4
   \   000034   8D83         MOV     DPH,R5
   \   000036   E0           MOVX    A,@DPTR
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   F0           MOVX    @DPTR,A
    256            asdu = snff->nsdu;
   \   00003C   E5..         MOV     A,?V0
   \   00003E   241D         ADD     A,#0x1d
   \   000040   F8           MOV     R0,A
   \   000041   E4           CLR     A
   \   000042   35..         ADDC    A,?V1
   \   000044   F9           MOV     R1,A
   \   000045   88..         MOV     ?V2,R0
   \   000047   89..         MOV     ?V3,R1
   \   000049   8882         MOV     DPL,R0
   \   00004B   12....       LCALL   ?Subroutine6 & 0xFFFF
    257            saff->macDestAddr = snff->macDstAddr;
   \                     ??CrossCallReturnLabel_24:
   \   00004E   E5..         MOV     A,?V0
   \   000050   240D         ADD     A,#0xd
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   35..         ADDC    A,?V1
   \   000057   F583         MOV     DPH,A
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F5..         MOV     ?V1,A
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E5..         MOV     A,?V0
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E5..         MOV     A,?V1
   \   000074   12....       LCALL   ?Subroutine9 & 0xFFFF
    258          
    259            // First byte is Frame Control.
    260            saff->FrmCtrl = *asdu++;
   \                     ??CrossCallReturnLabel_9:
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F5..         MOV     ?V0,A
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000081   A3           INC     DPTR
   \   000082   A882         MOV     R0,DPL
   \   000084   A983         MOV     R1,DPH
    261          
    262            fcb = saff->FrmCtrl & APS_FRAME_TYPE_MASK;
    263            if ( fcb == STUB_APS_FRAME )
   \   000086   7403         MOV     A,#0x3
   \   000088   55..         ANL     A,?V0
   \   00008A   6403         XRL     A,#0x3
   \   00008C   703F         JNZ     ??StubAPS_ParseMsg_0
    264            {
    265              fcb = saff->FrmCtrl & APS_DELIVERYMODE_MASK;
   \   00008E   740C         MOV     A,#0xc
   \   000090   55..         ANL     A,?V0
   \   000092   F5..         MOV     ?V0,A
    266              if ( fcb == APS_FC_DM_BROADCAST )
   \   000094   EE           MOV     A,R6
   \   000095   240C         ADD     A,#0xc
   \   000097   F582         MOV     DPL,A
   \   000099   E4           CLR     A
   \   00009A   3F           ADDC    A,R7
   \   00009B   F583         MOV     DPH,A
   \   00009D   7408         MOV     A,#0x8
   \   00009F   65..         XRL     A,?V0
   \   0000A1   7005         JNZ     ??StubAPS_ParseMsg_1
    267                saff->wasBroadcast = true;
   \   0000A3   7401         MOV     A,#0x1
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   8011         SJMP    ??StubAPS_ParseMsg_2
    268              else
    269                saff->wasBroadcast = false;
   \                     ??StubAPS_ParseMsg_1:
   \   0000A8   E4           CLR     A
   \   0000A9   F0           MOVX    @DPTR,A
    270          
    271              if ( fcb == APS_FC_DM_GROUP )
   \   0000AA   740C         MOV     A,#0xc
   \   0000AC   65..         XRL     A,?V0
   \   0000AE   7009         JNZ     ??StubAPS_ParseMsg_2
    272              {
    273                saff->GroupID = BUILD_UINT16( asdu[0], asdu[1] );
   \   0000B0   12....       LCALL   ?Subroutine5 & 0xFFFF
    274                asdu += sizeof( uint16 );
    275              }
   \                     ??CrossCallReturnLabel_2:
   \   0000B3   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000B6   5001         JNC     ??StubAPS_ParseMsg_2
   \   0000B8   09           INC     R1
    276          
    277              // Pull out the Cluster ID
    278              saff->ClusterID = BUILD_UINT16( asdu[0], asdu[1] );
   \                     ??StubAPS_ParseMsg_2:
   \   0000B9   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000BC   12....       LCALL   ?Subroutine3 & 0xFFFF
    279              asdu += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_13:
   \   0000BF   5001         JNC     ??StubAPS_ParseMsg_3
   \   0000C1   09           INC     R1
    280          
    281              // Pull out the profile ID
    282              saff->ProfileID = BUILD_UINT16( asdu[0], asdu[1] );
   \                     ??StubAPS_ParseMsg_3:
   \   0000C2   12....       LCALL   ?Subroutine5 & 0xFFFF
    283              asdu += 2;
    284            }
   \                     ??CrossCallReturnLabel_4:
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000CA   5001         JNC     ??StubAPS_ParseMsg_0
   \   0000CC   09           INC     R1
    285          
    286            saff->asdu = asdu;
   \                     ??StubAPS_ParseMsg_0:
   \   0000CD   EE           MOV     A,R6
   \   0000CE   240E         ADD     A,#0xe
   \   0000D0   F582         MOV     DPL,A
   \   0000D2   E4           CLR     A
   \   0000D3   3F           ADDC    A,R7
   \   0000D4   F583         MOV     DPH,A
   \   0000D6   E8           MOV     A,R0
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E9           MOV     A,R1
   \   0000DA   F0           MOVX    @DPTR,A
    287            saff->asduLength -= (uint8) (asdu - snff->nsdu);
   \   0000DB   85..82       MOV     DPL,?V2
   \   0000DE   85..83       MOV     DPH,?V3
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F5..         MOV     ?V0,A
   \   0000E4   8A82         MOV     DPL,R2
   \   0000E6   8B83         MOV     DPH,R3
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C3           CLR     C
   \   0000EA   98           SUBB    A,R0
   \   0000EB   25..         ADD     A,?V0
   \   0000ED   F8           MOV     R0,A
   \   0000EE   F0           MOVX    @DPTR,A
    288            saff->apsHdrLen = snff->nsduLength - saff->asduLength;
   \   0000EF   8C82         MOV     DPL,R4
   \   0000F1   8D83         MOV     DPH,R5
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   C3           CLR     C
   \   0000F5   98           SUBB    A,R0
   \   0000F6   C0E0         PUSH    A
   \   0000F8   EE           MOV     A,R6
   \   0000F9   240D         ADD     A,#0xd
   \   0000FB   F582         MOV     DPL,A
   \   0000FD   E4           CLR     A
   \   0000FE   3F           ADDC    A,R7
   \   0000FF   F583         MOV     DPH,A
   \   000101   D0E0         POP     A
   \   000103   F0           MOVX    @DPTR,A
    289          
    290          } /* StubAPS_ParseMsg */
   \   000104   7F06         MOV     R7,#0x6
   \   000106   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V1,A
   \   00000B   E5..         MOV     A,?V4
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine10_0
   \   000002                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E5..         MOV     A,?V1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   E8           MOV     A,R0
   \   00000A   2402         ADD     A,#0x2
   \   00000C   F8           MOV     R0,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine13_0
   \   000002                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    291          
    292          /******************************************************************************
    293           * @fn          StubAPS_BuildFrameControl
    294           *
    295           * @brief       This function builds Stub APS Frame Control and the destination
    296           *              address parameter for the MCPS-DATA Request.
    297           *
    298           * @param       frmCtrl - frame control
    299           * @param       dstAddr - destination address for MCPS-DATA Request
    300           * @param       groupID - group id
    301           * @param       req - APSDE_DataReq_t
    302           *
    303           * @return      ZStatus_t
    304           */
    305          static ZStatus_t StubAPS_BuildFrameControl( uint8 *frmCtrl, zAddrType_t *dstAddr,
    306                                                      uint16 *groupID, APSDE_DataReq_t *req )
    307          {
    308            // Security
    309            if ( req->txOptions & APS_TX_OPTIONS_SECURITY_ENABLE )
    310              return ( ZApsNotSupported );
    311          
    312            // Ack request
    313            if ( req->txOptions & APS_TX_OPTIONS_ACK )
    314              return ( ZApsNotSupported );
    315          
    316             // Fragmentation
    317            if ( req->txOptions & APS_TX_OPTIONS_PERMIT_FRAGMENT )
    318              return ( ZApsNotSupported );
    319          
    320            // set delivery mode
    321            if ( req->dstAddr.addrMode == AddrNotPresent )
    322              return ( ZApsNotSupported ); // No REFLECTOR
    323          
    324            // set frame type
    325            *frmCtrl = STUB_APS_FRAME;
    326          
    327            // set DstAddrMode of MCPS-DATA Request to DstAddrMode of INTERP-Data Request
    328            dstAddr->addrMode = req->dstAddr.addrMode;
    329          
    330            // set DstAddr of MCPS-DATA Request to DstAddr of INTERP-Data Request
    331            if ( req->dstAddr.addrMode == AddrBroadcast )
    332            {
    333              *frmCtrl |= APS_FC_DM_BROADCAST;
    334          
    335              // set DstAddrMode of MCPS-DATA Request to short address
    336              dstAddr->addrMode = Addr16Bit;
    337              dstAddr->addr.shortAddr = req->dstAddr.addr.shortAddr;
    338            }
    339            else if ( req->dstAddr.addrMode == Addr16Bit )
    340            {
    341              *frmCtrl |= APS_FC_DM_UNICAST;
    342              dstAddr->addr.shortAddr = req->dstAddr.addr.shortAddr;
    343            }
    344            else if ( req->dstAddr.addrMode == Addr64Bit )
    345            {
    346              *frmCtrl |= APS_FC_DM_UNICAST;
    347              osal_cpyExtAddr( dstAddr->addr.extAddr, req->dstAddr.addr.extAddr );
    348            }
    349            else if ( req->dstAddr.addrMode == AddrGroup )
    350            {
    351              *frmCtrl |= APS_FC_DM_GROUP;
    352          
    353              // set DstAddrMode of MCPS-DATA Request to short address
    354              dstAddr->addrMode = Addr16Bit;
    355          
    356              // set DstAddr of MCPS-DATA Request to 0xFFFF
    357              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
    358          
    359              // set Group ID to DstAddr of INTERP-Data Request
    360              *groupID = req->dstAddr.addr.shortAddr;
    361            }
    362          
    363            return ( ZSuccess );
    364          
    365          } /* StubAPS_BuildFrameControl */
    366          
    367          /******************************************************************************
    368           * @fn          StubNWK_BuildMsg
    369           *
    370           * @brief       This function builds a Stub NWK frame.
    371           *
    372           * @param       nwkHdr - stub NWK header
    373           *
    374           * @return      none
    375           */
    376          static void StubNWK_BuildMsg( uint8 *nwkHdr )
    377          {
    378            uint16 frmCtrl = 0;
    379            uint8  protoVer = NLME_GetProtocolVersion();
    380          
    381            // frame type
    382            frmCtrl |= (STUB_NWK_FRAME_TYPE << NWK_FC_FRAME_TYPE);
    383          
    384            // protocol version
    385            frmCtrl |= (protoVer << NWK_FC_PROT_VERSION);
    386          
    387            // set Stub NWK header
    388            *nwkHdr++ = LO_UINT16( frmCtrl );
    389            *nwkHdr++ = HI_UINT16( frmCtrl );
    390          
    391          } /* StubNWK_BuildMsg */
    392          
    393          /******************************************************************************
    394           * @fn          StubAPS_BuildMsg
    395           *
    396           * @brief       This function builds a Stub APS frame.
    397           *
    398           * @param       apsHdr - stub APS header
    399           * @param       frmCtrl - stub APS frame control
    400           * @param       groupID - group id
    401           * @param       req - APSDE_DataReq_t
    402           *
    403           * @return      none
    404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          static void StubAPS_BuildMsg( uint8 *apsHdr, uint8 frmCtrl, uint16 groupID, APSDE_DataReq_t *req )
   \                     StubAPS_BuildMsg:
    406          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    407            // add frame type
    408            *apsHdr++ = frmCtrl;
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   AA82         MOV     R2,DPL
   \   00000F   AB83         MOV     R3,DPH
    409          
    410            // add Group ID
    411            if ( ( frmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_GROUP )
   \   000011   740C         MOV     A,#0xc
   \   000013   5E           ANL     A,R6
   \   000014   640C         XRL     A,#0xc
   \   000016   700C         JNZ     ??StubAPS_BuildMsg_0
    412            {
    413              *apsHdr++ = LO_UINT16( groupID );
   \   000018   EC           MOV     A,R4
   \   000019   F0           MOVX    @DPTR,A
    414              *apsHdr++ = HI_UINT16( groupID );
   \   00001A   ED           MOV     A,R5
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   EA           MOV     A,R2
   \   00001E   2402         ADD     A,#0x2
   \   000020   FA           MOV     R2,A
   \   000021   5001         JNC     ??StubAPS_BuildMsg_0
   \   000023   0B           INC     R3
   \                     ??StubAPS_BuildMsg_0:
   \   000024   740B         MOV     A,#0xb
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FC           MOV     R4,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FD           MOV     R5,A
    415            }
    416          
    417            // add clusterID
    418            *apsHdr++ = LO_UINT16( req->clusterID );
   \   00002E   EC           MOV     A,R4
   \   00002F   240D         ADD     A,#0xd
   \   000031   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000034   12....       LCALL   ?Subroutine4 & 0xFFFF
    419            *apsHdr++ = HI_UINT16( req->clusterID );
   \                     ??CrossCallReturnLabel_0:
   \   000037   F0           MOVX    @DPTR,A
    420          
    421            // add profile ID
    422            *apsHdr++ = LO_UINT16( req->profileID );
   \   000038   EC           MOV     A,R4
   \   000039   240F         ADD     A,#0xf
   \   00003B   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   12....       LCALL   ?Subroutine4 & 0xFFFF
    423            *apsHdr++ = HI_UINT16( req->profileID );
   \                     ??CrossCallReturnLabel_1:
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
    424          
    425            // copy ASDU data into frame
    426            osal_memcpy ( apsHdr, req->asdu, req->asduLen );
   \   000046                ; Setup parameters for call to function osal_memcpy
   \   000046   EC           MOV     A,R4
   \   000047   2413         ADD     A,#0x13
   \   000049   F582         MOV     DPL,A
   \   00004B   E4           CLR     A
   \   00004C   3D           ADDC    A,R5
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F5..         MOV     ?V0,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V1,A
   \   000056   75..00       MOV     ?V2,#0x0
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005E   EC           MOV     A,R4
   \   00005F   2411         ADD     A,#0x11
   \   000061   F582         MOV     DPL,A
   \   000063   E4           CLR     A
   \   000064   3D           ADDC    A,R5
   \   000065   F583         MOV     DPH,A
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FC           MOV     R4,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FD           MOV     R5,A
   \   00006C   EA           MOV     A,R2
   \   00006D   2404         ADD     A,#0x4
   \   00006F   FA           MOV     R2,A
   \   000070   5001         JNC     ??StubAPS_BuildMsg_1
   \   000072   0B           INC     R3
   \                     ??StubAPS_BuildMsg_1:
   \   000073   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000076   7403         MOV     A,#0x3
   \   000078                REQUIRE ?Subroutine1
   \   000078                ; // Fall through to label ?Subroutine1
    427          
    428          } /* StubAPS_BuildMsg */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   3D           ADDC    A,R5
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   E0           MOVX    A,@DPTR
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   22           RET
    429          
    430          /******************************************************************************
    431           * @fn          StubAPS_setNewChannel
    432           *
    433           * @brief       This function changes the device's channel.
    434           *
    435           * @param       none
    436           *
    437           * @return      ZStatus_t
    438           */
    439          static ZStatus_t StubAPS_SetNewChannel( uint8 channel )
    440          {
    441            uint8 rxOnIdle;
    442          
    443            // make sure MAC has nothing to transmit
    444            if ( ( nwkDB_CountTypes( NWK_DATABUF_SENT ) == 0 ) && ZMacStateIdle() )
    445            {
    446              // set the new channel
    447              ZMacSetReq( ZMacChannel, &channel );
    448          
    449              // turn MAC receiver back on
    450              rxOnIdle = true;
    451              ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
    452          
    453              channelChangeInProgress = FALSE;
    454          
    455              return ( ZSuccess );
    456            }
    457          
    458            return ( ZFailure );
    459          
    460          } /* StubAPS_setNewChannel */
    461          
    462          
    463          /******************************************************************************
    464           * @fn          StubAPS_NotifyApp
    465           *
    466           * @brief       This function sends an OSAL message to the Application task.
    467           *
    468           * @param       status - command status
    469           *
    470           * @return      none
    471           */
    472          static void StubAPS_NotifyApp( uint8 status )
    473          {
    474            osal_event_hdr_t *msgPtr;
    475          
    476            // Notify the application task
    477            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( sizeof(osal_event_hdr_t) );
    478            if ( msgPtr )
    479            {
    480              msgPtr->event = SAPS_CHANNEL_CHANGE;
    481              msgPtr->status = status;
    482          
    483              osal_msg_send( appTaskID, (uint8 *)msgPtr );
    484            }
    485          
    486          } /* StubAPS_NotifyApp */
    487          
    488          /******************************************************************************
    489           *
    490           *  External APIs provided to the Application.
    491           */
    492          
    493          /******************************************************************************
    494           * @fn          StubAPS_SetInterPanChannel
    495           *
    496           * @brief       This function changes the device's channel for inter-PAN communication.
    497           *
    498           * @param       channel - new channel
    499           *
    500           * @return      ZStatus_t
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          ZStatus_t StubAPS_SetInterPanChannel( uint8 channel )
   \                     StubAPS_SetInterPanChannel:
    503          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    504            uint8 currChannel;
    505            uint8 rxOnIdle;
    506          
    507            if ( channelChangeInProgress )
   \   00000C   90....       MOV     DPTR,#channelChangeInProgress
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6004         JZ      ??StubAPS_SetInterPanChannel_0
    508              return ( ZFailure );
   \   000012   7901         MOV     R1,#0x1
   \   000014   8059         SJMP    ??StubAPS_SetInterPanChannel_1
    509          
    510            ZMacGetReq( ZMacChannel, &currChannel );
   \                     ??StubAPS_SetInterPanChannel_0:
   \   000016                ; Setup parameters for call to function ZMacGetReq
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?XSTACK_DISP101_8
   \   00001B   79E1         MOV     R1,#-0x1f
   \   00001D   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    511            if ( currChannel == channel )
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6E           XRL     A,R6
   \   000027   6044         JZ      ??StubAPS_SetInterPanChannel_2
    512            {
    513              // inter PANs communication within the same channel
    514              return ( ZSuccess );
    515            }
    516          
    517            // go into channel transition state
    518            channelChangeInProgress = TRUE;
   \   000029   90....       MOV     DPTR,#channelChangeInProgress
   \   00002C   7401         MOV     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
    519          
    520            // set NWK task to idle
    521            nwk_setStateIdle( TRUE );
   \   00002F                ; Setup parameters for call to function nwk_setStateIdle
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    522          
    523            // turn MAC receiver off
    524            rxOnIdle = false;
   \   000033   7401         MOV     A,#0x1
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    525            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   00003A                ; Setup parameters for call to function ZMacSetReq
   \   00003A   04           INC     A
   \   00003B   12....       LCALL   ?XSTACK_DISP101_8
   \   00003E   7952         MOV     R1,#0x52
   \   000040   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    526          
    527            // try to change to the new channel
    528            if ( StubAPS_SetNewChannel( channel ) == ZSuccess )
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   EE           MOV     A,R6
   \   000049   F0           MOVX    @DPTR,A
   \   00004A                ; Setup parameters for call to function nwkDB_CountTypes
   \   00004A   7902         MOV     R1,#0x2
   \   00004C   12....       LCALL   `??nwkDB_CountTypes::?relay`; Banked call to: nwkDB_CountTypes
   \   00004F   E9           MOV     A,R1
   \   000050   7027         JNZ     ??StubAPS_SetInterPanChannel_3
   \   000052                ; Setup parameters for call to function ZMacStateIdle
   \   000052   12....       LCALL   `??ZMacStateIdle::?relay`; Banked call to: ZMacStateIdle
   \   000055   E9           MOV     A,R1
   \   000056   6021         JZ      ??StubAPS_SetInterPanChannel_3
   \   000058                ; Setup parameters for call to function ZMacSetReq
   \   000058   7403         MOV     A,#0x3
   \   00005A   12....       LCALL   ?XSTACK_DISP101_8
   \   00005D   79E1         MOV     R1,#-0x1f
   \   00005F   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000062   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000065   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000068   90....       MOV     DPTR,#channelChangeInProgress
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
    529              return ( ZSuccess );
   \                     ??StubAPS_SetInterPanChannel_2:
   \   00006D   7900         MOV     R1,#0x0
   \                     ??StubAPS_SetInterPanChannel_1:
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   7F01         MOV     R7,#0x1
   \   000076   02....       LJMP    ?BANKED_LEAVE_XDATA
    530          
    531            // save the new channel for retry
    532            newChannel = channel;
   \                     ??StubAPS_SetInterPanChannel_3:
   \   000079   EE           MOV     A,R6
   \   00007A   90....       MOV     DPTR,#newChannel
   \   00007D   F0           MOVX    @DPTR,A
    533          
    534            // ask StubAPS task to retry it later
    535            osal_start_timerEx( StubAPS_TaskID, CHANNEL_CHANGE_EVT, CHANNEL_CHANGE_RETRY_TIMEOUT );
   \   00007E                ; Setup parameters for call to function osal_start_timerEx
   \   00007E   90....       MOV     DPTR,#__Constant_64
   \   000081   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000084   7A01         MOV     R2,#0x1
   \   000086   7B00         MOV     R3,#0x0
   \   000088   90....       MOV     DPTR,#StubAPS_TaskID
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F9           MOV     R1,A
   \   00008D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000090   7404         MOV     A,#0x4
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
    536          
    537            return ( ZApsNotAllowed );
   \   000095   79BA         MOV     R1,#-0x46
   \   000097   80D6         SJMP    ??StubAPS_SetInterPanChannel_1
    538          
    539          } /* StubAPS_SetInterPanChannel */
    540          
    541          /******************************************************************************
    542           * @fn          StubAPS_SetIntraPanChannel
    543           *
    544           * @brief       This function sets the device's channel back to the NIB channel.
    545           *
    546           * @param       none
    547           *
    548           * @return      ZStatus_t
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          ZStatus_t StubAPS_SetIntraPanChannel( void )
   \                     StubAPS_SetIntraPanChannel:
    551          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    552            uint8 currChannel;
    553            uint8 rxOnIdle;
    554          
    555            if ( channelChangeInProgress )
   \   000009   90....       MOV     DPTR,#channelChangeInProgress
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6004         JZ      ??StubAPS_SetIntraPanChannel_0
    556              return ( ZFailure );
   \   00000F   7901         MOV     R1,#0x1
   \   000011   8049         SJMP    ??StubAPS_SetIntraPanChannel_1
    557          
    558            ZMacGetReq( ZMacChannel, &currChannel );
   \                     ??StubAPS_SetIntraPanChannel_0:
   \   000013                ; Setup parameters for call to function ZMacGetReq
   \   000013   7401         MOV     A,#0x1
   \   000015   12....       LCALL   ?XSTACK_DISP101_8
   \   000018   79E1         MOV     R1,#-0x1f
   \   00001A   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    559            if ( currChannel == _NIB.nwkLogicalChannel )
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   90....       MOV     DPTR,#_NIB + 22
   \   000027   E0           MOVX    A,@DPTR
   \   000028   68           XRL     A,R0
   \   000029   7004         JNZ     ??StubAPS_SetIntraPanChannel_2
    560              return ( ZSuccess );
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   802D         SJMP    ??StubAPS_SetIntraPanChannel_1
    561          
    562            channelChangeInProgress = TRUE;
   \                     ??StubAPS_SetIntraPanChannel_2:
   \   00002F   90....       MOV     DPTR,#channelChangeInProgress
   \   000032   7401         MOV     A,#0x1
   \   000034   F0           MOVX    @DPTR,A
    563          
    564            // turn MAC receiver off
    565            rxOnIdle = false;
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   E4           CLR     A
   \   00003C   12....       LCALL   ??Subroutine11_0 & 0xFFFF
    566            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_18:
   \   00003F   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    567          
    568            // set the NIB channel
    569            ZMacSetReq( ZMacChannel, &(_NIB.nwkLogicalChannel) );
   \   000042                ; Setup parameters for call to function ZMacSetReq
   \   000042   7A..         MOV     R2,#(_NIB + 22) & 0xff
   \   000044   7B..         MOV     R3,#((_NIB + 22) >> 8) & 0xff
   \   000046   79E1         MOV     R1,#-0x1f
   \   000048   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    570          
    571            // turn MAC receiver back on
    572            rxOnIdle = true;
   \   00004B   12....       LCALL   ?Subroutine2 & 0xFFFF
    573            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_16:
   \   00004E   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    574          
    575            // set NWK task to run
    576            nwk_setStateIdle( FALSE );
   \   000051                ; Setup parameters for call to function nwk_setStateIdle
   \   000051   7900         MOV     R1,#0x0
   \   000053   12....       LCALL   `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    577          
    578            channelChangeInProgress = FALSE;
   \   000056   90....       MOV     DPTR,#channelChangeInProgress
   \   000059   E4           CLR     A
   \   00005A   F0           MOVX    @DPTR,A
    579          
    580            return ( ZSuccess );
   \   00005B   F9           MOV     R1,A
   \                     ??StubAPS_SetIntraPanChannel_1:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   80..         SJMP    ??Subroutine12_0
    581          
    582          } /* StubAPS_SetIntraPanChannel */
    583          
    584          /******************************************************************************
    585           * @fn          StubAPS_InterPan
    586           *
    587           * @brief       This function checks to see if a PAN is an Inter-PAN.
    588           *
    589           * @param       panId - PAN ID
    590           * @param       endPoint - endpoint
    591           *
    592           * @return      TRUE if PAN is Inter-PAN, FALSE otherwise
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          uint8 StubAPS_InterPan( uint16 panId, uint8 endPoint )
   \                     StubAPS_InterPan:
    595          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
    596            (void)panId; // Intentionally unreferenced parameter
    597          
    598            // No need to check the MAC/NIB Channels or Source/Destination PAN IDs
    599            // since it's possible to send Inter-PAN messages within the same network.
    600            if ( endPoint == STUBAPS_INTER_PAN_EP )
   \   000002   74FE         MOV     A,#-0x2
   \   000004   68           XRL     A,R0
   \   000005   7004         JNZ     ??StubAPS_InterPan_0
    601            {
    602              // Inter-PAN endpoint
    603              return ( TRUE );
   \   000007   7901         MOV     R1,#0x1
   \   000009   8002         SJMP    ??StubAPS_InterPan_1
    604            }
    605          
    606            return ( FALSE );
   \                     ??StubAPS_InterPan_0:
   \   00000B   7900         MOV     R1,#0x0
   \                     ??StubAPS_InterPan_1:
   \   00000D   02....       LJMP    ?BRET
    607          
    608          } /* StubAPS_InterPan */
    609          
    610          /******************************************************************************
    611           * @fn          StubAPS_RegisterApp
    612           *
    613           * @brief       This function registers the Application with the Stub APS layer.
    614           *
    615           *              NOTE: Since Stub APS messages don't include the application
    616           *                    endpoint, the application has to register its endpoint
    617           *                    with Stub APS.
    618           *
    619           * @param       epDesc - application's endpoint descriptor
    620           *
    621           * @return      none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void StubAPS_RegisterApp( endPointDesc_t *epDesc )
   \                     StubAPS_RegisterApp:
    624          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    625            appTaskID = *epDesc->task_id;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   90....       MOV     DPTR,#appTaskID
   \   00000F   F0           MOVX    @DPTR,A
    626            appEndPoint = epDesc->endPoint;
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   E0           MOVX    A,@DPTR
   \   000015   90....       MOV     DPTR,#appEndPoint
   \   000018   80..         SJMP    ?Subroutine0
    627          
    628          } /* StubAPS_RegisterApp */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F583         MOV     DPH,A
   \   000007   8882         MOV     DPL,R0
   \   000009   22           RET
    629          
    630          /******************************************************************************
    631           * @fn          StubAPS_ZMacCallback
    632           *
    633           * @brief       This function accepts an inter-PAN message from ZMac.
    634           *
    635           * @param       msgPtr - received message
    636           *
    637           * @return      TRUE if message is processed. FALSE otherwise.
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          uint8 StubAPS_ZMacCallback( uint8 *msgPtr )
   \                     StubAPS_ZMacCallback:
    640          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    641            uint16 nwk_fc;
    642            uint8  aps_fc;
    643            uint8  frameType;
    644            uint8 *buf = NULL;
    645            uint8  event = ((osal_event_hdr_t *)msgPtr)->event;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
    646          
    647            if ( event == MAC_MCPS_DATA_IND )
   \   00000A   740D         MOV     A,#0xd
   \   00000C   68           XRL     A,R0
   \   00000D   600A         JZ      ??CrossCallReturnLabel_6
    648            {
    649              buf = ((macMcpsDataInd_t *)msgPtr)->msdu.p;
    650            }
    651            else if ( event == MAC_MCPS_DATA_CNF )
   \   00000F   740C         MOV     A,#0xc
   \   000011   68           XRL     A,R0
   \   000012   7030         JNZ     ??StubAPS_ZMacCallback_0
    652            {
    653              buf = ((macMcpsDataCnf_t *)msgPtr)->pDataReq->msdu.p;
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   12....       LCALL   ?Subroutine7 & 0xFFFF
    654            }
   \                     ??CrossCallReturnLabel_6:
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
    655          
    656            if ( buf )
   \   000022   E582         MOV     A,DPL
   \   000024   4583         ORL     A,DPH
   \   000026   601C         JZ      ??StubAPS_ZMacCallback_0
    657            {
    658              // get the NWK frame control
    659              nwk_fc = BUILD_UINT16( buf[NWK_HDR_FRAME_CTRL_LSB], buf[NWK_HDR_FRAME_CTRL_MSB] );
    660          
    661              // frame type
    662              frameType = (uint8)((nwk_fc >> NWK_FC_FRAME_TYPE) & NWK_FC_FRAME_TYPE_MASK);
    663          
    664              // check if incoming frame is of the right type
    665              if ( frameType != STUB_NWK_FRAME_TYPE )
   \   000028   E0           MOVX    A,@DPTR
   \   000029   5403         ANL     A,#0x3
   \   00002B   6403         XRL     A,#0x3
   \   00002D   7015         JNZ     ??StubAPS_ZMacCallback_0
    666              {
    667                // message doesn't belong to Stub APS
    668                return ( FALSE );
    669              }
    670          
    671              // get the APS frame control
    672              aps_fc = buf[STUB_APS_HDR_FRAME_CTRL];
    673          
    674              // frame type
    675              frameType = aps_fc & APS_FRAME_TYPE_MASK;
    676          
    677              // check if incoming frame is of the right type
    678              if ( frameType != STUB_APS_FRAME )
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   5403         ANL     A,#0x3
   \   000034   6403         XRL     A,#0x3
   \   000036   700C         JNZ     ??StubAPS_ZMacCallback_0
    679              {
    680                // message doesn't belong to Stub APS
    681                return ( FALSE );
    682              }
    683          
    684              // message belongs to Stub APS
    685              osal_msg_send( StubAPS_TaskID, (uint8 *)msgPtr );
   \   000038                ; Setup parameters for call to function osal_msg_send
   \   000038   90....       MOV     DPTR,#StubAPS_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    686          
    687              return ( TRUE );
   \   000040   7901         MOV     R1,#0x1
   \   000042   8002         SJMP    ??StubAPS_ZMacCallback_1
    688            }
    689          
    690            // message doesn't belong to Stub APS
    691            return ( FALSE );
   \                     ??StubAPS_ZMacCallback_0:
   \   000044   7900         MOV     R1,#0x0
   \                     ??StubAPS_ZMacCallback_1:
   \   000046   80..         SJMP    ??Subroutine12_0
    692          
    693          } /* StubAPS_ZMacCallback */
    694          
    695          /******************************************************************************
    696           *
    697           *  Stub APS Inter-PAN interface INTERP and its callbacks.
    698           */
    699          
    700          /******************************************************************************
    701           * @fn          INTERP_DataReq
    702           *
    703           * @brief       This function requests the transfer of data from the next
    704           *              higher layer to a single peer entity.
    705           *
    706           * @param       req - APSDE_DataReq_t
    707           *
    708           * @return      ZStatus_t
    709           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    710          ZStatus_t INTERP_DataReq( APSDE_DataReq_t *req )
   \                     INTERP_DataReq:
    711          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV     A,#-0x21
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
    712            uint8 apsFrmCtrl;
    713            uint16 groupID = 0;
   \   00000E   75..00       MOV     ?V2,#0x0
   \   000011   75..00       MOV     ?V3,#0x0
    714            uint8 *buf;
    715            uint8 hdrLen;
    716            ZMacDataReq_t dataReq;
    717            ZStatus_t status;
    718          
    719            if ( channelChangeInProgress || !StubAPS_InterPan( req->dstPanId, req->dstEP ) )
   \   000014   90....       MOV     DPTR,#channelChangeInProgress
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7013         JNZ     ??INTERP_DataReq_0
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   64FE         XRL     A,#0xfe
   \   00002B   6005         JZ      ??INTERP_DataReq_1
    720              return ( ZFailure );
   \                     ??INTERP_DataReq_0:
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   02....       LJMP    ??INTERP_DataReq_2 & 0xFFFF
    721          
    722            osal_memset( &dataReq, 0, sizeof( ZMacDataReq_t ) );
   \                     ??INTERP_DataReq_1:
   \   000032                ; Setup parameters for call to function osal_memset
   \   000032   7C21         MOV     R4,#0x21
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7900         MOV     R1,#0x0
   \   000038   AA..         MOV     R2,?XSP + 0
   \   00003A   AB..         MOV     R3,?XSP + 1
   \   00003C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    723          
    724            // Build Stub APS header
    725            status = StubAPS_BuildFrameControl( &apsFrmCtrl, &(dataReq.DstAddr), &groupID, req );
   \   00003F   E5..         MOV     A,?V4
   \   000041   2415         ADD     A,#0x15
   \   000043   F582         MOV     DPL,A
   \   000045   E4           CLR     A
   \   000046   35..         ADDC    A,?V5
   \   000048   F583         MOV     DPH,A
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   540D         ANL     A,#0xd
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??INTERP_DataReq_3 & 0xFFFF
   \   000052   E5..         MOV     A,?V4
   \   000054   2408         ADD     A,#0x8
   \   000056   F8           MOV     R0,A
   \   000057   E4           CLR     A
   \   000058   35..         ADDC    A,?V5
   \   00005A   F9           MOV     R1,A
   \   00005B   8882         MOV     DPL,R0
   \   00005D   8983         MOV     DPH,R1
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??INTERP_DataReq_3 & 0xFFFF
   \   000065   75..03       MOV     ?V1,#0x3
   \   000068   C0E0         PUSH    A
   \   00006A   7408         MOV     A,#0x8
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   D0E0         POP     A
   \   000071   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F8           MOV     R0,A
   \   000076   740F         MOV     A,#0xf
   \   000078   68           XRL     A,R0
   \   000079   700D         JNZ     ??INTERP_DataReq_4
   \   00007B   75..0B       MOV     ?V1,#0xb
   \   00007E   7408         MOV     A,#0x8
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   7402         MOV     A,#0x2
   \   000085   F0           MOVX    @DPTR,A
   \   000086   8005         SJMP    ??INTERP_DataReq_5
   \                     ??INTERP_DataReq_4:
   \   000088   7402         MOV     A,#0x2
   \   00008A   68           XRL     A,R0
   \   00008B   7016         JNZ     ??INTERP_DataReq_6
   \                     ??INTERP_DataReq_5:
   \   00008D   85..82       MOV     DPL,?V4
   \   000090   85..83       MOV     DPH,?V5
   \   000093   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000096   85..82       MOV     DPL,?XSP + 0
   \   000099   85..83       MOV     DPH,?XSP + 1
   \   00009C   E8           MOV     A,R0
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   E9           MOV     A,R1
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   803A         SJMP    ??INTERP_DataReq_7
   \                     ??INTERP_DataReq_6:
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   68           XRL     A,R0
   \   0000A6   700D         JNZ     ??INTERP_DataReq_8
   \   0000A8                ; Setup parameters for call to function sAddrExtCpy
   \   0000A8   AC..         MOV     R4,?V4
   \   0000AA   AD..         MOV     R5,?V5
   \   0000AC   AA..         MOV     R2,?XSP + 0
   \   0000AE   AB..         MOV     R3,?XSP + 1
   \   0000B0   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000B3   8028         SJMP    ??INTERP_DataReq_7
   \                     ??INTERP_DataReq_8:
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   68           XRL     A,R0
   \   0000B8   7023         JNZ     ??INTERP_DataReq_7
   \   0000BA   75..0F       MOV     ?V1,#0xf
   \   0000BD   7408         MOV     A,#0x8
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   7402         MOV     A,#0x2
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   85..82       MOV     DPL,?XSP + 0
   \   0000C8   85..83       MOV     DPH,?XSP + 1
   \   0000CB   74FF         MOV     A,#-0x1
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   85..82       MOV     DPL,?V4
   \   0000D3   85..83       MOV     DPH,?V5
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F5..         MOV     ?V2,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F5..         MOV     ?V3,A
    726            if ( status != ZSuccess )
    727              return ( status );
    728          
    729            // set default Stub APS header length
    730            hdrLen = APS_FRAME_CTRL_FIELD_LEN;
   \                     ??INTERP_DataReq_7:
   \   0000DD   7801         MOV     R0,#0x1
    731          
    732            // add group ID length
    733            if ( ( apsFrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_GROUP )
   \   0000DF   740C         MOV     A,#0xc
   \   0000E1   55..         ANL     A,?V1
   \   0000E3   F5..         MOV     ?V0,A
   \   0000E5   740C         MOV     A,#0xc
   \   0000E7   65..         XRL     A,?V0
   \   0000E9   7002         JNZ     ??INTERP_DataReq_9
    734              hdrLen += APS_GROUP_ID_FIELD_LEN;
   \   0000EB   7803         MOV     R0,#0x3
    735          
    736            // add cluster ID length
    737            hdrLen += APS_CLUSTERID_FIELD_LEN;
    738          
    739            // add profile ID length
    740            hdrLen += APS_PROFILEID_FIELD_LEN;
    741          
    742            // add default Stub NWK header length
    743            hdrLen += STUB_NWK_HDR_LEN;
    744          
    745            // calculate MSDU length
    746            dataReq.msduLength = hdrLen + req->asduLen;
   \                     ??INTERP_DataReq_9:
   \   0000ED   E5..         MOV     A,?V4
   \   0000EF   2411         ADD     A,#0x11
   \   0000F1   F582         MOV     DPL,A
   \   0000F3   E4           CLR     A
   \   0000F4   35..         ADDC    A,?V5
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   28           ADD     A,R0
   \   0000FA   2406         ADD     A,#0x6
   \   0000FC   FA           MOV     R2,A
   \   0000FD   741E         MOV     A,#0x1e
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   EA           MOV     A,R2
   \   000103   F0           MOVX    @DPTR,A
    747          
    748            // allocate buffer
    749            buf = osal_mem_alloc( dataReq.msduLength );
   \   000104                ; Setup parameters for call to function osal_mem_alloc
   \   000104   7B00         MOV     R3,#0x0
   \   000106   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000109   8A..         MOV     ?V6,R2
   \   00010B   8B..         MOV     ?V7,R3
   \   00010D   AE..         MOV     R6,?V6
   \   00010F   AF..         MOV     R7,?V7
    750            if ( buf != NULL )
   \   000111   EE           MOV     A,R6
   \   000112   4F           ORL     A,R7
   \   000113   7003         JNZ     $+5
   \   000115   02....       LJMP    ??INTERP_DataReq_10 & 0xFFFF
    751            {
    752              dataReq.msdu = buf;
   \   000118   741F         MOV     A,#0x1f
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   EE           MOV     A,R6
   \   00011E   F0           MOVX    @DPTR,A
   \   00011F   A3           INC     DPTR
   \   000120   EF           MOV     A,R7
   \   000121   F0           MOVX    @DPTR,A
    753          
    754              // Add Stub APS header and data
    755              StubAPS_BuildMsg( &buf[STUB_APS_HDR_FRAME_CTRL], apsFrmCtrl, groupID, req );
   \   000122                ; Setup parameters for call to function StubAPS_BuildMsg
   \   000122   78..         MOV     R0,#?V4
   \   000124   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000127   AC..         MOV     R4,?V2
   \   000129   AD..         MOV     R5,?V3
   \   00012B   A9..         MOV     R1,?V1
   \   00012D   EE           MOV     A,R6
   \   00012E   2402         ADD     A,#0x2
   \   000130   FA           MOV     R2,A
   \   000131   E4           CLR     A
   \   000132   3F           ADDC    A,R7
   \   000133   FB           MOV     R3,A
   \   000134   12....       LCALL   `??StubAPS_BuildMsg::?relay`; Banked call to: StubAPS_BuildMsg
   \   000137   7402         MOV     A,#0x2
   \   000139   12....       LCALL   ?DEALLOC_XSTACK8
    756          
    757              // Add Stub NWK header
    758              StubNWK_BuildMsg( buf );
   \   00013C                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00013C   12....       LCALL   `??NLME_GetProtocolVersion::?relay`; Banked call to: NLME_GetProtocolVersion
   \   00013F   E9           MOV     A,R1
   \   000140   F5..         MOV     ?V2,A
   \   000142   75..00       MOV     ?V3,#0x0
   \   000145   7402         MOV     A,#0x2
   \   000147   78..         MOV     R0,#?V2
   \   000149   12....       LCALL   ?S_SHL
   \   00014C   E5..         MOV     A,?V2
   \   00014E   4403         ORL     A,#0x3
   \   000150   8E82         MOV     DPL,R6
   \   000152   8F83         MOV     DPH,R7
   \   000154   F0           MOVX    @DPTR,A
   \   000155   E5..         MOV     A,?V3
   \   000157   A3           INC     DPTR
   \   000158   F0           MOVX    @DPTR,A
    759          
    760              // Set ZMac data request
    761              dataReq.DstPANId = req->dstPanId;
   \   000159   E5..         MOV     A,?V4
   \   00015B   240B         ADD     A,#0xb
   \   00015D   F582         MOV     DPL,A
   \   00015F   E4           CLR     A
   \   000160   35..         ADDC    A,?V5
   \   000162   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000165   7409         MOV     A,#0x9
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   E8           MOV     A,R0
   \   00016B   F0           MOVX    @DPTR,A
   \   00016C   A3           INC     DPTR
   \   00016D   E9           MOV     A,R1
   \   00016E   F0           MOVX    @DPTR,A
    762              dataReq.SrcAddrMode = Addr64Bit;
   \   00016F   740B         MOV     A,#0xb
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   7403         MOV     A,#0x3
   \   000176   F0           MOVX    @DPTR,A
    763              dataReq.Handle = req->transID;
   \   000177   E5..         MOV     A,?V4
   \   000179   2417         ADD     A,#0x17
   \   00017B   F582         MOV     DPL,A
   \   00017D   E4           CLR     A
   \   00017E   35..         ADDC    A,?V5
   \   000180   F583         MOV     DPH,A
   \   000182   E0           MOVX    A,@DPTR
   \   000183   C0E0         PUSH    A
   \   000185   740C         MOV     A,#0xc
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   D0E0         POP     A
   \   00018C   F0           MOVX    @DPTR,A
    764          
    765              if ( ( apsFrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_UNICAST )
   \   00018D   E5..         MOV     A,?V0
   \   00018F   7011         JNZ     ??INTERP_DataReq_11
    766                dataReq.TxOptions = NWK_TXOPTIONS_ACK;
   \   000191   740D         MOV     A,#0xd
   \   000193   12....       LCALL   ?XSTACK_DISP0_8
   \   000196   7401         MOV     A,#0x1
   \   000198   F0           MOVX    @DPTR,A
   \   000199   A3           INC     DPTR
   \   00019A   E4           CLR     A
   \   00019B   800D         SJMP    ??INTERP_DataReq_12
   \                     ??INTERP_DataReq_3:
   \   00019D   75..B6       MOV     ?V0,#-0x4a
   \   0001A0   801F         SJMP    ??INTERP_DataReq_13
    767              else
    768                dataReq.TxOptions = 0;
   \                     ??INTERP_DataReq_11:
   \   0001A2   740D         MOV     A,#0xd
   \   0001A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A7   E4           CLR     A
   \   0001A8   F0           MOVX    @DPTR,A
   \   0001A9   A3           INC     DPTR
   \                     ??INTERP_DataReq_12:
   \   0001AA   F0           MOVX    @DPTR,A
    769          
    770              // send the frame
    771              status = ZMacDataReq( &dataReq );
   \   0001AB                ; Setup parameters for call to function ZMacDataReq
   \   0001AB   AA..         MOV     R2,?XSP + 0
   \   0001AD   AB..         MOV     R3,?XSP + 1
   \   0001AF   12....       LCALL   `??ZMacDataReq::?relay`; Banked call to: ZMacDataReq
   \   0001B2   E9           MOV     A,R1
   \   0001B3   F5..         MOV     ?V0,A
    772          
    773              // free the frame
    774              osal_mem_free( buf );
   \   0001B5                ; Setup parameters for call to function osal_mem_free
   \   0001B5   EE           MOV     A,R6
   \   0001B6   FA           MOV     R2,A
   \   0001B7   EF           MOV     A,R7
   \   0001B8   FB           MOV     R3,A
   \   0001B9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001BC   8003         SJMP    ??INTERP_DataReq_13
    775            }
    776            else
    777            {
    778              // flag a memory error
    779              status = ZMemError;
   \                     ??INTERP_DataReq_10:
   \   0001BE   75..10       MOV     ?V0,#0x10
    780            }
    781          
    782            return ( status );
   \                     ??INTERP_DataReq_13:
   \   0001C1   A9..         MOV     R1,?V0
   \                     ??INTERP_DataReq_2:
   \   0001C3   7421         MOV     A,#0x21
   \   0001C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C8   7F08         MOV     R7,#0x8
   \   0001CA   02....       LJMP    ?BANKED_LEAVE_XDATA
    783          
    784          } /* INTERP_DataReq */
    785          
    786          /******************************************************************************
    787           * @fn          INTERP_DataReqMTU
    788           *
    789           * @brief       This function requests the MTU (Max Transport Unit) of the
    790           *              Inter-PAN Data Service.
    791           *
    792           * @param       none
    793           *
    794           * @return      uint8 - MTU
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          uint8 INTERP_DataReqMTU( void )
   \                     INTERP_DataReqMTU:
    797          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    798            uint8 mtu;
    799            uint8 hdrLen;
    800          
    801            // Use maximum header size for Stub APS header
    802            hdrLen = APS_FRAME_CTRL_FIELD_LEN +
    803                     APS_GROUP_ID_FIELD_LEN   +
    804                     APS_CLUSTERID_FIELD_LEN  +
    805                     APS_PROFILEID_FIELD_LEN;
    806          
    807            mtu = MAC_A_MAX_FRAME_SIZE - STUB_NWK_HDR_LEN - hdrLen;
    808          
    809            return ( mtu );
   \   000000   795D         MOV     R1,#0x5d
   \   000002   02....       LJMP    ?BRET
    810          
    811          } /* INTERP_DataReqMTU */
    812          
    813          /****************************************************************************
    814           * @fn          INTERP_DataConfirm
    815           *
    816           * @brief       This function processes the data confirm from the MAC layer.
    817           *
    818           * @param       dataCnf - data confirm primitive
    819           *
    820           * @return      none
    821           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    822          void INTERP_DataConfirm( ZMacDataCnf_t *dataCnf )
   \                     INTERP_DataConfirm:
    823          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   EB           MOV     A,R3
   \   000007   F9           MOV     R1,A
    824            afDataConfirm( appEndPoint, dataCnf->msduHandle, dataCnf->hdr.Status );
   \   000008                ; Setup parameters for call to function afDataConfirm
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FB           MOV     R3,A
   \   00000F   8882         MOV     DPL,R0
   \   000011   8983         MOV     DPH,R1
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   90....       MOV     DPTR,#appEndPoint
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    825          
    826          } /* INTERP_DataConfirm */
   \   00001F   02....       LJMP    ??Subroutine12_0 & 0xFFFF
    827          
    828          /****************************************************************************
    829           * @fn          INTERP_DataIndication
    830           *
    831           * @brief       This function indicates the transfer of a data SPDU (MSDU)
    832           *              from the MAC layer to the local application layer entity.
    833           *
    834           * @param       dataInd - data indicate primitive
    835           *
    836           * @return      none
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void INTERP_DataIndication( macMcpsDataInd_t *dataInd )
   \                     INTERP_DataIndication:
    839          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 68
   \   000005   74BC         MOV     A,#-0x44
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    840            NLDE_FrameFormat_t snff;
    841            aps_FrameFormat_t saff;
    842            zAddrType_t srcAddr;
    843            NLDE_Signal_t sig;
    844          
    845            // parse the Stub NWK header
    846            StubNWK_ParseMsg( dataInd->msdu.p, dataInd->msdu.len, &snff );
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V2,A
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000022   88..         MOV     ?V0,R0
   \   000024   89..         MOV     ?V1,R1
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C21         MOV     R4,#0x21
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   7403         MOV     A,#0x3
   \   00002E   12....       LCALL   ?XSTACK_DISP101_8
   \   000031   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E5..         MOV     A,?V2
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C                ; Setup parameters for call to function NLDE_ParseFrameControl
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP102_8
   \   000041   85..82       MOV     DPL,?V0
   \   000044   85..83       MOV     DPH,?V1
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FA           MOV     R2,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   E4           CLR     A
   \   00004D   C8           XCH     A,R0
   \   00004E   F9           MOV     R1,A
   \   00004F   EA           MOV     A,R2
   \   000050   28           ADD     A,R0
   \   000051   E4           CLR     A
   \   000052   39           ADDC    A,R1
   \   000053   FB           MOV     R3,A
   \   000054   12....       LCALL   `??NLDE_ParseFrameControl::?relay`; Banked call to: NLDE_ParseFrameControl
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7402         MOV     A,#0x2
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   E5..         MOV     A,?V0
   \   000061   2402         ADD     A,#0x2
   \   000063   F8           MOV     R0,A
   \   000064   E4           CLR     A
   \   000065   35..         ADDC    A,?V1
   \   000067   F9           MOV     R1,A
   \   000068   7420         MOV     A,#0x20
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   24FE         ADD     A,#-0x2
   \   00007A   C0E0         PUSH    A
   \   00007C   741A         MOV     A,#0x1a
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   D0E0         POP     A
   \   000083   F0           MOVX    @DPTR,A
    847          
    848            // Fill in MAC destination address
    849            snff.macDstAddr = dataInd->mac.dstAddr.addr.shortAddr;
   \   000084   EE           MOV     A,R6
   \   000085   241C         ADD     A,#0x1c
   \   000087   F582         MOV     DPL,A
   \   000089   E4           CLR     A
   \   00008A   3F           ADDC    A,R7
   \   00008B   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00008E   7410         MOV     A,#0x10
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   E8           MOV     A,R0
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   E9           MOV     A,R1
   \   000097   F0           MOVX    @DPTR,A
    850          
    851            // fill in MAC source address (Stub NWK frame doesn't have address fields)
    852            osal_copyAddress( &srcAddr, (zAddrType_t *)&(dataInd->mac.srcAddr) );
   \   000098                ; Setup parameters for call to function sAddrCpy
   \   000098   EE           MOV     A,R6
   \   000099   2413         ADD     A,#0x13
   \   00009B   FC           MOV     R4,A
   \   00009C   E4           CLR     A
   \   00009D   3F           ADDC    A,R7
   \   00009E   FD           MOV     R5,A
   \   00009F   743B         MOV     A,#0x3b
   \   0000A1   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A4   12....       LCALL   `??sAddrCpy::?relay` ; Banked call to: sAddrCpy
    853          
    854            // check if incoming frame is of the right type
    855            if ( snff.frameType != STUB_NWK_FRAME_TYPE )
   \   0000A7   7405         MOV     A,#0x5
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   6403         XRL     A,#0x3
   \   0000AF   6003         JZ      $+5
   \   0000B1   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    856              return;
    857          
    858            // check if incoming frame is of the right version
    859            if ( snff.protocolVersion != NLME_GetProtocolVersion() )
   \   0000B4                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   0000B4   12....       LCALL   `??NLME_GetProtocolVersion::?relay`; Banked call to: NLME_GetProtocolVersion
   \   0000B7   E9           MOV     A,R1
   \   0000B8   F8           MOV     R0,A
   \   0000B9   7406         MOV     A,#0x6
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   68           XRL     A,R0
   \   0000C0   6003         JZ      $+5
   \   0000C2   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    860              return;
    861          
    862            // check if the remaining sun-fields are zero
    863            if ( ( snff.discoverRoute != 0 ) || ( snff.multicast != 0 )   ||
    864                 ( snff.secure != 0 )        || ( snff.srcRouteSet != 0 ) ||
    865                 ( snff.dstExtAddrSet != 0 ) || ( snff.srcExtAddrSet != 0 ) )
   \   0000C5   7407         MOV     A,#0x7
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   7028         JNZ     ??INTERP_DataIndication_1
   \   0000CD   7408         MOV     A,#0x8
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   7020         JNZ     ??INTERP_DataIndication_1
   \   0000D5   7409         MOV     A,#0x9
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   7018         JNZ     ??INTERP_DataIndication_1
   \   0000DD   741B         MOV     A,#0x1b
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   7010         JNZ     ??INTERP_DataIndication_1
   \   0000E5   740A         MOV     A,#0xa
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   7008         JNZ     ??INTERP_DataIndication_1
   \   0000ED   740B         MOV     A,#0xb
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   6003         JZ      ??INTERP_DataIndication_2
    866            {
    867              return;
   \                     ??INTERP_DataIndication_1:
   \   0000F5   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    868            }
    869          
    870            // parse the Stub APS header
    871            StubAPS_ParseMsg( &snff, &saff );
   \                     ??INTERP_DataIndication_2:
   \   0000F8                ; Setup parameters for call to function StubAPS_ParseMsg
   \   0000F8   7424         MOV     A,#0x24
   \   0000FA   12....       LCALL   ?XSTACK_DISP102_8
   \   0000FD   7403         MOV     A,#0x3
   \   0000FF   12....       LCALL   ?XSTACK_DISP101_8
   \   000102   12....       LCALL   `??StubAPS_ParseMsg::?relay`; Banked call to: StubAPS_ParseMsg
    872          
    873            // check if incoming frame is of the right type
    874            if ( ( saff.FrmCtrl & APS_FRAME_TYPE_MASK ) != STUB_APS_FRAME )
   \   000105   7424         MOV     A,#0x24
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   5403         ANL     A,#0x3
   \   00010D   6403         XRL     A,#0x3
   \   00010F   6003         JZ      $+5
   \   000111   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    875              return;
    876          
    877            // check if delivery mode is of the right type
    878            if ( ( saff.FrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_INDIRECT )
   \   000114   E0           MOVX    A,@DPTR
   \   000115   540C         ANL     A,#0xc
   \   000117   6404         XRL     A,#0x4
   \   000119   7003         JNZ     $+5
   \   00011B   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    879              return;
    880          
    881            // check if incoming frame is unsecured
    882            if ( saff.FrmCtrl & APS_FC_SECURITY )
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   A2E5         MOV     C,0xE0 /* A   */.5
   \   000121   5003         JNC     $+5
   \   000123   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    883              return;
    884          
    885            // check if there's no extended header
    886            if ( saff.FrmCtrl & APS_FC_EXTENDED )
   \   000126   A2E7         MOV     C,0xE0 /* A   */.7
   \   000128   5003         JNC     $+5
   \   00012A   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    887                return;
    888          
    889            // Set the endpoints
    890            saff.DstEndPoint = appEndPoint;
   \   00012D   90....       MOV     DPTR,#appEndPoint
   \   000130   E0           MOVX    A,@DPTR
   \   000131   C0E0         PUSH    A
   \   000133   7426         MOV     A,#0x26
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   D0E0         POP     A
   \   00013A   F0           MOVX    @DPTR,A
    891            saff.SrcEndPoint = STUBAPS_INTER_PAN_EP;
   \   00013B   7427         MOV     A,#0x27
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   74FE         MOV     A,#-0x2
   \   000142   F0           MOVX    @DPTR,A
    892          
    893            // Set the signal strength information
    894            sig.LinkQuality = dataInd->mac.mpduLinkQuality;
   \   000143   EE           MOV     A,R6
   \   000144   242F         ADD     A,#0x2f
   \   000146   F582         MOV     DPL,A
   \   000148   E4           CLR     A
   \   000149   3F           ADDC    A,R7
   \   00014A   F583         MOV     DPH,A
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   85..82       MOV     DPL,?XSP + 0
   \   000150   85..83       MOV     DPH,?XSP + 1
   \   000153   F0           MOVX    @DPTR,A
    895            sig.correlation = dataInd->mac.correlation;
   \   000154   EE           MOV     A,R6
   \   000155   2430         ADD     A,#0x30
   \   000157   F582         MOV     DPL,A
   \   000159   E4           CLR     A
   \   00015A   3F           ADDC    A,R7
   \   00015B   F583         MOV     DPH,A
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   C0E0         PUSH    A
   \   000160   7401         MOV     A,#0x1
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   D0E0         POP     A
   \   000167   F0           MOVX    @DPTR,A
    896            sig.rssi = dataInd->mac.rssi;
   \   000168   EE           MOV     A,R6
   \   000169   2431         ADD     A,#0x31
   \   00016B   F582         MOV     DPL,A
   \   00016D   E4           CLR     A
   \   00016E   3F           ADDC    A,R7
   \   00016F   F583         MOV     DPH,A
   \   000171   E0           MOVX    A,@DPTR
   \   000172   C0E0         PUSH    A
   \   000174   7402         MOV     A,#0x2
   \   000176   12....       LCALL   ?XSTACK_DISP0_8
   \   000179   D0E0         POP     A
   \   00017B   F0           MOVX    @DPTR,A
    897          
    898            APSDE_DataIndication( &saff, &srcAddr, dataInd->mac.srcPanId,
    899                                  &sig, snff.broadcastId, FALSE, dataInd->mac.timestamp, 0 );
   \   00017C                ; Setup parameters for call to function APSDE_DataIndication
   \   00017C   75..00       MOV     ?V0,#0x0
   \   00017F   78..         MOV     R0,#?V0
   \   000181   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000184   EE           MOV     A,R6
   \   000185   2425         ADD     A,#0x25
   \   000187   F582         MOV     DPL,A
   \   000189   E4           CLR     A
   \   00018A   3F           ADDC    A,R7
   \   00018B   F583         MOV     DPH,A
   \   00018D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000190   78..         MOV     R0,#?V0
   \   000192   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000195   7406         MOV     A,#0x6
   \   000197   12....       LCALL   ?XSTACK_DISP100_8
   \   00019A   88..         MOV     ?V0,R0
   \   00019C   89..         MOV     ?V1,R1
   \   00019E   78..         MOV     R0,#?V0
   \   0001A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A3   EE           MOV     A,R6
   \   0001A4   242B         ADD     A,#0x2b
   \   0001A6   F582         MOV     DPL,A
   \   0001A8   E4           CLR     A
   \   0001A9   3F           ADDC    A,R7
   \   0001AA   F583         MOV     DPH,A
   \   0001AC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001AF   741F         MOV     A,#0x1f
   \   0001B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   F9           MOV     R1,A
   \   0001B6   7445         MOV     A,#0x45
   \   0001B8   12....       LCALL   ?XSTACK_DISP102_8
   \   0001BB   742E         MOV     A,#0x2e
   \   0001BD   12....       LCALL   ?XSTACK_DISP101_8
   \   0001C0   12....       LCALL   `??APSDE_DataIndication::?relay`; Banked call to: APSDE_DataIndication
   \   0001C3   740A         MOV     A,#0xa
   \   0001C5   12....       LCALL   ?DEALLOC_XSTACK8
    900          
    901          } /* INTERP_DataIndication */
   \                     ??INTERP_DataIndication_0:
   \   0001C8   7444         MOV     A,#0x44
   \   0001CA   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for StubAPS_TaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for appTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_ParseMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ParseMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_BuildMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_BuildMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_SetInterPanChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetInterPanChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_SetIntraPanChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetIntraPanChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_InterPan::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_InterPan

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_RegisterApp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_RegisterApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_ZMacCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ZMacCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataIndication
    902          
    903          
    904          /*********************************************************************
    905          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   INTERP_DataConfirm
        2      0   -> afDataConfirm
      1    103   INTERP_DataIndication
        0     89   -> APSDE_DataIndication
        0     79   -> NLDE_ParseFrameControl
        0     79   -> NLME_GetProtocolVersion
        0     79   -> StubAPS_ParseMsg
        0     79   -> osal_memset
        0     79   -> sAddrCpy
      1     51   INTERP_DataReq
        0     49   -> NLME_GetProtocolVersion
        0     51   -> StubAPS_BuildMsg
        0     49   -> ZMacDataReq
        0     49   -> osal_mem_alloc
        0     49   -> osal_mem_free
        0     49   -> osal_memset
        0     49   -> sAddrExtCpy
      0      0   INTERP_DataReqMTU
      1     65   StubAPS_BuildMsg
        0     14   -> osal_memcpy
      2      0   StubAPS_Init
      0      0   StubAPS_InterPan
      1     93   StubAPS_ParseMsg
        0     14   -> osal_memset
      1     14   StubAPS_ProcessEvent
        0     14   -> INTERP_DataIndication
        0     14   -> ZMacSetReq
        0     14   -> ZMacStateIdle
        0     14   -> afDataConfirm
        0     14   -> nwkDB_CountTypes
        0     14   -> nwk_setStateIdle
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_msg_send
      2      0   StubAPS_RegisterApp
      1     17   StubAPS_SetInterPanChannel
        0     13   -> ZMacGetReq
        0     13   -> ZMacSetReq
        0     13   -> ZMacStateIdle
        0     13   -> nwkDB_CountTypes
        0     13   -> nwk_setStateIdle
        0     17   -> osal_start_timerEx
      2      2   StubAPS_SetIntraPanChannel
        2      2   -> ZMacGetReq
        2      2   -> ZMacSetReq
        2      2   -> nwk_setStateIdle
      2      0   StubAPS_ZMacCallback
        2      0   -> osal_msg_send


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for StubAPS_TaskID>
       1  ?<Initializer for appTaskID>
      14  ??Subroutine10_0
       8  ??Subroutine11_0
       7  ??Subroutine12_0
       6  ??Subroutine13_0
       1  ?Subroutine0
       8  ?Subroutine1
       8  ?Subroutine2
       2  ?Subroutine3
      11  ?Subroutine4
      18  ?Subroutine5
       2  ?Subroutine6
      10  ?Subroutine7
      14  ?Subroutine8
       6  ?Subroutine9
      34  INTERP_DataConfirm
       6  INTERP_DataConfirm::?relay
     461  INTERP_DataIndication
       6  INTERP_DataIndication::?relay
     461  INTERP_DataReq
       6  INTERP_DataReq::?relay
       5  INTERP_DataReqMTU
       6  INTERP_DataReqMTU::?relay
     120  StubAPS_BuildMsg
       6  StubAPS_BuildMsg::?relay
      21  StubAPS_Init
       6  StubAPS_Init::?relay
      16  StubAPS_InterPan
       6  StubAPS_InterPan::?relay
     265  StubAPS_ParseMsg
       6  StubAPS_ParseMsg::?relay
     233  StubAPS_ProcessEvent
       6  StubAPS_ProcessEvent::?relay
      26  StubAPS_RegisterApp
       6  StubAPS_RegisterApp::?relay
     153  StubAPS_SetInterPanChannel
       6  StubAPS_SetInterPanChannel::?relay
      99  StubAPS_SetIntraPanChannel
       6  StubAPS_SetIntraPanChannel::?relay
       1  StubAPS_TaskID
      72  StubAPS_ZMacCallback
       6  StubAPS_ZMacCallback::?relay
       4  __Constant_64
       1  appEndPoint
       1  appTaskID
       1  channelChangeInProgress
       1  newChannel

 
 2 081 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
     3 bytes in segment XDATA_Z
 
 2 161 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     5 bytes of XDATA memory

Errors: none
Warnings: none
